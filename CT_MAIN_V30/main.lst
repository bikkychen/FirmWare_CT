Interrupt Vectors
    00000 940C 004E JMP	__start|__text_start
    00002 940C 0071 JMP	_int0_isr
    00020 940C 04C6 JMP	_timer0_ovf_isr
    00024 940C 04A5 JMP	_uart0_rx_isr
    0003C 940C 0291 JMP	_uart1_rx_isr

Program Code (text area)
__start|__text_start:
    0004E EFCF      LDI	R28,0xFF
    0004F E1D0      LDI	R29,0x10
    00050 BFCD      OUT	0x3D,R28
    00051 BFDE      OUT	0x3E,R29
    00052 50C0      SUBI	R28,0
    00053 40D1      SBCI	R29,1
    00054 EA0A      LDI	R16,0xAA
    00055 8308      ST	Y,R16
    00056 2400      CLR	R0
    00057 E0E0      LDI	R30,0
    00058 E0F1      LDI	R31,1
    00059 E013      LDI	R17,3
    0005A 34EC      CPI	R30,0x4C
    0005B 07F1      CPC	R31,R17
    0005C F011      BEQ	0x005F
    0005D 9201      ST	Z+,R0
    0005E CFFB      RJMP	0x005A
    0005F 8300      ST	Z,R16
    00060 E9EC      LDI	R30,0x9C
    00061 E0F0      LDI	R31,0
    00062 E0A0      LDI	R26,0
    00063 E0B1      LDI	R27,1
    00064 E010      LDI	R17,0
    00065 E000      LDI	R16,0
    00066 BF0B      OUT	0x3B,R16
    00067 39EC      CPI	R30,0x9C
    00068 07F1      CPC	R31,R17
    00069 F021      BEQ	0x006E
    0006A 95C8      LPM
    0006B 9631      ADIW	R30,1
    0006C 920D      ST	X+,R0
    0006D CFF9      RJMP	0x0067
    0006E 940E 065A CALL	_main
_exit:
    00070 CFFF      RJMP	_exit
_int0_isr:
    00071 922A      ST	-Y,R2
    00072 923A      ST	-Y,R3
    00073 938A      ST	-Y,R24
    00074 939A      ST	-Y,R25
    00075 93AA      ST	-Y,R26
    00076 93EA      ST	-Y,R30
    00077 93FA      ST	-Y,R31
    00078 B62F      IN	R2,0x3F
    00079 922A      ST	-Y,R2
FILE: D:\chen\Core\FirmWare_CT\CT_MAIN_V30\main.c
(0001)  /**************************************************
(0002) CTZK
(0003) //20161110 增加了全部采样的CRC16校验
(0004) //20161113 改进了流量数据中时间和相位由无符号短整型转为浮点数时的转换方法，以防上位机软件出现相位超大值
(0005) //20161224 将电机断流判断值由26mA改为13mA，因为目前调节电机工作时空载电流值仅为23~28mA，升级版本为V4.0
(0006) //20161229 修改收张电机的本电机同向和反向判断，修改调节电机的电机方向控制（与原来相反）
(0007) //20170308 流量采样增加校验帧，升级版本为V4.2
(0008) //20170607 电机断路电流由原来的13mA改为26mA 升级版本为V4.3
(0009) //20170608 改动电机过流档位并把最大档位提升到250mA，升级版本为V4.4
(0010) //20170609 加入调节电机微调功能，升级版本为V4.5
(0011) //20170613 增加电机断路电流上位机可设定(共6档)，增加调节电机微调时间由电机命令中自带参数，改上传电流由数字量为工程量（单位mA），堵转电流上传改为档位，版本升为V4.6
(0012) //20170614 上传的电缆电压也改为工程量，全部采样增加电缆电压
(0013) //20170622  为适应新高压电机驱动的电路板而改进一些功能，版本回退到V3.0
(0014) //20170701 为适应新电路板CT_MAIN_V30
(0015) //20170703 增加独立压力短节单芯内部总线通讯功能
(0016) //20170703 版本从6.0起步，为了与前一阶段的硬件相区别
(0017) //20170705 压力短节功能调通 V6.1
(0018) //20170711  版本回退到V1.0，方便以后的功能扩展
(0019) **************************************************/
(0020) #include <iom128v.h>								   	
(0021) #include <macros.h>
(0022) #include <stdio.h>
(0023) 
(0024)  
(0025) #define Debug 0
(0026) #define  BB     0x10       //固件版本号
(0027) 
(0028) 
(0029) #define M1_L     {PORTG&=0xf7;}
(0030) #define M1_H     {PORTG|=0x08;}
(0031) #define M2_L     {PORTG&=0xef;}
(0032) #define M2_H     {PORTG|=0x10;}
(0033) 
(0034)  
(0035) 
(0036) 
(0037) #define MANINT_CLR	{ EIFR|=0x01; }
(0038) #define MANINT_EN	{ EIMSK |= 0x01; }
(0039) #define MANINT_DIS	{ EIMSK &= 0xFE; }
(0040) 
(0041) #define INT_EN			{ SEI(); }
(0042) #define INT_DIS		{ CLI(); }
(0043) 
(0044)  
(0045)     
(0046) #define TPSBAUD  {TCNT3H = 0xFE;TCNT3L = 0x60;}
(0047)  
(0048) 
(0049) #define DELAY10 for(Tt=0;Tt<4;Tt++);
(0050) #define DELAY20 for(Tt=0;Tt<4;Tt++);
(0051) #define DELAY40 for(Tt=0;Tt<16;Tt++); 
(0052) #define DELAY50 for(Tt=0;Tt<21;Tt++); 
(0053) #define DELAY80 for(Tt=0;Tt<32;Tt++); 
(0054) #define DELAY89 for(Tt=0;Tt<36;Tt++); 
(0055) #define DELAY100 for(Tt=0;Tt<42;Tt++); 
(0056) #define DELAY170 for(Tt=0;Tt<72;Tt++);
(0057) #define DELAY268 for(Tt=0;Tt<113;Tt++);
(0058) #define DELAY397 for(Tt=0;Tt<165;Tt++);
(0059) #define DELAY400 for(Tt=0;Tt<168;Tt++);
(0060) 
(0061) /* 接收电平值 */
(0062) #define GET_RX() (PIND & (1<<PIND1))  
(0063) /* 发送高电平 */   
(0064) #define SET_TX() (PORTD |= 0x40)
(0065) /* 发送低电平 */ 
(0066) #define CLR_TX() (PORTD &= 0xbf)
(0067)         
(0068) 
(0069)  
(0070) 
(0071) /* 定时器中断发生时的读写周期 */
(0072) enum timer_turn {   
(0073)  RX_TURN = 0,                /* 读周期 */    
(0074)  TX_TURN,                    /* 写周期 */
(0075)  };
(0076)  
(0077) /* 数据帧结构 */
(0078) __flash enum frame_bit {    BIT_0 = 0,    BIT_1,    BIT_2,    BIT_3,    BIT_4,    BIT_5,    BIT_6,    BIT_7,    BIT_STOP,    BIT_IDLE,    BIT_START,};
(0079) 
(0080) union FIB
(0081) {
(0082)  float f;
(0083)  unsigned int i[2];
(0084)  unsigned char b[4];
(0085) }myFIB;
(0086) 
(0087)  
(0088)  
(0089)  
(0090) 
(0091) unsigned char T_Flag;
(0092) 
(0093) unsigned int Timer0Counter;//定时器0超过4ms时的计数
(0094) 
(0095) unsigned char Uart0RxData[74];//串口0接收数据缓存
(0096) unsigned char Uart0RxCounter;
(0097) 
(0098) unsigned char Uart1RxData[4];//串口1接收数据缓存
(0099) unsigned char Uart1RxCounter;
(0100) 
(0101) unsigned char Rx[18];//解码接收9位共18个半位
(0102) int  T_dat,R_dat;//曼码发送数据
(0103) int TPS_PData,TPS_TData;
(0104) unsigned char T_com;//曼码发送命令
(0105) 
(0106) unsigned char TimeOutFlag;//发送超时标志
(0107) 
(0108) unsigned char T_dat_buf[22];//曼码发送缓冲 
(0109) 
(0110) unsigned int DataFlag;//下发标定系数开始标志
(0111) unsigned char Int_count;
(0112) unsigned char IntFlag;//接收帧状态
(0113) 
(0114) unsigned int Tt,k;
(0115) unsigned int T2cn;
(0116) unsigned char coeffdata[320];
(0117) 
(0118) unsigned char Uart0TxData[74];//串口发送数据缓存
(0119) 
(0120) unsigned char EEPAdd;//接收系数存放地址索引
(0121) unsigned int coeff_len,coeff_count;//接收系数长度，接收系数计数
(0122) unsigned int CompCounter;
(0123) 
(0124) unsigned int bf;
(0125) 
(0126) unsigned long lfib;//短整型转浮点数时用的临时变量
(0127) unsigned char crc16hi,crc16lo,crc16array[32];
(0128) 
(0129) 
(0130) 
(0131) 
(0132) void InitialIO(void);
(0133) void init_USART0(void);
(0134) void SendUart0_2(unsigned char len,unsigned int s);
(0135) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn);
(0136) void Pwm_startup(unsigned char motor);
(0137) void Start(void);
(0138) void SendManchester(void); 
(0139) unsigned char SampleADC(unsigned char ch);
(0140) void EEPROM_write(unsigned int Address,unsigned char Data);
(0141) unsigned char EEPROM_read(unsigned int Address);
(0142) void Delay_ms(unsigned int t);
(0143) void crc16(unsigned char r_data[],unsigned int length);
(0144)  
(0145) void int0_isr(void);
(0146) 
(0147) #pragma interrupt_handler int0_isr:iv_INT0
(0148) void int0_isr(void)//外部中断0
(0149) { 
(0150)    TCCR2 = 0x00; //stop
    0007A 2422      CLR	R2
    0007B BC25      OUT	0x25,R2
(0151)    
(0152)     INT_DIS
    0007C 94F8      BCLR	7
(0153) 	MANINT_DIS
    0007D B789      IN	R24,0x39
    0007E 7F8E      ANDI	R24,0xFE
    0007F BF89      OUT	0x39,R24
(0154)    
(0155)   DELAY10
    00080 2433      CLR	R3
    00081 9230 02BE STS	Tt+1,R3
    00083 9220 02BD STS	Tt,R2
    00085 C009      RJMP	0x008F
    00086 9180 02BD LDS	R24,Tt
    00088 9190 02BE LDS	R25,Tt+1
    0008A 9601      ADIW	R24,1
    0008B 9390 02BE STS	Tt+1,R25
    0008D 9380 02BD STS	Tt,R24
    0008F 9180 02BD LDS	R24,Tt
    00091 9190 02BE LDS	R25,Tt+1
    00093 3084      CPI	R24,4
    00094 E0E0      LDI	R30,0
    00095 079E      CPC	R25,R30
    00096 F378      BCS	0x0086
(0156)   EIFR|=0x01;//清INT0中断标志 
    00097 B788      IN	R24,0x38
    00098 6081      ORI	R24,1
    00099 BF88      OUT	0x38,R24
(0157)   if((PIND&0x01)==0x00)//高脉冲不足10us则直接跳出
    0009A 9980      SBIC	0x10,0
    0009B C001      RJMP	0x009D
(0158)   {
(0159)    goto End;
    0009C C1C0      RJMP	0x025D
(0160)   }
(0161)    
(0162)    TCNT2 = 0x00;  
    0009D 2422      CLR	R2
    0009E BC24      OUT	0x24,R2
(0163)    TCCR2 = 0x03; //64分频,8M时钟，每个CLOCK耗时8us，最大定时2048us，每周期10个计数
    0009F E083      LDI	R24,3
    000A0 BD85      OUT	0x25,R24
    000A1 C029      RJMP	0x00CB
(0164)    
(0165)    while(1)
(0166)    {
(0167)      T2cn=TCNT2;
    000A2 B424      IN	R2,0x24
    000A3 2433      CLR	R3
    000A4 9230 02BA STS	T2cn+1,R3
    000A6 9220 02B9 STS	T2cn,R2
(0168) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    000A8 E580      LDI	R24,0x50
    000A9 E090      LDI	R25,0
    000AA 1582      CP	R24,R2
    000AB 0593      CPC	R25,R3
    000AC F408      BCC	0x00AE
(0169) 	  {
(0170) 	    goto End;
    000AD C1AF      RJMP	0x025D
(0171) 	  }
(0172)      if((PIND&0x01)==0x00)
    000AE 9980      SBIC	0x10,0
    000AF C01B      RJMP	0x00CB
(0173) 	 {
(0174) 	   DELAY20
    000B0 2422      CLR	R2
    000B1 2433      CLR	R3
    000B2 9230 02BE STS	Tt+1,R3
    000B4 9220 02BD STS	Tt,R2
    000B6 C009      RJMP	0x00C0
    000B7 9180 02BD LDS	R24,Tt
    000B9 9190 02BE LDS	R25,Tt+1
    000BB 9601      ADIW	R24,1
    000BC 9390 02BE STS	Tt+1,R25
    000BE 9380 02BD STS	Tt,R24
    000C0 9180 02BD LDS	R24,Tt
    000C2 9190 02BE LDS	R25,Tt+1
    000C4 3084      CPI	R24,4
    000C5 E0E0      LDI	R30,0
    000C6 079E      CPC	R25,R30
    000C7 F378      BCS	0x00B7
(0175) 	   if((PIND&0x01)==0x00)
    000C8 9980      SBIC	0x10,0
    000C9 C001      RJMP	0x00CB
(0176) 	    {
(0177) 	      break;
    000CA C031      RJMP	0x00FC
    000CB CFD6      RJMP	0x00A2
(0178) 	    }
(0179) 	 }
(0180)    }
(0181)   		   
(0182)     //开始判断同步头	
(0183) 	while(1)//还没有上升沿到来,死等
(0184) 	{
(0185) 	  T2cn=TCNT2;
    000CC B424      IN	R2,0x24
    000CD 2433      CLR	R3
    000CE 9230 02BA STS	T2cn+1,R3
    000D0 9220 02B9 STS	T2cn,R2
(0186) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    000D2 E580      LDI	R24,0x50
    000D3 E090      LDI	R25,0
    000D4 1582      CP	R24,R2
    000D5 0593      CPC	R25,R3
    000D6 F408      BCC	0x00D8
(0187) 	  {
(0188) 	    goto End;
    000D7 C185      RJMP	0x025D
(0189) 	  }
(0190) 	  if((EIFR&0x01)==0x01)
    000D8 B788      IN	R24,0x38
    000D9 7081      ANDI	R24,1
    000DA 3081      CPI	R24,1
    000DB F501      BNE	0x00FC
(0191) 	  {
(0192) 	   DELAY10
    000DC 2422      CLR	R2
    000DD 2433      CLR	R3
    000DE 9230 02BE STS	Tt+1,R3
    000E0 9220 02BD STS	Tt,R2
    000E2 C009      RJMP	0x00EC
    000E3 9180 02BD LDS	R24,Tt
    000E5 9190 02BE LDS	R25,Tt+1
    000E7 9601      ADIW	R24,1
    000E8 9390 02BE STS	Tt+1,R25
    000EA 9380 02BD STS	Tt,R24
    000EC 9180 02BD LDS	R24,Tt
    000EE 9190 02BE LDS	R25,Tt+1
    000F0 3084      CPI	R24,4
    000F1 E0E0      LDI	R30,0
    000F2 079E      CPC	R25,R30
    000F3 F378      BCS	0x00E3
(0193) 	   EIFR|=0x01;//清INT0中断标志 
    000F4 B788      IN	R24,0x38
    000F5 6081      ORI	R24,1
    000F6 BF88      OUT	0x38,R24
(0194) 	   if((PIND&0x01)==0x01)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    000F7 B380      IN	R24,0x10
    000F8 7081      ANDI	R24,1
    000F9 3081      CPI	R24,1
    000FA F409      BNE	0x00FC
(0195) 	     {
(0196)    	     break;
    000FB C001      RJMP	0x00FD
    000FC CFCF      RJMP	0x00CC
(0197) 		 }
(0198) 	  }  
(0199) 	}
(0200) 	T2cn=TCNT2;
    000FD B424      IN	R2,0x24
    000FE 2433      CLR	R3
    000FF 9230 02BA STS	T2cn+1,R3
    00101 9220 02B9 STS	T2cn,R2
(0201) 	TCNT2=0;
    00103 2422      CLR	R2
    00104 BC24      OUT	0x24,R2
(0202) 	if((T2cn<60)||(T2cn>80))//同步头本应是7个周期，但收到的结果为6~8个周期内都认可
    00105 9020 02B9 LDS	R2,T2cn
    00107 9030 02BA LDS	R3,T2cn+1
    00109 01C1      MOVW	R24,R2
    0010A 338C      CPI	R24,0x3C
    0010B E0E0      LDI	R30,0
    0010C 079E      CPC	R25,R30
    0010D F028      BCS	0x0113
    0010E E580      LDI	R24,0x50
    0010F E090      LDI	R25,0
    00110 1582      CP	R24,R2
    00111 0593      CPC	R25,R3
    00112 F408      BCC	0x0114
(0203) 	{
(0204) 	 goto End;//没有收到正确的同步头，直接跳出
    00113 C149      RJMP	0x025D
(0205) 	}
(0206)  
(0207) Start:	//同步头解码正确，下面开始接收9位数据位	//按位从高到低接收数据位，8位数据加1位校验共9位 		      	
(0208)   for(Int_count=9;Int_count>0;Int_count--)
    00114 E089      LDI	R24,0x9
    00115 9380 02C0 STS	Int_count,R24
    00117 C0A6      RJMP	0x01BE
(0209)   {	
(0210)    while(1)
(0211)    {
(0212)      T2cn=TCNT2;
    00118 B424      IN	R2,0x24
    00119 2433      CLR	R3
    0011A 9230 02BA STS	T2cn+1,R3
    0011C 9220 02B9 STS	T2cn,R2
(0213) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    0011E E580      LDI	R24,0x50
    0011F E090      LDI	R25,0
    00120 1582      CP	R24,R2
    00121 0593      CPC	R25,R3
    00122 F408      BCC	0x0124
(0214) 	  {
(0215) 	    goto End;
    00123 C139      RJMP	0x025D
(0216) 	  }
(0217)      if((PIND&0x01)==0x00)
    00124 9980      SBIC	0x10,0
    00125 C01B      RJMP	0x0141
(0218) 	 {
(0219) 	   DELAY20
    00126 2422      CLR	R2
    00127 2433      CLR	R3
    00128 9230 02BE STS	Tt+1,R3
    0012A 9220 02BD STS	Tt,R2
    0012C C009      RJMP	0x0136
    0012D 9180 02BD LDS	R24,Tt
    0012F 9190 02BE LDS	R25,Tt+1
    00131 9601      ADIW	R24,1
    00132 9390 02BE STS	Tt+1,R25
    00134 9380 02BD STS	Tt,R24
    00136 9180 02BD LDS	R24,Tt
    00138 9190 02BE LDS	R25,Tt+1
    0013A 3084      CPI	R24,4
    0013B E0E0      LDI	R30,0
    0013C 079E      CPC	R25,R30
    0013D F378      BCS	0x012D
(0220) 	   if((PIND&0x01)==0x00)
    0013E 9980      SBIC	0x10,0
    0013F C001      RJMP	0x0141
(0221) 	    {
(0222) 	      break;
    00140 C031      RJMP	0x0172
    00141 CFD6      RJMP	0x0118
(0223) 	    }
(0224) 	 }
(0225)    } 
(0226)    while(1)//还没有上升沿到来,死等
(0227) 	{
(0228) 	  T2cn=TCNT2;
    00142 B424      IN	R2,0x24
    00143 2433      CLR	R3
    00144 9230 02BA STS	T2cn+1,R3
    00146 9220 02B9 STS	T2cn,R2
(0229) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    00148 E580      LDI	R24,0x50
    00149 E090      LDI	R25,0
    0014A 1582      CP	R24,R2
    0014B 0593      CPC	R25,R3
    0014C F408      BCC	0x014E
(0230) 	  {
(0231) 	    goto End;
    0014D C10F      RJMP	0x025D
(0232) 	  }
(0233) 	  if((EIFR&0x01)==0x01)
    0014E B788      IN	R24,0x38
    0014F 7081      ANDI	R24,1
    00150 3081      CPI	R24,1
    00151 F501      BNE	0x0172
(0234) 	  {
(0235) 	   DELAY10
    00152 2422      CLR	R2
    00153 2433      CLR	R3
    00154 9230 02BE STS	Tt+1,R3
    00156 9220 02BD STS	Tt,R2
    00158 C009      RJMP	0x0162
    00159 9180 02BD LDS	R24,Tt
    0015B 9190 02BE LDS	R25,Tt+1
    0015D 9601      ADIW	R24,1
    0015E 9390 02BE STS	Tt+1,R25
    00160 9380 02BD STS	Tt,R24
    00162 9180 02BD LDS	R24,Tt
    00164 9190 02BE LDS	R25,Tt+1
    00166 3084      CPI	R24,4
    00167 E0E0      LDI	R30,0
    00168 079E      CPC	R25,R30
    00169 F378      BCS	0x0159
(0236) 	   EIFR|=0x01;//清INT0中断标志 
    0016A B788      IN	R24,0x38
    0016B 6081      ORI	R24,1
    0016C BF88      OUT	0x38,R24
(0237) 	   if((PIND&0x01)==0x01)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    0016D B380      IN	R24,0x10
    0016E 7081      ANDI	R24,1
    0016F 3081      CPI	R24,1
    00170 F409      BNE	0x0172
(0238) 	     {
(0239)    	     break;
    00171 C001      RJMP	0x0173
    00172 CFCF      RJMP	0x0142
(0240) 		 }
(0241) 	  }  
(0242) 	}
(0243) 	T2cn=TCNT2;
    00173 B424      IN	R2,0x24
    00174 2433      CLR	R3
    00175 9230 02BA STS	T2cn+1,R3
    00177 9220 02B9 STS	T2cn,R2
(0244) 	TCNT2=0;
    00179 2422      CLR	R2
    0017A BC24      OUT	0x24,R2
(0245) 	if(T2cn<20)//数据位最小是3位，可放宽到2位
    0017B 9180 02B9 LDS	R24,T2cn
    0017D 9190 02BA LDS	R25,T2cn+1
    0017F 3184      CPI	R24,0x14
    00180 E0E0      LDI	R30,0
    00181 079E      CPC	R25,R30
    00182 F420      BCC	0x0187
(0246) 	{
(0247) 	 IntFlag=3;//接收数据位不完整
    00183 E083      LDI	R24,3
    00184 9380 02BF STS	IntFlag,R24
(0248) 	 goto End;//数据位来得太早，退出
    00186 C0D6      RJMP	0x025D
(0249) 	}
(0250) 	else if(T2cn<40)//数据位1本应是3个周期，在此我们认为2~4个周期都是可以的
    00187 9180 02B9 LDS	R24,T2cn
    00189 9190 02BA LDS	R25,T2cn+1
    0018B 3288      CPI	R24,0x28
    0018C E0E0      LDI	R30,0
    0018D 079E      CPC	R25,R30
    0018E F450      BCC	0x0199
(0251) 	{
(0252) 	 Rx[Int_count]=1;
    0018F EE83      LDI	R24,0xE3
    00190 E092      LDI	R25,2
    00191 91E0 02C0 LDS	R30,Int_count
    00193 27FF      CLR	R31
    00194 0FE8      ADD	R30,R24
    00195 1FF9      ADC	R31,R25
    00196 E081      LDI	R24,1
    00197 8380      ST	Z,R24
(0253) 	}
    00198 C020      RJMP	0x01B9
(0254) 	else if(T2cn<60)//数据位0本应是5个周期，在此我们认为4~6个周期都是可以的
    00199 9180 02B9 LDS	R24,T2cn
    0019B 9190 02BA LDS	R25,T2cn+1
    0019D 338C      CPI	R24,0x3C
    0019E E0E0      LDI	R30,0
    0019F 079E      CPC	R25,R30
    001A0 F450      BCC	0x01AB
(0255) 	{
(0256) 	 Rx[Int_count]=0;
    001A1 EE83      LDI	R24,0xE3
    001A2 E092      LDI	R25,2
    001A3 91E0 02C0 LDS	R30,Int_count
    001A5 27FF      CLR	R31
    001A6 0FE8      ADD	R30,R24
    001A7 1FF9      ADC	R31,R25
    001A8 2422      CLR	R2
    001A9 8220      ST	Z,R2
(0257) 	}
    001AA C00E      RJMP	0x01B9
(0258) 	else if(T2cn<=80)//同步位本应是7周期，在此我们认为6~8周期都是可以的
    001AB E580      LDI	R24,0x50
    001AC E090      LDI	R25,0
    001AD 9020 02B9 LDS	R2,T2cn
    001AF 9030 02BA LDS	R3,T2cn+1
    001B1 1582      CP	R24,R2
    001B2 0593      CPC	R25,R3
    001B3 F008      BCS	0x01B5
(0259) 	{
(0260) 	 goto Start;//在接收数据位时收到了同步位，跳到数据位解码起始位处
    001B4 CF5F      RJMP	0x0114
(0261) 	}
(0262) 	else 
(0263) 	{
(0264) 	 IntFlag=3;//接收数据位不完整
    001B5 E083      LDI	R24,3
    001B6 9380 02BF STS	IntFlag,R24
(0265) 	 goto End;//数据位来得太迟，退出
    001B8 C0A4      RJMP	0x025D
    001B9 9180 02C0 LDS	R24,Int_count
    001BB 5081      SUBI	R24,1
    001BC 9380 02C0 STS	Int_count,R24
    001BE E080      LDI	R24,0
    001BF 9020 02C0 LDS	R2,Int_count
    001C1 1582      CP	R24,R2
    001C2 F408      BCC	0x01C4
    001C3 CF7D      RJMP	0x0141
(0266) 	}
(0267)   }   
(0268) 	
(0269)     R_dat=0;
    001C4 2422      CLR	R2
    001C5 2433      CLR	R3
    001C6 9230 02E0 STS	R_dat+1,R3
    001C8 9220 02DF STS	R_dat,R2
(0270)     if(Rx[2])
    001CA 9020 02E5 LDS	R2,Rx+2
    001CC 2022      TST	R2
    001CD F049      BEQ	0x01D7
(0271)           R_dat|=0x01;
    001CE 9180 02DF LDS	R24,R_dat
    001D0 9190 02E0 LDS	R25,R_dat+1
    001D2 6081      ORI	R24,1
    001D3 9390 02E0 STS	R_dat+1,R25
    001D5 9380 02DF STS	R_dat,R24
(0272)     if(Rx[3])
    001D7 9020 02E6 LDS	R2,Rx+3
    001D9 2022      TST	R2
    001DA F049      BEQ	0x01E4
(0273)           R_dat|=0x02;
    001DB 9180 02DF LDS	R24,R_dat
    001DD 9190 02E0 LDS	R25,R_dat+1
    001DF 6082      ORI	R24,2
    001E0 9390 02E0 STS	R_dat+1,R25
    001E2 9380 02DF STS	R_dat,R24
(0274)     if(Rx[4])
    001E4 9020 02E7 LDS	R2,Rx+4
    001E6 2022      TST	R2
    001E7 F049      BEQ	0x01F1
(0275)           R_dat|=0x04;
    001E8 9180 02DF LDS	R24,R_dat
    001EA 9190 02E0 LDS	R25,R_dat+1
    001EC 6084      ORI	R24,4
    001ED 9390 02E0 STS	R_dat+1,R25
    001EF 9380 02DF STS	R_dat,R24
(0276)     if(Rx[5])
    001F1 9020 02E8 LDS	R2,Rx+5
    001F3 2022      TST	R2
    001F4 F049      BEQ	0x01FE
(0277)           R_dat|=0x08;
    001F5 9180 02DF LDS	R24,R_dat
    001F7 9190 02E0 LDS	R25,R_dat+1
    001F9 6088      ORI	R24,0x8
    001FA 9390 02E0 STS	R_dat+1,R25
    001FC 9380 02DF STS	R_dat,R24
(0278)     if(Rx[6])
    001FE 9020 02E9 LDS	R2,Rx+6
    00200 2022      TST	R2
    00201 F049      BEQ	0x020B
(0279)           R_dat|=0x10;
    00202 9180 02DF LDS	R24,R_dat
    00204 9190 02E0 LDS	R25,R_dat+1
    00206 6180      ORI	R24,0x10
    00207 9390 02E0 STS	R_dat+1,R25
    00209 9380 02DF STS	R_dat,R24
(0280)     if(Rx[7])
    0020B 9020 02EA LDS	R2,Rx+7
    0020D 2022      TST	R2
    0020E F049      BEQ	0x0218
(0281)           R_dat|=0x20;
    0020F 9180 02DF LDS	R24,R_dat
    00211 9190 02E0 LDS	R25,R_dat+1
    00213 6280      ORI	R24,0x20
    00214 9390 02E0 STS	R_dat+1,R25
    00216 9380 02DF STS	R_dat,R24
(0282)     if(Rx[8])
    00218 9020 02EB LDS	R2,Rx+8
    0021A 2022      TST	R2
    0021B F049      BEQ	0x0225
(0283)           R_dat|=0x40;
    0021C 9180 02DF LDS	R24,R_dat
    0021E 9190 02E0 LDS	R25,R_dat+1
    00220 6480      ORI	R24,0x40
    00221 9390 02E0 STS	R_dat+1,R25
    00223 9380 02DF STS	R_dat,R24
(0284)     if(Rx[9])
    00225 9020 02EC LDS	R2,Rx+9
    00227 2022      TST	R2
    00228 F049      BEQ	0x0232
(0285)           R_dat|=0x80;
    00229 9180 02DF LDS	R24,R_dat
    0022B 9190 02E0 LDS	R25,R_dat+1
    0022D 6880      ORI	R24,0x80
    0022E 9390 02E0 STS	R_dat+1,R25
    00230 9380 02DF STS	R_dat,R24
(0286) 	
(0287) 	Rx[0]=1;  
    00232 E081      LDI	R24,1
    00233 9380 02E3 STS	Rx,R24
(0288) 	for(Int_count=2;Int_count<10;Int_count++)  
    00235 E082      LDI	R24,2
    00236 9380 02C0 STS	Int_count,R24
    00238 C012      RJMP	0x024B
(0289)        Rx[0]^=Rx[Int_count];  
    00239 EE83      LDI	R24,0xE3
    0023A E092      LDI	R25,2
    0023B 91E0 02C0 LDS	R30,Int_count
    0023D 27FF      CLR	R31
    0023E 0FE8      ADD	R30,R24
    0023F 1FF9      ADC	R31,R25
    00240 8020      LD	R2,Z
    00241 9030 02E3 LDS	R3,Rx
    00243 2432      EOR	R3,R2
    00244 9230 02E3 STS	Rx,R3
    00246 9180 02C0 LDS	R24,Int_count
    00248 5F8F      SUBI	R24,0xFF
    00249 9380 02C0 STS	Int_count,R24
    0024B 9180 02C0 LDS	R24,Int_count
    0024D 308A      CPI	R24,0xA
    0024E F350      BCS	0x0239
(0290) 	   
(0291) 	if(Rx[0]==Rx[1])
    0024F 9020 02E4 LDS	R2,Rx+1
    00251 9030 02E3 LDS	R3,Rx
    00253 1432      CP	R3,R2
    00254 F421      BNE	0x0259
(0292) 	 {
(0293) 		 IntFlag=1;//接收帧正常	
    00255 E081      LDI	R24,1
    00256 9380 02BF STS	IntFlag,R24
(0294) 	 }
    00258 C00A      RJMP	0x0263
(0295) 	else           
(0296) 	 {
(0297) 		 IntFlag=2;//接收帧校验错
    00259 E082      LDI	R24,2
    0025A 9380 02BF STS	IntFlag,R24
(0298) 	 }
(0299)  
(0300)    goto End1;//只要接收到正常的同步头，不管校验位是对是错，都暂时不开放INT0中断
    0025C C006      RJMP	0x0263
(0301)      
(0302) End:
(0303) 		MANINT_CLR
    0025D B788      IN	R24,0x38
    0025E 6081      ORI	R24,1
    0025F BF88      OUT	0x38,R24
(0304) 		MANINT_EN
    00260 B789      IN	R24,0x39
    00261 6081      ORI	R24,1
    00262 BF89      OUT	0x39,R24
(0305) End1:
(0306)    TCCR2 = 0x00; //stop
    00263 2422      CLR	R2
    00264 BC25      OUT	0x25,R2
(0307)    INT_EN
    00265 9478      BSET	7
    00266 9029      LD	R2,Y+
    00267 BE2F      OUT	0x3F,R2
    00268 91F9      LD	R31,Y+
    00269 91E9      LD	R30,Y+
    0026A 91A9      LD	R26,Y+
    0026B 9199      LD	R25,Y+
    0026C 9189      LD	R24,Y+
    0026D 9039      LD	R3,Y+
    0026E 9029      LD	R2,Y+
    0026F 9518      RETI
(0308) }
(0309) 
(0310) void InitialIO(void)
(0311) {//1输出，0输入
(0312)  PORTG&=0xe7; 
_InitialIO:
    00270 9180 0065 LDS	R24,0x65
    00272 7E87      ANDI	R24,0xE7
    00273 9380 0065 STS	0x65,R24
(0313)  DDRG|=0x18; 
    00275 9180 0064 LDS	R24,0x64
    00277 6188      ORI	R24,0x18
    00278 9380 0064 STS	0x64,R24
(0314)  
(0315)  PORTD&=0xBF;
    0027A B382      IN	R24,0x12
    0027B 7B8F      ANDI	R24,0xBF
    0027C BB82      OUT	0x12,R24
(0316)  DDRD|=0x40;
    0027D 9A8E      SBI	0x11,6
    0027E 9508      RET
(0317) }
(0318) 
(0319) 
(0320) //UART1 initialize
(0321) // desired baud rate:9600
(0322) // actual baud rate:9615 (0.2%)
(0323) // char size: 8 bit
(0324) // parity: Disabled
(0325) void uart1_init(void)
(0326) {
(0327)  UCSR1B = 0x00; //disable while setting baud rate
_uart1_init:
    0027F 2422      CLR	R2
    00280 9220 009A STS	0x9A,R2
(0328)  UCSR1A = 0x02;
    00282 E082      LDI	R24,2
    00283 9380 009B STS	0x9B,R24
(0329)  UCSR1C = 0x06;
    00285 E086      LDI	R24,6
    00286 9380 009D STS	0x9D,R24
(0330)  UBRR1L = 0x67; //set baud rate lo
    00288 E687      LDI	R24,0x67
    00289 9380 0099 STS	0x99,R24
(0331)  UBRR1H = 0x00; //set baud rate hi
    0028B 9220 0098 STS	0x98,R2
(0332)  UCSR1B = 0x98;
    0028D E988      LDI	R24,0x98
    0028E 9380 009A STS	0x9A,R24
    00290 9508      RET
_uart1_rx_isr:
    00291 922A      ST	-Y,R2
    00292 938A      ST	-Y,R24
    00293 939A      ST	-Y,R25
    00294 93EA      ST	-Y,R30
    00295 93FA      ST	-Y,R31
    00296 B62F      IN	R2,0x3F
    00297 922A      ST	-Y,R2
(0333) }
(0334) 
(0335) #pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
(0336) void uart1_rx_isr(void)//串口1接收中断
(0337) {
(0338)   if(Uart1RxCounter<4)
    00298 9180 02F5 LDS	R24,Uart1RxCounter
    0029A 3084      CPI	R24,4
    0029B F478      BCC	0x02AB
(0339) 	{
(0340)     Uart1RxData[Uart1RxCounter]=UDR1;//接收串口数据,同时清空串口接收中断标志
    0029C EF86      LDI	R24,0xF6
    0029D E092      LDI	R25,2
    0029E 91E0 02F5 LDS	R30,Uart1RxCounter
    002A0 27FF      CLR	R31
    002A1 0FE8      ADD	R30,R24
    002A2 1FF9      ADC	R31,R25
    002A3 9020 009C LDS	R2,0x9C
    002A5 8220      ST	Z,R2
(0341)  	Uart1RxCounter++;
    002A6 9180 02F5 LDS	R24,Uart1RxCounter
    002A8 5F8F      SUBI	R24,0xFF
    002A9 9380 02F5 STS	Uart1RxCounter,R24
(0342) 	}
    002AB 9029      LD	R2,Y+
    002AC BE2F      OUT	0x3F,R2
    002AD 91F9      LD	R31,Y+
    002AE 91E9      LD	R30,Y+
    002AF 9199      LD	R25,Y+
    002B0 9189      LD	R24,Y+
    002B1 9029      LD	R2,Y+
    002B2 9518      RETI
_SendUart1:
  i                    --> Y,+1
  t                    --> R20
  s                    --> R18
  dat                  --> R16
    002B3 934A      ST	-Y,R20
(0343) }
(0344) 
(0345) 
(0346) void SendUart1(unsigned char dat,unsigned int s)   //串口发送数据
(0347) {//要求流量板在s个8ms内通过串口返回数据
(0348) unsigned char t,i; 	
(0349) 
(0350) for(t=0;t<4;t++)
    002B4 2744      CLR	R20
    002B5 C009      RJMP	0x02BF
(0351)   Uart1RxData[t]=0xff;
    002B6 EF86      LDI	R24,0xF6
    002B7 E092      LDI	R25,2
    002B8 2FE4      MOV	R30,R20
    002B9 27FF      CLR	R31
    002BA 0FE8      ADD	R30,R24
    002BB 1FF9      ADC	R31,R25
    002BC EF8F      LDI	R24,0xFF
    002BD 8380      ST	Z,R24
    002BE 9543      INC	R20
    002BF 3044      CPI	R20,4
    002C0 F3A8      BCS	0x02B6
(0352)   
(0353) Uart1RxCounter=0; //清串口接受计数  
    002C1 2422      CLR	R2
    002C2 9220 02F5 STS	Uart1RxCounter,R2
(0354) 
(0355) while(!(UCSR1A&(1<<UDRE1)));   // 等待发送缓冲器为空
    002C4 9020 009B LDS	R2,0x9B
    002C6 FE25      SBRS	R2,5
    002C7 CFFC      RJMP	0x02C4
(0356) UDR1=dat;  
    002C8 9300 009C STS	0x9C,R16
(0357) 
(0358) t=UDR1;//开串口接收中断前读空缓存
    002CA 9140 009C LDS	R20,0x9C
(0359) UCSR1B|=0x80;//开串口接收中断
    002CC 9180 009A LDS	R24,0x9A
    002CE 6880      ORI	R24,0x80
    002CF 9380 009A STS	0x9A,R24
(0360)                   
(0361) if(s>0)
    002D1 3020      CPI	R18,0
    002D2 0723      CPC	R18,R19
    002D3 F0C9      BEQ	0x02ED
(0362) {
(0363)  //超时设定
(0364) TimeOutFlag=0; //超时标志置0
    002D4 2422      CLR	R2
    002D5 9220 02D9 STS	TimeOutFlag,R2
(0365) Timer0Counter=s; //8ms定时循环次数
    002D7 9330 0346 STS	Timer0Counter+1,R19
    002D9 9320 0345 STS	Timer0Counter,R18
(0366) TCNT0=0x06;//定时8ms
    002DB E086      LDI	R24,6
    002DC BF82      OUT	0x32,R24
(0367) TCCR0|=0x06;//256分频
    002DD B783      IN	R24,0x33
    002DE 6086      ORI	R24,6
    002DF BF83      OUT	0x33,R24
(0368) TIFR|=0x01; //清定时器0中断标志
    002E0 B786      IN	R24,0x36
    002E1 6081      ORI	R24,1
    002E2 BF86      OUT	0x36,R24
(0369) TIMSK|=0x01;//使能定时器0中断
    002E3 B787      IN	R24,0x37
    002E4 6081      ORI	R24,1
    002E5 BF87      OUT	0x37,R24
(0370) while(TimeOutFlag==0);
    002E6 9020 02D9 LDS	R2,TimeOutFlag
    002E8 2022      TST	R2
    002E9 F3E1      BEQ	0x02E6
(0371) TIMSK&=0xFE;//关定时器0中断
    002EA B787      IN	R24,0x37
    002EB 7F8E      ANDI	R24,0xFE
    002EC BF87      OUT	0x37,R24
(0372) 
(0373) }
(0374) 
(0375) UCSR1B&=0x7f;//关串口接收中断
    002ED 9180 009A LDS	R24,0x9A
    002EF 778F      ANDI	R24,0x7F
    002F0 9380 009A STS	0x9A,R24
    002F2 9149      LD	R20,Y+
    002F3 9508      RET
(0376) }
(0377) 
(0378) 
(0379) 
(0380) 
(0381) //TIMER3 initialize - prescale:1
(0382) // WGM: 0) Normal, TOP=0xFFFF
(0383) // desired value: 19200Hz
(0384) // actual value: 19230.769Hz (0.2%)
(0385) void timer3_init(void)
(0386) {
(0387)  
(0388)  ETIMSK&=0xfb;//禁止time3溢出中断   
_timer3_init:
    002F4 9180 007D LDS	R24,0x7D
    002F6 7F8B      ANDI	R24,0xFB
    002F7 9380 007D STS	0x7D,R24
(0389)  ETIFR&=0xfb;  //清timer3中断标志  
    002F9 9180 007C LDS	R24,0x7C
    002FB 7F8B      ANDI	R24,0xFB
    002FC 9380 007C STS	0x7C,R24
(0390)  TCCR3B = 0x00; //stop
    002FE 2422      CLR	R2
    002FF 9220 008A STS	0x8A,R2
(0391)  TPSBAUD
    00301 EF8E      LDI	R24,0xFE
    00302 9380 0089 STS	0x89,R24
    00304 E680      LDI	R24,0x60
    00305 9380 0088 STS	0x88,R24
(0392)  TCCR3B = 0x01; //start Timer
    00307 E081      LDI	R24,1
    00308 9380 008A STS	0x8A,R24
(0393)  ETIFR&=0xfb;           //清timer3中断标志
    0030A 9180 007C LDS	R24,0x7C
    0030C 7F8B      ANDI	R24,0xFB
    0030D 9380 007C STS	0x7C,R24
    0030F 9508      RET
_SendTPS:
  i                    --> R20
  tx_buf               --> R10
    00310 92AA      ST	-Y,R10
    00311 934A      ST	-Y,R20
    00312 2EA0      MOV	R10,R16
(0394) }
(0395) 
(0396) void SendTPS(unsigned char tx_buf)
(0397) {
(0398)     unsigned char i;
(0399) 	
(0400)     timer3_init();   
    00313 DFE0      RCALL	_timer3_init
(0401) 	
(0402) 	while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00314 9180 007C LDS	R24,0x7C
    00316 7F8B      ANDI	R24,0xFB
    00317 F3E1      BEQ	0x0314
(0403) 	TPSBAUD
    00318 EF8E      LDI	R24,0xFE
    00319 9380 0089 STS	0x89,R24
    0031B E680      LDI	R24,0x60
    0031C 9380 0088 STS	0x88,R24
(0404) 	ETIFR&=0xfb;           //清timer3中断标志
    0031E 9180 007C LDS	R24,0x7C
    00320 7F8B      ANDI	R24,0xFB
    00321 9380 007C STS	0x7C,R24
(0405)     SET_TX();//同步位
    00323 9A96      SBI	0x12,6
(0406) 	
(0407) 	for(i=0; i<8;i++)
    00324 2744      CLR	R20
    00325 C01C      RJMP	0x0342
(0408) 	{
(0409) 	while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00326 9180 007C LDS	R24,0x7C
    00328 7F8B      ANDI	R24,0xFB
    00329 F3E1      BEQ	0x0326
(0410) 	TPSBAUD
    0032A EF8E      LDI	R24,0xFE
    0032B 9380 0089 STS	0x89,R24
    0032D E680      LDI	R24,0x60
    0032E 9380 0088 STS	0x88,R24
(0411) 	ETIFR&=0xfb;           //清timer3中断标志
    00330 9180 007C LDS	R24,0x7C
    00332 7F8B      ANDI	R24,0xFB
    00333 9380 007C STS	0x7C,R24
(0412) 	if (tx_buf & (1 << i))  
    00335 E001      LDI	R16,1
    00336 2F14      MOV	R17,R20
    00337 940E 1DC7 CALL	lsl8
    00339 2C2A      MOV	R2,R10
    0033A 2220      AND	R2,R16
    0033B F021      BEQ	0x0340
(0413)        {CLR_TX();}
    0033C B382      IN	R24,0x12
    0033D 7B8F      ANDI	R24,0xBF
    0033E BB82      OUT	0x12,R24
    0033F C001      RJMP	0x0341
(0414)     else
(0415)        {SET_TX();}
    00340 9A96      SBI	0x12,6
    00341 9543      INC	R20
    00342 3048      CPI	R20,0x8
    00343 F310      BCS	0x0326
(0416) 	}
(0417) 	  
(0418) 	while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00344 9180 007C LDS	R24,0x7C
    00346 7F8B      ANDI	R24,0xFB
    00347 F3E1      BEQ	0x0344
(0419) 	TPSBAUD
    00348 EF8E      LDI	R24,0xFE
    00349 9380 0089 STS	0x89,R24
    0034B E680      LDI	R24,0x60
    0034C 9380 0088 STS	0x88,R24
(0420) 	CLR_TX();//结束位
    0034E B382      IN	R24,0x12
    0034F 7B8F      ANDI	R24,0xBF
    00350 BB82      OUT	0x12,R24
(0421) 	
(0422) 	//以下是等结束位结束后，再多等待2位，防止连续发送时接收方忙不过来
(0423) 	while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00351 9180 007C LDS	R24,0x7C
    00353 7F8B      ANDI	R24,0xFB
    00354 F3E1      BEQ	0x0351
(0424) 	TPSBAUD
    00355 EF8E      LDI	R24,0xFE
    00356 9380 0089 STS	0x89,R24
    00358 E680      LDI	R24,0x60
    00359 9380 0088 STS	0x88,R24
(0425) 	while((ETIFR&0xfb)==0);//等待 timer3中断标志
    0035B 9180 007C LDS	R24,0x7C
    0035D 7F8B      ANDI	R24,0xFB
    0035E F3E1      BEQ	0x035B
(0426) 	TPSBAUD
    0035F EF8E      LDI	R24,0xFE
    00360 9380 0089 STS	0x89,R24
    00362 E680      LDI	R24,0x60
    00363 9380 0088 STS	0x88,R24
(0427) 	while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00365 9180 007C LDS	R24,0x7C
    00367 7F8B      ANDI	R24,0xFB
    00368 F3E1      BEQ	0x0365
(0428) 	TPSBAUD
    00369 EF8E      LDI	R24,0xFE
    0036A 9380 0089 STS	0x89,R24
    0036C E680      LDI	R24,0x60
    0036D 9380 0088 STS	0x88,R24
(0429) 	
(0430) 	TCCR3B = 0x00; //stop  
    0036F 2422      CLR	R2
    00370 9220 008A STS	0x8A,R2
(0431) 	ETIFR&=0xfb;           //清timer3中断标志
    00372 9180 007C LDS	R24,0x7C
    00374 7F8B      ANDI	R24,0xFB
    00375 9380 007C STS	0x7C,R24
    00377 9149      LD	R20,Y+
    00378 90A9      LD	R10,Y+
    00379 9508      RET
_ReceiveTPS:
  i                    --> Y,+1
  rx_buf               --> R20
    0037A 934A      ST	-Y,R20
(0432)     
(0433) }
(0434) 
(0435) unsigned char ReceiveTPS(void)
(0436) {
(0437)     unsigned char i,rx_buf;
(0438) 	
(0439) 	rx_buf=0xff;
    0037B EF4F      LDI	R20,0xFF
(0440) 	TCCR1B = 0x00; //stop
    0037C 2422      CLR	R2
    0037D BC2E      OUT	0x2E,R2
(0441)     TCNT1 = 65380;  //定时20ms，9600波特率下接收一个字节实际只需耗时1.04ms，压力板返回时故意延迟了2ms，但有时遇到采集中断则需要10ms以上
    0037E E684      LDI	R24,0x64
    0037F EF9F      LDI	R25,0xFF
    00380 BD9D      OUT	0x2D,R25
    00381 BD8C      OUT	0x2C,R24
(0442) 	TIFR|=0x04; //清定时器1中断标志 
    00382 B786      IN	R24,0x36
    00383 6084      ORI	R24,4
    00384 BF86      OUT	0x36,R24
(0443)  	TCCR1B = 0x05; //1024分频
    00385 E085      LDI	R24,5
    00386 BD8E      OUT	0x2E,R24
    00387 C0C2      RJMP	0x044A
(0444) 	
(0445) 	//DDRG|=0x01;
(0446) 	//PORTG|=0x01;  
(0447) 	//PORTG&=0xfe; 
(0448)     while((TIFR&0x04)==0x00) 
(0449) 	{
(0450) 	   if (!GET_RX())//检测到了低电平的起始位
    00388 9981      SBIC	0x10,1
    00389 C0C0      RJMP	0x044A
(0451) 	     {  PORTG|=0x01;    
    0038A 9180 0065 LDS	R24,0x65
    0038C 6081      ORI	R24,1
    0038D 9380 0065 STS	0x65,R24
(0452)             timer3_init(); 
    0038F DF64      RCALL	_timer3_init
(0453) 	 /*
(0454) 			for(i=0; i<8;i++)
(0455) 			{
(0456) 	 		  while((ETIFR&0xfb)==0);//等待 timer3中断标志
(0457) 			  PORTG&=0xfe;
(0458) 			  TPSBAUD
(0459) 			  ETIFR&=0xfb;           //清timer3中断标志
(0460) 			  if (GET_RX())           //根据端口电平, 写接收缓冲相应位 
(0461)                 {rx_buf |= (1 << i);}
(0462)               else
(0463)                 {rx_buf &= ~(1 << i);}
(0464) 		    }
(0465) 			*/
(0466) 			
(0467) 			 while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00390 9180 007C LDS	R24,0x7C
    00392 7F8B      ANDI	R24,0xFB
    00393 F3E1      BEQ	0x0390
(0468) 			 // PORTG&=0xfe;
(0469) 			  TPSBAUD
    00394 EF8E      LDI	R24,0xFE
    00395 9380 0089 STS	0x89,R24
    00397 E680      LDI	R24,0x60
    00398 9380 0088 STS	0x88,R24
(0470) 			  ETIFR&=0xfb;           //清timer3中断标志
    0039A 9180 007C LDS	R24,0x7C
    0039C 7F8B      ANDI	R24,0xFB
    0039D 9380 007C STS	0x7C,R24
(0471) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    0039F 9B81      SBIS	0x10,1
    003A0 C002      RJMP	0x03A3
(0472)                 {rx_buf |= (1 << 0);}
    003A1 6041      ORI	R20,1
    003A2 C001      RJMP	0x03A4
(0473)               else
(0474)                 {rx_buf &= ~(1 << 0);}
    003A3 7F4E      ANDI	R20,0xFE
(0475) 			
(0476) 			while((ETIFR&0xfb)==0);//等待 timer3中断标志
    003A4 9180 007C LDS	R24,0x7C
    003A6 7F8B      ANDI	R24,0xFB
    003A7 F3E1      BEQ	0x03A4
(0477) 			//  PORTG|=0x01; 
(0478) 			  TPSBAUD
    003A8 EF8E      LDI	R24,0xFE
    003A9 9380 0089 STS	0x89,R24
    003AB E680      LDI	R24,0x60
    003AC 9380 0088 STS	0x88,R24
(0479) 			  ETIFR&=0xfb;           //清timer3中断标志
    003AE 9180 007C LDS	R24,0x7C
    003B0 7F8B      ANDI	R24,0xFB
    003B1 9380 007C STS	0x7C,R24
(0480) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    003B3 9B81      SBIS	0x10,1
    003B4 C002      RJMP	0x03B7
(0481)                 {rx_buf |= (1 << 1);}
    003B5 6042      ORI	R20,2
    003B6 C001      RJMP	0x03B8
(0482)               else
(0483)                 {rx_buf &= ~(1 << 1);}
    003B7 7F4D      ANDI	R20,0xFD
(0484) 				
(0485) 			while((ETIFR&0xfb)==0);//等待 timer3中断标志
    003B8 9180 007C LDS	R24,0x7C
    003BA 7F8B      ANDI	R24,0xFB
    003BB F3E1      BEQ	0x03B8
(0486) 			//  PORTG&=0xfe;
(0487) 			  TPSBAUD
    003BC EF8E      LDI	R24,0xFE
    003BD 9380 0089 STS	0x89,R24
    003BF E680      LDI	R24,0x60
    003C0 9380 0088 STS	0x88,R24
(0488) 			  ETIFR&=0xfb;           //清timer3中断标志
    003C2 9180 007C LDS	R24,0x7C
    003C4 7F8B      ANDI	R24,0xFB
    003C5 9380 007C STS	0x7C,R24
(0489) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    003C7 9B81      SBIS	0x10,1
    003C8 C002      RJMP	0x03CB
(0490)                 {rx_buf |= (1 << 2);}
    003C9 6044      ORI	R20,4
    003CA C001      RJMP	0x03CC
(0491)               else
(0492)                 {rx_buf &= ~(1 << 2);}
    003CB 7F4B      ANDI	R20,0xFB
(0493) 			
(0494) 			while((ETIFR&0xfb)==0);//等待 timer3中断标志
    003CC 9180 007C LDS	R24,0x7C
    003CE 7F8B      ANDI	R24,0xFB
    003CF F3E1      BEQ	0x03CC
(0495) 			 // PORTG|=0x01; 
(0496) 			  TPSBAUD
    003D0 EF8E      LDI	R24,0xFE
    003D1 9380 0089 STS	0x89,R24
    003D3 E680      LDI	R24,0x60
    003D4 9380 0088 STS	0x88,R24
(0497) 			  ETIFR&=0xfb;           //清timer3中断标志
    003D6 9180 007C LDS	R24,0x7C
    003D8 7F8B      ANDI	R24,0xFB
    003D9 9380 007C STS	0x7C,R24
(0498) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    003DB 9B81      SBIS	0x10,1
    003DC C002      RJMP	0x03DF
(0499)                 {rx_buf |= (1 << 3);}
    003DD 6048      ORI	R20,0x8
    003DE C001      RJMP	0x03E0
(0500)               else
(0501)                 {rx_buf &= ~(1 << 3);}
    003DF 7F47      ANDI	R20,0xF7
(0502) 			
(0503) 			while((ETIFR&0xfb)==0);//等待 timer3中断标志
    003E0 9180 007C LDS	R24,0x7C
    003E2 7F8B      ANDI	R24,0xFB
    003E3 F3E1      BEQ	0x03E0
(0504) 			//  PORTG&=0xfe;
(0505) 			  TPSBAUD
    003E4 EF8E      LDI	R24,0xFE
    003E5 9380 0089 STS	0x89,R24
    003E7 E680      LDI	R24,0x60
    003E8 9380 0088 STS	0x88,R24
(0506) 			  ETIFR&=0xfb;           //清timer3中断标志
    003EA 9180 007C LDS	R24,0x7C
    003EC 7F8B      ANDI	R24,0xFB
    003ED 9380 007C STS	0x7C,R24
(0507) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    003EF 9B81      SBIS	0x10,1
    003F0 C002      RJMP	0x03F3
(0508)                 {rx_buf |= (1 << 4);}
    003F1 6140      ORI	R20,0x10
    003F2 C001      RJMP	0x03F4
(0509)               else
(0510)                 {rx_buf &= ~(1 << 4);}
    003F3 7E4F      ANDI	R20,0xEF
(0511) 			
(0512) 			while((ETIFR&0xfb)==0);//等待 timer3中断标志
    003F4 9180 007C LDS	R24,0x7C
    003F6 7F8B      ANDI	R24,0xFB
    003F7 F3E1      BEQ	0x03F4
(0513) 			 // PORTG|=0x01; 
(0514) 			  TPSBAUD
    003F8 EF8E      LDI	R24,0xFE
    003F9 9380 0089 STS	0x89,R24
    003FB E680      LDI	R24,0x60
    003FC 9380 0088 STS	0x88,R24
(0515) 			  ETIFR&=0xfb;           //清timer3中断标志
    003FE 9180 007C LDS	R24,0x7C
    00400 7F8B      ANDI	R24,0xFB
    00401 9380 007C STS	0x7C,R24
(0516) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    00403 9B81      SBIS	0x10,1
    00404 C002      RJMP	0x0407
(0517)                 {rx_buf |= (1 << 5);}
    00405 6240      ORI	R20,0x20
    00406 C001      RJMP	0x0408
(0518)               else
(0519)                 {rx_buf &= ~(1 << 5);}
    00407 7D4F      ANDI	R20,0xDF
(0520) 			
(0521) 			while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00408 9180 007C LDS	R24,0x7C
    0040A 7F8B      ANDI	R24,0xFB
    0040B F3E1      BEQ	0x0408
(0522) 			 // PORTG&=0xfe;
(0523) 			  TPSBAUD
    0040C EF8E      LDI	R24,0xFE
    0040D 9380 0089 STS	0x89,R24
    0040F E680      LDI	R24,0x60
    00410 9380 0088 STS	0x88,R24
(0524) 			  ETIFR&=0xfb;           //清timer3中断标志
    00412 9180 007C LDS	R24,0x7C
    00414 7F8B      ANDI	R24,0xFB
    00415 9380 007C STS	0x7C,R24
(0525) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    00417 9B81      SBIS	0x10,1
    00418 C002      RJMP	0x041B
(0526)                 {rx_buf |= (1 << 6);}
    00419 6440      ORI	R20,0x40
    0041A C001      RJMP	0x041C
(0527)               else
(0528)                 {rx_buf &= ~(1 << 6);}
    0041B 7B4F      ANDI	R20,0xBF
(0529) 			
(0530) 			while((ETIFR&0xfb)==0);//等待 timer3中断标志
    0041C 9180 007C LDS	R24,0x7C
    0041E 7F8B      ANDI	R24,0xFB
    0041F F3E1      BEQ	0x041C
(0531) 			 // PORTG|=0x01; 
(0532) 			  TPSBAUD
    00420 EF8E      LDI	R24,0xFE
    00421 9380 0089 STS	0x89,R24
    00423 E680      LDI	R24,0x60
    00424 9380 0088 STS	0x88,R24
(0533) 			  ETIFR&=0xfb;           //清timer3中断标志
    00426 9180 007C LDS	R24,0x7C
    00428 7F8B      ANDI	R24,0xFB
    00429 9380 007C STS	0x7C,R24
(0534) 			  if (GET_RX())           /* 根据端口电平, 写接收缓冲相应位 */
    0042B 9B81      SBIS	0x10,1
    0042C C002      RJMP	0x042F
(0535)                 {rx_buf |= (1 << 7);}
    0042D 6840      ORI	R20,0x80
    0042E C001      RJMP	0x0430
(0536)               else
(0537)                 {rx_buf &= ~(1 << 7);}
    0042F 774F      ANDI	R20,0x7F
(0538) 						
(0539) 			 while((ETIFR&0xfb)==0);//等待 timer3中断标志
    00430 9180 007C LDS	R24,0x7C
    00432 7F8B      ANDI	R24,0xFB
    00433 F3E1      BEQ	0x0430
(0540) 			// PORTG&=0xfe; 
(0541) 			 TPSBAUD
    00434 EF8E      LDI	R24,0xFE
    00435 9380 0089 STS	0x89,R24
    00437 E680      LDI	R24,0x60
    00438 9380 0088 STS	0x88,R24
(0542) 			 ETIFR&=0xfb;           //清timer3中断标志
    0043A 9180 007C LDS	R24,0x7C
    0043C 7F8B      ANDI	R24,0xFB
    0043D 9380 007C STS	0x7C,R24
(0543) 			 
(0544) 			 TCCR3B = 0x00; //stop  
    0043F 2422      CLR	R2
    00440 9220 008A STS	0x8A,R2
(0545) 	         ETIFR&=0xfb;           //清timer3中断标志
    00442 9180 007C LDS	R24,0x7C
    00444 7F8B      ANDI	R24,0xFB
    00445 9380 007C STS	0x7C,R24
(0546) 			  
(0547) 			if (GET_RX()) //检测到了高电平结束位
    00447 9B81      SBIS	0x10,1
    00448 C001      RJMP	0x044A
(0548) 			 {break;}
    00449 C003      RJMP	0x044D
    0044A B626      IN	R2,0x36
    0044B FE22      SBRS	R2,2
    0044C CF3B      RJMP	0x0388
(0549) 		 }
(0550) 	}
(0551) 	TCCR1B = 0x00; //stop
    0044D 2422      CLR	R2
    0044E BC2E      OUT	0x2E,R2
(0552) 	TIFR|=0x04; //清定时器1中断标志 
    0044F B786      IN	R24,0x36
    00450 6084      ORI	R24,4
    00451 BF86      OUT	0x36,R24
(0553) 	
(0554) 	return rx_buf;
    00452 2F04      MOV	R16,R20
    00453 9149      LD	R20,Y+
    00454 9508      RET
_SampleTPS:
  rx_fifo              --> Y,+0
  cmd                  --> R10
    00455 92AA      ST	-Y,R10
    00456 2EA0      MOV	R10,R16
    00457 9724      SBIW	R28,4
(0555) }
(0556) 
(0557) void SampleTPS(unsigned char cmd)
(0558) {   
(0559)     unsigned char rx_fifo[4];
(0560)    
(0561) 	SendTPS(cmd);  //采样第2路压力温度，数字量或工程量
    00458 2D0A      MOV	R16,R10
    00459 DEB6      RCALL	_SendTPS
(0562) 
(0563) 	rx_fifo[0]=ReceiveTPS();
    0045A DF1F      RCALL	_ReceiveTPS
    0045B 8308      ST	Y,R16
(0564) 	rx_fifo[1]=ReceiveTPS();
    0045C DF1D      RCALL	_ReceiveTPS
    0045D 8309      STD	Y+1,R16
(0565) 	rx_fifo[2]=ReceiveTPS();
    0045E DF1B      RCALL	_ReceiveTPS
    0045F 2EA0      MOV	R10,R16
    00460 82AA      STD	Y+2,R10
(0566) 	rx_fifo[3]=ReceiveTPS();
    00461 DF18      RCALL	_ReceiveTPS
    00462 2EA0      MOV	R10,R16
    00463 82AB      STD	Y+3,R10
(0567) 	
(0568) 	TPS_PData=rx_fifo[1];
    00464 8029      LDD	R2,Y+1
    00465 2433      CLR	R3
    00466 9230 02DE STS	TPS_PData+1,R3
    00468 9220 02DD STS	TPS_PData,R2
(0569) 	TPS_PData<<=8;
    0046A 2C32      MOV	R3,R2
    0046B 2422      CLR	R2
    0046C 9230 02DE STS	TPS_PData+1,R3
    0046E 9220 02DD STS	TPS_PData,R2
(0570) 	TPS_PData|=rx_fifo[0];
    00470 8028      LD	R2,Y
    00471 2433      CLR	R3
    00472 9040 02DD LDS	R4,TPS_PData
    00474 9050 02DE LDS	R5,TPS_PData+1
    00476 2842      OR	R4,R2
    00477 2853      OR	R5,R3
    00478 9250 02DE STS	TPS_PData+1,R5
    0047A 9240 02DD STS	TPS_PData,R4
(0571) 	TPS_TData=rx_fifo[3];
    0047C 2C2A      MOV	R2,R10
    0047D 2433      CLR	R3
    0047E 9230 02DC STS	TPS_TData+1,R3
    00480 9220 02DB STS	TPS_TData,R2
(0572) 	TPS_TData<<=8;
    00482 2C32      MOV	R3,R2
    00483 2422      CLR	R2
    00484 9230 02DC STS	TPS_TData+1,R3
    00486 9220 02DB STS	TPS_TData,R2
(0573) 	TPS_TData|=rx_fifo[2];
    00488 802A      LDD	R2,Y+2
    00489 2433      CLR	R3
    0048A 9040 02DB LDS	R4,TPS_TData
    0048C 9050 02DC LDS	R5,TPS_TData+1
    0048E 2842      OR	R4,R2
    0048F 2853      OR	R5,R3
    00490 9250 02DC STS	TPS_TData+1,R5
    00492 9240 02DB STS	TPS_TData,R4
    00494 9624      ADIW	R28,4
    00495 90A9      LD	R10,Y+
    00496 9508      RET
(0574) }
(0575) 
(0576) 
(0577) //UART0 initialize
(0578) // desired baud rate: 57600
(0579) // actual: baud rate:58824 (2.1%)
(0580) // char size: 8 bit
(0581) // parity: Disabled
(0582) void uart0_init(void)
(0583) {
(0584)  UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    00497 2422      CLR	R2
    00498 B82A      OUT	0x0A,R2
(0585)  UCSR0A = 0x02;
    00499 E082      LDI	R24,2
    0049A B98B      OUT	0x0B,R24
(0586)  UCSR0C = 0x06;
    0049B E086      LDI	R24,6
    0049C 9380 0095 STS	0x95,R24
(0587)  UBRR0L = 0x10; //set baud rate lo 57600
    0049E E180      LDI	R24,0x10
    0049F B989      OUT	0x09,R24
(0588)  UBRR0H = 0x00; //set baud rate hi
    004A0 9220 0090 STS	0x90,R2
(0589)  UCSR0B = 0x98;
    004A2 E988      LDI	R24,0x98
    004A3 B98A      OUT	0x0A,R24
    004A4 9508      RET
_uart0_rx_isr:
    004A5 922A      ST	-Y,R2
    004A6 938A      ST	-Y,R24
    004A7 939A      ST	-Y,R25
    004A8 93EA      ST	-Y,R30
    004A9 93FA      ST	-Y,R31
    004AA B62F      IN	R2,0x3F
    004AB 922A      ST	-Y,R2
(0590) }
(0591) 
(0592) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0593) void uart0_rx_isr(void)//串口0接收中断
(0594) {
(0595)     if(Uart0RxCounter<74)
    004AC 9180 02FA LDS	R24,Uart0RxCounter
    004AE 348A      CPI	R24,0x4A
    004AF F470      BCC	0x04BE
(0596) 	{
(0597)     Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
    004B0 EF8B      LDI	R24,0xFB
    004B1 E092      LDI	R25,2
    004B2 91E0 02FA LDS	R30,Uart0RxCounter
    004B4 27FF      CLR	R31
    004B5 0FE8      ADD	R30,R24
    004B6 1FF9      ADC	R31,R25
    004B7 B02C      IN	R2,0x0C
    004B8 8220      ST	Z,R2
(0598)  	Uart0RxCounter++;
    004B9 9180 02FA LDS	R24,Uart0RxCounter
    004BB 5F8F      SUBI	R24,0xFF
    004BC 9380 02FA STS	Uart0RxCounter,R24
(0599) 	}
    004BE 9029      LD	R2,Y+
    004BF BE2F      OUT	0x3F,R2
    004C0 91F9      LD	R31,Y+
    004C1 91E9      LD	R30,Y+
    004C2 9199      LD	R25,Y+
    004C3 9189      LD	R24,Y+
    004C4 9029      LD	R2,Y+
    004C5 9518      RETI
_timer0_ovf_isr:
    004C6 922A      ST	-Y,R2
    004C7 938A      ST	-Y,R24
    004C8 939A      ST	-Y,R25
    004C9 B62F      IN	R2,0x3F
    004CA 922A      ST	-Y,R2
(0600) }
(0601) 
(0602) #pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
(0603) void timer0_ovf_isr(void)
(0604) {
(0605) Timer0Counter--;
    004CB 9180 0345 LDS	R24,Timer0Counter
    004CD 9190 0346 LDS	R25,Timer0Counter+1
    004CF 9701      SBIW	R24,1
    004D0 9390 0346 STS	Timer0Counter+1,R25
    004D2 9380 0345 STS	Timer0Counter,R24
(0606) if(Timer0Counter==0)
    004D4 3080      CPI	R24,0
    004D5 0789      CPC	R24,R25
    004D6 F461      BNE	0x04E3
(0607) {
(0608)  TCNT0=0;
    004D7 2422      CLR	R2
    004D8 BE22      OUT	0x32,R2
(0609)  TimeOutFlag=1;
    004D9 E081      LDI	R24,1
    004DA 9380 02D9 STS	TimeOutFlag,R24
(0610)  TIMSK&=0xFE;//关定时器0中断
    004DC B787      IN	R24,0x37
    004DD 7F8E      ANDI	R24,0xFE
    004DE BF87      OUT	0x37,R24
(0611)  UCSR0B&=0x7f;//关串口接收中断
    004DF B18A      IN	R24,0x0A
    004E0 778F      ANDI	R24,0x7F
    004E1 B98A      OUT	0x0A,R24
(0612)  }
    004E2 C002      RJMP	0x04E5
(0613)  else
(0614)  {
(0615)  TCNT0=0x06;//定时8ms
    004E3 E086      LDI	R24,6
    004E4 BF82      OUT	0x32,R24
(0616)  }
    004E5 9029      LD	R2,Y+
    004E6 BE2F      OUT	0x3F,R2
    004E7 9199      LD	R25,Y+
    004E8 9189      LD	R24,Y+
    004E9 9029      LD	R2,Y+
    004EA 9518      RETI
_SendUart0_2:
  t                    --> R20
  i                    --> R22
  s                    --> R18
  len                  --> R16
    004EB 934A      ST	-Y,R20
    004EC 936A      ST	-Y,R22
(0617) }
(0618) 
(0619)  
(0620) 
(0621) void SendUart0_2(unsigned char len,unsigned int s)   //串口发送数据
(0622) {//要求流量板在s个8ms内通过串口返回数据
(0623) unsigned char t,i; 	
(0624) 
(0625) for(t=0;t<74;t++)
    004ED 2744      CLR	R20
    004EE C009      RJMP	0x04F8
(0626)   Uart0RxData[t]=0xff;
    004EF EF8B      LDI	R24,0xFB
    004F0 E092      LDI	R25,2
    004F1 2FE4      MOV	R30,R20
    004F2 27FF      CLR	R31
    004F3 0FE8      ADD	R30,R24
    004F4 1FF9      ADC	R31,R25
    004F5 EF8F      LDI	R24,0xFF
    004F6 8380      ST	Z,R24
    004F7 9543      INC	R20
    004F8 344A      CPI	R20,0x4A
    004F9 F3A8      BCS	0x04EF
(0627)   
(0628) Uart0RxCounter=0; //清串口接受计数  
    004FA 2422      CLR	R2
    004FB 9220 02FA STS	Uart0RxCounter,R2
(0629) 
(0630) for(t=0;t<len;t++)
    004FD 2744      CLR	R20
    004FE C010      RJMP	0x050F
(0631) {
(0632) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    004FF 9B5D      SBIS	0x0B,5
    00500 CFFE      RJMP	0x04FF
(0633) for(i=0;i<200;i++);
    00501 2766      CLR	R22
    00502 C001      RJMP	0x0504
    00503 9563      INC	R22
    00504 3C68      CPI	R22,0xC8
    00505 F3E8      BCS	0x0503
(0634) UDR0=Uart0TxData[t];  
    00506 E28F      LDI	R24,0x2F
    00507 E091      LDI	R25,1
    00508 2FE4      MOV	R30,R20
    00509 27FF      CLR	R31
    0050A 0FE8      ADD	R30,R24
    0050B 1FF9      ADC	R31,R25
    0050C 8020      LD	R2,Z
    0050D B82C      OUT	0x0C,R2
    0050E 9543      INC	R20
    0050F 1740      CP	R20,R16
    00510 F370      BCS	0x04FF
(0635) }
(0636)                   
(0637) if(s>0)
    00511 3020      CPI	R18,0
    00512 0723      CPC	R18,R19
    00513 F0F1      BEQ	0x0532
(0638) {
(0639)  //超时设定
(0640) TimeOutFlag=0; //超时标志置0
    00514 2422      CLR	R2
    00515 9220 02D9 STS	TimeOutFlag,R2
(0641) Timer0Counter=s; //8ms定时循环次数
    00517 9330 0346 STS	Timer0Counter+1,R19
    00519 9320 0345 STS	Timer0Counter,R18
(0642) TCNT0=0x06;//定时8ms
    0051B E086      LDI	R24,6
    0051C BF82      OUT	0x32,R24
(0643) TCCR0|=0x06;//256分频
    0051D B783      IN	R24,0x33
    0051E 6086      ORI	R24,6
    0051F BF83      OUT	0x33,R24
(0644) TIFR|=0x01; //清定时器0中断标志
    00520 B786      IN	R24,0x36
    00521 6081      ORI	R24,1
    00522 BF86      OUT	0x36,R24
(0645) TIMSK|=0x01;//使能定时器0中断
    00523 B787      IN	R24,0x37
    00524 6081      ORI	R24,1
    00525 BF87      OUT	0x37,R24
(0646) t=UDR0;//开串口接收中断前读空缓存
    00526 B14C      IN	R20,0x0C
(0647) UCSR0B|=0x80;//开串口接收中断
    00527 9A57      SBI	0x0A,7
(0648) while(TimeOutFlag==0);
    00528 9020 02D9 LDS	R2,TimeOutFlag
    0052A 2022      TST	R2
    0052B F3E1      BEQ	0x0528
(0649) TIMSK&=0xFE;//关定时器0中断
    0052C B787      IN	R24,0x37
    0052D 7F8E      ANDI	R24,0xFE
    0052E BF87      OUT	0x37,R24
(0650) UCSR0B&=0x7f;//关串口接收中断
    0052F B18A      IN	R24,0x0A
    00530 778F      ANDI	R24,0x7F
    00531 B98A      OUT	0x0A,R24
(0651) }
    00532 9169      LD	R22,Y+
    00533 9149      LD	R20,Y+
    00534 9508      RET
_SendUart0_3:
  t                    --> R20
  i                    --> R22
  cn                   --> R10
  s                    --> R18
  len                  --> R16
    00535 940E 1D92 CALL	push_xgsetF00C
    00537 80AE      LDD	R10,Y+6
(0652) }
(0653) 
(0654) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn)   //串口发送数据，不死等，收到采集板返回的cn个字节后即退出，如一直没收到cn个字节，则超时时间s*8ms到后也退出
(0655) {//要求流量板在s个8ms内通过串口返回数据
(0656) unsigned char t,i; 	
(0657) 
(0658) for(t=0;t<74;t++)
    00538 2744      CLR	R20
    00539 C009      RJMP	0x0543
(0659)   Uart0RxData[t]=0xff;
    0053A EF8B      LDI	R24,0xFB
    0053B E092      LDI	R25,2
    0053C 2FE4      MOV	R30,R20
    0053D 27FF      CLR	R31
    0053E 0FE8      ADD	R30,R24
    0053F 1FF9      ADC	R31,R25
    00540 EF8F      LDI	R24,0xFF
    00541 8380      ST	Z,R24
    00542 9543      INC	R20
    00543 344A      CPI	R20,0x4A
    00544 F3A8      BCS	0x053A
(0660)   
(0661) Uart0RxCounter=0; //清串口接受计数  
    00545 2422      CLR	R2
    00546 9220 02FA STS	Uart0RxCounter,R2
(0662) 
(0663) for(t=0;t<len;t++)
    00548 2744      CLR	R20
    00549 C010      RJMP	0x055A
(0664) {
(0665) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    0054A 9B5D      SBIS	0x0B,5
    0054B CFFE      RJMP	0x054A
(0666) for(i=0;i<200;i++);
    0054C 2766      CLR	R22
    0054D C001      RJMP	0x054F
    0054E 9563      INC	R22
    0054F 3C68      CPI	R22,0xC8
    00550 F3E8      BCS	0x054E
(0667) UDR0=Uart0TxData[t];  
    00551 E28F      LDI	R24,0x2F
    00552 E091      LDI	R25,1
    00553 2FE4      MOV	R30,R20
    00554 27FF      CLR	R31
    00555 0FE8      ADD	R30,R24
    00556 1FF9      ADC	R31,R25
    00557 8020      LD	R2,Z
    00558 B82C      OUT	0x0C,R2
    00559 9543      INC	R20
    0055A 1740      CP	R20,R16
    0055B F370      BCS	0x054A
(0668) }
(0669)                   
(0670) if(s>0)
    0055C 3020      CPI	R18,0
    0055D 0723      CPC	R18,R19
    0055E F121      BEQ	0x0583
(0671) {
(0672)  //超时设定
(0673) TimeOutFlag=0; //超时标志置0
    0055F 2422      CLR	R2
    00560 9220 02D9 STS	TimeOutFlag,R2
(0674) Timer0Counter=s; //8ms定时循环次数
    00562 9330 0346 STS	Timer0Counter+1,R19
    00564 9320 0345 STS	Timer0Counter,R18
(0675) TCNT0=0x06;//定时8ms
    00566 E086      LDI	R24,6
    00567 BF82      OUT	0x32,R24
(0676) TCCR0|=0x06;//256分频
    00568 B783      IN	R24,0x33
    00569 6086      ORI	R24,6
    0056A BF83      OUT	0x33,R24
(0677) TIFR|=0x01; //清定时器0中断标志
    0056B B786      IN	R24,0x36
    0056C 6081      ORI	R24,1
    0056D BF86      OUT	0x36,R24
(0678) TIMSK|=0x01;//使能定时器0中断
    0056E B787      IN	R24,0x37
    0056F 6081      ORI	R24,1
    00570 BF87      OUT	0x37,R24
(0679) t=UDR0;//开串口接收中断前读空缓存
    00571 B14C      IN	R20,0x0C
(0680) UCSR0B|=0x80;//开串口接收中断
    00572 9A57      SBI	0x0A,7
    00573 C005      RJMP	0x0579
(0681) while(TimeOutFlag==0)
(0682) {
(0683)  if(Uart0RxCounter>=cn)
    00574 9020 02FA LDS	R2,Uart0RxCounter
    00576 142A      CP	R2,R10
    00577 F008      BCS	0x0579
(0684)    break;
    00578 C004      RJMP	0x057D
    00579 9020 02D9 LDS	R2,TimeOutFlag
    0057B 2022      TST	R2
    0057C F3B9      BEQ	0x0574
(0685) }
(0686) TIMSK&=0xFE;//关定时器0中断
    0057D B787      IN	R24,0x37
    0057E 7F8E      ANDI	R24,0xFE
    0057F BF87      OUT	0x37,R24
(0687) UCSR0B&=0x7f;//关串口接收中断
    00580 B18A      IN	R24,0x0A
    00581 778F      ANDI	R24,0x7F
    00582 B98A      OUT	0x0A,R24
(0688) }
    00583 940C 1D99 JMP	pop_xgsetF00C
_SampleADC:
  adcl                 --> Y,+0
  c                    --> R10
  ADdata               --> R12
  ch                   --> R10
    00585 940E 1DA0 CALL	push_xgsetF03C
    00587 2EA0      MOV	R10,R16
    00588 9724      SBIW	R28,4
(0689) }
(0690) 
(0691)  
(0692)    
(0693) unsigned char SampleADC(unsigned char ch)//耗时约5ms
(0694) {     unsigned char c;
(0695)       unsigned long adcl;
(0696) 	  unsigned int ADdata;
(0697) 
(0698) 	  ADMUX  = (0xc0+ch);//片内2.56V基准，选择单端输入通道 
    00589 2D8A      MOV	R24,R10
    0058A 5480      SUBI	R24,0x40
    0058B B987      OUT	0x07,R24
(0699) 	  ADCSRA =0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    0058C EC83      LDI	R24,0xC3
    0058D B986      OUT	0x06,R24
(0700)    
(0701) 	  //第一次采样值不要
(0702) 	  for(ADdata=0;ADdata<100;ADdata++);
    0058E 24CC      CLR	R12
    0058F 24DD      CLR	R13
    00590 C003      RJMP	0x0594
    00591 01C6      MOVW	R24,R12
    00592 9601      ADIW	R24,1
    00593 016C      MOVW	R12,R24
    00594 01C6      MOVW	R24,R12
    00595 3684      CPI	R24,0x64
    00596 E0E0      LDI	R30,0
    00597 079E      CPC	R25,R30
    00598 F3C0      BCS	0x0591
(0703) 	  while((ADCSRA&0x40)==0x40);//等待转换完成
    00599 B186      IN	R24,0x06
    0059A 7480      ANDI	R24,0x40
    0059B 3480      CPI	R24,0x40
    0059C F3E1      BEQ	0x0599
(0704) 	  ADdata=ADCL;
    0059D B0C4      IN	R12,0x04
    0059E 24DD      CLR	R13
(0705) 	  ADdata=ADCH;  
    0059F B0C5      IN	R12,0x05
    005A0 24DD      CLR	R13
(0706)   
(0707) 	  adcl=0;
    005A1 E080      LDI	R24,0
    005A2 8388      ST	Y,R24
    005A3 8389      STD	Y+1,R24
    005A4 838A      STD	Y+2,R24
    005A5 838B      STD	Y+3,R24
(0708) 	  for(c=0;c<32;c++)//32次值取平均
    005A6 24AA      CLR	R10
    005A7 C02C      RJMP	0x05D4
(0709) 	  {
(0710) 	   ADCSRA = 0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    005A8 EC83      LDI	R24,0xC3
    005A9 B986      OUT	0x06,R24
(0711) 	   for(ADdata=0;ADdata<100;ADdata++);
    005AA 24CC      CLR	R12
    005AB 24DD      CLR	R13
    005AC C003      RJMP	0x05B0
    005AD 01C6      MOVW	R24,R12
    005AE 9601      ADIW	R24,1
    005AF 016C      MOVW	R12,R24
    005B0 01C6      MOVW	R24,R12
    005B1 3684      CPI	R24,0x64
    005B2 E0E0      LDI	R30,0
    005B3 079E      CPC	R25,R30
    005B4 F3C0      BCS	0x05AD
(0712) 	   while((ADCSRA&0x40)==0x40);//等待转换完成	
    005B5 B186      IN	R24,0x06
    005B6 7480      ANDI	R24,0x40
    005B7 3480      CPI	R24,0x40
    005B8 F3E1      BEQ	0x05B5
(0713) 	   ADdata=ADCL;   
    005B9 B0C4      IN	R12,0x04
    005BA 24DD      CLR	R13
(0714) 	   ADdata|=(ADCH<<8);
    005BB B025      IN	R2,0x05
    005BC 2433      CLR	R3
    005BD 2C32      MOV	R3,R2
    005BE 2422      CLR	R2
    005BF 28C2      OR	R12,R2
    005C0 28D3      OR	R13,R3
(0715) 	   ADdata&=0x03ff;//10位有效转换结果
    005C1 01C6      MOVW	R24,R12
    005C2 7093      ANDI	R25,3
    005C3 016C      MOVW	R12,R24
(0716) 	   adcl+=ADdata;
    005C4 011C      MOVW	R2,R24
    005C5 2444      CLR	R4
    005C6 2455      CLR	R5
    005C7 8068      LD	R6,Y
    005C8 8079      LDD	R7,Y+1
    005C9 808A      LDD	R8,Y+2
    005CA 809B      LDD	R9,Y+3
    005CB 0C62      ADD	R6,R2
    005CC 1C73      ADC	R7,R3
    005CD 1C84      ADC	R8,R4
    005CE 1C95      ADC	R9,R5
    005CF 8268      ST	Y,R6
    005D0 8279      STD	Y+1,R7
    005D1 828A      STD	Y+2,R8
    005D2 829B      STD	Y+3,R9
    005D3 94A3      INC	R10
    005D4 2D8A      MOV	R24,R10
    005D5 3280      CPI	R24,0x20
    005D6 F288      BCS	0x05A8
(0717) 	  }
(0718) 
(0719) 	  adcl>>=7;//除以32，再除以4，相当于8位AD
    005D7 E087      LDI	R24,7
    005D8 E090      LDI	R25,0
    005D9 8108      LD	R16,Y
    005DA 8119      LDD	R17,Y+1
    005DB 812A      LDD	R18,Y+2
    005DC 813B      LDD	R19,Y+3
    005DD 938A      ST	-Y,R24
    005DE 940E 1DD4 CALL	lsr32
    005E0 8308      ST	Y,R16
    005E1 8319      STD	Y+1,R17
    005E2 832A      STD	Y+2,R18
    005E3 833B      STD	Y+3,R19
(0720) 	  return (adcl&0x000000ff);//取8位有效位
    005E4 EF4F      LDI	R20,0xFF
    005E5 E050      LDI	R21,0
    005E6 E060      LDI	R22,0
    005E7 E070      LDI	R23,0
    005E8 8028      LD	R2,Y
    005E9 8039      LDD	R3,Y+1
    005EA 804A      LDD	R4,Y+2
    005EB 805B      LDD	R5,Y+3
    005EC 2224      AND	R2,R20
    005ED 2235      AND	R3,R21
    005EE 2246      AND	R4,R22
    005EF 2257      AND	R5,R23
    005F0 2D02      MOV	R16,R2
    005F1 9624      ADIW	R28,4
    005F2 940C 1DA9 JMP	pop_xgsetF03C
_Delay_ms:
  a                    --> Y,+1
  n                    --> R10
  f                    --> Y,+0
  t                    --> R10
    005F4 940E 1D92 CALL	push_xgsetF00C
    005F6 0158      MOVW	R10,R16
    005F7 9724      SBIW	R28,4
(0721) }
(0722) 
(0723) void Delay_ms(unsigned int t)//最大定时8388ms
(0724) {   
(0725)     float f;
(0726) 	unsigned char a;
(0727)     unsigned int n;
(0728) 	
(0729) 	if(t==0){return;}
    005F8 20AA      TST	R10
    005F9 F419      BNE	0x05FD
    005FA 20BB      TST	R11
    005FB F409      BNE	0x05FD
    005FC C03A      RJMP	0x0637
(0730) 	
(0731)     TCCR1B = 0x00; //stop
    005FD 2422      CLR	R2
    005FE BC2E      OUT	0x2E,R2
(0732) 	if(t>8388)
    005FF EC84      LDI	R24,0xC4
    00600 E290      LDI	R25,0x20
    00601 158A      CP	R24,R10
    00602 059B      CPC	R25,R11
    00603 F408      BCC	0x0605
(0733) 	   t=8388;
    00604 015C      MOVW	R10,R24
(0734) 	f=t;
    00605 0185      MOVW	R16,R10
    00606 940E 1E12 CALL	uint2fp
    00608 8308      ST	Y,R16
    00609 8319      STD	Y+1,R17
    0060A 832A      STD	Y+2,R18
    0060B 833B      STD	Y+3,R19
(0735) 	f*=7.8125;
    0060C E908      LDI	R16,0x98
    0060D E010      LDI	R17,0
    0060E 940E 1D68 CALL	elpm32
    00610 01CE      MOVW	R24,R28
    00611 939A      ST	-Y,R25
    00612 938A      ST	-Y,R24
    00613 940E 1FAF CALL	fpmule1
    00615 8308      ST	Y,R16
    00616 8319      STD	Y+1,R17
    00617 832A      STD	Y+2,R18
    00618 833B      STD	Y+3,R19
(0736) 	n=f;
    00619 8108      LD	R16,Y
    0061A 8119      LDD	R17,Y+1
    0061B 812A      LDD	R18,Y+2
    0061C 813B      LDD	R19,Y+3
    0061D 940E 1DE0 CALL	fpint
    0061F 0158      MOVW	R10,R16
(0737)     TCNT1 = 65535-n;  
    00620 0115      MOVW	R2,R10
    00621 2444      CLR	R4
    00622 2455      CLR	R5
    00623 EF4F      LDI	R20,0xFF
    00624 EF5F      LDI	R21,0xFF
    00625 E060      LDI	R22,0
    00626 E070      LDI	R23,0
    00627 1942      SUB	R20,R2
    00628 0953      SBC	R21,R3
    00629 0964      SBC	R22,R4
    0062A 0975      SBC	R23,R5
    0062B BD5D      OUT	0x2D,R21
    0062C BD4C      OUT	0x2C,R20
(0738) 	TIFR|=0x04; //清定时器1中断标志 
    0062D B786      IN	R24,0x36
    0062E 6084      ORI	R24,4
    0062F BF86      OUT	0x36,R24
(0739)  	TCCR1B = 0x05; //1024分频
    00630 E085      LDI	R24,5
    00631 BD8E      OUT	0x2E,R24
(0740)     while((TIFR&0x04)==0x00) ; 
    00632 B626      IN	R2,0x36
    00633 FE22      SBRS	R2,2
    00634 CFFD      RJMP	0x0632
(0741)     TCCR1B = 0x00; //stop
    00635 2422      CLR	R2
    00636 BC2E      OUT	0x2E,R2
    00637 9624      ADIW	R28,4
    00638 940C 1D99 JMP	pop_xgsetF00C
(0742) }
(0743) 
(0744) 
(0745) void Start(void)
(0746) {
(0747)  InitialIO();
_Start:
    0063A DC35      RCALL	_InitialIO
(0748)  uart0_init();
    0063B DE5B      RCALL	_uart0_init
(0749)  uart1_init();
    0063C DC42      RCALL	_uart1_init
(0750) 
(0751)  IntFlag=0;//无接收帧中断
    0063D 2422      CLR	R2
    0063E 9220 02BF STS	IntFlag,R2
(0752)  DataFlag=0;//无标定系数下发 
    00640 2433      CLR	R3
    00641 9230 02C2 STS	DataFlag+1,R3
    00643 9220 02C1 STS	DataFlag,R2
(0753)  coeff_len=0;
    00645 9230 012D STS	coeff_len+1,R3
    00647 9220 012C STS	coeff_len,R2
(0754)  coeff_count=0;//标定系数计数
    00649 9230 012B STS	coeff_count+1,R3
    0064B 9220 012A STS	coeff_count,R2
(0755)  
(0756) 
(0757)  
(0758) 	EICRA|=0x03; //INT0上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发 
    0064D 9180 006A LDS	R24,0x6A
    0064F 6083      ORI	R24,3
    00650 9380 006A STS	0x6A,R24
(0759) 	MANINT_CLR
    00652 B788      IN	R24,0x38
    00653 6081      ORI	R24,1
    00654 BF88      OUT	0x38,R24
(0760) 	MANINT_EN
    00655 B789      IN	R24,0x39
    00656 6081      ORI	R24,1
    00657 BF89      OUT	0x39,R24
(0761) 	INT_EN
    00658 9478      BSET	7
    00659 9508      RET
_main:
  pt                   --> Y,+2
  mk                   --> Y,+2
  at                   --> Y,+2
  add                  --> Y,+2
  f                    --> Y,+5
  TestDataBlockCount   --> R12
  TestDataBlockIndex   --> R10
  i                    --> R10
  l                    --> Y,+1
  j                    --> R10
    0065A 9729      SBIW	R28,0x9
(0762) }
(0763) 
(0764)  
(0765) 
(0766) void main(void)
(0767) { 
(0768)   unsigned char i;
(0769)   unsigned int add,at,mk,pt,j;
(0770)   unsigned long l;
(0771)   unsigned int TestDataBlockIndex,TestDataBlockCount;
(0772)   float f;
(0773)  
(0774) 	for(l=0;l<1000;l++)
    0065B E080      LDI	R24,0
    0065C 8389      STD	Y+1,R24
    0065D 838A      STD	Y+2,R24
    0065E 838B      STD	Y+3,R24
    0065F 838C      STD	Y+4,R24
    00660 C01B      RJMP	0x067C
(0775) 	{
(0776) 		for(j=0;j<1000;j++);
    00661 24AA      CLR	R10
    00662 24BB      CLR	R11
    00663 C003      RJMP	0x0667
    00664 01C5      MOVW	R24,R10
    00665 9601      ADIW	R24,1
    00666 015C      MOVW	R10,R24
    00667 01C5      MOVW	R24,R10
    00668 3E88      CPI	R24,0xE8
    00669 E0E3      LDI	R30,3
    0066A 079E      CPC	R25,R30
    0066B F3C0      BCS	0x0664
    0066C E041      LDI	R20,1
    0066D E050      LDI	R21,0
    0066E E060      LDI	R22,0
    0066F E070      LDI	R23,0
    00670 8029      LDD	R2,Y+1
    00671 803A      LDD	R3,Y+2
    00672 804B      LDD	R4,Y+3
    00673 805C      LDD	R5,Y+4
    00674 0E24      ADD	R2,R20
    00675 1E35      ADC	R3,R21
    00676 1E46      ADC	R4,R22
    00677 1E57      ADC	R5,R23
    00678 8229      STD	Y+1,R2
    00679 823A      STD	Y+2,R3
    0067A 824B      STD	Y+3,R4
    0067B 825C      STD	Y+4,R5
    0067C EE48      LDI	R20,0xE8
    0067D E053      LDI	R21,3
    0067E E060      LDI	R22,0
    0067F E070      LDI	R23,0
    00680 8029      LDD	R2,Y+1
    00681 803A      LDD	R3,Y+2
    00682 804B      LDD	R4,Y+3
    00683 805C      LDD	R5,Y+4
    00684 1624      CP	R2,R20
    00685 0635      CPC	R3,R21
    00686 0646      CPC	R4,R22
    00687 0657      CPC	R5,R23
    00688 F2C0      BCS	0x0661
(0777) 	}
(0778) 
(0779) 	Start();
    00689 DFB0      RCALL	_Start
(0780) 
(0781)    Delay_ms(50); 
    0068A E302      LDI	R16,0x32
    0068B E010      LDI	R17,0
    0068C DF67      RCALL	_Delay_ms
(0782) 
(0783) 
(0784)    
(0785) 	//采集总线电压，判断是否进入存储状态  
(0786) 	if(SampleADC(0)<30)//Cable端的电压低于30V 
    0068D 2700      CLR	R16
    0068E DEF6      RCALL	_SampleADC
    0068F 310E      CPI	R16,0x1E
    00690 F010      BCS	0x0693
    00691 940C 18BD JMP	0x18BD
(0787) 	{	  
(0788) 		UCSR0B = 0x00;
    00693 2422      CLR	R2
    00694 B82A      OUT	0x0A,R2
(0789) 		PORTE&=0xFD;
    00695 B183      IN	R24,0x03
    00696 7F8D      ANDI	R24,0xFD
    00697 B983      OUT	0x03,R24
(0790) 		DDRE|=0x02;
    00698 9A11      SBI	0x02,1
(0791) 		PORTE&=0xFD;	 
    00699 B183      IN	R24,0x03
    0069A 7F8D      ANDI	R24,0xFD
    0069B B983      OUT	0x03,R24
(0792) 		while(1); 
    0069C CFFF      RJMP	0x069C
(0793) 	}
(0794) 	     
(0795) 	while(1)//若Cable端为高电压，则进入正常的通讯状态
(0796) 	{ 
(0797) 		 
(0798) 
(0799) 		if(IntFlag==2)//校验位错误，不上传任何响应，上位机按超时处理
    0069D 9180 02BF LDS	R24,IntFlag
    0069F 3082      CPI	R24,2
    006A0 F459      BNE	0x06AC
(0800) 		{ 
(0801) 			IntFlag=0;//无命令帧
    006A1 2422      CLR	R2
    006A2 9220 02BF STS	IntFlag,R2
(0802) 			EIFR|=0x01;//清INT0中断标志
    006A4 B788      IN	R24,0x38
    006A5 6081      ORI	R24,1
    006A6 BF88      OUT	0x38,R24
(0803) 			EIMSK|=0x01;//使能INT0中断	 
    006A7 B789      IN	R24,0x39
    006A8 6081      ORI	R24,1
    006A9 BF89      OUT	0x39,R24
(0804) 		}
    006AA 940C 18BD JMP	0x18BD
(0805) 		else if(IntFlag==1)//接收到了正常命令帧
    006AC 9180 02BF LDS	R24,IntFlag
    006AE 3081      CPI	R24,1
    006AF F011      BEQ	0x06B2
    006B0 940C 18BD JMP	0x18BD
(0806) 		{
(0807) 			if(DataFlag)
    006B2 9020 02C1 LDS	R2,DataFlag
    006B4 9030 02C2 LDS	R3,DataFlag+1
    006B6 2022      TST	R2
    006B7 F419      BNE	0x06BB
    006B8 2033      TST	R3
    006B9 F409      BNE	0x06BB
    006BA C4B4      RJMP	0x0B6F
(0808) 			{ 		  
(0809) 				coeffdata[coeff_count]=R_dat;
    006BB E789      LDI	R24,0x79
    006BC E091      LDI	R25,1
    006BD 91E0 012A LDS	R30,coeff_count
    006BF 91F0 012B LDS	R31,coeff_count+1
    006C1 0FE8      ADD	R30,R24
    006C2 1FF9      ADC	R31,R25
    006C3 9020 02DF LDS	R2,R_dat
    006C5 9030 02E0 LDS	R3,R_dat+1
    006C7 8220      ST	Z,R2
(0810) 				coeff_count++;	  
    006C8 9180 012A LDS	R24,coeff_count
    006CA 9190 012B LDS	R25,coeff_count+1
    006CC 9601      ADIW	R24,1
    006CD 9390 012B STS	coeff_count+1,R25
    006CF 9380 012A STS	coeff_count,R24
(0811) 
(0812) 				if(coeff_count==coeff_len)
    006D1 9020 012C LDS	R2,coeff_len
    006D3 9030 012D LDS	R3,coeff_len+1
    006D5 1582      CP	R24,R2
    006D6 0593      CPC	R25,R3
    006D7 F011      BEQ	0x06DA
    006D8 940C 18B4 JMP	0x18B4
(0813) 				{
(0814) 					if(DataFlag==1)//下发压力温度系数
    006DA 9180 02C1 LDS	R24,DataFlag
    006DC 9190 02C2 LDS	R25,DataFlag+1
    006DE 3081      CPI	R24,1
    006DF E0E0      LDI	R30,0
    006E0 079E      CPC	R25,R30
    006E1 F009      BEQ	0x06E3
    006E2 C0E5      RJMP	0x07C8
(0815) 					{
(0816) 						Uart0TxData[0]=0xE8;
    006E3 EE88      LDI	R24,0xE8
    006E4 9380 012F STS	Uart0TxData,R24
(0817) 						Uart0TxData[1]=0x40;
    006E6 E480      LDI	R24,0x40
    006E7 9380 0130 STS	Uart0TxData+1,R24
(0818) 						Uart0TxData[2]=0x88;
    006E9 E888      LDI	R24,0x88
    006EA 9380 0131 STS	Uart0TxData+2,R24
(0819) 						Uart0TxData[3]=0;//压力温度系数包0
    006EC 2422      CLR	R2
    006ED 9220 0132 STS	Uart0TxData+3,R2
(0820) 						Uart0TxData[4]=0x21;
    006EF E281      LDI	R24,0x21
    006F0 9380 0133 STS	Uart0TxData+4,R24
(0821) 						Uart0TxData[5]=0x22;
    006F2 E282      LDI	R24,0x22
    006F3 9380 0134 STS	Uart0TxData+5,R24
(0822) 						Uart0TxData[6]=0x23;
    006F5 E283      LDI	R24,0x23
    006F6 9380 0135 STS	Uart0TxData+6,R24
(0823) 						Uart0TxData[7]=0x24;
    006F8 E284      LDI	R24,0x24
    006F9 9380 0136 STS	Uart0TxData+7,R24
(0824) 						Uart0TxData[8]=0x32;	 
    006FB E382      LDI	R24,0x32
    006FC 9380 0137 STS	Uart0TxData+8,R24
(0825) 						for(k=0;k<64;k++)
    006FE 2433      CLR	R3
    006FF 9230 02BC STS	k+1,R3
    00701 9220 02BB STS	k,R2
    00703 C01A      RJMP	0x071E
(0826) 						{
(0827) 							Uart0TxData[9+k]=coeffdata[k];  
    00704 9040 02BB LDS	R4,k
    00706 9050 02BC LDS	R5,k+1
    00708 E789      LDI	R24,0x79
    00709 E091      LDI	R25,1
    0070A 01F2      MOVW	R30,R4
    0070B 0FE8      ADD	R30,R24
    0070C 1FF9      ADC	R31,R25
    0070D 8020      LD	R2,Z
    0070E E28F      LDI	R24,0x2F
    0070F E091      LDI	R25,1
    00710 01F2      MOVW	R30,R4
    00711 9639      ADIW	R30,0x9
    00712 0FE8      ADD	R30,R24
    00713 1FF9      ADC	R31,R25
    00714 8220      ST	Z,R2
    00715 9180 02BB LDS	R24,k
    00717 9190 02BC LDS	R25,k+1
    00719 9601      ADIW	R24,1
    0071A 9390 02BC STS	k+1,R25
    0071C 9380 02BB STS	k,R24
    0071E 9180 02BB LDS	R24,k
    00720 9190 02BC LDS	R25,k+1
    00722 3480      CPI	R24,0x40
    00723 E0E0      LDI	R30,0
    00724 079E      CPC	R25,R30
    00725 F2F0      BCS	0x0704
(0828) 						}		 
(0829) 						SendUart0_2(74,20);//超时160ms
    00726 E124      LDI	R18,0x14
    00727 E030      LDI	R19,0
    00728 E40A      LDI	R16,0x4A
    00729 DDC1      RCALL	_SendUart0_2
(0830) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    0072A 9180 02FA LDS	R24,Uart0RxCounter
    0072C 3089      CPI	R24,0x9
    0072D F4B1      BNE	0x0744
    0072E 9180 02FB LDS	R24,Uart0RxData
    00730 3585      CPI	R24,0x55
    00731 F491      BNE	0x0744
    00732 9180 02FC LDS	R24,Uart0RxData+1
    00734 3480      CPI	R24,0x40
    00735 F471      BNE	0x0744
    00736 9180 02FD LDS	R24,Uart0RxData+2
    00738 3888      CPI	R24,0x88
    00739 F451      BNE	0x0744
(0831) 						{T_dat&=0xff00; }
    0073A 9180 02E1 LDS	R24,T_dat
    0073C 9190 02E2 LDS	R25,T_dat+1
    0073E 7080      ANDI	R24,0
    0073F 9390 02E2 STS	T_dat+1,R25
    00741 9380 02E1 STS	T_dat,R24
    00743 C006      RJMP	0x074A
(0832) 						else
(0833) 						{T_dat=0x00aa; }
    00744 EA8A      LDI	R24,0xAA
    00745 E090      LDI	R25,0
    00746 9390 02E2 STS	T_dat+1,R25
    00748 9380 02E1 STS	T_dat,R24
(0834) 
(0835) 						Uart0TxData[0]=0xE8;
    0074A EE88      LDI	R24,0xE8
    0074B 9380 012F STS	Uart0TxData,R24
(0836) 						Uart0TxData[1]=0x40;
    0074D E480      LDI	R24,0x40
    0074E 9380 0130 STS	Uart0TxData+1,R24
(0837) 						Uart0TxData[2]=0x88;
    00750 E888      LDI	R24,0x88
    00751 9380 0131 STS	Uart0TxData+2,R24
(0838) 						Uart0TxData[3]=1;//压力温度系数包1
    00753 E081      LDI	R24,1
    00754 9380 0132 STS	Uart0TxData+3,R24
(0839) 						Uart0TxData[4]=0x21;
    00756 E281      LDI	R24,0x21
    00757 9380 0133 STS	Uart0TxData+4,R24
(0840) 						Uart0TxData[5]=0x22;
    00759 E282      LDI	R24,0x22
    0075A 9380 0134 STS	Uart0TxData+5,R24
(0841) 						Uart0TxData[6]=0x23;
    0075C E283      LDI	R24,0x23
    0075D 9380 0135 STS	Uart0TxData+6,R24
(0842) 						Uart0TxData[7]=0x24;
    0075F E284      LDI	R24,0x24
    00760 9380 0136 STS	Uart0TxData+7,R24
(0843) 						Uart0TxData[8]=0x32;	 
    00762 E382      LDI	R24,0x32
    00763 9380 0137 STS	Uart0TxData+8,R24
(0844) 						for(k=0;k<64;k++)
    00765 2422      CLR	R2
    00766 2433      CLR	R3
    00767 9230 02BC STS	k+1,R3
    00769 9220 02BB STS	k,R2
    0076B C01C      RJMP	0x0788
(0845) 						{
(0846) 							Uart0TxData[9+k]=coeffdata[k+64];  
    0076C 90A0 02BB LDS	R10,k
    0076E 90B0 02BC LDS	R11,k+1
    00770 E789      LDI	R24,0x79
    00771 E091      LDI	R25,1
    00772 01F5      MOVW	R30,R10
    00773 5CE0      SUBI	R30,0xC0
    00774 4FFF      SBCI	R31,0xFF
    00775 0FE8      ADD	R30,R24
    00776 1FF9      ADC	R31,R25
    00777 8020      LD	R2,Z
    00778 E28F      LDI	R24,0x2F
    00779 E091      LDI	R25,1
    0077A 01F5      MOVW	R30,R10
    0077B 9639      ADIW	R30,0x9
    0077C 0FE8      ADD	R30,R24
    0077D 1FF9      ADC	R31,R25
    0077E 8220      ST	Z,R2
    0077F 9180 02BB LDS	R24,k
    00781 9190 02BC LDS	R25,k+1
    00783 9601      ADIW	R24,1
    00784 9390 02BC STS	k+1,R25
    00786 9380 02BB STS	k,R24
    00788 9180 02BB LDS	R24,k
    0078A 9190 02BC LDS	R25,k+1
    0078C 3480      CPI	R24,0x40
    0078D E0E0      LDI	R30,0
    0078E 079E      CPC	R25,R30
    0078F F2E0      BCS	0x076C
(0847) 						}		 
(0848) 						SendUart0_2(74,20);//超时160ms
    00790 E124      LDI	R18,0x14
    00791 E030      LDI	R19,0
    00792 E40A      LDI	R16,0x4A
    00793 DD57      RCALL	_SendUart0_2
(0849) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00794 9180 02FA LDS	R24,Uart0RxCounter
    00796 3089      CPI	R24,0x9
    00797 F4B1      BNE	0x07AE
    00798 9180 02FB LDS	R24,Uart0RxData
    0079A 3585      CPI	R24,0x55
    0079B F491      BNE	0x07AE
    0079C 9180 02FC LDS	R24,Uart0RxData+1
    0079E 3480      CPI	R24,0x40
    0079F F471      BNE	0x07AE
    007A0 9180 02FD LDS	R24,Uart0RxData+2
    007A2 3888      CPI	R24,0x88
    007A3 F451      BNE	0x07AE
(0850) 						{T_dat&=0x00ff; }
    007A4 9180 02E1 LDS	R24,T_dat
    007A6 9190 02E2 LDS	R25,T_dat+1
    007A8 7090      ANDI	R25,0
    007A9 9390 02E2 STS	T_dat+1,R25
    007AB 9380 02E1 STS	T_dat,R24
    007AD C009      RJMP	0x07B7
(0851) 						else
(0852) 						{T_dat|=0x5500; }
    007AE 9180 02E1 LDS	R24,T_dat
    007B0 9190 02E2 LDS	R25,T_dat+1
    007B2 6595      ORI	R25,0x55
    007B3 9390 02E2 STS	T_dat+1,R25
    007B5 9380 02E1 STS	T_dat,R24
(0853) 
(0854) 						DataFlag=0;
    007B7 2422      CLR	R2
    007B8 2433      CLR	R3
    007B9 9230 02C2 STS	DataFlag+1,R3
    007BB 9220 02C1 STS	DataFlag,R2
(0855) 						coeff_len=0;	
    007BD 9230 012D STS	coeff_len+1,R3
    007BF 9220 012C STS	coeff_len,R2
(0856) 						T_com=0x0A;
    007C1 E08A      LDI	R24,0xA
    007C2 9380 02DA STS	T_com,R24
(0857) 						SendManchester();		
    007C4 940E 18C1 CALL	_SendManchester
(0858) 					}
    007C6 940C 18B4 JMP	0x18B4
(0859) 					else if(DataFlag==2)//下发流量系数
    007C8 9180 02C1 LDS	R24,DataFlag
    007CA 9190 02C2 LDS	R25,DataFlag+1
    007CC 3082      CPI	R24,2
    007CD E0E0      LDI	R30,0
    007CE 079E      CPC	R25,R30
    007CF F009      BEQ	0x07D1
    007D0 C0E6      RJMP	0x08B7
(0860) 					{
(0861) 						Uart0TxData[0]=0xE8;
    007D1 EE88      LDI	R24,0xE8
    007D2 9380 012F STS	Uart0TxData,R24
(0862) 						Uart0TxData[1]=0x40;
    007D4 E480      LDI	R24,0x40
    007D5 9380 0130 STS	Uart0TxData+1,R24
(0863) 						Uart0TxData[2]=0x88;
    007D7 E888      LDI	R24,0x88
    007D8 9380 0131 STS	Uart0TxData+2,R24
(0864) 						Uart0TxData[3]=2;//流量系数包2
    007DA E082      LDI	R24,2
    007DB 9380 0132 STS	Uart0TxData+3,R24
(0865) 						Uart0TxData[4]=0x21;
    007DD E281      LDI	R24,0x21
    007DE 9380 0133 STS	Uart0TxData+4,R24
(0866) 						Uart0TxData[5]=0x22;
    007E0 E282      LDI	R24,0x22
    007E1 9380 0134 STS	Uart0TxData+5,R24
(0867) 						Uart0TxData[6]=0x23;
    007E3 E283      LDI	R24,0x23
    007E4 9380 0135 STS	Uart0TxData+6,R24
(0868) 						Uart0TxData[7]=0x24;
    007E6 E284      LDI	R24,0x24
    007E7 9380 0136 STS	Uart0TxData+7,R24
(0869) 						Uart0TxData[8]=0x32;	 
    007E9 E382      LDI	R24,0x32
    007EA 9380 0137 STS	Uart0TxData+8,R24
(0870) 						for(k=0;k<64;k++)
    007EC 2422      CLR	R2
    007ED 2433      CLR	R3
    007EE 9230 02BC STS	k+1,R3
    007F0 9220 02BB STS	k,R2
    007F2 C01A      RJMP	0x080D
(0871) 						{
(0872) 							Uart0TxData[9+k]=coeffdata[k];  
    007F3 90A0 02BB LDS	R10,k
    007F5 90B0 02BC LDS	R11,k+1
    007F7 E789      LDI	R24,0x79
    007F8 E091      LDI	R25,1
    007F9 01F5      MOVW	R30,R10
    007FA 0FE8      ADD	R30,R24
    007FB 1FF9      ADC	R31,R25
    007FC 8020      LD	R2,Z
    007FD E28F      LDI	R24,0x2F
    007FE E091      LDI	R25,1
    007FF 01F5      MOVW	R30,R10
    00800 9639      ADIW	R30,0x9
    00801 0FE8      ADD	R30,R24
    00802 1FF9      ADC	R31,R25
    00803 8220      ST	Z,R2
    00804 9180 02BB LDS	R24,k
    00806 9190 02BC LDS	R25,k+1
    00808 9601      ADIW	R24,1
    00809 9390 02BC STS	k+1,R25
    0080B 9380 02BB STS	k,R24
    0080D 9180 02BB LDS	R24,k
    0080F 9190 02BC LDS	R25,k+1
    00811 3480      CPI	R24,0x40
    00812 E0E0      LDI	R30,0
    00813 079E      CPC	R25,R30
    00814 F2F0      BCS	0x07F3
(0873) 						}		 
(0874) 						SendUart0_2(74,20);//超时160ms
    00815 E124      LDI	R18,0x14
    00816 E030      LDI	R19,0
    00817 E40A      LDI	R16,0x4A
    00818 DCD2      RCALL	_SendUart0_2
(0875) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00819 9180 02FA LDS	R24,Uart0RxCounter
    0081B 3089      CPI	R24,0x9
    0081C F4B1      BNE	0x0833
    0081D 9180 02FB LDS	R24,Uart0RxData
    0081F 3585      CPI	R24,0x55
    00820 F491      BNE	0x0833
    00821 9180 02FC LDS	R24,Uart0RxData+1
    00823 3480      CPI	R24,0x40
    00824 F471      BNE	0x0833
    00825 9180 02FD LDS	R24,Uart0RxData+2
    00827 3888      CPI	R24,0x88
    00828 F451      BNE	0x0833
(0876) 						{T_dat&=0xff00; }
    00829 9180 02E1 LDS	R24,T_dat
    0082B 9190 02E2 LDS	R25,T_dat+1
    0082D 7080      ANDI	R24,0
    0082E 9390 02E2 STS	T_dat+1,R25
    00830 9380 02E1 STS	T_dat,R24
    00832 C006      RJMP	0x0839
(0877) 						else
(0878) 						{T_dat=0x00aa; }
    00833 EA8A      LDI	R24,0xAA
    00834 E090      LDI	R25,0
    00835 9390 02E2 STS	T_dat+1,R25
    00837 9380 02E1 STS	T_dat,R24
(0879) 
(0880) 						Uart0TxData[0]=0xE8;
    00839 EE88      LDI	R24,0xE8
    0083A 9380 012F STS	Uart0TxData,R24
(0881) 						Uart0TxData[1]=0x40;
    0083C E480      LDI	R24,0x40
    0083D 9380 0130 STS	Uart0TxData+1,R24
(0882) 						Uart0TxData[2]=0x88;
    0083F E888      LDI	R24,0x88
    00840 9380 0131 STS	Uart0TxData+2,R24
(0883) 						Uart0TxData[3]=3;//流量系数包3
    00842 E083      LDI	R24,3
    00843 9380 0132 STS	Uart0TxData+3,R24
(0884) 						Uart0TxData[4]=0x21;
    00845 E281      LDI	R24,0x21
    00846 9380 0133 STS	Uart0TxData+4,R24
(0885) 						Uart0TxData[5]=0x22;
    00848 E282      LDI	R24,0x22
    00849 9380 0134 STS	Uart0TxData+5,R24
(0886) 						Uart0TxData[6]=0x23;
    0084B E283      LDI	R24,0x23
    0084C 9380 0135 STS	Uart0TxData+6,R24
(0887) 						Uart0TxData[7]=0x24;
    0084E E284      LDI	R24,0x24
    0084F 9380 0136 STS	Uart0TxData+7,R24
(0888) 						Uart0TxData[8]=0x32;	 
    00851 E382      LDI	R24,0x32
    00852 9380 0137 STS	Uart0TxData+8,R24
(0889) 						for(k=0;k<64;k++)
    00854 2422      CLR	R2
    00855 2433      CLR	R3
    00856 9230 02BC STS	k+1,R3
    00858 9220 02BB STS	k,R2
    0085A C01C      RJMP	0x0877
(0890) 						{
(0891) 							Uart0TxData[9+k]=coeffdata[k+64];  
    0085B 90A0 02BB LDS	R10,k
    0085D 90B0 02BC LDS	R11,k+1
    0085F E789      LDI	R24,0x79
    00860 E091      LDI	R25,1
    00861 01F5      MOVW	R30,R10
    00862 5CE0      SUBI	R30,0xC0
    00863 4FFF      SBCI	R31,0xFF
    00864 0FE8      ADD	R30,R24
    00865 1FF9      ADC	R31,R25
    00866 8020      LD	R2,Z
    00867 E28F      LDI	R24,0x2F
    00868 E091      LDI	R25,1
    00869 01F5      MOVW	R30,R10
    0086A 9639      ADIW	R30,0x9
    0086B 0FE8      ADD	R30,R24
    0086C 1FF9      ADC	R31,R25
    0086D 8220      ST	Z,R2
    0086E 9180 02BB LDS	R24,k
    00870 9190 02BC LDS	R25,k+1
    00872 9601      ADIW	R24,1
    00873 9390 02BC STS	k+1,R25
    00875 9380 02BB STS	k,R24
    00877 9180 02BB LDS	R24,k
    00879 9190 02BC LDS	R25,k+1
    0087B 3480      CPI	R24,0x40
    0087C E0E0      LDI	R30,0
    0087D 079E      CPC	R25,R30
    0087E F2E0      BCS	0x085B
(0892) 						}		 
(0893) 						SendUart0_2(74,20);//超时160ms
    0087F E124      LDI	R18,0x14
    00880 E030      LDI	R19,0
    00881 E40A      LDI	R16,0x4A
    00882 DC68      RCALL	_SendUart0_2
(0894) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00883 9180 02FA LDS	R24,Uart0RxCounter
    00885 3089      CPI	R24,0x9
    00886 F4B1      BNE	0x089D
    00887 9180 02FB LDS	R24,Uart0RxData
    00889 3585      CPI	R24,0x55
    0088A F491      BNE	0x089D
    0088B 9180 02FC LDS	R24,Uart0RxData+1
    0088D 3480      CPI	R24,0x40
    0088E F471      BNE	0x089D
    0088F 9180 02FD LDS	R24,Uart0RxData+2
    00891 3888      CPI	R24,0x88
    00892 F451      BNE	0x089D
(0895) 						{T_dat&=0x00ff; }
    00893 9180 02E1 LDS	R24,T_dat
    00895 9190 02E2 LDS	R25,T_dat+1
    00897 7090      ANDI	R25,0
    00898 9390 02E2 STS	T_dat+1,R25
    0089A 9380 02E1 STS	T_dat,R24
    0089C C009      RJMP	0x08A6
(0896) 						else
(0897) 						{T_dat|=0x5500; }
    0089D 9180 02E1 LDS	R24,T_dat
    0089F 9190 02E2 LDS	R25,T_dat+1
    008A1 6595      ORI	R25,0x55
    008A2 9390 02E2 STS	T_dat+1,R25
    008A4 9380 02E1 STS	T_dat,R24
(0898) 
(0899) 						DataFlag=0;
    008A6 2422      CLR	R2
    008A7 2433      CLR	R3
    008A8 9230 02C2 STS	DataFlag+1,R3
    008AA 9220 02C1 STS	DataFlag,R2
(0900) 						coeff_len=0;	
    008AC 9230 012D STS	coeff_len+1,R3
    008AE 9220 012C STS	coeff_len,R2
(0901) 						T_com=0x0B;
    008B0 E08B      LDI	R24,0xB
    008B1 9380 02DA STS	T_com,R24
(0902) 						SendManchester();		
    008B3 940E 18C1 CALL	_SendManchester
(0903) 					}	
    008B5 940C 18B4 JMP	0x18B4
(0904) 					else if(DataFlag==3)//提取测试数据
    008B7 9180 02C1 LDS	R24,DataFlag
    008B9 9190 02C2 LDS	R25,DataFlag+1
    008BB 3083      CPI	R24,3
    008BC E0E0      LDI	R30,0
    008BD 079E      CPC	R25,R30
    008BE F009      BEQ	0x08C0
    008BF C0A4      RJMP	0x0964
(0905) 					{
(0906) 						DataFlag=0;
    008C0 2422      CLR	R2
    008C1 2433      CLR	R3
    008C2 9230 02C2 STS	DataFlag+1,R3
    008C4 9220 02C1 STS	DataFlag,R2
(0907) 						coeff_len=0;	
    008C6 9230 012D STS	coeff_len+1,R3
    008C8 9220 012C STS	coeff_len,R2
(0908) 						T_com=0x09;
    008CA E089      LDI	R24,0x9
    008CB 9380 02DA STS	T_com,R24
(0909) 						TestDataBlockIndex=coeffdata[1];
    008CD 90A0 017A LDS	R10,coeffdata+1
    008CF 24BB      CLR	R11
(0910) 						TestDataBlockIndex<<=8;
    008D0 2CBA      MOV	R11,R10
    008D1 24AA      CLR	R10
(0911) 						TestDataBlockIndex|=coeffdata[0];//首块地址/索引
    008D2 9020 0179 LDS	R2,coeffdata
    008D4 2433      CLR	R3
    008D5 28A2      OR	R10,R2
    008D6 28B3      OR	R11,R3
(0912) 						TestDataBlockCount=coeffdata[3];
    008D7 90C0 017C LDS	R12,coeffdata+3
    008D9 24DD      CLR	R13
(0913) 						TestDataBlockCount<<=8;
    008DA 2CDC      MOV	R13,R12
    008DB 24CC      CLR	R12
(0914) 						TestDataBlockCount|=coeffdata[2];//需提取的总包数，每包64字节，每块4096字节共64包
    008DC 9020 017B LDS	R2,coeffdata+2
    008DE 2433      CLR	R3
    008DF 28C2      OR	R12,R2
    008E0 28D3      OR	R13,R3
(0915) 
(0916) 						for(k=0;k<TestDataBlockCount;k++)//按用户要求分包进行上传，每包64字节传32帧
    008E1 2422      CLR	R2
    008E2 9230 02BC STS	k+1,R3
    008E4 9220 02BB STS	k,R2
    008E6 C073      RJMP	0x095A
(0917) 						{
(0918) 							Uart0TxData[0]=0xE8;
    008E7 EE88      LDI	R24,0xE8
    008E8 9380 012F STS	Uart0TxData,R24
(0919) 							Uart0TxData[1]=0x40;
    008EA E480      LDI	R24,0x40
    008EB 9380 0130 STS	Uart0TxData+1,R24
(0920) 							Uart0TxData[2]=0x9A;//读测试数据
    008ED E98A      LDI	R24,0x9A
    008EE 9380 0131 STS	Uart0TxData+2,R24
(0921) 							Uart0TxData[3]=8;
    008F0 E088      LDI	R24,0x8
    008F1 9380 0132 STS	Uart0TxData+3,R24
(0922) 
(0923) 							//统一块索引
(0924) 							Uart0TxData[4]=(k); 	
    008F3 9020 02BB LDS	R2,k
    008F5 9030 02BC LDS	R3,k+1
    008F7 9220 0133 STS	Uart0TxData+4,R2
(0925) 							Uart0TxData[5]=(k>>8); 	//包索引	
    008F9 2C23      MOV	R2,R3
    008FA 2433      CLR	R3
    008FB 9220 0134 STS	Uart0TxData+5,R2
(0926) 							Uart0TxData[6]=(TestDataBlockIndex);
    008FD 92A0 0135 STS	Uart0TxData+6,R10
(0927) 							Uart0TxData[7]=(TestDataBlockIndex>>8);//首块索引
    008FF 0115      MOVW	R2,R10
    00900 2C23      MOV	R2,R3
    00901 2433      CLR	R3
    00902 9220 0136 STS	Uart0TxData+7,R2
(0928) 
(0929) 							/*
(0930) 							// 单独块索引
(0931) 							Uart0TxData[4]=(k%8); 	
(0932) 							Uart0TxData[5]=0; 	//包索引	
(0933) 							Uart0TxData[6]=(TestDataBlockIndex+k/8);
(0934) 							Uart0TxData[7]=((TestDataBlockIndex+k/8)>>8);//首块索引
(0935) 							*/
(0936) 
(0937) 							SendUart0_2(9,6);//超时48ms
    00904 E026      LDI	R18,6
    00905 E030      LDI	R19,0
    00906 E009      LDI	R16,0x9
    00907 DBE3      RCALL	_SendUart0_2
(0938) 							for(bf=0;bf<32;bf++)
    00908 2422      CLR	R2
    00909 2433      CLR	R3
    0090A 9230 0127 STS	bf+1,R3
    0090C 9220 0126 STS	bf,R2
    0090E C039      RJMP	0x0948
(0939) 							{	   	
(0940) 								T_dat=Uart0RxData[bf*2+1];//高字节
    0090F EF8B      LDI	R24,0xFB
    00910 E092      LDI	R25,2
    00911 91E0 0126 LDS	R30,bf
    00913 91F0 0127 LDS	R31,bf+1
    00915 0FEE      LSL	R30
    00916 1FFF      ROL	R31
    00917 9631      ADIW	R30,1
    00918 0FE8      ADD	R30,R24
    00919 1FF9      ADC	R31,R25
    0091A 8020      LD	R2,Z
    0091B 2433      CLR	R3
    0091C 9230 02E2 STS	T_dat+1,R3
    0091E 9220 02E1 STS	T_dat,R2
(0941) 								T_dat<<=8;
    00920 2C32      MOV	R3,R2
    00921 2422      CLR	R2
    00922 9230 02E2 STS	T_dat+1,R3
    00924 9220 02E1 STS	T_dat,R2
(0942) 								T_dat|=Uart0RxData[bf*2+0];//低字节
    00926 91E0 0126 LDS	R30,bf
    00928 91F0 0127 LDS	R31,bf+1
    0092A 0FEE      LSL	R30
    0092B 1FFF      ROL	R31
    0092C 0FE8      ADD	R30,R24
    0092D 1FF9      ADC	R31,R25
    0092E 8020      LD	R2,Z
    0092F 2433      CLR	R3
    00930 9040 02E1 LDS	R4,T_dat
    00932 9050 02E2 LDS	R5,T_dat+1
    00934 2842      OR	R4,R2
    00935 2853      OR	R5,R3
    00936 9250 02E2 STS	T_dat+1,R5
    00938 9240 02E1 STS	T_dat,R4
(0943) 								SendManchester();	
    0093A 940E 18C1 CALL	_SendManchester
(0944) 								Delay_ms(10);	 
    0093C E00A      LDI	R16,0xA
    0093D E010      LDI	R17,0
    0093E DCB5      RCALL	_Delay_ms
    0093F 9180 0126 LDS	R24,bf
    00941 9190 0127 LDS	R25,bf+1
    00943 9601      ADIW	R24,1
    00944 9390 0127 STS	bf+1,R25
    00946 9380 0126 STS	bf,R24
    00948 9180 0126 LDS	R24,bf
    0094A 9190 0127 LDS	R25,bf+1
    0094C 3280      CPI	R24,0x20
    0094D E0E0      LDI	R30,0
    0094E 079E      CPC	R25,R30
    0094F F408      BCC	0x0951
    00950 CFBE      RJMP	0x090F
    00951 9180 02BB LDS	R24,k
    00953 9190 02BC LDS	R25,k+1
    00955 9601      ADIW	R24,1
    00956 9390 02BC STS	k+1,R25
    00958 9380 02BB STS	k,R24
    0095A 9020 02BB LDS	R2,k
    0095C 9030 02BC LDS	R3,k+1
    0095E 142C      CP	R2,R12
    0095F 043D      CPC	R3,R13
    00960 F408      BCC	0x0962
    00961 CF85      RJMP	0x08E7
(0945) 							}		
(0946) 						}
(0947) 					} 
    00962 940C 18B4 JMP	0x18B4
(0948) 					else if(DataFlag==4)//下发仪器信息
    00964 9180 02C1 LDS	R24,DataFlag
    00966 9190 02C2 LDS	R25,DataFlag+1
    00968 3084      CPI	R24,4
    00969 E0E0      LDI	R30,0
    0096A 079E      CPC	R25,R30
    0096B F011      BEQ	0x096E
    0096C 940C 18B4 JMP	0x18B4
(0949) 					{
(0950) 						T_dat=0x0000;
    0096E 2422      CLR	R2
    0096F 2433      CLR	R3
    00970 9230 02E2 STS	T_dat+1,R3
    00972 9220 02E1 STS	T_dat,R2
(0951) 
(0952) 						Uart0TxData[0]=0xE8;
    00974 EE88      LDI	R24,0xE8
    00975 9380 012F STS	Uart0TxData,R24
(0953) 						Uart0TxData[1]=0x40;
    00977 E480      LDI	R24,0x40
    00978 9380 0130 STS	Uart0TxData+1,R24
(0954) 						Uart0TxData[2]=0x84;
    0097A E884      LDI	R24,0x84
    0097B 9380 0131 STS	Uart0TxData+2,R24
(0955) 						Uart0TxData[3]=0;//包0
    0097D 9220 0132 STS	Uart0TxData+3,R2
(0956) 						Uart0TxData[4]=0x21;
    0097F E281      LDI	R24,0x21
    00980 9380 0133 STS	Uart0TxData+4,R24
(0957) 						Uart0TxData[5]=0x22;
    00982 E282      LDI	R24,0x22
    00983 9380 0134 STS	Uart0TxData+5,R24
(0958) 						Uart0TxData[6]=0x23;
    00985 E283      LDI	R24,0x23
    00986 9380 0135 STS	Uart0TxData+6,R24
(0959) 						Uart0TxData[7]=0x24;
    00988 E284      LDI	R24,0x24
    00989 9380 0136 STS	Uart0TxData+7,R24
(0960) 						Uart0TxData[8]=0x32;	 
    0098B E382      LDI	R24,0x32
    0098C 9380 0137 STS	Uart0TxData+8,R24
(0961) 						for(k=0;k<64;k++)
    0098E 9230 02BC STS	k+1,R3
    00990 9220 02BB STS	k,R2
    00992 C01A      RJMP	0x09AD
(0962) 						{
(0963) 							Uart0TxData[9+k]=coeffdata[k];  
    00993 90A0 02BB LDS	R10,k
    00995 90B0 02BC LDS	R11,k+1
    00997 E789      LDI	R24,0x79
    00998 E091      LDI	R25,1
    00999 01F5      MOVW	R30,R10
    0099A 0FE8      ADD	R30,R24
    0099B 1FF9      ADC	R31,R25
    0099C 8020      LD	R2,Z
    0099D E28F      LDI	R24,0x2F
    0099E E091      LDI	R25,1
    0099F 01F5      MOVW	R30,R10
    009A0 9639      ADIW	R30,0x9
    009A1 0FE8      ADD	R30,R24
    009A2 1FF9      ADC	R31,R25
    009A3 8220      ST	Z,R2
    009A4 9180 02BB LDS	R24,k
    009A6 9190 02BC LDS	R25,k+1
    009A8 9601      ADIW	R24,1
    009A9 9390 02BC STS	k+1,R25
    009AB 9380 02BB STS	k,R24
    009AD 9180 02BB LDS	R24,k
    009AF 9190 02BC LDS	R25,k+1
    009B1 3480      CPI	R24,0x40
    009B2 E0E0      LDI	R30,0
    009B3 079E      CPC	R25,R30
    009B4 F2F0      BCS	0x0993
(0964) 						}		 
(0965) 						SendUart0_2(74,20);//超时160ms
    009B5 E124      LDI	R18,0x14
    009B6 E030      LDI	R19,0
    009B7 E40A      LDI	R16,0x4A
    009B8 DB32      RCALL	_SendUart0_2
(0966) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    009B9 9180 02FA LDS	R24,Uart0RxCounter
    009BB 3089      CPI	R24,0x9
    009BC F461      BNE	0x09C9
    009BD 9180 02FB LDS	R24,Uart0RxData
    009BF 3585      CPI	R24,0x55
    009C0 F441      BNE	0x09C9
    009C1 9180 02FC LDS	R24,Uart0RxData+1
    009C3 3480      CPI	R24,0x40
    009C4 F421      BNE	0x09C9
    009C5 9180 02FD LDS	R24,Uart0RxData+2
    009C7 3884      CPI	R24,0x84
    009C8 F049      BEQ	0x09D2
(0967) 						{T_dat|=0x0001; }
    009C9 9180 02E1 LDS	R24,T_dat
    009CB 9190 02E2 LDS	R25,T_dat+1
    009CD 6081      ORI	R24,1
    009CE 9390 02E2 STS	T_dat+1,R25
    009D0 9380 02E1 STS	T_dat,R24
(0968) 
(0969) 						Uart0TxData[0]=0xE8;
    009D2 EE88      LDI	R24,0xE8
    009D3 9380 012F STS	Uart0TxData,R24
(0970) 						Uart0TxData[1]=0x40;
    009D5 E480      LDI	R24,0x40
    009D6 9380 0130 STS	Uart0TxData+1,R24
(0971) 						Uart0TxData[2]=0x84;
    009D8 E884      LDI	R24,0x84
    009D9 9380 0131 STS	Uart0TxData+2,R24
(0972) 						Uart0TxData[3]=1;//包1
    009DB E081      LDI	R24,1
    009DC 9380 0132 STS	Uart0TxData+3,R24
(0973) 						Uart0TxData[4]=0x21;
    009DE E281      LDI	R24,0x21
    009DF 9380 0133 STS	Uart0TxData+4,R24
(0974) 						Uart0TxData[5]=0x22;
    009E1 E282      LDI	R24,0x22
    009E2 9380 0134 STS	Uart0TxData+5,R24
(0975) 						Uart0TxData[6]=0x23;
    009E4 E283      LDI	R24,0x23
    009E5 9380 0135 STS	Uart0TxData+6,R24
(0976) 						Uart0TxData[7]=0x24;
    009E7 E284      LDI	R24,0x24
    009E8 9380 0136 STS	Uart0TxData+7,R24
(0977) 						Uart0TxData[8]=0x32;	 
    009EA E382      LDI	R24,0x32
    009EB 9380 0137 STS	Uart0TxData+8,R24
(0978) 						for(k=0;k<64;k++)
    009ED 2422      CLR	R2
    009EE 2433      CLR	R3
    009EF 9230 02BC STS	k+1,R3
    009F1 9220 02BB STS	k,R2
    009F3 C01C      RJMP	0x0A10
(0979) 						{
(0980) 							Uart0TxData[9+k]=coeffdata[k+64];  
    009F4 90A0 02BB LDS	R10,k
    009F6 90B0 02BC LDS	R11,k+1
    009F8 E789      LDI	R24,0x79
    009F9 E091      LDI	R25,1
    009FA 01F5      MOVW	R30,R10
    009FB 5CE0      SUBI	R30,0xC0
    009FC 4FFF      SBCI	R31,0xFF
    009FD 0FE8      ADD	R30,R24
    009FE 1FF9      ADC	R31,R25
    009FF 8020      LD	R2,Z
    00A00 E28F      LDI	R24,0x2F
    00A01 E091      LDI	R25,1
    00A02 01F5      MOVW	R30,R10
    00A03 9639      ADIW	R30,0x9
    00A04 0FE8      ADD	R30,R24
    00A05 1FF9      ADC	R31,R25
    00A06 8220      ST	Z,R2
    00A07 9180 02BB LDS	R24,k
    00A09 9190 02BC LDS	R25,k+1
    00A0B 9601      ADIW	R24,1
    00A0C 9390 02BC STS	k+1,R25
    00A0E 9380 02BB STS	k,R24
    00A10 9180 02BB LDS	R24,k
    00A12 9190 02BC LDS	R25,k+1
    00A14 3480      CPI	R24,0x40
    00A15 E0E0      LDI	R30,0
    00A16 079E      CPC	R25,R30
    00A17 F2E0      BCS	0x09F4
(0981) 						}		 
(0982) 						SendUart0_2(74,20);//超时160ms
    00A18 E124      LDI	R18,0x14
    00A19 E030      LDI	R19,0
    00A1A E40A      LDI	R16,0x4A
    00A1B DACF      RCALL	_SendUart0_2
(0983) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00A1C 9180 02FA LDS	R24,Uart0RxCounter
    00A1E 3089      CPI	R24,0x9
    00A1F F461      BNE	0x0A2C
    00A20 9180 02FB LDS	R24,Uart0RxData
    00A22 3585      CPI	R24,0x55
    00A23 F441      BNE	0x0A2C
    00A24 9180 02FC LDS	R24,Uart0RxData+1
    00A26 3480      CPI	R24,0x40
    00A27 F421      BNE	0x0A2C
    00A28 9180 02FD LDS	R24,Uart0RxData+2
    00A2A 3884      CPI	R24,0x84
    00A2B F049      BEQ	0x0A35
(0984) 						{T_dat|=0x0002; }
    00A2C 9180 02E1 LDS	R24,T_dat
    00A2E 9190 02E2 LDS	R25,T_dat+1
    00A30 6082      ORI	R24,2
    00A31 9390 02E2 STS	T_dat+1,R25
    00A33 9380 02E1 STS	T_dat,R24
(0985) 
(0986) 						Uart0TxData[0]=0xE8;
    00A35 EE88      LDI	R24,0xE8
    00A36 9380 012F STS	Uart0TxData,R24
(0987) 						Uart0TxData[1]=0x40;
    00A38 E480      LDI	R24,0x40
    00A39 9380 0130 STS	Uart0TxData+1,R24
(0988) 						Uart0TxData[2]=0x84;
    00A3B E884      LDI	R24,0x84
    00A3C 9380 0131 STS	Uart0TxData+2,R24
(0989) 						Uart0TxData[3]=2;//包2
    00A3E E082      LDI	R24,2
    00A3F 9380 0132 STS	Uart0TxData+3,R24
(0990) 						Uart0TxData[4]=0x21;
    00A41 E281      LDI	R24,0x21
    00A42 9380 0133 STS	Uart0TxData+4,R24
(0991) 						Uart0TxData[5]=0x22;
    00A44 E282      LDI	R24,0x22
    00A45 9380 0134 STS	Uart0TxData+5,R24
(0992) 						Uart0TxData[6]=0x23;
    00A47 E283      LDI	R24,0x23
    00A48 9380 0135 STS	Uart0TxData+6,R24
(0993) 						Uart0TxData[7]=0x24;
    00A4A E284      LDI	R24,0x24
    00A4B 9380 0136 STS	Uart0TxData+7,R24
(0994) 						Uart0TxData[8]=0x32;	 
    00A4D E382      LDI	R24,0x32
    00A4E 9380 0137 STS	Uart0TxData+8,R24
(0995) 						for(k=0;k<64;k++)
    00A50 2422      CLR	R2
    00A51 2433      CLR	R3
    00A52 9230 02BC STS	k+1,R3
    00A54 9220 02BB STS	k,R2
    00A56 C01C      RJMP	0x0A73
(0996) 						{
(0997) 							Uart0TxData[9+k]=coeffdata[k+128];  
    00A57 90A0 02BB LDS	R10,k
    00A59 90B0 02BC LDS	R11,k+1
    00A5B E789      LDI	R24,0x79
    00A5C E091      LDI	R25,1
    00A5D 01F5      MOVW	R30,R10
    00A5E 58E0      SUBI	R30,0x80
    00A5F 4FFF      SBCI	R31,0xFF
    00A60 0FE8      ADD	R30,R24
    00A61 1FF9      ADC	R31,R25
    00A62 8020      LD	R2,Z
    00A63 E28F      LDI	R24,0x2F
    00A64 E091      LDI	R25,1
    00A65 01F5      MOVW	R30,R10
    00A66 9639      ADIW	R30,0x9
    00A67 0FE8      ADD	R30,R24
    00A68 1FF9      ADC	R31,R25
    00A69 8220      ST	Z,R2
    00A6A 9180 02BB LDS	R24,k
    00A6C 9190 02BC LDS	R25,k+1
    00A6E 9601      ADIW	R24,1
    00A6F 9390 02BC STS	k+1,R25
    00A71 9380 02BB STS	k,R24
    00A73 9180 02BB LDS	R24,k
    00A75 9190 02BC LDS	R25,k+1
    00A77 3480      CPI	R24,0x40
    00A78 E0E0      LDI	R30,0
    00A79 079E      CPC	R25,R30
    00A7A F2E0      BCS	0x0A57
(0998) 						}		 
(0999) 						SendUart0_2(74,20);//超时160ms
    00A7B E124      LDI	R18,0x14
    00A7C E030      LDI	R19,0
    00A7D E40A      LDI	R16,0x4A
    00A7E DA6C      RCALL	_SendUart0_2
(1000) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00A7F 9180 02FA LDS	R24,Uart0RxCounter
    00A81 3089      CPI	R24,0x9
    00A82 F461      BNE	0x0A8F
    00A83 9180 02FB LDS	R24,Uart0RxData
    00A85 3585      CPI	R24,0x55
    00A86 F441      BNE	0x0A8F
    00A87 9180 02FC LDS	R24,Uart0RxData+1
    00A89 3480      CPI	R24,0x40
    00A8A F421      BNE	0x0A8F
    00A8B 9180 02FD LDS	R24,Uart0RxData+2
    00A8D 3884      CPI	R24,0x84
    00A8E F049      BEQ	0x0A98
(1001) 						{T_dat|=0x0004; }
    00A8F 9180 02E1 LDS	R24,T_dat
    00A91 9190 02E2 LDS	R25,T_dat+1
    00A93 6084      ORI	R24,4
    00A94 9390 02E2 STS	T_dat+1,R25
    00A96 9380 02E1 STS	T_dat,R24
(1002) 
(1003) 						Uart0TxData[0]=0xE8;
    00A98 EE88      LDI	R24,0xE8
    00A99 9380 012F STS	Uart0TxData,R24
(1004) 						Uart0TxData[1]=0x40;
    00A9B E480      LDI	R24,0x40
    00A9C 9380 0130 STS	Uart0TxData+1,R24
(1005) 						Uart0TxData[2]=0x84;
    00A9E E884      LDI	R24,0x84
    00A9F 9380 0131 STS	Uart0TxData+2,R24
(1006) 						Uart0TxData[3]=3;//包3
    00AA1 E083      LDI	R24,3
    00AA2 9380 0132 STS	Uart0TxData+3,R24
(1007) 						Uart0TxData[4]=0x21;
    00AA4 E281      LDI	R24,0x21
    00AA5 9380 0133 STS	Uart0TxData+4,R24
(1008) 						Uart0TxData[5]=0x22;
    00AA7 E282      LDI	R24,0x22
    00AA8 9380 0134 STS	Uart0TxData+5,R24
(1009) 						Uart0TxData[6]=0x23;
    00AAA E283      LDI	R24,0x23
    00AAB 9380 0135 STS	Uart0TxData+6,R24
(1010) 						Uart0TxData[7]=0x24;
    00AAD E284      LDI	R24,0x24
    00AAE 9380 0136 STS	Uart0TxData+7,R24
(1011) 						Uart0TxData[8]=0x32;	 
    00AB0 E382      LDI	R24,0x32
    00AB1 9380 0137 STS	Uart0TxData+8,R24
(1012) 						for(k=0;k<64;k++)
    00AB3 2422      CLR	R2
    00AB4 2433      CLR	R3
    00AB5 9230 02BC STS	k+1,R3
    00AB7 9220 02BB STS	k,R2
    00AB9 C01C      RJMP	0x0AD6
(1013) 						{
(1014) 							Uart0TxData[9+k]=coeffdata[k+192];  
    00ABA 90A0 02BB LDS	R10,k
    00ABC 90B0 02BC LDS	R11,k+1
    00ABE E789      LDI	R24,0x79
    00ABF E091      LDI	R25,1
    00AC0 01F5      MOVW	R30,R10
    00AC1 54E0      SUBI	R30,0x40
    00AC2 4FFF      SBCI	R31,0xFF
    00AC3 0FE8      ADD	R30,R24
    00AC4 1FF9      ADC	R31,R25
    00AC5 8020      LD	R2,Z
    00AC6 E28F      LDI	R24,0x2F
    00AC7 E091      LDI	R25,1
    00AC8 01F5      MOVW	R30,R10
    00AC9 9639      ADIW	R30,0x9
    00ACA 0FE8      ADD	R30,R24
    00ACB 1FF9      ADC	R31,R25
    00ACC 8220      ST	Z,R2
    00ACD 9180 02BB LDS	R24,k
    00ACF 9190 02BC LDS	R25,k+1
    00AD1 9601      ADIW	R24,1
    00AD2 9390 02BC STS	k+1,R25
    00AD4 9380 02BB STS	k,R24
    00AD6 9180 02BB LDS	R24,k
    00AD8 9190 02BC LDS	R25,k+1
    00ADA 3480      CPI	R24,0x40
    00ADB E0E0      LDI	R30,0
    00ADC 079E      CPC	R25,R30
    00ADD F2E0      BCS	0x0ABA
(1015) 						}		 
(1016) 						SendUart0_2(74,20);//超时160ms
    00ADE E124      LDI	R18,0x14
    00ADF E030      LDI	R19,0
    00AE0 E40A      LDI	R16,0x4A
    00AE1 DA09      RCALL	_SendUart0_2
(1017) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00AE2 9180 02FA LDS	R24,Uart0RxCounter
    00AE4 3089      CPI	R24,0x9
    00AE5 F461      BNE	0x0AF2
    00AE6 9180 02FB LDS	R24,Uart0RxData
    00AE8 3585      CPI	R24,0x55
    00AE9 F441      BNE	0x0AF2
    00AEA 9180 02FC LDS	R24,Uart0RxData+1
    00AEC 3480      CPI	R24,0x40
    00AED F421      BNE	0x0AF2
    00AEE 9180 02FD LDS	R24,Uart0RxData+2
    00AF0 3884      CPI	R24,0x84
    00AF1 F049      BEQ	0x0AFB
(1018) 						{T_dat|=0x0008; }
    00AF2 9180 02E1 LDS	R24,T_dat
    00AF4 9190 02E2 LDS	R25,T_dat+1
    00AF6 6088      ORI	R24,0x8
    00AF7 9390 02E2 STS	T_dat+1,R25
    00AF9 9380 02E1 STS	T_dat,R24
(1019) 
(1020) 						Uart0TxData[0]=0xE8;
    00AFB EE88      LDI	R24,0xE8
    00AFC 9380 012F STS	Uart0TxData,R24
(1021) 						Uart0TxData[1]=0x40;
    00AFE E480      LDI	R24,0x40
    00AFF 9380 0130 STS	Uart0TxData+1,R24
(1022) 						Uart0TxData[2]=0x84;
    00B01 E884      LDI	R24,0x84
    00B02 9380 0131 STS	Uart0TxData+2,R24
(1023) 						Uart0TxData[3]=4;//包4
    00B04 E084      LDI	R24,4
    00B05 9380 0132 STS	Uart0TxData+3,R24
(1024) 						Uart0TxData[4]=0x21;
    00B07 E281      LDI	R24,0x21
    00B08 9380 0133 STS	Uart0TxData+4,R24
(1025) 						Uart0TxData[5]=0x22;
    00B0A E282      LDI	R24,0x22
    00B0B 9380 0134 STS	Uart0TxData+5,R24
(1026) 						Uart0TxData[6]=0x23;
    00B0D E283      LDI	R24,0x23
    00B0E 9380 0135 STS	Uart0TxData+6,R24
(1027) 						Uart0TxData[7]=0x24;
    00B10 E284      LDI	R24,0x24
    00B11 9380 0136 STS	Uart0TxData+7,R24
(1028) 						Uart0TxData[8]=0x32;	 
    00B13 E382      LDI	R24,0x32
    00B14 9380 0137 STS	Uart0TxData+8,R24
(1029) 						for(k=0;k<64;k++)
    00B16 2422      CLR	R2
    00B17 2433      CLR	R3
    00B18 9230 02BC STS	k+1,R3
    00B1A 9220 02BB STS	k,R2
    00B1C C01C      RJMP	0x0B39
(1030) 						{
(1031) 							Uart0TxData[9+k]=coeffdata[k+256];  
    00B1D 90A0 02BB LDS	R10,k
    00B1F 90B0 02BC LDS	R11,k+1
    00B21 E789      LDI	R24,0x79
    00B22 E091      LDI	R25,1
    00B23 01F5      MOVW	R30,R10
    00B24 50E0      SUBI	R30,0
    00B25 4FFF      SBCI	R31,0xFF
    00B26 0FE8      ADD	R30,R24
    00B27 1FF9      ADC	R31,R25
    00B28 8020      LD	R2,Z
    00B29 E28F      LDI	R24,0x2F
    00B2A E091      LDI	R25,1
    00B2B 01F5      MOVW	R30,R10
    00B2C 9639      ADIW	R30,0x9
    00B2D 0FE8      ADD	R30,R24
    00B2E 1FF9      ADC	R31,R25
    00B2F 8220      ST	Z,R2
    00B30 9180 02BB LDS	R24,k
    00B32 9190 02BC LDS	R25,k+1
    00B34 9601      ADIW	R24,1
    00B35 9390 02BC STS	k+1,R25
    00B37 9380 02BB STS	k,R24
    00B39 9180 02BB LDS	R24,k
    00B3B 9190 02BC LDS	R25,k+1
    00B3D 3480      CPI	R24,0x40
    00B3E E0E0      LDI	R30,0
    00B3F 079E      CPC	R25,R30
    00B40 F2E0      BCS	0x0B1D
(1032) 						}		 
(1033) 						SendUart0_2(74,20);//超时160ms
    00B41 E124      LDI	R18,0x14
    00B42 E030      LDI	R19,0
    00B43 E40A      LDI	R16,0x4A
    00B44 D9A6      RCALL	_SendUart0_2
(1034) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00B45 9180 02FA LDS	R24,Uart0RxCounter
    00B47 3089      CPI	R24,0x9
    00B48 F461      BNE	0x0B55
    00B49 9180 02FB LDS	R24,Uart0RxData
    00B4B 3585      CPI	R24,0x55
    00B4C F441      BNE	0x0B55
    00B4D 9180 02FC LDS	R24,Uart0RxData+1
    00B4F 3480      CPI	R24,0x40
    00B50 F421      BNE	0x0B55
    00B51 9180 02FD LDS	R24,Uart0RxData+2
    00B53 3884      CPI	R24,0x84
    00B54 F049      BEQ	0x0B5E
(1035) 						{T_dat|=0x0010; }
    00B55 9180 02E1 LDS	R24,T_dat
    00B57 9190 02E2 LDS	R25,T_dat+1
    00B59 6180      ORI	R24,0x10
    00B5A 9390 02E2 STS	T_dat+1,R25
    00B5C 9380 02E1 STS	T_dat,R24
(1036) 
(1037) 						DataFlag=0;
    00B5E 2422      CLR	R2
    00B5F 2433      CLR	R3
    00B60 9230 02C2 STS	DataFlag+1,R3
    00B62 9220 02C1 STS	DataFlag,R2
(1038) 						coeff_len=0;	
    00B64 9230 012D STS	coeff_len+1,R3
    00B66 9220 012C STS	coeff_len,R2
(1039) 						T_com=0x0C;
    00B68 E08C      LDI	R24,0xC
    00B69 9380 02DA STS	T_com,R24
(1040) 						SendManchester();		
    00B6B 940E 18C1 CALL	_SendManchester
(1041) 					}     
(1042) 				}	 
(1043) 			}
    00B6D 940C 18B4 JMP	0x18B4
(1044) 
(1045) 			else//若不是下发标定系数，则进入以下各个命令的子语句
(1046) 			{ 
(1047) 				T_com=(R_dat>>4);
    00B6F 9020 02DF LDS	R2,R_dat
    00B71 9030 02E0 LDS	R3,R_dat+1
    00B73 9435      ASR	R3
    00B74 9427      ROR	R2
    00B75 9435      ASR	R3
    00B76 9427      ROR	R2
    00B77 9435      ASR	R3
    00B78 9427      ROR	R2
    00B79 9435      ASR	R3
    00B7A 9427      ROR	R2
    00B7B 9220 02DA STS	T_com,R2
(1048) 				switch(R_dat&0xf0)
    00B7D 9180 02DF LDS	R24,R_dat
    00B7F 9190 02E0 LDS	R25,R_dat+1
    00B81 7F80      ANDI	R24,0xF0
    00B82 7090      ANDI	R25,0
    00B83 015C      MOVW	R10,R24
    00B84 3780      CPI	R24,0x70
    00B85 E0E0      LDI	R30,0
    00B86 079E      CPC	R25,R30
    00B87 F409      BNE	0x0B89
    00B88 C363      RJMP	0x0EEC
    00B89 E780      LDI	R24,0x70
    00B8A E090      LDI	R25,0
    00B8B 158A      CP	R24,R10
    00B8C 059B      CPC	R25,R11
    00B8D F40C      BGE	0x0B8F
    00B8E C03A      RJMP	0x0BC9
    00B8F 01C5      MOVW	R24,R10
    00B90 3380      CPI	R24,0x30
    00B91 E0E0      LDI	R30,0
    00B92 079E      CPC	R25,R30
    00B93 F409      BNE	0x0B95
    00B94 C0F1      RJMP	0x0C86
    00B95 E380      LDI	R24,0x30
    00B96 E090      LDI	R25,0
    00B97 158A      CP	R24,R10
    00B98 059B      CPC	R25,R11
    00B99 F0A4      BLT	0x0BAE
    00B9A 01C5      MOVW	R24,R10
    00B9B 3180      CPI	R24,0x10
    00B9C E0E0      LDI	R30,0
    00B9D 079E      CPC	R25,R30
    00B9E F409      BNE	0x0BA0
    00B9F C065      RJMP	0x0C05
    00BA0 3180      CPI	R24,0x10
    00BA1 E0E0      LDI	R30,0
    00BA2 079E      CPC	R25,R30
    00BA3 F414      BGE	0x0BA6
    00BA4 940C 18B4 JMP	0x18B4
    00BA6 01C5      MOVW	R24,R10
    00BA7 3280      CPI	R24,0x20
    00BA8 E0E0      LDI	R30,0
    00BA9 079E      CPC	R25,R30
    00BAA F409      BNE	0x0BAC
    00BAB C098      RJMP	0x0C44
    00BAC 940C 18B4 JMP	0x18B4
    00BAE 01C5      MOVW	R24,R10
    00BAF 3580      CPI	R24,0x50
    00BB0 E0E0      LDI	R30,0
    00BB1 079E      CPC	R25,R30
    00BB2 F409      BNE	0x0BB4
    00BB3 C1B9      RJMP	0x0D6D
    00BB4 E580      LDI	R24,0x50
    00BB5 E090      LDI	R25,0
    00BB6 158A      CP	R24,R10
    00BB7 059B      CPC	R25,R11
    00BB8 F044      BLT	0x0BC1
    00BB9 01C5      MOVW	R24,R10
    00BBA 3480      CPI	R24,0x40
    00BBB E0E0      LDI	R30,0
    00BBC 079E      CPC	R25,R30
    00BBD F409      BNE	0x0BBF
    00BBE C12B      RJMP	0x0CEA
    00BBF 940C 18B4 JMP	0x18B4
    00BC1 01C5      MOVW	R24,R10
    00BC2 3680      CPI	R24,0x60
    00BC3 E0E0      LDI	R30,0
    00BC4 079E      CPC	R25,R30
    00BC5 F409      BNE	0x0BC7
    00BC6 C2EC      RJMP	0x0EB3
    00BC7 940C 18B4 JMP	0x18B4
    00BC9 01C5      MOVW	R24,R10
    00BCA 3A80      CPI	R24,0xA0
    00BCB E0E0      LDI	R30,0
    00BCC 079E      CPC	R25,R30
    00BCD F409      BNE	0x0BCF
    00BCE C6F3      RJMP	0x12C2
    00BCF EA80      LDI	R24,0xA0
    00BD0 E090      LDI	R25,0
    00BD1 158A      CP	R24,R10
    00BD2 059B      CPC	R25,R11
    00BD3 F0A4      BLT	0x0BE8
    00BD4 01C5      MOVW	R24,R10
    00BD5 3880      CPI	R24,0x80
    00BD6 E0E0      LDI	R30,0
    00BD7 079E      CPC	R25,R30
    00BD8 F409      BNE	0x0BDA
    00BD9 C34C      RJMP	0x0F26
    00BDA 3880      CPI	R24,0x80
    00BDB E0E0      LDI	R30,0
    00BDC 079E      CPC	R25,R30
    00BDD F414      BGE	0x0BE0
    00BDE 940C 18B4 JMP	0x18B4
    00BE0 01C5      MOVW	R24,R10
    00BE1 3980      CPI	R24,0x90
    00BE2 E0E0      LDI	R30,0
    00BE3 079E      CPC	R25,R30
    00BE4 F409      BNE	0x0BE6
    00BE5 C40E      RJMP	0x0FF4
    00BE6 940C 18B4 JMP	0x18B4
    00BE8 01C5      MOVW	R24,R10
    00BE9 3C80      CPI	R24,0xC0
    00BEA E0E0      LDI	R30,0
    00BEB 079E      CPC	R25,R30
    00BEC F411      BNE	0x0BEF
    00BED 940C 1452 JMP	0x1452
    00BEF EC80      LDI	R24,0xC0
    00BF0 E090      LDI	R25,0
    00BF1 158A      CP	R24,R10
    00BF2 059B      CPC	R25,R11
    00BF3 F044      BLT	0x0BFC
    00BF4 01C5      MOVW	R24,R10
    00BF5 3B80      CPI	R24,0xB0
    00BF6 E0E0      LDI	R30,0
    00BF7 079E      CPC	R25,R30
    00BF8 F409      BNE	0x0BFA
    00BF9 C790      RJMP	0x138A
    00BFA 940C 18B4 JMP	0x18B4
    00BFC 01C5      MOVW	R24,R10
    00BFD 3D80      CPI	R24,0xD0
    00BFE E0E0      LDI	R30,0
    00BFF 079E      CPC	R25,R30
    00C00 F411      BNE	0x0C03
    00C01 940C 1883 JMP	0x1883
    00C03 940C 18B4 JMP	0x18B4
(1049) 				{ 
(1050) 					case 0x10://复位 	
(1051) 						Uart0TxData[0]=0xE8;
    00C05 EE88      LDI	R24,0xE8
    00C06 9380 012F STS	Uart0TxData,R24
(1052) 						Uart0TxData[1]=0x40;
    00C08 E480      LDI	R24,0x40
    00C09 9380 0130 STS	Uart0TxData+1,R24
(1053) 						Uart0TxData[2]=0x8D;//流量板握手，超时40ms
    00C0B E88D      LDI	R24,0x8D
    00C0C 9380 0131 STS	Uart0TxData+2,R24
(1054) 						Uart0TxData[3]=31;
    00C0E E18F      LDI	R24,0x1F
    00C0F 9380 0132 STS	Uart0TxData+3,R24
(1055) 						SendUart0_2(9,5); 
    00C11 E025      LDI	R18,5
    00C12 E030      LDI	R19,0
    00C13 E009      LDI	R16,0x9
    00C14 D8D6      RCALL	_SendUart0_2
(1056) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    00C15 9180 02FA LDS	R24,Uart0RxCounter
    00C17 3089      CPI	R24,0x9
    00C18 F499      BNE	0x0C2C
    00C19 9180 02FB LDS	R24,Uart0RxData
    00C1B 3585      CPI	R24,0x55
    00C1C F479      BNE	0x0C2C
    00C1D 9180 02FC LDS	R24,Uart0RxData+1
    00C1F 3480      CPI	R24,0x40
    00C20 F459      BNE	0x0C2C
    00C21 9180 02FD LDS	R24,Uart0RxData+2
    00C23 388D      CPI	R24,0x8D
    00C24 F439      BNE	0x0C2C
(1057) 						{T_dat=0x00;}
    00C25 2422      CLR	R2
    00C26 2433      CLR	R3
    00C27 9230 02E2 STS	T_dat+1,R3
    00C29 9220 02E1 STS	T_dat,R2
    00C2B C006      RJMP	0x0C32
(1058) 						else
(1059) 						{T_dat=0xff;}
    00C2C EF8F      LDI	R24,0xFF
    00C2D E090      LDI	R25,0
    00C2E 9390 02E2 STS	T_dat+1,R25
    00C30 9380 02E1 STS	T_dat,R24
(1060) 						T_dat<<=8;
    00C32 9020 02E1 LDS	R2,T_dat
    00C34 9030 02E2 LDS	R3,T_dat+1
    00C36 2C32      MOV	R3,R2
    00C37 2422      CLR	R2
    00C38 9230 02E2 STS	T_dat+1,R3
    00C3A 9220 02E1 STS	T_dat,R2
(1061) 						T_dat|=0x00;
    00C3C 9230 02E2 STS	T_dat+1,R3
    00C3E 9220 02E1 STS	T_dat,R2
(1062) 						SendManchester();	
    00C40 940E 18C1 CALL	_SendManchester
(1063) 						break;
    00C42 940C 18B4 JMP	0x18B4
(1064) 
(1065) 					case 0x20://主控板与采集板版本号
(1066) 						Uart0TxData[0]=0xE8;
    00C44 EE88      LDI	R24,0xE8
    00C45 9380 012F STS	Uart0TxData,R24
(1067) 						Uart0TxData[1]=0x40;
    00C47 E480      LDI	R24,0x40
    00C48 9380 0130 STS	Uart0TxData+1,R24
(1068) 						Uart0TxData[2]=0x8D;//流量板握手，超时40ms
    00C4A E88D      LDI	R24,0x8D
    00C4B 9380 0131 STS	Uart0TxData+2,R24
(1069) 						Uart0TxData[3]=31;
    00C4D E18F      LDI	R24,0x1F
    00C4E 9380 0132 STS	Uart0TxData+3,R24
(1070) 						SendUart0_2(9,5); 
    00C50 E025      LDI	R18,5
    00C51 E030      LDI	R19,0
    00C52 E009      LDI	R16,0x9
    00C53 D897      RCALL	_SendUart0_2
(1071) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    00C54 9180 02FA LDS	R24,Uart0RxCounter
    00C56 3089      CPI	R24,0x9
    00C57 F4A1      BNE	0x0C6C
    00C58 9180 02FB LDS	R24,Uart0RxData
    00C5A 3585      CPI	R24,0x55
    00C5B F481      BNE	0x0C6C
    00C5C 9180 02FC LDS	R24,Uart0RxData+1
    00C5E 3480      CPI	R24,0x40
    00C5F F461      BNE	0x0C6C
    00C60 9180 02FD LDS	R24,Uart0RxData+2
    00C62 388D      CPI	R24,0x8D
    00C63 F441      BNE	0x0C6C
(1072) 							{T_dat=Uart0RxData[3];}
    00C64 9020 02FE LDS	R2,Uart0RxData+3
    00C66 2433      CLR	R3
    00C67 9230 02E2 STS	T_dat+1,R3
    00C69 9220 02E1 STS	T_dat,R2
    00C6B C006      RJMP	0x0C72
(1073) 						else
(1074) 							{T_dat=0xff;}    
    00C6C EF8F      LDI	R24,0xFF
    00C6D E090      LDI	R25,0
    00C6E 9390 02E2 STS	T_dat+1,R25
    00C70 9380 02E1 STS	T_dat,R24
(1075) 						T_dat<<=8;
    00C72 9020 02E1 LDS	R2,T_dat
    00C74 9030 02E2 LDS	R3,T_dat+1
    00C76 2C32      MOV	R3,R2
    00C77 2422      CLR	R2
    00C78 9230 02E2 STS	T_dat+1,R3
    00C7A 9220 02E1 STS	T_dat,R2
(1076) 						T_dat|=BB;
    00C7C 01C1      MOVW	R24,R2
    00C7D 6180      ORI	R24,0x10
    00C7E 9390 02E2 STS	T_dat+1,R25
    00C80 9380 02E1 STS	T_dat,R24
(1077) 						SendManchester();				
    00C82 940E 18C1 CALL	_SendManchester
(1078) 						break;
    00C84 940C 18B4 JMP	0x18B4
(1079) 
(1080) 					case 0x30://Cable电压,电机电压
(1081) 						Delay_ms(30);   
    00C86 E10E      LDI	R16,0x1E
    00C87 E010      LDI	R17,0
    00C88 D96B      RCALL	_Delay_ms
(1082) 						f=SampleADC(0);//Cable 
    00C89 2700      CLR	R16
    00C8A D8FA      RCALL	_SampleADC
    00C8B 2EA0      MOV	R10,R16
    00C8C 2711      CLR	R17
    00C8D 940E 1E14 CALL	int2fp
    00C8F 830D      STD	Y+5,R16
    00C90 831E      STD	Y+6,R17
    00C91 832F      STD	Y+7,R18
    00C92 8738      STD	Y+8,R19
(1083) 						f=f*2.56;
    00C93 E904      LDI	R16,0x94
    00C94 E010      LDI	R17,0
    00C95 940E 1D68 CALL	elpm32
    00C97 01CE      MOVW	R24,R28
    00C98 9605      ADIW	R24,5
    00C99 939A      ST	-Y,R25
    00C9A 938A      ST	-Y,R24
    00C9B 940E 1FAF CALL	fpmule1
    00C9D 830D      STD	Y+5,R16
    00C9E 831E      STD	Y+6,R17
    00C9F 832F      STD	Y+7,R18
    00CA0 8738      STD	Y+8,R19
(1084) 						f=f*101;
    00CA1 E900      LDI	R16,0x90
    00CA2 E010      LDI	R17,0
    00CA3 940E 1D68 CALL	elpm32
    00CA5 01CE      MOVW	R24,R28
    00CA6 9605      ADIW	R24,5
    00CA7 939A      ST	-Y,R25
    00CA8 938A      ST	-Y,R24
    00CA9 940E 1FAF CALL	fpmule1
    00CAB 830D      STD	Y+5,R16
    00CAC 831E      STD	Y+6,R17
    00CAD 832F      STD	Y+7,R18
    00CAE 8738      STD	Y+8,R19
(1085) 						f=f/256;
    00CAF 802D      LDD	R2,Y+5
    00CB0 803E      LDD	R3,Y+6
    00CB1 804F      LDD	R4,Y+7
    00CB2 8458      LDD	R5,Y+8
    00CB3 E80C      LDI	R16,0x8C
    00CB4 E010      LDI	R17,0
    00CB5 940E 1D68 CALL	elpm32
    00CB7 933A      ST	-Y,R19
    00CB8 932A      ST	-Y,R18
    00CB9 931A      ST	-Y,R17
    00CBA 930A      ST	-Y,R16
    00CBB 0181      MOVW	R16,R2
    00CBC 0192      MOVW	R18,R4
    00CBD 940E 1E3F CALL	fpdiv2
    00CBF 830D      STD	Y+5,R16
    00CC0 831E      STD	Y+6,R17
    00CC1 832F      STD	Y+7,R18
    00CC2 8738      STD	Y+8,R19
(1086) 						T_dat=f;
    00CC3 810D      LDD	R16,Y+5
    00CC4 811E      LDD	R17,Y+6
    00CC5 812F      LDD	R18,Y+7
    00CC6 8538      LDD	R19,Y+8
    00CC7 940E 1DE0 CALL	fpint
    00CC9 9310 02E2 STS	T_dat+1,R17
    00CCB 9300 02E1 STS	T_dat,R16
(1087) 						T_dat<<=8;  
    00CCD 0118      MOVW	R2,R16
    00CCE 2C32      MOV	R3,R2
    00CCF 2422      CLR	R2
    00CD0 9230 02E2 STS	T_dat+1,R3
    00CD2 9220 02E1 STS	T_dat,R2
(1088) 						
(1089) 						SendUart1(0x30,4);//读电机电压，32ms超时
    00CD4 E024      LDI	R18,4
    00CD5 E030      LDI	R19,0
    00CD6 E300      LDI	R16,0x30
    00CD7 940E 02B3 CALL	_SendUart1
(1090) 						T_dat|=Uart1RxData[0];
    00CD9 9020 02F6 LDS	R2,Uart1RxData
    00CDB 2433      CLR	R3
    00CDC 9040 02E1 LDS	R4,T_dat
    00CDE 9050 02E2 LDS	R5,T_dat+1
    00CE0 2842      OR	R4,R2
    00CE1 2853      OR	R5,R3
    00CE2 9250 02E2 STS	T_dat+1,R5
    00CE4 9240 02E1 STS	T_dat,R4
(1091) 
(1092) 						SendManchester();   
    00CE6 940E 18C1 CALL	_SendManchester
(1093) 						break;
    00CE8 940C 18B4 JMP	0x18B4
(1094) 
(1095) 					case 0x40: //采集板压力和温度
(1096) 					    if(R_dat==0x4f)// 采集第2个压力温度的数字量，再多发2帧共4字节
    00CEA 9180 02DF LDS	R24,R_dat
    00CEC 9190 02E0 LDS	R25,R_dat+1
    00CEE 348F      CPI	R24,0x4F
    00CEF E0E0      LDI	R30,0
    00CF0 079E      CPC	R25,R30
    00CF1 F529      BNE	0x0D17
(1097) 						{
(1098) 						  Delay_ms(30);//等总线稳定，否则会影响到内部总线，则第一个字节收不正常
    00CF2 E10E      LDI	R16,0x1E
    00CF3 E010      LDI	R17,0
    00CF4 D8FF      RCALL	_Delay_ms
(1099) 						  
(1100) 						  SampleTPS(R_dat);//最快5ms返回，没有挂压力短节时最多20ms返回
    00CF5 9100 02DF LDS	R16,R_dat
    00CF7 9110 02E0 LDS	R17,R_dat+1
    00CF9 940E 0455 CALL	_SampleTPS
(1101) 						  
(1102) 						  Delay_ms(30);	
    00CFB E10E      LDI	R16,0x1E
    00CFC E010      LDI	R17,0
    00CFD D8F6      RCALL	_Delay_ms
(1103) 						  T_dat=TPS_PData;
    00CFE 9020 02DD LDS	R2,TPS_PData
    00D00 9030 02DE LDS	R3,TPS_PData+1
    00D02 9230 02E2 STS	T_dat+1,R3
    00D04 9220 02E1 STS	T_dat,R2
(1104) 						  SendManchester();//压力2
    00D06 940E 18C1 CALL	_SendManchester
(1105) 						  
(1106) 						  Delay_ms(30);	
    00D08 E10E      LDI	R16,0x1E
    00D09 E010      LDI	R17,0
    00D0A D8E9      RCALL	_Delay_ms
(1107) 						  T_dat=TPS_TData;
    00D0B 9020 02DB LDS	R2,TPS_TData
    00D0D 9030 02DC LDS	R3,TPS_TData+1
    00D0F 9230 02E2 STS	T_dat+1,R3
    00D11 9220 02E1 STS	T_dat,R2
(1108) 						  SendManchester();//温度2
    00D13 940E 18C1 CALL	_SendManchester
(1109) 						}
    00D15 940C 18B4 JMP	0x18B4
(1110) 						else
(1111) 						{
(1112) 						Uart0TxData[0]=0xE8;
    00D17 EE88      LDI	R24,0xE8
    00D18 9380 012F STS	Uart0TxData,R24
(1113) 						Uart0TxData[1]=0x40;
    00D1A E480      LDI	R24,0x40
    00D1B 9380 0130 STS	Uart0TxData+1,R24
(1114) 						Uart0TxData[2]=0x89;
    00D1D E889      LDI	R24,0x89
    00D1E 9380 0131 STS	Uart0TxData+2,R24
(1115) 						Uart0TxData[3]=9;
    00D20 E089      LDI	R24,0x9
    00D21 9380 0132 STS	Uart0TxData+3,R24
(1116) 						SendUart0_2(9,50);//流量板直读检测，超时400ms
    00D23 E322      LDI	R18,0x32
    00D24 E030      LDI	R19,0
    00D25 E009      LDI	R16,0x9
    00D26 940E 04EB CALL	_SendUart0_2
(1117) 
(1118) 						T_dat=Uart0RxData[1];
    00D28 9020 02FC LDS	R2,Uart0RxData+1
    00D2A 2433      CLR	R3
    00D2B 9230 02E2 STS	T_dat+1,R3
    00D2D 9220 02E1 STS	T_dat,R2
(1119) 						T_dat<<=8;
    00D2F 9020 02E1 LDS	R2,T_dat
    00D31 9030 02E2 LDS	R3,T_dat+1
    00D33 2C32      MOV	R3,R2
    00D34 2422      CLR	R2
    00D35 9230 02E2 STS	T_dat+1,R3
    00D37 9220 02E1 STS	T_dat,R2
(1120) 						T_dat|=Uart0RxData[0];
    00D39 9020 02FB LDS	R2,Uart0RxData
    00D3B 2433      CLR	R3
    00D3C 9040 02E1 LDS	R4,T_dat
    00D3E 9050 02E2 LDS	R5,T_dat+1
    00D40 2842      OR	R4,R2
    00D41 2853      OR	R5,R3
    00D42 9250 02E2 STS	T_dat+1,R5
    00D44 9240 02E1 STS	T_dat,R4
(1121) 						SendManchester();//压力
    00D46 940E 18C1 CALL	_SendManchester
(1122) 
(1123) 						Delay_ms(30);	
    00D48 E10E      LDI	R16,0x1E
    00D49 E010      LDI	R17,0
    00D4A D8A9      RCALL	_Delay_ms
(1124) 						T_dat=Uart0RxData[3];
    00D4B 9020 02FE LDS	R2,Uart0RxData+3
    00D4D 2433      CLR	R3
    00D4E 9230 02E2 STS	T_dat+1,R3
    00D50 9220 02E1 STS	T_dat,R2
(1125) 						T_dat<<=8;
    00D52 9020 02E1 LDS	R2,T_dat
    00D54 9030 02E2 LDS	R3,T_dat+1
    00D56 2C32      MOV	R3,R2
    00D57 2422      CLR	R2
    00D58 9230 02E2 STS	T_dat+1,R3
    00D5A 9220 02E1 STS	T_dat,R2
(1126) 						T_dat|=Uart0RxData[2];
    00D5C 9020 02FD LDS	R2,Uart0RxData+2
    00D5E 2433      CLR	R3
    00D5F 9040 02E1 LDS	R4,T_dat
    00D61 9050 02E2 LDS	R5,T_dat+1
    00D63 2842      OR	R4,R2
    00D64 2853      OR	R5,R3
    00D65 9250 02E2 STS	T_dat+1,R5
    00D67 9240 02E1 STS	T_dat,R4
(1127) 						SendManchester();//温度
    00D69 940E 18C1 CALL	_SendManchester
(1128) 						}
(1129) 						
(1130) 						break;
    00D6B 940C 18B4 JMP	0x18B4
(1131) 
(1132) 					case 0x50://流量采样	    	          	  	   	  	 
(1133) 						/*	
(1134) 						Delay_ms(40); //40ms定时		
(1135) 						myFIB.f=123.456; 
(1136) 						T_dat=myFIB.i[1];
(1137) 						SendManchester();
(1138) 						Delay_ms(40);
(1139) 						T_dat=myFIB.i[0];
(1140) 						SendManchester();
(1141) 						Delay_ms(40);
(1142) 						myFIB.f=789.012; 
(1143) 						T_dat=myFIB.i[1];
(1144) 						SendManchester();
(1145) 						Delay_ms(40);
(1146) 						T_dat=myFIB.i[0];
(1147) 						SendManchester();
(1148) 						Delay_ms(40);
(1149) 						*/
(1150) 						Uart0TxData[0]=0xE8;
    00D6D EE88      LDI	R24,0xE8
    00D6E 9380 012F STS	Uart0TxData,R24
(1151) 						Uart0TxData[1]=0x40;
    00D70 E480      LDI	R24,0x40
    00D71 9380 0130 STS	Uart0TxData+1,R24
(1152) 						Uart0TxData[2]=0x89;
    00D73 E889      LDI	R24,0x89
    00D74 9380 0131 STS	Uart0TxData+2,R24
(1153) 						Uart0TxData[3]=9;
    00D76 E089      LDI	R24,0x9
    00D77 9380 0132 STS	Uart0TxData+3,R24
(1154) 						SendUart0_2(9,50);//流量板直读检测，超时400ms
    00D79 E322      LDI	R18,0x32
    00D7A E030      LDI	R19,0
    00D7B E009      LDI	R16,0x9
    00D7C 940E 04EB CALL	_SendUart0_2
(1155) 
(1156) 						lfib=Uart0RxData[5];
    00D7E 9020 0300 LDS	R2,Uart0RxData+5
    00D80 2433      CLR	R3
    00D81 2444      CLR	R4
    00D82 2455      CLR	R5
    00D83 9230 0123 STS	lfib+1,R3
    00D85 9220 0122 STS	lfib,R2
    00D87 9250 0125 STS	lfib+3,R5
    00D89 9240 0124 STS	lfib+2,R4
(1157) 						lfib<<=8;
    00D8B E088      LDI	R24,0x8
    00D8C E090      LDI	R25,0
    00D8D 9120 0124 LDS	R18,lfib+2
    00D8F 9130 0125 LDS	R19,lfib+3
    00D91 9100 0122 LDS	R16,lfib
    00D93 9110 0123 LDS	R17,lfib+1
    00D95 938A      ST	-Y,R24
    00D96 940E 1DBB CALL	lsl32
    00D98 9310 0123 STS	lfib+1,R17
    00D9A 9300 0122 STS	lfib,R16
    00D9C 9330 0125 STS	lfib+3,R19
    00D9E 9320 0124 STS	lfib+2,R18
(1158) 						lfib|=Uart0RxData[4];
    00DA0 9020 02FF LDS	R2,Uart0RxData+4
    00DA2 2433      CLR	R3
    00DA3 2444      CLR	R4
    00DA4 2455      CLR	R5
    00DA5 0138      MOVW	R6,R16
    00DA6 0149      MOVW	R8,R18
    00DA7 2862      OR	R6,R2
    00DA8 2873      OR	R7,R3
    00DA9 2884      OR	R8,R4
    00DAA 2895      OR	R9,R5
    00DAB 9270 0123 STS	lfib+1,R7
    00DAD 9260 0122 STS	lfib,R6
    00DAF 9290 0125 STS	lfib+3,R9
    00DB1 9280 0124 STS	lfib+2,R8
(1159) 						lfib&=0x0000ffff;
    00DB3 EF4F      LDI	R20,0xFF
    00DB4 EF5F      LDI	R21,0xFF
    00DB5 E060      LDI	R22,0
    00DB6 E070      LDI	R23,0
    00DB7 0113      MOVW	R2,R6
    00DB8 0124      MOVW	R4,R8
    00DB9 2224      AND	R2,R20
    00DBA 2235      AND	R3,R21
    00DBB 2246      AND	R4,R22
    00DBC 2257      AND	R5,R23
    00DBD 9230 0123 STS	lfib+1,R3
    00DBF 9220 0122 STS	lfib,R2
    00DC1 9250 0125 STS	lfib+3,R5
    00DC3 9240 0124 STS	lfib+2,R4
(1160) 						myFIB.f=(unsigned long)lfib; 
    00DC5 0181      MOVW	R16,R2
    00DC6 0192      MOVW	R18,R4
    00DC7 940E 1E1D CALL	ulong2fp
    00DC9 9310 0349 STS	myFIB+1,R17
    00DCB 9300 0348 STS	myFIB,R16
    00DCD 9330 034B STS	myFIB+3,R19
    00DCF 9320 034A STS	myFIB+2,R18
(1161) 
(1162) 						T_dat=myFIB.i[1];
    00DD1 9020 034A LDS	R2,myFIB+2
    00DD3 9030 034B LDS	R3,myFIB+3
    00DD5 9230 02E2 STS	T_dat+1,R3
    00DD7 9220 02E1 STS	T_dat,R2
(1163) 						SendManchester();//流量-时间
    00DD9 940E 18C1 CALL	_SendManchester
(1164) 						crc16array[0]=(unsigned char)(T_dat);
    00DDB 9020 02E1 LDS	R2,T_dat
    00DDD 9030 02E2 LDS	R3,T_dat+1
    00DDF 9220 0100 STS	crc16array,R2
(1165) 						crc16array[1]=(unsigned char)(T_dat>>8);
    00DE1 2C23      MOV	R2,R3
    00DE2 2433      CLR	R3
    00DE3 FC27      SBRC	R2,7
    00DE4 9430      COM	R3
    00DE5 9220 0101 STS	crc16array+1,R2
(1166) 
(1167) 						Delay_ms(30);	
    00DE7 E10E      LDI	R16,0x1E
    00DE8 E010      LDI	R17,0
    00DE9 D80A      RCALL	_Delay_ms
(1168) 						T_dat=myFIB.i[0];
    00DEA 9020 0348 LDS	R2,myFIB
    00DEC 9030 0349 LDS	R3,myFIB+1
    00DEE 9230 02E2 STS	T_dat+1,R3
    00DF0 9220 02E1 STS	T_dat,R2
(1169) 						SendManchester();//流量-时间
    00DF2 940E 18C1 CALL	_SendManchester
(1170) 						crc16array[2]=(unsigned char)(T_dat);
    00DF4 9020 02E1 LDS	R2,T_dat
    00DF6 9030 02E2 LDS	R3,T_dat+1
    00DF8 9220 0102 STS	crc16array+2,R2
(1171) 						crc16array[3]=(unsigned char)(T_dat>>8);
    00DFA 2C23      MOV	R2,R3
    00DFB 2433      CLR	R3
    00DFC FC27      SBRC	R2,7
    00DFD 9430      COM	R3
    00DFE 9220 0103 STS	crc16array+3,R2
(1172) 
(1173) 						Delay_ms(30);	
    00E00 E10E      LDI	R16,0x1E
    00E01 E010      LDI	R17,0
    00E02 940E 05F4 CALL	_Delay_ms
(1174) 
(1175) 						lfib=Uart0RxData[7];
    00E04 9020 0302 LDS	R2,Uart0RxData+7
    00E06 2433      CLR	R3
    00E07 2444      CLR	R4
    00E08 2455      CLR	R5
    00E09 9230 0123 STS	lfib+1,R3
    00E0B 9220 0122 STS	lfib,R2
    00E0D 9250 0125 STS	lfib+3,R5
    00E0F 9240 0124 STS	lfib+2,R4
(1176) 						lfib<<=8;
    00E11 E088      LDI	R24,0x8
    00E12 E090      LDI	R25,0
    00E13 9120 0124 LDS	R18,lfib+2
    00E15 9130 0125 LDS	R19,lfib+3
    00E17 9100 0122 LDS	R16,lfib
    00E19 9110 0123 LDS	R17,lfib+1
    00E1B 938A      ST	-Y,R24
    00E1C 940E 1DBB CALL	lsl32
    00E1E 9310 0123 STS	lfib+1,R17
    00E20 9300 0122 STS	lfib,R16
    00E22 9330 0125 STS	lfib+3,R19
    00E24 9320 0124 STS	lfib+2,R18
(1177) 						lfib|=Uart0RxData[6];
    00E26 9020 0301 LDS	R2,Uart0RxData+6
    00E28 2433      CLR	R3
    00E29 2444      CLR	R4
    00E2A 2455      CLR	R5
    00E2B 0138      MOVW	R6,R16
    00E2C 0149      MOVW	R8,R18
    00E2D 2862      OR	R6,R2
    00E2E 2873      OR	R7,R3
    00E2F 2884      OR	R8,R4
    00E30 2895      OR	R9,R5
    00E31 9270 0123 STS	lfib+1,R7
    00E33 9260 0122 STS	lfib,R6
    00E35 9290 0125 STS	lfib+3,R9
    00E37 9280 0124 STS	lfib+2,R8
(1178) 						lfib&=0x0000ffff;
    00E39 EF4F      LDI	R20,0xFF
    00E3A EF5F      LDI	R21,0xFF
    00E3B E060      LDI	R22,0
    00E3C E070      LDI	R23,0
    00E3D 0113      MOVW	R2,R6
    00E3E 0124      MOVW	R4,R8
    00E3F 2224      AND	R2,R20
    00E40 2235      AND	R3,R21
    00E41 2246      AND	R4,R22
    00E42 2257      AND	R5,R23
    00E43 9230 0123 STS	lfib+1,R3
    00E45 9220 0122 STS	lfib,R2
    00E47 9250 0125 STS	lfib+3,R5
    00E49 9240 0124 STS	lfib+2,R4
(1179) 						myFIB.f=(unsigned long)lfib; 
    00E4B 0181      MOVW	R16,R2
    00E4C 0192      MOVW	R18,R4
    00E4D 940E 1E1D CALL	ulong2fp
    00E4F 9310 0349 STS	myFIB+1,R17
    00E51 9300 0348 STS	myFIB,R16
    00E53 9330 034B STS	myFIB+3,R19
    00E55 9320 034A STS	myFIB+2,R18
(1180) 
(1181) 						T_dat=myFIB.i[1];
    00E57 9020 034A LDS	R2,myFIB+2
    00E59 9030 034B LDS	R3,myFIB+3
    00E5B 9230 02E2 STS	T_dat+1,R3
    00E5D 9220 02E1 STS	T_dat,R2
(1182) 						SendManchester();//流量-相位1
    00E5F 940E 18C1 CALL	_SendManchester
(1183) 						crc16array[4]=(unsigned char)(T_dat);
    00E61 9020 02E1 LDS	R2,T_dat
    00E63 9030 02E2 LDS	R3,T_dat+1
    00E65 9220 0104 STS	crc16array+4,R2
(1184) 						crc16array[5]=(unsigned char)(T_dat>>8);
    00E67 2C23      MOV	R2,R3
    00E68 2433      CLR	R3
    00E69 FC27      SBRC	R2,7
    00E6A 9430      COM	R3
    00E6B 9220 0105 STS	crc16array+5,R2
(1185) 
(1186) 
(1187) 						Delay_ms(30);	
    00E6D E10E      LDI	R16,0x1E
    00E6E E010      LDI	R17,0
    00E6F 940E 05F4 CALL	_Delay_ms
(1188) 						T_dat=myFIB.i[0];
    00E71 9020 0348 LDS	R2,myFIB
    00E73 9030 0349 LDS	R3,myFIB+1
    00E75 9230 02E2 STS	T_dat+1,R3
    00E77 9220 02E1 STS	T_dat,R2
(1189) 						SendManchester();//流量-相位2
    00E79 940E 18C1 CALL	_SendManchester
(1190) 						crc16array[6]=(unsigned char)(T_dat);
    00E7B 9020 02E1 LDS	R2,T_dat
    00E7D 9030 02E2 LDS	R3,T_dat+1
    00E7F 9220 0106 STS	crc16array+6,R2
(1191) 						crc16array[7]=(unsigned char)(T_dat>>8);
    00E81 2C23      MOV	R2,R3
    00E82 2433      CLR	R3
    00E83 FC27      SBRC	R2,7
    00E84 9430      COM	R3
    00E85 9220 0107 STS	crc16array+7,R2
(1192) 
(1193) 						Delay_ms(30);	
    00E87 E10E      LDI	R16,0x1E
    00E88 E010      LDI	R17,0
    00E89 940E 05F4 CALL	_Delay_ms
(1194) 						crc16(crc16array,8);//0.75ms
    00E8B E028      LDI	R18,0x8
    00E8C E030      LDI	R19,0
    00E8D E000      LDI	R16,0
    00E8E E011      LDI	R17,1
    00E8F 940E 1D09 CALL	_crc16
(1195) 						T_dat=crc16hi;
    00E91 9020 0121 LDS	R2,crc16hi
    00E93 2433      CLR	R3
    00E94 9230 02E2 STS	T_dat+1,R3
    00E96 9220 02E1 STS	T_dat,R2
(1196) 						T_dat<<=8;
    00E98 9020 02E1 LDS	R2,T_dat
    00E9A 9030 02E2 LDS	R3,T_dat+1
    00E9C 2C32      MOV	R3,R2
    00E9D 2422      CLR	R2
    00E9E 9230 02E2 STS	T_dat+1,R3
    00EA0 9220 02E1 STS	T_dat,R2
(1197) 						T_dat|=crc16lo;	  
    00EA2 9020 0120 LDS	R2,crc16lo
    00EA4 2433      CLR	R3
    00EA5 9040 02E1 LDS	R4,T_dat
    00EA7 9050 02E2 LDS	R5,T_dat+1
    00EA9 2842      OR	R4,R2
    00EAA 2853      OR	R5,R3
    00EAB 9250 02E2 STS	T_dat+1,R5
    00EAD 9240 02E1 STS	T_dat,R4
(1198) 						SendManchester();//上传CRC校验共2字节
    00EAF 940E 18C1 CALL	_SendManchester
(1199) 						break;
    00EB1 940C 18B4 JMP	0x18B4
(1200) 					
(1201) 					//收放电机 
(1202) 					case 0x60:  
(1203) 						if( !(((R_dat)==0x61)  || ((R_dat)==0x62) ) )//既不是正转，也不是反转，则立即返回且不响应上位机
    00EB3 90A0 02DF LDS	R10,R_dat
    00EB5 90B0 02E0 LDS	R11,R_dat+1
    00EB7 01C5      MOVW	R24,R10
    00EB8 3681      CPI	R24,0x61
    00EB9 E0E0      LDI	R30,0
    00EBA 079E      CPC	R25,R30
    00EBB F031      BEQ	0x0EC2
    00EBC 3682      CPI	R24,0x62
    00EBD E0E0      LDI	R30,0
    00EBE 079E      CPC	R25,R30
    00EBF F011      BEQ	0x0EC2
(1204) 							break;
    00EC0 940C 18B4 JMP	0x18B4
(1205) 
(1206) 					    SendUart1(R_dat,200);//1600ms超时
    00EC2 EC28      LDI	R18,0xC8
    00EC3 E030      LDI	R19,0
    00EC4 9100 02DF LDS	R16,R_dat
    00EC6 9110 02E0 LDS	R17,R_dat+1
    00EC8 940E 02B3 CALL	_SendUart1
(1207) 						T_dat=Uart1RxData[1];
    00ECA 9020 02F7 LDS	R2,Uart1RxData+1
    00ECC 2433      CLR	R3
    00ECD 9230 02E2 STS	T_dat+1,R3
    00ECF 9220 02E1 STS	T_dat,R2
(1208) 						T_dat<<=8;
    00ED1 9020 02E1 LDS	R2,T_dat
    00ED3 9030 02E2 LDS	R3,T_dat+1
    00ED5 2C32      MOV	R3,R2
    00ED6 2422      CLR	R2
    00ED7 9230 02E2 STS	T_dat+1,R3
    00ED9 9220 02E1 STS	T_dat,R2
(1209) 						T_dat|=Uart1RxData[0];//返回电机状态
    00EDB 9020 02F6 LDS	R2,Uart1RxData
    00EDD 2433      CLR	R3
    00EDE 9040 02E1 LDS	R4,T_dat
    00EE0 9050 02E2 LDS	R5,T_dat+1
    00EE2 2842      OR	R4,R2
    00EE3 2853      OR	R5,R3
    00EE4 9250 02E2 STS	T_dat+1,R5
    00EE6 9240 02E1 STS	T_dat,R4
(1210) 						SendManchester();	 
    00EE8 940E 18C1 CALL	_SendManchester
(1211) 
(1212) 						break;
    00EEA 940C 18B4 JMP	0x18B4
(1213) 
(1214) 					case 0x70://调节电机   
(1215) 						if( ((R_dat)<0x71)  || ((R_dat)>0x7c)  )//既不是调大，也不是调小，也不微调大，也不是微调小，则立即返回且不响应上位机
    00EEC 90A0 02DF LDS	R10,R_dat
    00EEE 90B0 02E0 LDS	R11,R_dat+1
    00EF0 01C5      MOVW	R24,R10
    00EF1 3781      CPI	R24,0x71
    00EF2 E0E0      LDI	R30,0
    00EF3 079E      CPC	R25,R30
    00EF4 F02C      BLT	0x0EFA
    00EF5 E78C      LDI	R24,0x7C
    00EF6 E090      LDI	R25,0
    00EF7 158A      CP	R24,R10
    00EF8 059B      CPC	R25,R11
    00EF9 F414      BGE	0x0EFC
(1216) 						break;
    00EFA 940C 18B4 JMP	0x18B4
(1217) 
(1218) 				        SendUart1(R_dat,200);//1600ms超时
    00EFC EC28      LDI	R18,0xC8
    00EFD E030      LDI	R19,0
    00EFE 9100 02DF LDS	R16,R_dat
    00F00 9110 02E0 LDS	R17,R_dat+1
    00F02 940E 02B3 CALL	_SendUart1
(1219) 						T_dat=Uart1RxData[1];
    00F04 9020 02F7 LDS	R2,Uart1RxData+1
    00F06 2433      CLR	R3
    00F07 9230 02E2 STS	T_dat+1,R3
    00F09 9220 02E1 STS	T_dat,R2
(1220) 						T_dat<<=8;
    00F0B 9020 02E1 LDS	R2,T_dat
    00F0D 9030 02E2 LDS	R3,T_dat+1
    00F0F 2C32      MOV	R3,R2
    00F10 2422      CLR	R2
    00F11 9230 02E2 STS	T_dat+1,R3
    00F13 9220 02E1 STS	T_dat,R2
(1221) 						T_dat|=Uart1RxData[0];
    00F15 9020 02F6 LDS	R2,Uart1RxData
    00F17 2433      CLR	R3
    00F18 9040 02E1 LDS	R4,T_dat
    00F1A 9050 02E2 LDS	R5,T_dat+1
    00F1C 2842      OR	R4,R2
    00F1D 2853      OR	R5,R3
    00F1E 9250 02E2 STS	T_dat+1,R5
    00F20 9240 02E1 STS	T_dat,R4
(1222) 						SendManchester();	 
    00F22 940E 18C1 CALL	_SendManchester
(1223) 						break;
    00F24 940C 18B4 JMP	0x18B4
(1224) 
(1225) 					case 0x80://电机相关
(1226) 						if(R_dat==0x80)//只开电机电源，不开电机
    00F26 9180 02DF LDS	R24,R_dat
    00F28 9190 02E0 LDS	R25,R_dat+1
    00F2A 3880      CPI	R24,0x80
    00F2B E0E0      LDI	R30,0
    00F2C 079E      CPC	R25,R30
    00F2D F481      BNE	0x0F3E
(1227) 						{        	  
(1228) 							SendUart1(0x80,4);//32ms超时
    00F2E E024      LDI	R18,4
    00F2F E030      LDI	R19,0
    00F30 E800      LDI	R16,0x80
    00F31 940E 02B3 CALL	_SendUart1
(1229) 						    T_dat=Uart1RxData[0];
    00F33 9020 02F6 LDS	R2,Uart1RxData
    00F35 2433      CLR	R3
    00F36 9230 02E2 STS	T_dat+1,R3
    00F38 9220 02E1 STS	T_dat,R2
(1230) 							SendManchester();
    00F3A 940E 18C1 CALL	_SendManchester
(1231) 						}	  
    00F3C 940C 18B4 JMP	0x18B4
(1232) 						else if(R_dat==0x81)//获取电机状态	
    00F3E 9180 02DF LDS	R24,R_dat
    00F40 9190 02E0 LDS	R25,R_dat+1
    00F42 3881      CPI	R24,0x81
    00F43 E0E0      LDI	R30,0
    00F44 079E      CPC	R25,R30
    00F45 F009      BEQ	0x0F47
    00F46 C04B      RJMP	0x0F92
(1233) 						{ 
(1234) 						    SendUart1(0x81,4);//32ms超时
    00F47 E024      LDI	R18,4
    00F48 E030      LDI	R19,0
    00F49 E801      LDI	R16,0x81
    00F4A 940E 02B3 CALL	_SendUart1
(1235) 						
(1236) 							//先处理收放电机
(1237) 							T_dat=Uart1RxData[1];
    00F4C 9020 02F7 LDS	R2,Uart1RxData+1
    00F4E 2433      CLR	R3
    00F4F 9230 02E2 STS	T_dat+1,R3
    00F51 9220 02E1 STS	T_dat,R2
(1238) 						    T_dat<<=8;
    00F53 9020 02E1 LDS	R2,T_dat
    00F55 9030 02E2 LDS	R3,T_dat+1
    00F57 2C32      MOV	R3,R2
    00F58 2422      CLR	R2
    00F59 9230 02E2 STS	T_dat+1,R3
    00F5B 9220 02E1 STS	T_dat,R2
(1239) 						    T_dat|=Uart1RxData[0];
    00F5D 9020 02F6 LDS	R2,Uart1RxData
    00F5F 2433      CLR	R3
    00F60 9040 02E1 LDS	R4,T_dat
    00F62 9050 02E2 LDS	R5,T_dat+1
    00F64 2842      OR	R4,R2
    00F65 2853      OR	R5,R3
    00F66 9250 02E2 STS	T_dat+1,R5
    00F68 9240 02E1 STS	T_dat,R4
(1240) 							SendManchester();
    00F6A 940E 18C1 CALL	_SendManchester
(1241) 
(1242) 							//再处理调节电机 
(1243) 							Delay_ms(30);//延迟10ms  
    00F6C E10E      LDI	R16,0x1E
    00F6D E010      LDI	R17,0
    00F6E 940E 05F4 CALL	_Delay_ms
(1244) 							T_dat=Uart1RxData[3];
    00F70 9020 02F9 LDS	R2,Uart1RxData+3
    00F72 2433      CLR	R3
    00F73 9230 02E2 STS	T_dat+1,R3
    00F75 9220 02E1 STS	T_dat,R2
(1245) 						    T_dat<<=8;
    00F77 9020 02E1 LDS	R2,T_dat
    00F79 9030 02E2 LDS	R3,T_dat+1
    00F7B 2C32      MOV	R3,R2
    00F7C 2422      CLR	R2
    00F7D 9230 02E2 STS	T_dat+1,R3
    00F7F 9220 02E1 STS	T_dat,R2
(1246) 						    T_dat|=Uart1RxData[2];
    00F81 9020 02F8 LDS	R2,Uart1RxData+2
    00F83 2433      CLR	R3
    00F84 9040 02E1 LDS	R4,T_dat
    00F86 9050 02E2 LDS	R5,T_dat+1
    00F88 2842      OR	R4,R2
    00F89 2853      OR	R5,R3
    00F8A 9250 02E2 STS	T_dat+1,R5
    00F8C 9240 02E1 STS	T_dat,R4
(1247) 							SendManchester();
    00F8E 940E 18C1 CALL	_SendManchester
(1248) 						}	  
    00F90 940C 18B4 JMP	0x18B4
(1249) 						else if(R_dat==0x82)//电机停止，同时停止二个电机
    00F92 9180 02DF LDS	R24,R_dat
    00F94 9190 02E0 LDS	R25,R_dat+1
    00F96 3882      CPI	R24,0x82
    00F97 E0E0      LDI	R30,0
    00F98 079E      CPC	R25,R30
    00F99 F481      BNE	0x0FAA
(1250) 						{	 
(1251) 							SendUart1(0x82,30);//240ms超时
    00F9A E12E      LDI	R18,0x1E
    00F9B E030      LDI	R19,0
    00F9C E802      LDI	R16,0x82
    00F9D 940E 02B3 CALL	_SendUart1
(1252) 						    T_dat=Uart1RxData[0];
    00F9F 9020 02F6 LDS	R2,Uart1RxData
    00FA1 2433      CLR	R3
    00FA2 9230 02E2 STS	T_dat+1,R3
    00FA4 9220 02E1 STS	T_dat,R2
(1253) 							SendManchester(); 
    00FA6 940E 18C1 CALL	_SendManchester
(1254) 						}
    00FA8 940C 18B4 JMP	0x18B4
(1255) 						else if(R_dat==0x83)//读取电机堵转电流档位和断路档位
    00FAA 9180 02DF LDS	R24,R_dat
    00FAC 9190 02E0 LDS	R25,R_dat+1
    00FAE 3883      CPI	R24,0x83
    00FAF E0E0      LDI	R30,0
    00FB0 079E      CPC	R25,R30
    00FB1 F539      BNE	0x0FD9
(1256) 						{
(1257) 							SendUart1(0x83,4);//32ms超时
    00FB2 E024      LDI	R18,4
    00FB3 E030      LDI	R19,0
    00FB4 E803      LDI	R16,0x83
    00FB5 940E 02B3 CALL	_SendUart1
(1258) 							T_dat=Uart1RxData[1];
    00FB7 9020 02F7 LDS	R2,Uart1RxData+1
    00FB9 2433      CLR	R3
    00FBA 9230 02E2 STS	T_dat+1,R3
    00FBC 9220 02E1 STS	T_dat,R2
(1259) 						    T_dat<<=8;
    00FBE 9020 02E1 LDS	R2,T_dat
    00FC0 9030 02E2 LDS	R3,T_dat+1
    00FC2 2C32      MOV	R3,R2
    00FC3 2422      CLR	R2
    00FC4 9230 02E2 STS	T_dat+1,R3
    00FC6 9220 02E1 STS	T_dat,R2
(1260) 						    T_dat|=Uart1RxData[0];
    00FC8 9020 02F6 LDS	R2,Uart1RxData
    00FCA 2433      CLR	R3
    00FCB 9040 02E1 LDS	R4,T_dat
    00FCD 9050 02E2 LDS	R5,T_dat+1
    00FCF 2842      OR	R4,R2
    00FD0 2853      OR	R5,R3
    00FD1 9250 02E2 STS	T_dat+1,R5
    00FD3 9240 02E1 STS	T_dat,R4
(1261) 							SendManchester();
    00FD5 940E 18C1 CALL	_SendManchester
(1262) 						}	
    00FD7 940C 18B4 JMP	0x18B4
(1263) 						else if(R_dat>0x83)//还剩12档，用于设置电机堵转电流, 收放电机和调节电机各6档
    00FD9 E883      LDI	R24,0x83
    00FDA E090      LDI	R25,0
    00FDB 9020 02DF LDS	R2,R_dat
    00FDD 9030 02E0 LDS	R3,R_dat+1
    00FDF 1582      CP	R24,R2
    00FE0 0593      CPC	R25,R3
    00FE1 F014      BLT	0x0FE4
    00FE2 940C 18B4 JMP	0x18B4
(1264) 						{
(1265) 							SendUart1(R_dat,4);//32ms超时
    00FE4 E024      LDI	R18,4
    00FE5 E030      LDI	R19,0
    00FE6 0181      MOVW	R16,R2
    00FE7 940E 02B3 CALL	_SendUart1
(1266) 						    T_dat=Uart1RxData[0];
    00FE9 9020 02F6 LDS	R2,Uart1RxData
    00FEB 2433      CLR	R3
    00FEC 9230 02E2 STS	T_dat+1,R3
    00FEE 9220 02E1 STS	T_dat,R2
(1267) 							SendManchester();
    00FF0 940E 18C1 CALL	_SendManchester
(1268) 						}	  
(1269) 						break;
    00FF2 940C 18B4 JMP	0x18B4
(1270) 
(1271) 
(1272) 
(1273) 					case 0x90: //标定数据
(1274) 						if(R_dat==0x90)//提取测试信息
    00FF4 9180 02DF LDS	R24,R_dat
    00FF6 9190 02E0 LDS	R25,R_dat+1
    00FF8 3980      CPI	R24,0x90
    00FF9 E0E0      LDI	R30,0
    00FFA 079E      CPC	R25,R30
    00FFB F009      BEQ	0x0FFD
    00FFC C113      RJMP	0x1110
(1275) 						{
(1276) 							Uart0TxData[0]=0xE8;
    00FFD EE88      LDI	R24,0xE8
    00FFE 9380 012F STS	Uart0TxData,R24
(1277) 							Uart0TxData[1]=0x40;
    01000 E480      LDI	R24,0x40
    01001 9380 0130 STS	Uart0TxData+1,R24
(1278) 							Uart0TxData[2]=0xc8;
    01003 EC88      LDI	R24,0xC8
    01004 9380 0131 STS	Uart0TxData+2,R24
(1279) 							Uart0TxData[3]=0;//测试信息包0
    01006 2422      CLR	R2
    01007 9220 0132 STS	Uart0TxData+3,R2
(1280) 							SendUart0_2(9,4);// 超时32ms	 
    01009 E024      LDI	R18,4
    0100A E030      LDI	R19,0
    0100B E009      LDI	R16,0x9
    0100C 940E 04EB CALL	_SendUart0_2
(1281) 							for(i=0;i<32;i++)
    0100E 24AA      CLR	R10
    0100F C02F      RJMP	0x103F
(1282) 							{
(1283) 								Delay_ms(20);
    01010 E104      LDI	R16,0x14
    01011 E010      LDI	R17,0
    01012 940E 05F4 CALL	_Delay_ms
(1284) 								T_dat=Uart0RxData[i*2+1];//高字节
    01014 EF8C      LDI	R24,0xFC
    01015 E092      LDI	R25,2
    01016 2DEA      MOV	R30,R10
    01017 27FF      CLR	R31
    01018 0FEE      LSL	R30
    01019 1FFF      ROL	R31
    0101A 0FE8      ADD	R30,R24
    0101B 1FF9      ADC	R31,R25
    0101C 8020      LD	R2,Z
    0101D 2433      CLR	R3
    0101E 9230 02E2 STS	T_dat+1,R3
    01020 9220 02E1 STS	T_dat,R2
(1285) 								T_dat<<=8;
    01022 2C32      MOV	R3,R2
    01023 2422      CLR	R2
    01024 9230 02E2 STS	T_dat+1,R3
    01026 9220 02E1 STS	T_dat,R2
(1286) 								T_dat|=Uart0RxData[i*2+0];//低字节
    01028 EF8B      LDI	R24,0xFB
    01029 E092      LDI	R25,2
    0102A 2DEA      MOV	R30,R10
    0102B 27FF      CLR	R31
    0102C 0FEE      LSL	R30
    0102D 1FFF      ROL	R31
    0102E 0FE8      ADD	R30,R24
    0102F 1FF9      ADC	R31,R25
    01030 8020      LD	R2,Z
    01031 2433      CLR	R3
    01032 9040 02E1 LDS	R4,T_dat
    01034 9050 02E2 LDS	R5,T_dat+1
    01036 2842      OR	R4,R2
    01037 2853      OR	R5,R3
    01038 9250 02E2 STS	T_dat+1,R5
    0103A 9240 02E1 STS	T_dat,R4
(1287) 								SendManchester();		 
    0103C 940E 18C1 CALL	_SendManchester
    0103E 94A3      INC	R10
    0103F 2D8A      MOV	R24,R10
    01040 3280      CPI	R24,0x20
    01041 F270      BCS	0x1010
(1288) 							}		
(1289) 
(1290) 							Uart0TxData[0]=0xE8;
    01042 EE88      LDI	R24,0xE8
    01043 9380 012F STS	Uart0TxData,R24
(1291) 							Uart0TxData[1]=0x40;
    01045 E480      LDI	R24,0x40
    01046 9380 0130 STS	Uart0TxData+1,R24
(1292) 							Uart0TxData[2]=0xc8;
    01048 EC88      LDI	R24,0xC8
    01049 9380 0131 STS	Uart0TxData+2,R24
(1293) 							Uart0TxData[3]=1;//测试信息包1
    0104B E081      LDI	R24,1
    0104C 9380 0132 STS	Uart0TxData+3,R24
(1294) 							SendUart0_2(9,4);// 超时32ms	 
    0104E E024      LDI	R18,4
    0104F E030      LDI	R19,0
    01050 E009      LDI	R16,0x9
    01051 940E 04EB CALL	_SendUart0_2
(1295) 							for(i=0;i<32;i++)
    01053 24AA      CLR	R10
    01054 C02F      RJMP	0x1084
(1296) 							{
(1297) 								T_dat=Uart0RxData[i*2+1];//高字节
    01055 EF8C      LDI	R24,0xFC
    01056 E092      LDI	R25,2
    01057 2DEA      MOV	R30,R10
    01058 27FF      CLR	R31
    01059 0FEE      LSL	R30
    0105A 1FFF      ROL	R31
    0105B 0FE8      ADD	R30,R24
    0105C 1FF9      ADC	R31,R25
    0105D 8020      LD	R2,Z
    0105E 2433      CLR	R3
    0105F 9230 02E2 STS	T_dat+1,R3
    01061 9220 02E1 STS	T_dat,R2
(1298) 								T_dat<<=8;
    01063 2C32      MOV	R3,R2
    01064 2422      CLR	R2
    01065 9230 02E2 STS	T_dat+1,R3
    01067 9220 02E1 STS	T_dat,R2
(1299) 								T_dat|=Uart0RxData[i*2+0];//低字节
    01069 EF8B      LDI	R24,0xFB
    0106A E092      LDI	R25,2
    0106B 2DEA      MOV	R30,R10
    0106C 27FF      CLR	R31
    0106D 0FEE      LSL	R30
    0106E 1FFF      ROL	R31
    0106F 0FE8      ADD	R30,R24
    01070 1FF9      ADC	R31,R25
    01071 8020      LD	R2,Z
    01072 2433      CLR	R3
    01073 9040 02E1 LDS	R4,T_dat
    01075 9050 02E2 LDS	R5,T_dat+1
    01077 2842      OR	R4,R2
    01078 2853      OR	R5,R3
    01079 9250 02E2 STS	T_dat+1,R5
    0107B 9240 02E1 STS	T_dat,R4
(1300) 								SendManchester();
    0107D 940E 18C1 CALL	_SendManchester
(1301) 								Delay_ms(20);
    0107F E104      LDI	R16,0x14
    01080 E010      LDI	R17,0
    01081 940E 05F4 CALL	_Delay_ms
    01083 94A3      INC	R10
    01084 2D8A      MOV	R24,R10
    01085 3280      CPI	R24,0x20
    01086 F270      BCS	0x1055
(1302) 							}	
(1303) 
(1304) 							Uart0TxData[0]=0xE8;
    01087 EE88      LDI	R24,0xE8
    01088 9380 012F STS	Uart0TxData,R24
(1305) 							Uart0TxData[1]=0x40;
    0108A E480      LDI	R24,0x40
    0108B 9380 0130 STS	Uart0TxData+1,R24
(1306) 							Uart0TxData[2]=0xc8;
    0108D EC88      LDI	R24,0xC8
    0108E 9380 0131 STS	Uart0TxData+2,R24
(1307) 							Uart0TxData[3]=2;//测试信息包2
    01090 E082      LDI	R24,2
    01091 9380 0132 STS	Uart0TxData+3,R24
(1308) 							SendUart0_2(9,4);// 超时32ms	 
    01093 E024      LDI	R18,4
    01094 E030      LDI	R19,0
    01095 E009      LDI	R16,0x9
    01096 940E 04EB CALL	_SendUart0_2
(1309) 							for(i=0;i<32;i++)
    01098 24AA      CLR	R10
    01099 C02E      RJMP	0x10C8
(1310) 							{
(1311) 								T_dat=Uart0RxData[i*2+1];//高字节
    0109A EF8C      LDI	R24,0xFC
    0109B E092      LDI	R25,2
    0109C 2DEA      MOV	R30,R10
    0109D 27FF      CLR	R31
    0109E 0FEE      LSL	R30
    0109F 1FFF      ROL	R31
    010A0 0FE8      ADD	R30,R24
    010A1 1FF9      ADC	R31,R25
    010A2 8020      LD	R2,Z
    010A3 2433      CLR	R3
    010A4 9230 02E2 STS	T_dat+1,R3
    010A6 9220 02E1 STS	T_dat,R2
(1312) 								T_dat<<=8;
    010A8 2C32      MOV	R3,R2
    010A9 2422      CLR	R2
    010AA 9230 02E2 STS	T_dat+1,R3
    010AC 9220 02E1 STS	T_dat,R2
(1313) 								T_dat|=Uart0RxData[i*2+0];//低字节
    010AE EF8B      LDI	R24,0xFB
    010AF E092      LDI	R25,2
    010B0 2DEA      MOV	R30,R10
    010B1 27FF      CLR	R31
    010B2 0FEE      LSL	R30
    010B3 1FFF      ROL	R31
    010B4 0FE8      ADD	R30,R24
    010B5 1FF9      ADC	R31,R25
    010B6 8020      LD	R2,Z
    010B7 2433      CLR	R3
    010B8 9040 02E1 LDS	R4,T_dat
    010BA 9050 02E2 LDS	R5,T_dat+1
    010BC 2842      OR	R4,R2
    010BD 2853      OR	R5,R3
    010BE 9250 02E2 STS	T_dat+1,R5
    010C0 9240 02E1 STS	T_dat,R4
(1314) 								SendManchester();
    010C2 D7FE      RCALL	_SendManchester
(1315) 								Delay_ms(20);
    010C3 E104      LDI	R16,0x14
    010C4 E010      LDI	R17,0
    010C5 940E 05F4 CALL	_Delay_ms
    010C7 94A3      INC	R10
    010C8 2D8A      MOV	R24,R10
    010C9 3280      CPI	R24,0x20
    010CA F278      BCS	0x109A
(1316) 							}		
(1317) 
(1318) 							Uart0TxData[0]=0xE8;
    010CB EE88      LDI	R24,0xE8
    010CC 9380 012F STS	Uart0TxData,R24
(1319) 							Uart0TxData[1]=0x40;
    010CE E480      LDI	R24,0x40
    010CF 9380 0130 STS	Uart0TxData+1,R24
(1320) 							Uart0TxData[2]=0xc8;
    010D1 EC88      LDI	R24,0xC8
    010D2 9380 0131 STS	Uart0TxData+2,R24
(1321) 							Uart0TxData[3]=3;//测试信息包3
    010D4 E083      LDI	R24,3
    010D5 9380 0132 STS	Uart0TxData+3,R24
(1322) 							SendUart0_2(9,4);// 超时32ms	 
    010D7 E024      LDI	R18,4
    010D8 E030      LDI	R19,0
    010D9 E009      LDI	R16,0x9
    010DA 940E 04EB CALL	_SendUart0_2
(1323) 							for(i=0;i<32;i++)
    010DC 24AA      CLR	R10
    010DD C02E      RJMP	0x110C
(1324) 							{
(1325) 								T_dat=Uart0RxData[i*2+1];//高字节
    010DE EF8C      LDI	R24,0xFC
    010DF E092      LDI	R25,2
    010E0 2DEA      MOV	R30,R10
    010E1 27FF      CLR	R31
    010E2 0FEE      LSL	R30
    010E3 1FFF      ROL	R31
    010E4 0FE8      ADD	R30,R24
    010E5 1FF9      ADC	R31,R25
    010E6 8020      LD	R2,Z
    010E7 2433      CLR	R3
    010E8 9230 02E2 STS	T_dat+1,R3
    010EA 9220 02E1 STS	T_dat,R2
(1326) 								T_dat<<=8;
    010EC 2C32      MOV	R3,R2
    010ED 2422      CLR	R2
    010EE 9230 02E2 STS	T_dat+1,R3
    010F0 9220 02E1 STS	T_dat,R2
(1327) 								T_dat|=Uart0RxData[i*2+0];//低字节
    010F2 EF8B      LDI	R24,0xFB
    010F3 E092      LDI	R25,2
    010F4 2DEA      MOV	R30,R10
    010F5 27FF      CLR	R31
    010F6 0FEE      LSL	R30
    010F7 1FFF      ROL	R31
    010F8 0FE8      ADD	R30,R24
    010F9 1FF9      ADC	R31,R25
    010FA 8020      LD	R2,Z
    010FB 2433      CLR	R3
    010FC 9040 02E1 LDS	R4,T_dat
    010FE 9050 02E2 LDS	R5,T_dat+1
    01100 2842      OR	R4,R2
    01101 2853      OR	R5,R3
    01102 9250 02E2 STS	T_dat+1,R5
    01104 9240 02E1 STS	T_dat,R4
(1328) 								SendManchester();
    01106 D7BA      RCALL	_SendManchester
(1329) 								Delay_ms(20);
    01107 E104      LDI	R16,0x14
    01108 E010      LDI	R17,0
    01109 940E 05F4 CALL	_Delay_ms
    0110B 94A3      INC	R10
    0110C 2D8A      MOV	R24,R10
    0110D 3280      CPI	R24,0x20
    0110E F278      BCS	0x10DE
(1330) 							}			
(1331) 						}
    0110F C7A4      RJMP	0x18B4
(1332) 						else if(R_dat==0x91)//上传压力标定数据,20ms/帧 	
    01110 9180 02DF LDS	R24,R_dat
    01112 9190 02E0 LDS	R25,R_dat+1
    01114 3981      CPI	R24,0x91
    01115 E0E0      LDI	R30,0
    01116 079E      CPC	R25,R30
    01117 F521      BNE	0x113C
(1333) 						{
(1334) 							//先获取总标定点数    
(1335) 							DataFlag=3;
    01118 E083      LDI	R24,3
    01119 E090      LDI	R25,0
    0111A 9390 02C2 STS	DataFlag+1,R25
    0111C 9380 02C1 STS	DataFlag,R24
(1336) 							coeff_len=4;//上位机还需传4字节，分别为首块地址和包数
    0111E E084      LDI	R24,4
    0111F 9390 012D STS	coeff_len+1,R25
    01121 9380 012C STS	coeff_len,R24
(1337) 							coeff_count=0;
    01123 2422      CLR	R2
    01124 2433      CLR	R3
    01125 9230 012B STS	coeff_count+1,R3
    01127 9220 012A STS	coeff_count,R2
(1338) 							TimeOutFlag=0;
    01129 9220 02D9 STS	TimeOutFlag,R2
(1339) 							Timer0Counter=200;//1.6s定时
    0112B EC88      LDI	R24,0xC8
    0112C 9390 0346 STS	Timer0Counter+1,R25
    0112E 9380 0345 STS	Timer0Counter,R24
(1340) 							TCNT0=0x06; //8ms
    01130 E086      LDI	R24,6
    01131 BF82      OUT	0x32,R24
(1341) 							TCCR0|=0x06;//256分频
    01132 B783      IN	R24,0x33
    01133 6086      ORI	R24,6
    01134 BF83      OUT	0x33,R24
(1342) 							TIFR|=0x01; //清定时器0中断标志
    01135 B786      IN	R24,0x36
    01136 6081      ORI	R24,1
    01137 BF86      OUT	0x36,R24
(1343) 							TIMSK|=0x01;//使能定时器0中断		
    01138 B787      IN	R24,0x37
    01139 6081      ORI	R24,1
    0113A BF87      OUT	0x37,R24
(1344) 						}
    0113B C778      RJMP	0x18B4
(1345) 						else if(R_dat==0x92)//清空标定数据,整机格式化  
    0113C 9180 02DF LDS	R24,R_dat
    0113E 9190 02E0 LDS	R25,R_dat+1
    01140 3982      CPI	R24,0x92
    01141 E0E0      LDI	R30,0
    01142 079E      CPC	R25,R30
    01143 F5E1      BNE	0x1180
(1346) 						{ 	
(1347) 							Uart0TxData[0]=0xE8;
    01144 EE88      LDI	R24,0xE8
    01145 9380 012F STS	Uart0TxData,R24
(1348) 							Uart0TxData[1]=0x40;
    01147 E480      LDI	R24,0x40
    01148 9380 0130 STS	Uart0TxData+1,R24
(1349) 							Uart0TxData[2]=0x8c;
    0114A E88C      LDI	R24,0x8C
    0114B 9380 0131 STS	Uart0TxData+2,R24
(1350) 							Uart0TxData[3]=8;
    0114D E088      LDI	R24,0x8
    0114E 9380 0132 STS	Uart0TxData+3,R24
(1351) 							Uart0TxData[4]=0;
    01150 2422      CLR	R2
    01151 9220 0133 STS	Uart0TxData+4,R2
(1352) 							Uart0TxData[5]=0;
    01153 9220 0134 STS	Uart0TxData+5,R2
(1353) 							Uart0TxData[6]=0xff;
    01155 EF8F      LDI	R24,0xFF
    01156 9380 0135 STS	Uart0TxData+6,R24
(1354) 							Uart0TxData[7]=0xff;
    01158 9380 0136 STS	Uart0TxData+7,R24
(1355) 							SendUart0_3(9,5000,9);// 最大超时40秒
    0115A E089      LDI	R24,0x9
    0115B 8388      ST	Y,R24
    0115C E828      LDI	R18,0x88
    0115D E133      LDI	R19,0x13
    0115E E009      LDI	R16,0x9
    0115F 940E 0535 CALL	_SendUart0_3
(1356) 							if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8c))
    01161 9180 02FA LDS	R24,Uart0RxCounter
    01163 3089      CPI	R24,0x9
    01164 F499      BNE	0x1178
    01165 9180 02FB LDS	R24,Uart0RxData
    01167 3585      CPI	R24,0x55
    01168 F479      BNE	0x1178
    01169 9180 02FC LDS	R24,Uart0RxData+1
    0116B 3480      CPI	R24,0x40
    0116C F459      BNE	0x1178
    0116D 9180 02FD LDS	R24,Uart0RxData+2
    0116F 388C      CPI	R24,0x8C
    01170 F439      BNE	0x1178
(1357) 								{T_dat=0x0000;}
    01171 2422      CLR	R2
    01172 2433      CLR	R3
    01173 9230 02E2 STS	T_dat+1,R3
    01175 9220 02E1 STS	T_dat,R2
    01177 C006      RJMP	0x117E
(1358) 							else
(1359) 								{T_dat=0xffff;}
    01178 EF8F      LDI	R24,0xFF
    01179 EF9F      LDI	R25,0xFF
    0117A 9390 02E2 STS	T_dat+1,R25
    0117C 9380 02E1 STS	T_dat,R24
(1360) 							SendManchester();	 
    0117E D742      RCALL	_SendManchester
(1361) 						}
    0117F C734      RJMP	0x18B4
(1362) 						else if(R_dat==0x93)//上传全部系数，共256字节分128帧上传
    01180 9180 02DF LDS	R24,R_dat
    01182 9190 02E0 LDS	R25,R_dat+1
    01184 3983      CPI	R24,0x93
    01185 E0E0      LDI	R30,0
    01186 079E      CPC	R25,R30
    01187 F009      BEQ	0x1189
    01188 C122      RJMP	0x12AB
(1363) 						{
(1364) 							Uart0TxData[0]=0xE8;
    01189 EE88      LDI	R24,0xE8
    0118A 9380 012F STS	Uart0TxData,R24
(1365) 							Uart0TxData[1]=0x40;
    0118C E480      LDI	R24,0x40
    0118D 9380 0130 STS	Uart0TxData+1,R24
(1366) 							Uart0TxData[2]=0x87;
    0118F E887      LDI	R24,0x87
    01190 9380 0131 STS	Uart0TxData+2,R24
(1367) 							Uart0TxData[3]=0;//系数包0
    01192 2422      CLR	R2
    01193 9220 0132 STS	Uart0TxData+3,R2
(1368) 							SendUart0_2(9,4);// 超时32ms	
    01195 E024      LDI	R18,4
    01196 E030      LDI	R19,0
    01197 E009      LDI	R16,0x9
    01198 940E 04EB CALL	_SendUart0_2
(1369) 							if(Uart0RxCounter==64) 
    0119A 9180 02FA LDS	R24,Uart0RxCounter
    0119C 3480      CPI	R24,0x40
    0119D F599      BNE	0x11D1
(1370) 							{
(1371) 								for(i=0;i<32;i++)
    0119E 24AA      CLR	R10
    0119F C02E      RJMP	0x11CE
(1372) 								{
(1373) 									Delay_ms(20);
    011A0 E104      LDI	R16,0x14
    011A1 E010      LDI	R17,0
    011A2 940E 05F4 CALL	_Delay_ms
(1374) 									T_dat=Uart0RxData[i*2+1];//高字节
    011A4 EF8C      LDI	R24,0xFC
    011A5 E092      LDI	R25,2
    011A6 2DEA      MOV	R30,R10
    011A7 27FF      CLR	R31
    011A8 0FEE      LSL	R30
    011A9 1FFF      ROL	R31
    011AA 0FE8      ADD	R30,R24
    011AB 1FF9      ADC	R31,R25
    011AC 8020      LD	R2,Z
    011AD 2433      CLR	R3
    011AE 9230 02E2 STS	T_dat+1,R3
    011B0 9220 02E1 STS	T_dat,R2
(1375) 									T_dat<<=8;
    011B2 2C32      MOV	R3,R2
    011B3 2422      CLR	R2
    011B4 9230 02E2 STS	T_dat+1,R3
    011B6 9220 02E1 STS	T_dat,R2
(1376) 									T_dat|=Uart0RxData[i*2+0];//低字节
    011B8 EF8B      LDI	R24,0xFB
    011B9 E092      LDI	R25,2
    011BA 2DEA      MOV	R30,R10
    011BB 27FF      CLR	R31
    011BC 0FEE      LSL	R30
    011BD 1FFF      ROL	R31
    011BE 0FE8      ADD	R30,R24
    011BF 1FF9      ADC	R31,R25
    011C0 8020      LD	R2,Z
    011C1 2433      CLR	R3
    011C2 9040 02E1 LDS	R4,T_dat
    011C4 9050 02E2 LDS	R5,T_dat+1
    011C6 2842      OR	R4,R2
    011C7 2853      OR	R5,R3
    011C8 9250 02E2 STS	T_dat+1,R5
    011CA 9240 02E1 STS	T_dat,R4
(1377) 									SendManchester();		 
    011CC D6F4      RCALL	_SendManchester
    011CD 94A3      INC	R10
    011CE 2D8A      MOV	R24,R10
    011CF 3280      CPI	R24,0x20
    011D0 F278      BCS	0x11A0
(1378) 								}	
(1379) 							}	
(1380) 
(1381) 							Uart0TxData[0]=0xE8;
    011D1 EE88      LDI	R24,0xE8
    011D2 9380 012F STS	Uart0TxData,R24
(1382) 							Uart0TxData[1]=0x40;
    011D4 E480      LDI	R24,0x40
    011D5 9380 0130 STS	Uart0TxData+1,R24
(1383) 							Uart0TxData[2]=0x87;
    011D7 E887      LDI	R24,0x87
    011D8 9380 0131 STS	Uart0TxData+2,R24
(1384) 							Uart0TxData[3]=1;//系数包1
    011DA E081      LDI	R24,1
    011DB 9380 0132 STS	Uart0TxData+3,R24
(1385) 							SendUart0_2(9,4);// 超时32ms	 
    011DD E024      LDI	R18,4
    011DE E030      LDI	R19,0
    011DF E009      LDI	R16,0x9
    011E0 940E 04EB CALL	_SendUart0_2
(1386) 							if(Uart0RxCounter==64) 
    011E2 9180 02FA LDS	R24,Uart0RxCounter
    011E4 3480      CPI	R24,0x40
    011E5 F599      BNE	0x1219
(1387) 							{
(1388) 								for(i=0;i<32;i++)
    011E6 24AA      CLR	R10
    011E7 C02E      RJMP	0x1216
(1389) 								{
(1390) 									T_dat=Uart0RxData[i*2+1];//高字节
    011E8 EF8C      LDI	R24,0xFC
    011E9 E092      LDI	R25,2
    011EA 2DEA      MOV	R30,R10
    011EB 27FF      CLR	R31
    011EC 0FEE      LSL	R30
    011ED 1FFF      ROL	R31
    011EE 0FE8      ADD	R30,R24
    011EF 1FF9      ADC	R31,R25
    011F0 8020      LD	R2,Z
    011F1 2433      CLR	R3
    011F2 9230 02E2 STS	T_dat+1,R3
    011F4 9220 02E1 STS	T_dat,R2
(1391) 									T_dat<<=8;
    011F6 2C32      MOV	R3,R2
    011F7 2422      CLR	R2
    011F8 9230 02E2 STS	T_dat+1,R3
    011FA 9220 02E1 STS	T_dat,R2
(1392) 									T_dat|=Uart0RxData[i*2+0];//低字节
    011FC EF8B      LDI	R24,0xFB
    011FD E092      LDI	R25,2
    011FE 2DEA      MOV	R30,R10
    011FF 27FF      CLR	R31
    01200 0FEE      LSL	R30
    01201 1FFF      ROL	R31
    01202 0FE8      ADD	R30,R24
    01203 1FF9      ADC	R31,R25
    01204 8020      LD	R2,Z
    01205 2433      CLR	R3
    01206 9040 02E1 LDS	R4,T_dat
    01208 9050 02E2 LDS	R5,T_dat+1
    0120A 2842      OR	R4,R2
    0120B 2853      OR	R5,R3
    0120C 9250 02E2 STS	T_dat+1,R5
    0120E 9240 02E1 STS	T_dat,R4
(1393) 									SendManchester();
    01210 D6B0      RCALL	_SendManchester
(1394) 									Delay_ms(20);
    01211 E104      LDI	R16,0x14
    01212 E010      LDI	R17,0
    01213 940E 05F4 CALL	_Delay_ms
    01215 94A3      INC	R10
    01216 2D8A      MOV	R24,R10
    01217 3280      CPI	R24,0x20
    01218 F278      BCS	0x11E8
(1395) 								}
(1396) 							}		
(1397) 
(1398) 							Uart0TxData[0]=0xE8;
    01219 EE88      LDI	R24,0xE8
    0121A 9380 012F STS	Uart0TxData,R24
(1399) 							Uart0TxData[1]=0x40;
    0121C E480      LDI	R24,0x40
    0121D 9380 0130 STS	Uart0TxData+1,R24
(1400) 							Uart0TxData[2]=0x87;
    0121F E887      LDI	R24,0x87
    01220 9380 0131 STS	Uart0TxData+2,R24
(1401) 							Uart0TxData[3]=2;//系数包2
    01222 E082      LDI	R24,2
    01223 9380 0132 STS	Uart0TxData+3,R24
(1402) 							SendUart0_2(9,4);// 超时32ms	
    01225 E024      LDI	R18,4
    01226 E030      LDI	R19,0
    01227 E009      LDI	R16,0x9
    01228 940E 04EB CALL	_SendUart0_2
(1403) 							if(Uart0RxCounter==64) 
    0122A 9180 02FA LDS	R24,Uart0RxCounter
    0122C 3480      CPI	R24,0x40
    0122D F599      BNE	0x1261
(1404) 							{
(1405) 								for(i=0;i<32;i++)
    0122E 24AA      CLR	R10
    0122F C02E      RJMP	0x125E
(1406) 								{
(1407) 									Delay_ms(20);
    01230 E104      LDI	R16,0x14
    01231 E010      LDI	R17,0
    01232 940E 05F4 CALL	_Delay_ms
(1408) 									T_dat=Uart0RxData[i*2+1];//高字节
    01234 EF8C      LDI	R24,0xFC
    01235 E092      LDI	R25,2
    01236 2DEA      MOV	R30,R10
    01237 27FF      CLR	R31
    01238 0FEE      LSL	R30
    01239 1FFF      ROL	R31
    0123A 0FE8      ADD	R30,R24
    0123B 1FF9      ADC	R31,R25
    0123C 8020      LD	R2,Z
    0123D 2433      CLR	R3
    0123E 9230 02E2 STS	T_dat+1,R3
    01240 9220 02E1 STS	T_dat,R2
(1409) 									T_dat<<=8;
    01242 2C32      MOV	R3,R2
    01243 2422      CLR	R2
    01244 9230 02E2 STS	T_dat+1,R3
    01246 9220 02E1 STS	T_dat,R2
(1410) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01248 EF8B      LDI	R24,0xFB
    01249 E092      LDI	R25,2
    0124A 2DEA      MOV	R30,R10
    0124B 27FF      CLR	R31
    0124C 0FEE      LSL	R30
    0124D 1FFF      ROL	R31
    0124E 0FE8      ADD	R30,R24
    0124F 1FF9      ADC	R31,R25
    01250 8020      LD	R2,Z
    01251 2433      CLR	R3
    01252 9040 02E1 LDS	R4,T_dat
    01254 9050 02E2 LDS	R5,T_dat+1
    01256 2842      OR	R4,R2
    01257 2853      OR	R5,R3
    01258 9250 02E2 STS	T_dat+1,R5
    0125A 9240 02E1 STS	T_dat,R4
(1411) 									SendManchester();		 
    0125C D664      RCALL	_SendManchester
    0125D 94A3      INC	R10
    0125E 2D8A      MOV	R24,R10
    0125F 3280      CPI	R24,0x20
    01260 F278      BCS	0x1230
(1412) 								}	
(1413) 							}	
(1414) 
(1415) 							Uart0TxData[0]=0xE8;
    01261 EE88      LDI	R24,0xE8
    01262 9380 012F STS	Uart0TxData,R24
(1416) 							Uart0TxData[1]=0x40;
    01264 E480      LDI	R24,0x40
    01265 9380 0130 STS	Uart0TxData+1,R24
(1417) 							Uart0TxData[2]=0x87;
    01267 E887      LDI	R24,0x87
    01268 9380 0131 STS	Uart0TxData+2,R24
(1418) 							Uart0TxData[3]=3;//系数包3
    0126A E083      LDI	R24,3
    0126B 9380 0132 STS	Uart0TxData+3,R24
(1419) 							SendUart0_2(9,4);// 超时32ms	 
    0126D E024      LDI	R18,4
    0126E E030      LDI	R19,0
    0126F E009      LDI	R16,0x9
    01270 940E 04EB CALL	_SendUart0_2
(1420) 							if(Uart0RxCounter==64) 
    01272 9180 02FA LDS	R24,Uart0RxCounter
    01274 3480      CPI	R24,0x40
    01275 F009      BEQ	0x1277
    01276 C63D      RJMP	0x18B4
(1421) 							{
(1422) 								for(i=0;i<32;i++)
    01277 24AA      CLR	R10
    01278 C02E      RJMP	0x12A7
(1423) 								{
(1424) 									T_dat=Uart0RxData[i*2+1];//高字节
    01279 EF8C      LDI	R24,0xFC
    0127A E092      LDI	R25,2
    0127B 2DEA      MOV	R30,R10
    0127C 27FF      CLR	R31
    0127D 0FEE      LSL	R30
    0127E 1FFF      ROL	R31
    0127F 0FE8      ADD	R30,R24
    01280 1FF9      ADC	R31,R25
    01281 8020      LD	R2,Z
    01282 2433      CLR	R3
    01283 9230 02E2 STS	T_dat+1,R3
    01285 9220 02E1 STS	T_dat,R2
(1425) 									T_dat<<=8;
    01287 2C32      MOV	R3,R2
    01288 2422      CLR	R2
    01289 9230 02E2 STS	T_dat+1,R3
    0128B 9220 02E1 STS	T_dat,R2
(1426) 									T_dat|=Uart0RxData[i*2+0];//低字节
    0128D EF8B      LDI	R24,0xFB
    0128E E092      LDI	R25,2
    0128F 2DEA      MOV	R30,R10
    01290 27FF      CLR	R31
    01291 0FEE      LSL	R30
    01292 1FFF      ROL	R31
    01293 0FE8      ADD	R30,R24
    01294 1FF9      ADC	R31,R25
    01295 8020      LD	R2,Z
    01296 2433      CLR	R3
    01297 9040 02E1 LDS	R4,T_dat
    01299 9050 02E2 LDS	R5,T_dat+1
    0129B 2842      OR	R4,R2
    0129C 2853      OR	R5,R3
    0129D 9250 02E2 STS	T_dat+1,R5
    0129F 9240 02E1 STS	T_dat,R4
(1427) 									SendManchester();
    012A1 D61F      RCALL	_SendManchester
(1428) 									Delay_ms(20);
    012A2 E104      LDI	R16,0x14
    012A3 E010      LDI	R17,0
    012A4 940E 05F4 CALL	_Delay_ms
    012A6 94A3      INC	R10
    012A7 2D8A      MOV	R24,R10
    012A8 3280      CPI	R24,0x20
    012A9 F278      BCS	0x1279
(1429) 								}
(1430) 							}		
(1431) 						}
    012AA C609      RJMP	0x18B4
(1432) 						else if(R_dat>=0x9a)//设置电机断路电流 
    012AB 9180 02DF LDS	R24,R_dat
    012AD 9190 02E0 LDS	R25,R_dat+1
    012AF 398A      CPI	R24,0x9A
    012B0 E0E0      LDI	R30,0
    012B1 079E      CPC	R25,R30
    012B2 F40C      BGE	0x12B4
    012B3 C600      RJMP	0x18B4
(1433) 						{
(1434) 							SendUart1(R_dat,4);//32ms超时
    012B4 E024      LDI	R18,4
    012B5 E030      LDI	R19,0
    012B6 018C      MOVW	R16,R24
    012B7 940E 02B3 CALL	_SendUart1
(1435) 						    T_dat=Uart1RxData[0];
    012B9 9020 02F6 LDS	R2,Uart1RxData
    012BB 2433      CLR	R3
    012BC 9230 02E2 STS	T_dat+1,R3
    012BE 9220 02E1 STS	T_dat,R2
(1436) 							SendManchester();
    012C0 D600      RCALL	_SendManchester
(1437) 						}
(1438) 						 
(1439) 						break;
    012C1 C5F2      RJMP	0x18B4
(1440) 
(1441) 					case 0xa0://压力标定系数
(1442) 						if(R_dat==0xa0)//下发全部标定系数，共128字节,20ms/帧，共2560ms   
    012C2 9180 02DF LDS	R24,R_dat
    012C4 9190 02E0 LDS	R25,R_dat+1
    012C6 3A80      CPI	R24,0xA0
    012C7 E0E0      LDI	R30,0
    012C8 079E      CPC	R25,R30
    012C9 F529      BNE	0x12EF
(1443) 							{ 
(1444) 							DataFlag=1;
    012CA E081      LDI	R24,1
    012CB E090      LDI	R25,0
    012CC 9390 02C2 STS	DataFlag+1,R25
    012CE 9380 02C1 STS	DataFlag,R24
(1445) 							coeff_len=128;
    012D0 E880      LDI	R24,0x80
    012D1 9390 012D STS	coeff_len+1,R25
    012D3 9380 012C STS	coeff_len,R24
(1446) 							coeff_count=0;
    012D5 2422      CLR	R2
    012D6 2433      CLR	R3
    012D7 9230 012B STS	coeff_count+1,R3
    012D9 9220 012A STS	coeff_count,R2
(1447) 							TimeOutFlag=0;
    012DB 9220 02D9 STS	TimeOutFlag,R2
(1448) 							Timer0Counter=1000;//8s定时
    012DD EE88      LDI	R24,0xE8
    012DE E093      LDI	R25,3
    012DF 9390 0346 STS	Timer0Counter+1,R25
    012E1 9380 0345 STS	Timer0Counter,R24
(1449) 							TCNT0=0x06; //8ms
    012E3 E086      LDI	R24,6
    012E4 BF82      OUT	0x32,R24
(1450) 							TCCR0|=0x06;//256分频
    012E5 B783      IN	R24,0x33
    012E6 6086      ORI	R24,6
    012E7 BF83      OUT	0x33,R24
(1451) 							TIFR|=0x01; //清定时器0中断标志
    012E8 B786      IN	R24,0x36
    012E9 6081      ORI	R24,1
    012EA BF86      OUT	0x36,R24
(1452) 							TIMSK|=0x01;//使能定时器0中断				    
    012EB B787      IN	R24,0x37
    012EC 6081      ORI	R24,1
    012ED BF87      OUT	0x37,R24
(1453) 						}
    012EE C5C5      RJMP	0x18B4
(1454) 						else if(R_dat==0xa1)//上传标定系数,28ms/帧 ，共64帧128字节
    012EF 9180 02DF LDS	R24,R_dat
    012F1 9190 02E0 LDS	R25,R_dat+1
    012F3 3A81      CPI	R24,0xA1
    012F4 E0E0      LDI	R30,0
    012F5 079E      CPC	R25,R30
    012F6 F009      BEQ	0x12F8
    012F7 C5BC      RJMP	0x18B4
(1455) 						{    
(1456) 							Uart0TxData[0]=0xE8;
    012F8 EE88      LDI	R24,0xE8
    012F9 9380 012F STS	Uart0TxData,R24
(1457) 							Uart0TxData[1]=0x40;
    012FB E480      LDI	R24,0x40
    012FC 9380 0130 STS	Uart0TxData+1,R24
(1458) 							Uart0TxData[2]=0x87;
    012FE E887      LDI	R24,0x87
    012FF 9380 0131 STS	Uart0TxData+2,R24
(1459) 							Uart0TxData[3]=0;//系数包0
    01301 2422      CLR	R2
    01302 9220 0132 STS	Uart0TxData+3,R2
(1460) 							SendUart0_2(9,5);// 超时40ms	
    01304 E025      LDI	R18,5
    01305 E030      LDI	R19,0
    01306 E009      LDI	R16,0x9
    01307 940E 04EB CALL	_SendUart0_2
(1461) 							if(Uart0RxCounter==64) 
    01309 9180 02FA LDS	R24,Uart0RxCounter
    0130B 3480      CPI	R24,0x40
    0130C F599      BNE	0x1340
(1462) 							{
(1463) 								for(i=0;i<32;i++)
    0130D 24AA      CLR	R10
    0130E C02E      RJMP	0x133D
(1464) 								{
(1465) 									Delay_ms(20);
    0130F E104      LDI	R16,0x14
    01310 E010      LDI	R17,0
    01311 940E 05F4 CALL	_Delay_ms
(1466) 									T_dat=Uart0RxData[i*2+1];//高字节
    01313 EF8C      LDI	R24,0xFC
    01314 E092      LDI	R25,2
    01315 2DEA      MOV	R30,R10
    01316 27FF      CLR	R31
    01317 0FEE      LSL	R30
    01318 1FFF      ROL	R31
    01319 0FE8      ADD	R30,R24
    0131A 1FF9      ADC	R31,R25
    0131B 8020      LD	R2,Z
    0131C 2433      CLR	R3
    0131D 9230 02E2 STS	T_dat+1,R3
    0131F 9220 02E1 STS	T_dat,R2
(1467) 									T_dat<<=8;
    01321 2C32      MOV	R3,R2
    01322 2422      CLR	R2
    01323 9230 02E2 STS	T_dat+1,R3
    01325 9220 02E1 STS	T_dat,R2
(1468) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01327 EF8B      LDI	R24,0xFB
    01328 E092      LDI	R25,2
    01329 2DEA      MOV	R30,R10
    0132A 27FF      CLR	R31
    0132B 0FEE      LSL	R30
    0132C 1FFF      ROL	R31
    0132D 0FE8      ADD	R30,R24
    0132E 1FF9      ADC	R31,R25
    0132F 8020      LD	R2,Z
    01330 2433      CLR	R3
    01331 9040 02E1 LDS	R4,T_dat
    01333 9050 02E2 LDS	R5,T_dat+1
    01335 2842      OR	R4,R2
    01336 2853      OR	R5,R3
    01337 9250 02E2 STS	T_dat+1,R5
    01339 9240 02E1 STS	T_dat,R4
(1469) 									SendManchester();		 
    0133B D585      RCALL	_SendManchester
    0133C 94A3      INC	R10
    0133D 2D8A      MOV	R24,R10
    0133E 3280      CPI	R24,0x20
    0133F F278      BCS	0x130F
(1470) 								}	
(1471) 							}	
(1472) 
(1473) 							Uart0TxData[0]=0xE8;
    01340 EE88      LDI	R24,0xE8
    01341 9380 012F STS	Uart0TxData,R24
(1474) 							Uart0TxData[1]=0x40;
    01343 E480      LDI	R24,0x40
    01344 9380 0130 STS	Uart0TxData+1,R24
(1475) 							Uart0TxData[2]=0x87;
    01346 E887      LDI	R24,0x87
    01347 9380 0131 STS	Uart0TxData+2,R24
(1476) 							Uart0TxData[3]=1;//系数包1
    01349 E081      LDI	R24,1
    0134A 9380 0132 STS	Uart0TxData+3,R24
(1477) 							SendUart0_2(9,5);// 超时40ms		 
    0134C E025      LDI	R18,5
    0134D E030      LDI	R19,0
    0134E E009      LDI	R16,0x9
    0134F 940E 04EB CALL	_SendUart0_2
(1478) 							if(Uart0RxCounter==64) 
    01351 9180 02FA LDS	R24,Uart0RxCounter
    01353 3480      CPI	R24,0x40
    01354 F009      BEQ	0x1356
    01355 C55E      RJMP	0x18B4
(1479) 							{
(1480) 								for(i=0;i<32;i++)
    01356 24AA      CLR	R10
    01357 C02E      RJMP	0x1386
(1481) 								{
(1482) 									T_dat=Uart0RxData[i*2+1];//高字节
    01358 EF8C      LDI	R24,0xFC
    01359 E092      LDI	R25,2
    0135A 2DEA      MOV	R30,R10
    0135B 27FF      CLR	R31
    0135C 0FEE      LSL	R30
    0135D 1FFF      ROL	R31
    0135E 0FE8      ADD	R30,R24
    0135F 1FF9      ADC	R31,R25
    01360 8020      LD	R2,Z
    01361 2433      CLR	R3
    01362 9230 02E2 STS	T_dat+1,R3
    01364 9220 02E1 STS	T_dat,R2
(1483) 									T_dat<<=8;
    01366 2C32      MOV	R3,R2
    01367 2422      CLR	R2
    01368 9230 02E2 STS	T_dat+1,R3
    0136A 9220 02E1 STS	T_dat,R2
(1484) 									T_dat|=Uart0RxData[i*2+0];//低字节
    0136C EF8B      LDI	R24,0xFB
    0136D E092      LDI	R25,2
    0136E 2DEA      MOV	R30,R10
    0136F 27FF      CLR	R31
    01370 0FEE      LSL	R30
    01371 1FFF      ROL	R31
    01372 0FE8      ADD	R30,R24
    01373 1FF9      ADC	R31,R25
    01374 8020      LD	R2,Z
    01375 2433      CLR	R3
    01376 9040 02E1 LDS	R4,T_dat
    01378 9050 02E2 LDS	R5,T_dat+1
    0137A 2842      OR	R4,R2
    0137B 2853      OR	R5,R3
    0137C 9250 02E2 STS	T_dat+1,R5
    0137E 9240 02E1 STS	T_dat,R4
(1485) 									SendManchester();
    01380 D540      RCALL	_SendManchester
(1486) 									Delay_ms(20);
    01381 E104      LDI	R16,0x14
    01382 E010      LDI	R17,0
    01383 940E 05F4 CALL	_Delay_ms
    01385 94A3      INC	R10
    01386 2D8A      MOV	R24,R10
    01387 3280      CPI	R24,0x20
    01388 F278      BCS	0x1358
(1487) 								}
(1488) 							}		
(1489) 						}
(1490) 						break;
    01389 C52A      RJMP	0x18B4
(1491) 
(1492) 
(1493) 					case 0xB0://流量相关
(1494) 						if(R_dat==0xb0) //下发流量系数
    0138A 9180 02DF LDS	R24,R_dat
    0138C 9190 02E0 LDS	R25,R_dat+1
    0138E 3B80      CPI	R24,0xB0
    0138F E0E0      LDI	R30,0
    01390 079E      CPC	R25,R30
    01391 F529      BNE	0x13B7
(1495) 						{
(1496) 							DataFlag=2;
    01392 E082      LDI	R24,2
    01393 E090      LDI	R25,0
    01394 9390 02C2 STS	DataFlag+1,R25
    01396 9380 02C1 STS	DataFlag,R24
(1497) 							coeff_len=128;
    01398 E880      LDI	R24,0x80
    01399 9390 012D STS	coeff_len+1,R25
    0139B 9380 012C STS	coeff_len,R24
(1498) 							coeff_count=0;
    0139D 2422      CLR	R2
    0139E 2433      CLR	R3
    0139F 9230 012B STS	coeff_count+1,R3
    013A1 9220 012A STS	coeff_count,R2
(1499) 							TimeOutFlag=0;
    013A3 9220 02D9 STS	TimeOutFlag,R2
(1500) 							Timer0Counter=1000;//8s定时
    013A5 EE88      LDI	R24,0xE8
    013A6 E093      LDI	R25,3
    013A7 9390 0346 STS	Timer0Counter+1,R25
    013A9 9380 0345 STS	Timer0Counter,R24
(1501) 							TCNT0=0x06; //8ms
    013AB E086      LDI	R24,6
    013AC BF82      OUT	0x32,R24
(1502) 							TCCR0|=0x06;//256分频
    013AD B783      IN	R24,0x33
    013AE 6086      ORI	R24,6
    013AF BF83      OUT	0x33,R24
(1503) 							TIFR|=0x01; //清定时器0中断标志
    013B0 B786      IN	R24,0x36
    013B1 6081      ORI	R24,1
    013B2 BF86      OUT	0x36,R24
(1504) 							TIMSK|=0x01;//使能定时器0中断		
    013B3 B787      IN	R24,0x37
    013B4 6081      ORI	R24,1
    013B5 BF87      OUT	0x37,R24
(1505) 						}
    013B6 C4FD      RJMP	0x18B4
(1506) 						else  if(R_dat==0xb1)//上提流量系数
    013B7 9180 02DF LDS	R24,R_dat
    013B9 9190 02E0 LDS	R25,R_dat+1
    013BB 3B81      CPI	R24,0xB1
    013BC E0E0      LDI	R30,0
    013BD 079E      CPC	R25,R30
    013BE F009      BEQ	0x13C0
    013BF C4F4      RJMP	0x18B4
(1507) 						{
(1508) 							Uart0TxData[0]=0xE8;
    013C0 EE88      LDI	R24,0xE8
    013C1 9380 012F STS	Uart0TxData,R24
(1509) 							Uart0TxData[1]=0x40;
    013C3 E480      LDI	R24,0x40
    013C4 9380 0130 STS	Uart0TxData+1,R24
(1510) 							Uart0TxData[2]=0x87;
    013C6 E887      LDI	R24,0x87
    013C7 9380 0131 STS	Uart0TxData+2,R24
(1511) 							Uart0TxData[3]=2;//系数包2
    013C9 E082      LDI	R24,2
    013CA 9380 0132 STS	Uart0TxData+3,R24
(1512) 							SendUart0_2(9,5);// 超时40ms	
    013CC E025      LDI	R18,5
    013CD E030      LDI	R19,0
    013CE E009      LDI	R16,0x9
    013CF 940E 04EB CALL	_SendUart0_2
(1513) 							if(Uart0RxCounter==64) 
    013D1 9180 02FA LDS	R24,Uart0RxCounter
    013D3 3480      CPI	R24,0x40
    013D4 F599      BNE	0x1408
(1514) 							{
(1515) 								for(i=0;i<32;i++)
    013D5 24AA      CLR	R10
    013D6 C02E      RJMP	0x1405
(1516) 								{
(1517) 									Delay_ms(20);
    013D7 E104      LDI	R16,0x14
    013D8 E010      LDI	R17,0
    013D9 940E 05F4 CALL	_Delay_ms
(1518) 									T_dat=Uart0RxData[i*2+1];//高字节
    013DB EF8C      LDI	R24,0xFC
    013DC E092      LDI	R25,2
    013DD 2DEA      MOV	R30,R10
    013DE 27FF      CLR	R31
    013DF 0FEE      LSL	R30
    013E0 1FFF      ROL	R31
    013E1 0FE8      ADD	R30,R24
    013E2 1FF9      ADC	R31,R25
    013E3 8020      LD	R2,Z
    013E4 2433      CLR	R3
    013E5 9230 02E2 STS	T_dat+1,R3
    013E7 9220 02E1 STS	T_dat,R2
(1519) 									T_dat<<=8;
    013E9 2C32      MOV	R3,R2
    013EA 2422      CLR	R2
    013EB 9230 02E2 STS	T_dat+1,R3
    013ED 9220 02E1 STS	T_dat,R2
(1520) 									T_dat|=Uart0RxData[i*2+0];//低字节
    013EF EF8B      LDI	R24,0xFB
    013F0 E092      LDI	R25,2
    013F1 2DEA      MOV	R30,R10
    013F2 27FF      CLR	R31
    013F3 0FEE      LSL	R30
    013F4 1FFF      ROL	R31
    013F5 0FE8      ADD	R30,R24
    013F6 1FF9      ADC	R31,R25
    013F7 8020      LD	R2,Z
    013F8 2433      CLR	R3
    013F9 9040 02E1 LDS	R4,T_dat
    013FB 9050 02E2 LDS	R5,T_dat+1
    013FD 2842      OR	R4,R2
    013FE 2853      OR	R5,R3
    013FF 9250 02E2 STS	T_dat+1,R5
    01401 9240 02E1 STS	T_dat,R4
(1521) 									SendManchester();		 
    01403 D4BD      RCALL	_SendManchester
    01404 94A3      INC	R10
    01405 2D8A      MOV	R24,R10
    01406 3280      CPI	R24,0x20
    01407 F278      BCS	0x13D7
(1522) 								}	
(1523) 							}	
(1524) 
(1525) 							Uart0TxData[0]=0xE8;
    01408 EE88      LDI	R24,0xE8
    01409 9380 012F STS	Uart0TxData,R24
(1526) 							Uart0TxData[1]=0x40;
    0140B E480      LDI	R24,0x40
    0140C 9380 0130 STS	Uart0TxData+1,R24
(1527) 							Uart0TxData[2]=0x87;
    0140E E887      LDI	R24,0x87
    0140F 9380 0131 STS	Uart0TxData+2,R24
(1528) 							Uart0TxData[3]=3;//系数包3
    01411 E083      LDI	R24,3
    01412 9380 0132 STS	Uart0TxData+3,R24
(1529) 							SendUart0_2(9,5);// 超时40ms	 
    01414 E025      LDI	R18,5
    01415 E030      LDI	R19,0
    01416 E009      LDI	R16,0x9
    01417 940E 04EB CALL	_SendUart0_2
(1530) 							if(Uart0RxCounter==64) 
    01419 9180 02FA LDS	R24,Uart0RxCounter
    0141B 3480      CPI	R24,0x40
    0141C F009      BEQ	0x141E
    0141D C496      RJMP	0x18B4
(1531) 							{
(1532) 								for(i=0;i<32;i++)
    0141E 24AA      CLR	R10
    0141F C02E      RJMP	0x144E
(1533) 								{
(1534) 									T_dat=Uart0RxData[i*2+1];//高字节
    01420 EF8C      LDI	R24,0xFC
    01421 E092      LDI	R25,2
    01422 2DEA      MOV	R30,R10
    01423 27FF      CLR	R31
    01424 0FEE      LSL	R30
    01425 1FFF      ROL	R31
    01426 0FE8      ADD	R30,R24
    01427 1FF9      ADC	R31,R25
    01428 8020      LD	R2,Z
    01429 2433      CLR	R3
    0142A 9230 02E2 STS	T_dat+1,R3
    0142C 9220 02E1 STS	T_dat,R2
(1535) 									T_dat<<=8;
    0142E 2C32      MOV	R3,R2
    0142F 2422      CLR	R2
    01430 9230 02E2 STS	T_dat+1,R3
    01432 9220 02E1 STS	T_dat,R2
(1536) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01434 EF8B      LDI	R24,0xFB
    01435 E092      LDI	R25,2
    01436 2DEA      MOV	R30,R10
    01437 27FF      CLR	R31
    01438 0FEE      LSL	R30
    01439 1FFF      ROL	R31
    0143A 0FE8      ADD	R30,R24
    0143B 1FF9      ADC	R31,R25
    0143C 8020      LD	R2,Z
    0143D 2433      CLR	R3
    0143E 9040 02E1 LDS	R4,T_dat
    01440 9050 02E2 LDS	R5,T_dat+1
    01442 2842      OR	R4,R2
    01443 2853      OR	R5,R3
    01444 9250 02E2 STS	T_dat+1,R5
    01446 9240 02E1 STS	T_dat,R4
(1537) 									SendManchester();
    01448 D478      RCALL	_SendManchester
(1538) 									Delay_ms(20);
    01449 E104      LDI	R16,0x14
    0144A E010      LDI	R17,0
    0144B 940E 05F4 CALL	_Delay_ms
    0144D 94A3      INC	R10
    0144E 2D8A      MOV	R24,R10
    0144F 3280      CPI	R24,0x20
    01450 F278      BCS	0x1420
(1539) 								}
(1540) 							}		
(1541) 						}
(1542) 						/*   if(R_dat==0xb1)//读幅值
(1543) 						{
(1544) 						SendUart0(0xb0,5);//40ms定时
(1545) 						for(k=0;k<8;k+=2)
(1546) 						{
(1547) 						T_dat=Uart0RxData[k];
(1548) 						T_dat<<=8;
(1549) 						T_dat|=Uart0RxData[k+1];
(1550) 						SendManchester();
(1551) 						Delay_ms(40);
(1552) 						}
(1553) 						}
(1554) 						else  if((R_dat>0xb0) && (R_dat<0xb5) )//1800点提取,连续提取流量测试数据，4个通道分别提取，命令为0xB1-0xB4
(1555) 						{   
(1556) 						SendUart0(R_dat,125);//1s定时	 
(1557) 						for(k=0;k<1800;k++)//共1800帧数据，全部提取
(1558) 						{
(1559) 						SendUart0(0xFF,1);//8ms定时	   
(1560) 						T_dat=Uart0RxData[0];
(1561) 						T_dat<<=8;
(1562) 						T_dat|=Uart0RxData[1];
(1563) 						SendManchester();
(1564) 						Delay_ms(42);
(1565) 						}
(1566) 						} */  
(1567) 						break;
    01451 C462      RJMP	0x18B4
(1568) 
(1569) 					case 0xc0://所有参数全采，上传16字节共8帧
(1570) 						if( (R_dat==0xc0) || (R_dat==0xcf) )
    01452 90C0 02DF LDS	R12,R_dat
    01454 90D0 02E0 LDS	R13,R_dat+1
    01456 01C6      MOVW	R24,R12
    01457 3C80      CPI	R24,0xC0
    01458 E0E0      LDI	R30,0
    01459 079E      CPC	R25,R30
    0145A F029      BEQ	0x1460
    0145B 3C8F      CPI	R24,0xCF
    0145C E0E0      LDI	R30,0
    0145D 079E      CPC	R25,R30
    0145E F009      BEQ	0x1460
    0145F C281      RJMP	0x16E1
(1571) 						{
(1572) 							Uart0TxData[0]=0xE8;
    01460 EE88      LDI	R24,0xE8
    01461 9380 012F STS	Uart0TxData,R24
(1573) 							Uart0TxData[1]=0x40;
    01463 E480      LDI	R24,0x40
    01464 9380 0130 STS	Uart0TxData+1,R24
(1574) 							Uart0TxData[2]=0x89;
    01466 E889      LDI	R24,0x89
    01467 9380 0131 STS	Uart0TxData+2,R24
(1575) 							Uart0TxData[3]=9;
    01469 E089      LDI	R24,0x9
    0146A 9380 0132 STS	Uart0TxData+3,R24
(1576) 							SendUart0_2(9,50);//流量板直读检测，超时400ms
    0146C E322      LDI	R18,0x32
    0146D E030      LDI	R19,0
    0146E E009      LDI	R16,0x9
    0146F 940E 04EB CALL	_SendUart0_2
(1577) 							//if(Uart0RxCounter==64)//成功接收到压力、温度、流量数据，先低字节后高字节
(1578) 							{
(1579) 								T_dat=Uart0RxData[1];
    01471 9020 02FC LDS	R2,Uart0RxData+1
    01473 2433      CLR	R3
    01474 9230 02E2 STS	T_dat+1,R3
    01476 9220 02E1 STS	T_dat,R2
(1580) 								T_dat<<=8;
    01478 9020 02E1 LDS	R2,T_dat
    0147A 9030 02E2 LDS	R3,T_dat+1
    0147C 2C32      MOV	R3,R2
    0147D 2422      CLR	R2
    0147E 9230 02E2 STS	T_dat+1,R3
    01480 9220 02E1 STS	T_dat,R2
(1581) 								T_dat|=Uart0RxData[0];
    01482 9020 02FB LDS	R2,Uart0RxData
    01484 2433      CLR	R3
    01485 9040 02E1 LDS	R4,T_dat
    01487 9050 02E2 LDS	R5,T_dat+1
    01489 2842      OR	R4,R2
    0148A 2853      OR	R5,R3
    0148B 9250 02E2 STS	T_dat+1,R5
    0148D 9240 02E1 STS	T_dat,R4
(1582) 								SendManchester();//压力
    0148F D431      RCALL	_SendManchester
(1583) 								crc16array[0]=(unsigned char)(T_dat);
    01490 9020 02E1 LDS	R2,T_dat
    01492 9030 02E2 LDS	R3,T_dat+1
    01494 9220 0100 STS	crc16array,R2
(1584) 								crc16array[1]=(unsigned char)(T_dat>>8);
    01496 2C23      MOV	R2,R3
    01497 2433      CLR	R3
    01498 FC27      SBRC	R2,7
    01499 9430      COM	R3
    0149A 9220 0101 STS	crc16array+1,R2
(1585) 
(1586) 
(1587) 								Delay_ms(30);	
    0149C E10E      LDI	R16,0x1E
    0149D E010      LDI	R17,0
    0149E 940E 05F4 CALL	_Delay_ms
(1588) 								T_dat=Uart0RxData[3];
    014A0 9020 02FE LDS	R2,Uart0RxData+3
    014A2 2433      CLR	R3
    014A3 9230 02E2 STS	T_dat+1,R3
    014A5 9220 02E1 STS	T_dat,R2
(1589) 								T_dat<<=8;
    014A7 9020 02E1 LDS	R2,T_dat
    014A9 9030 02E2 LDS	R3,T_dat+1
    014AB 2C32      MOV	R3,R2
    014AC 2422      CLR	R2
    014AD 9230 02E2 STS	T_dat+1,R3
    014AF 9220 02E1 STS	T_dat,R2
(1590) 								T_dat|=Uart0RxData[2];
    014B1 9020 02FD LDS	R2,Uart0RxData+2
    014B3 2433      CLR	R3
    014B4 9040 02E1 LDS	R4,T_dat
    014B6 9050 02E2 LDS	R5,T_dat+1
    014B8 2842      OR	R4,R2
    014B9 2853      OR	R5,R3
    014BA 9250 02E2 STS	T_dat+1,R5
    014BC 9240 02E1 STS	T_dat,R4
(1591) 								SendManchester();//温度
    014BE D402      RCALL	_SendManchester
(1592) 								crc16array[2]=(unsigned char)(T_dat);
    014BF 9020 02E1 LDS	R2,T_dat
    014C1 9030 02E2 LDS	R3,T_dat+1
    014C3 9220 0102 STS	crc16array+2,R2
(1593) 								crc16array[3]=(unsigned char)(T_dat>>8);
    014C5 2C23      MOV	R2,R3
    014C6 2433      CLR	R3
    014C7 FC27      SBRC	R2,7
    014C8 9430      COM	R3
    014C9 9220 0103 STS	crc16array+3,R2
(1594) 
(1595) 								Delay_ms(30);	
    014CB E10E      LDI	R16,0x1E
    014CC E010      LDI	R17,0
    014CD 940E 05F4 CALL	_Delay_ms
(1596) 
(1597) 								lfib=Uart0RxData[5];
    014CF 9020 0300 LDS	R2,Uart0RxData+5
    014D1 2433      CLR	R3
    014D2 2444      CLR	R4
    014D3 2455      CLR	R5
    014D4 9230 0123 STS	lfib+1,R3
    014D6 9220 0122 STS	lfib,R2
    014D8 9250 0125 STS	lfib+3,R5
    014DA 9240 0124 STS	lfib+2,R4
(1598) 								lfib<<=8;
    014DC E088      LDI	R24,0x8
    014DD E090      LDI	R25,0
    014DE 9120 0124 LDS	R18,lfib+2
    014E0 9130 0125 LDS	R19,lfib+3
    014E2 9100 0122 LDS	R16,lfib
    014E4 9110 0123 LDS	R17,lfib+1
    014E6 938A      ST	-Y,R24
    014E7 940E 1DBB CALL	lsl32
    014E9 9310 0123 STS	lfib+1,R17
    014EB 9300 0122 STS	lfib,R16
    014ED 9330 0125 STS	lfib+3,R19
    014EF 9320 0124 STS	lfib+2,R18
(1599) 								lfib|=Uart0RxData[4];
    014F1 9020 02FF LDS	R2,Uart0RxData+4
    014F3 2433      CLR	R3
    014F4 2444      CLR	R4
    014F5 2455      CLR	R5
    014F6 0138      MOVW	R6,R16
    014F7 0149      MOVW	R8,R18
    014F8 2862      OR	R6,R2
    014F9 2873      OR	R7,R3
    014FA 2884      OR	R8,R4
    014FB 2895      OR	R9,R5
    014FC 9270 0123 STS	lfib+1,R7
    014FE 9260 0122 STS	lfib,R6
    01500 9290 0125 STS	lfib+3,R9
    01502 9280 0124 STS	lfib+2,R8
(1600) 								lfib&=0x0000ffff;
    01504 EF4F      LDI	R20,0xFF
    01505 EF5F      LDI	R21,0xFF
    01506 E060      LDI	R22,0
    01507 E070      LDI	R23,0
    01508 0113      MOVW	R2,R6
    01509 0124      MOVW	R4,R8
    0150A 2224      AND	R2,R20
    0150B 2235      AND	R3,R21
    0150C 2246      AND	R4,R22
    0150D 2257      AND	R5,R23
    0150E 9230 0123 STS	lfib+1,R3
    01510 9220 0122 STS	lfib,R2
    01512 9250 0125 STS	lfib+3,R5
    01514 9240 0124 STS	lfib+2,R4
(1601) 								myFIB.f=(unsigned long)lfib; 
    01516 0181      MOVW	R16,R2
    01517 0192      MOVW	R18,R4
    01518 940E 1E1D CALL	ulong2fp
    0151A 9310 0349 STS	myFIB+1,R17
    0151C 9300 0348 STS	myFIB,R16
    0151E 9330 034B STS	myFIB+3,R19
    01520 9320 034A STS	myFIB+2,R18
(1602) 
(1603) 								T_dat=myFIB.i[1];
    01522 9020 034A LDS	R2,myFIB+2
    01524 9030 034B LDS	R3,myFIB+3
    01526 9230 02E2 STS	T_dat+1,R3
    01528 9220 02E1 STS	T_dat,R2
(1604) 								SendManchester();//流量-时间1
    0152A D396      RCALL	_SendManchester
(1605) 								crc16array[4]=(unsigned char)(T_dat);
    0152B 9020 02E1 LDS	R2,T_dat
    0152D 9030 02E2 LDS	R3,T_dat+1
    0152F 9220 0104 STS	crc16array+4,R2
(1606) 								crc16array[5]=(unsigned char)(T_dat>>8);
    01531 2C23      MOV	R2,R3
    01532 2433      CLR	R3
    01533 FC27      SBRC	R2,7
    01534 9430      COM	R3
    01535 9220 0105 STS	crc16array+5,R2
(1607) 
(1608) 								Delay_ms(30);	
    01537 E10E      LDI	R16,0x1E
    01538 E010      LDI	R17,0
    01539 940E 05F4 CALL	_Delay_ms
(1609) 								T_dat=myFIB.i[0];
    0153B 9020 0348 LDS	R2,myFIB
    0153D 9030 0349 LDS	R3,myFIB+1
    0153F 9230 02E2 STS	T_dat+1,R3
    01541 9220 02E1 STS	T_dat,R2
(1610) 								SendManchester();//流量-时间2
    01543 D37D      RCALL	_SendManchester
(1611) 								crc16array[6]=(unsigned char)(T_dat);
    01544 9020 02E1 LDS	R2,T_dat
    01546 9030 02E2 LDS	R3,T_dat+1
    01548 9220 0106 STS	crc16array+6,R2
(1612) 								crc16array[7]=(unsigned char)(T_dat>>8);
    0154A 2C23      MOV	R2,R3
    0154B 2433      CLR	R3
    0154C FC27      SBRC	R2,7
    0154D 9430      COM	R3
    0154E 9220 0107 STS	crc16array+7,R2
(1613) 
(1614) 								Delay_ms(30);	
    01550 E10E      LDI	R16,0x1E
    01551 E010      LDI	R17,0
    01552 940E 05F4 CALL	_Delay_ms
(1615) 
(1616) 								lfib=Uart0RxData[7];
    01554 9020 0302 LDS	R2,Uart0RxData+7
    01556 2433      CLR	R3
    01557 2444      CLR	R4
    01558 2455      CLR	R5
    01559 9230 0123 STS	lfib+1,R3
    0155B 9220 0122 STS	lfib,R2
    0155D 9250 0125 STS	lfib+3,R5
    0155F 9240 0124 STS	lfib+2,R4
(1617) 								lfib<<=8;
    01561 E088      LDI	R24,0x8
    01562 E090      LDI	R25,0
    01563 9120 0124 LDS	R18,lfib+2
    01565 9130 0125 LDS	R19,lfib+3
    01567 9100 0122 LDS	R16,lfib
    01569 9110 0123 LDS	R17,lfib+1
    0156B 938A      ST	-Y,R24
    0156C 940E 1DBB CALL	lsl32
    0156E 9310 0123 STS	lfib+1,R17
    01570 9300 0122 STS	lfib,R16
    01572 9330 0125 STS	lfib+3,R19
    01574 9320 0124 STS	lfib+2,R18
(1618) 								lfib|=Uart0RxData[6];
    01576 9020 0301 LDS	R2,Uart0RxData+6
    01578 2433      CLR	R3
    01579 2444      CLR	R4
    0157A 2455      CLR	R5
    0157B 0138      MOVW	R6,R16
    0157C 0149      MOVW	R8,R18
    0157D 2862      OR	R6,R2
    0157E 2873      OR	R7,R3
    0157F 2884      OR	R8,R4
    01580 2895      OR	R9,R5
    01581 9270 0123 STS	lfib+1,R7
    01583 9260 0122 STS	lfib,R6
    01585 9290 0125 STS	lfib+3,R9
    01587 9280 0124 STS	lfib+2,R8
(1619) 								lfib&=0x0000ffff;
    01589 EF4F      LDI	R20,0xFF
    0158A EF5F      LDI	R21,0xFF
    0158B E060      LDI	R22,0
    0158C E070      LDI	R23,0
    0158D 0113      MOVW	R2,R6
    0158E 0124      MOVW	R4,R8
    0158F 2224      AND	R2,R20
    01590 2235      AND	R3,R21
    01591 2246      AND	R4,R22
    01592 2257      AND	R5,R23
    01593 9230 0123 STS	lfib+1,R3
    01595 9220 0122 STS	lfib,R2
    01597 9250 0125 STS	lfib+3,R5
    01599 9240 0124 STS	lfib+2,R4
(1620) 								myFIB.f=(unsigned long)lfib; 
    0159B 0181      MOVW	R16,R2
    0159C 0192      MOVW	R18,R4
    0159D 940E 1E1D CALL	ulong2fp
    0159F 9310 0349 STS	myFIB+1,R17
    015A1 9300 0348 STS	myFIB,R16
    015A3 9330 034B STS	myFIB+3,R19
    015A5 9320 034A STS	myFIB+2,R18
(1621) 
(1622) 								T_dat=myFIB.i[1];
    015A7 9020 034A LDS	R2,myFIB+2
    015A9 9030 034B LDS	R3,myFIB+3
    015AB 9230 02E2 STS	T_dat+1,R3
    015AD 9220 02E1 STS	T_dat,R2
(1623) 								SendManchester();//流量-相位1
    015AF D311      RCALL	_SendManchester
(1624) 								crc16array[8]=(unsigned char)(T_dat);
    015B0 9020 02E1 LDS	R2,T_dat
    015B2 9030 02E2 LDS	R3,T_dat+1
    015B4 9220 0108 STS	crc16array+8,R2
(1625) 								crc16array[9]=(unsigned char)(T_dat>>8);
    015B6 2C23      MOV	R2,R3
    015B7 2433      CLR	R3
    015B8 FC27      SBRC	R2,7
    015B9 9430      COM	R3
    015BA 9220 0109 STS	crc16array+9,R2
(1626) 
(1627) 								Delay_ms(30);	
    015BC E10E      LDI	R16,0x1E
    015BD E010      LDI	R17,0
    015BE 940E 05F4 CALL	_Delay_ms
(1628) 								T_dat=myFIB.i[0];
    015C0 9020 0348 LDS	R2,myFIB
    015C2 9030 0349 LDS	R3,myFIB+1
    015C4 9230 02E2 STS	T_dat+1,R3
    015C6 9220 02E1 STS	T_dat,R2
(1629) 								SendManchester();//流量-相位2
    015C8 D2F8      RCALL	_SendManchester
(1630) 								crc16array[10]=(unsigned char)(T_dat);
    015C9 9020 02E1 LDS	R2,T_dat
    015CB 9030 02E2 LDS	R3,T_dat+1
    015CD 9220 010A STS	crc16array+10,R2
(1631) 								crc16array[11]=(unsigned char)(T_dat>>8);
    015CF 2C23      MOV	R2,R3
    015D0 2433      CLR	R3
    015D1 FC27      SBRC	R2,7
    015D2 9430      COM	R3
    015D3 9220 010B STS	crc16array+11,R2
(1632) 
(1633) 								 
(1634) 								SendUart1(0x81,4);//电机状态，32ms超时
    015D5 E024      LDI	R18,4
    015D6 E030      LDI	R19,0
    015D7 E801      LDI	R16,0x81
    015D8 940E 02B3 CALL	_SendUart1
(1635) 								
(1636) 							    T_dat=Uart1RxData[1];
    015DA 9020 02F7 LDS	R2,Uart1RxData+1
    015DC 2433      CLR	R3
    015DD 9230 02E2 STS	T_dat+1,R3
    015DF 9220 02E1 STS	T_dat,R2
(1637) 						        T_dat<<=8;
    015E1 9020 02E1 LDS	R2,T_dat
    015E3 9030 02E2 LDS	R3,T_dat+1
    015E5 2C32      MOV	R3,R2
    015E6 2422      CLR	R2
    015E7 9230 02E2 STS	T_dat+1,R3
    015E9 9220 02E1 STS	T_dat,R2
(1638) 						        T_dat|=Uart1RxData[0];						 
    015EB 9020 02F6 LDS	R2,Uart1RxData
    015ED 2433      CLR	R3
    015EE 9040 02E1 LDS	R4,T_dat
    015F0 9050 02E2 LDS	R5,T_dat+1
    015F2 2842      OR	R4,R2
    015F3 2853      OR	R5,R3
    015F4 9250 02E2 STS	T_dat+1,R5
    015F6 9240 02E1 STS	T_dat,R4
(1639) 								SendManchester();//收放电机状态
    015F8 D2C8      RCALL	_SendManchester
(1640) 								crc16array[12]=(unsigned char)(T_dat);
    015F9 9020 02E1 LDS	R2,T_dat
    015FB 9030 02E2 LDS	R3,T_dat+1
    015FD 9220 010C STS	crc16array+12,R2
(1641) 								crc16array[13]=(unsigned char)(T_dat>>8);
    015FF 2C23      MOV	R2,R3
    01600 2433      CLR	R3
    01601 FC27      SBRC	R2,7
    01602 9430      COM	R3
    01603 9220 010D STS	crc16array+13,R2
(1642) 
(1643) 								Delay_ms(30);	 
    01605 E10E      LDI	R16,0x1E
    01606 E010      LDI	R17,0
    01607 940E 05F4 CALL	_Delay_ms
(1644) 								T_dat=Uart1RxData[3];
    01609 9020 02F9 LDS	R2,Uart1RxData+3
    0160B 2433      CLR	R3
    0160C 9230 02E2 STS	T_dat+1,R3
    0160E 9220 02E1 STS	T_dat,R2
(1645) 						        T_dat<<=8;
    01610 9020 02E1 LDS	R2,T_dat
    01612 9030 02E2 LDS	R3,T_dat+1
    01614 2C32      MOV	R3,R2
    01615 2422      CLR	R2
    01616 9230 02E2 STS	T_dat+1,R3
    01618 9220 02E1 STS	T_dat,R2
(1646) 						        T_dat|=Uart1RxData[2];
    0161A 9020 02F8 LDS	R2,Uart1RxData+2
    0161C 2433      CLR	R3
    0161D 9040 02E1 LDS	R4,T_dat
    0161F 9050 02E2 LDS	R5,T_dat+1
    01621 2842      OR	R4,R2
    01622 2853      OR	R5,R3
    01623 9250 02E2 STS	T_dat+1,R5
    01625 9240 02E1 STS	T_dat,R4
(1647) 								SendManchester();//调节电机状态
    01627 D299      RCALL	_SendManchester
(1648) 								crc16array[14]=(unsigned char)(T_dat);
    01628 9020 02E1 LDS	R2,T_dat
    0162A 9030 02E2 LDS	R3,T_dat+1
    0162C 9220 010E STS	crc16array+14,R2
(1649) 								crc16array[15]=(unsigned char)(T_dat>>8);
    0162E 2C23      MOV	R2,R3
    0162F 2433      CLR	R3
    01630 FC27      SBRC	R2,7
    01631 9430      COM	R3
    01632 9220 010F STS	crc16array+15,R2
(1650) 
(1651) 								Delay_ms(1);	  					
    01634 E001      LDI	R16,1
    01635 E010      LDI	R17,0
    01636 940E 05F4 CALL	_Delay_ms
(1652) 						        SendUart1(0x31,4);//读电机电压，32ms超时
    01638 E024      LDI	R18,4
    01639 E030      LDI	R19,0
    0163A E301      LDI	R16,0x31
    0163B 940E 02B3 CALL	_SendUart1
(1653) 						        T_dat=Uart1RxData[0];
    0163D 9020 02F6 LDS	R2,Uart1RxData
    0163F 2433      CLR	R3
    01640 9230 02E2 STS	T_dat+1,R3
    01642 9220 02E1 STS	T_dat,R2
(1654) 								SendManchester();
    01644 D27C      RCALL	_SendManchester
(1655) 								crc16array[16]=(unsigned char)(T_dat);
    01645 9020 02E1 LDS	R2,T_dat
    01647 9030 02E2 LDS	R3,T_dat+1
    01649 9220 0110 STS	crc16array+16,R2
(1656) 								crc16array[17]=(unsigned char)(T_dat>>8);
    0164B 2C23      MOV	R2,R3
    0164C 2433      CLR	R3
    0164D FC27      SBRC	R2,7
    0164E 9430      COM	R3
    0164F 9220 0111 STS	crc16array+17,R2
(1657) 
(1658) 								if(R_dat==0xcf)// 采集第2个压力温度的工程量，再多发2帧共4字节
    01651 9180 02DF LDS	R24,R_dat
    01653 9190 02E0 LDS	R25,R_dat+1
    01655 3C8F      CPI	R24,0xCF
    01656 E0E0      LDI	R30,0
    01657 079E      CPC	R25,R30
    01658 F009      BEQ	0x165A
    01659 C05E      RJMP	0x16B8
(1659) 								{
(1660) 						  		 SampleTPS(R_dat);//最快5ms返回，没有挂压力短节时最多20ms返回
    0165A 018C      MOVW	R16,R24
    0165B 940E 0455 CALL	_SampleTPS
(1661) 						  
(1662) 						  		 Delay_ms(25);	
    0165D E109      LDI	R16,0x19
    0165E E010      LDI	R17,0
    0165F 940E 05F4 CALL	_Delay_ms
(1663) 						  		 T_dat=TPS_PData;
    01661 9020 02DD LDS	R2,TPS_PData
    01663 9030 02DE LDS	R3,TPS_PData+1
    01665 9230 02E2 STS	T_dat+1,R3
    01667 9220 02E1 STS	T_dat,R2
(1664) 						  		 SendManchester();//压力
    01669 D257      RCALL	_SendManchester
(1665) 								 crc16array[18]=(unsigned char)(T_dat);
    0166A 9020 02E1 LDS	R2,T_dat
    0166C 9030 02E2 LDS	R3,T_dat+1
    0166E 9220 0112 STS	crc16array+18,R2
(1666) 								 crc16array[19]=(unsigned char)(T_dat>>8);
    01670 2C23      MOV	R2,R3
    01671 2433      CLR	R3
    01672 FC27      SBRC	R2,7
    01673 9430      COM	R3
    01674 9220 0113 STS	crc16array+19,R2
(1667) 						  
(1668) 						  		 Delay_ms(30);	
    01676 E10E      LDI	R16,0x1E
    01677 E010      LDI	R17,0
    01678 940E 05F4 CALL	_Delay_ms
(1669) 						  		 T_dat=TPS_TData;
    0167A 9020 02DB LDS	R2,TPS_TData
    0167C 9030 02DC LDS	R3,TPS_TData+1
    0167E 9230 02E2 STS	T_dat+1,R3
    01680 9220 02E1 STS	T_dat,R2
(1670) 						  		 SendManchester();//温度
    01682 D23E      RCALL	_SendManchester
(1671) 								 crc16array[20]=(unsigned char)(T_dat);
    01683 9020 02E1 LDS	R2,T_dat
    01685 9030 02E2 LDS	R3,T_dat+1
    01687 9220 0114 STS	crc16array+20,R2
(1672) 								 crc16array[21]=(unsigned char)(T_dat>>8);
    01689 2C23      MOV	R2,R3
    0168A 2433      CLR	R3
    0168B FC27      SBRC	R2,7
    0168C 9430      COM	R3
    0168D 9220 0115 STS	crc16array+21,R2
(1673) 								 
(1674) 								 Delay_ms(30);	
    0168F E10E      LDI	R16,0x1E
    01690 E010      LDI	R17,0
    01691 940E 05F4 CALL	_Delay_ms
(1675) 								 crc16(crc16array,22);//0.75ms
    01693 E126      LDI	R18,0x16
    01694 E030      LDI	R19,0
    01695 E000      LDI	R16,0
    01696 E011      LDI	R17,1
    01697 D671      RCALL	_crc16
(1676) 								 T_dat=crc16hi;
    01698 9020 0121 LDS	R2,crc16hi
    0169A 2433      CLR	R3
    0169B 9230 02E2 STS	T_dat+1,R3
    0169D 9220 02E1 STS	T_dat,R2
(1677) 								 T_dat<<=8;
    0169F 9020 02E1 LDS	R2,T_dat
    016A1 9030 02E2 LDS	R3,T_dat+1
    016A3 2C32      MOV	R3,R2
    016A4 2422      CLR	R2
    016A5 9230 02E2 STS	T_dat+1,R3
    016A7 9220 02E1 STS	T_dat,R2
(1678) 								 T_dat|=crc16lo;	  
    016A9 9020 0120 LDS	R2,crc16lo
    016AB 2433      CLR	R3
    016AC 9040 02E1 LDS	R4,T_dat
    016AE 9050 02E2 LDS	R5,T_dat+1
    016B0 2842      OR	R4,R2
    016B1 2853      OR	R5,R3
    016B2 9250 02E2 STS	T_dat+1,R5
    016B4 9240 02E1 STS	T_dat,R4
(1679) 								 SendManchester();//上传CRC校验共2字节，从收到命令到上传完毕共耗时约850ms
    016B6 D20A      RCALL	_SendManchester
(1680) 								}
    016B7 C1FC      RJMP	0x18B4
(1681) 								else
(1682) 								{
(1683) 								 Delay_ms(30);	
    016B8 E10E      LDI	R16,0x1E
    016B9 E010      LDI	R17,0
    016BA 940E 05F4 CALL	_Delay_ms
(1684) 								 crc16(crc16array,18);//0.75ms
    016BC E122      LDI	R18,0x12
    016BD E030      LDI	R19,0
    016BE E000      LDI	R16,0
    016BF E011      LDI	R17,1
    016C0 D648      RCALL	_crc16
(1685) 								 T_dat=crc16hi;
    016C1 9020 0121 LDS	R2,crc16hi
    016C3 2433      CLR	R3
    016C4 9230 02E2 STS	T_dat+1,R3
    016C6 9220 02E1 STS	T_dat,R2
(1686) 								 T_dat<<=8;
    016C8 9020 02E1 LDS	R2,T_dat
    016CA 9030 02E2 LDS	R3,T_dat+1
    016CC 2C32      MOV	R3,R2
    016CD 2422      CLR	R2
    016CE 9230 02E2 STS	T_dat+1,R3
    016D0 9220 02E1 STS	T_dat,R2
(1687) 								 T_dat|=crc16lo;	  
    016D2 9020 0120 LDS	R2,crc16lo
    016D4 2433      CLR	R3
    016D5 9040 02E1 LDS	R4,T_dat
    016D7 9050 02E2 LDS	R5,T_dat+1
    016D9 2842      OR	R4,R2
    016DA 2853      OR	R5,R3
    016DB 9250 02E2 STS	T_dat+1,R5
    016DD 9240 02E1 STS	T_dat,R4
(1688) 								 SendManchester();//上传CRC校验共2字节，从收到命令到上传完毕共耗时约760ms
    016DF D1E1      RCALL	_SendManchester
(1689) 								}
(1690) 							}	
(1691) 						}
    016E0 C1D3      RJMP	0x18B4
(1692) 						else  if(R_dat==0xc5) //读仪器信息,共320字节，分5次从流量板中提取，每包64字节
    016E1 9180 02DF LDS	R24,R_dat
    016E3 9190 02E0 LDS	R25,R_dat+1
    016E5 3C85      CPI	R24,0xC5
    016E6 E0E0      LDI	R30,0
    016E7 079E      CPC	R25,R30
    016E8 F009      BEQ	0x16EA
    016E9 C16A      RJMP	0x1854
(1693) 						{
(1694) 							Uart0TxData[0]=0xE8;
    016EA EE88      LDI	R24,0xE8
    016EB 9380 012F STS	Uart0TxData,R24
(1695) 							Uart0TxData[1]=0x40;
    016ED E480      LDI	R24,0x40
    016EE 9380 0130 STS	Uart0TxData+1,R24
(1696) 							Uart0TxData[2]=0x83;
    016F0 E883      LDI	R24,0x83
    016F1 9380 0131 STS	Uart0TxData+2,R24
(1697) 							Uart0TxData[3]=0;//包0
    016F3 2422      CLR	R2
    016F4 9220 0132 STS	Uart0TxData+3,R2
(1698) 							SendUart0_2(9,5);// 超时40ms	
    016F6 E025      LDI	R18,5
    016F7 E030      LDI	R19,0
    016F8 E009      LDI	R16,0x9
    016F9 940E 04EB CALL	_SendUart0_2
(1699) 							if(Uart0RxCounter==64) 
    016FB 9180 02FA LDS	R24,Uart0RxCounter
    016FD 3480      CPI	R24,0x40
    016FE F599      BNE	0x1732
(1700) 							{
(1701) 								for(i=0;i<32;i++)
    016FF 24AA      CLR	R10
    01700 C02E      RJMP	0x172F
(1702) 								{
(1703) 									Delay_ms(20);
    01701 E104      LDI	R16,0x14
    01702 E010      LDI	R17,0
    01703 940E 05F4 CALL	_Delay_ms
(1704) 									T_dat=Uart0RxData[i*2+1];//高字节
    01705 EF8C      LDI	R24,0xFC
    01706 E092      LDI	R25,2
    01707 2DEA      MOV	R30,R10
    01708 27FF      CLR	R31
    01709 0FEE      LSL	R30
    0170A 1FFF      ROL	R31
    0170B 0FE8      ADD	R30,R24
    0170C 1FF9      ADC	R31,R25
    0170D 8020      LD	R2,Z
    0170E 2433      CLR	R3
    0170F 9230 02E2 STS	T_dat+1,R3
    01711 9220 02E1 STS	T_dat,R2
(1705) 									T_dat<<=8;
    01713 2C32      MOV	R3,R2
    01714 2422      CLR	R2
    01715 9230 02E2 STS	T_dat+1,R3
    01717 9220 02E1 STS	T_dat,R2
(1706) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01719 EF8B      LDI	R24,0xFB
    0171A E092      LDI	R25,2
    0171B 2DEA      MOV	R30,R10
    0171C 27FF      CLR	R31
    0171D 0FEE      LSL	R30
    0171E 1FFF      ROL	R31
    0171F 0FE8      ADD	R30,R24
    01720 1FF9      ADC	R31,R25
    01721 8020      LD	R2,Z
    01722 2433      CLR	R3
    01723 9040 02E1 LDS	R4,T_dat
    01725 9050 02E2 LDS	R5,T_dat+1
    01727 2842      OR	R4,R2
    01728 2853      OR	R5,R3
    01729 9250 02E2 STS	T_dat+1,R5
    0172B 9240 02E1 STS	T_dat,R4
(1707) 									SendManchester();		 
    0172D D193      RCALL	_SendManchester
    0172E 94A3      INC	R10
    0172F 2D8A      MOV	R24,R10
    01730 3280      CPI	R24,0x20
    01731 F278      BCS	0x1701
(1708) 								}	
(1709) 							}	
(1710) 
(1711) 							Uart0TxData[0]=0xE8;
    01732 EE88      LDI	R24,0xE8
    01733 9380 012F STS	Uart0TxData,R24
(1712) 							Uart0TxData[1]=0x40;
    01735 E480      LDI	R24,0x40
    01736 9380 0130 STS	Uart0TxData+1,R24
(1713) 							Uart0TxData[2]=0x83;
    01738 E883      LDI	R24,0x83
    01739 9380 0131 STS	Uart0TxData+2,R24
(1714) 							Uart0TxData[3]=1;//包1
    0173B E081      LDI	R24,1
    0173C 9380 0132 STS	Uart0TxData+3,R24
(1715) 							SendUart0_2(9,5);// 超时40ms	 
    0173E E025      LDI	R18,5
    0173F E030      LDI	R19,0
    01740 E009      LDI	R16,0x9
    01741 940E 04EB CALL	_SendUart0_2
(1716) 							if(Uart0RxCounter==64) 
    01743 9180 02FA LDS	R24,Uart0RxCounter
    01745 3480      CPI	R24,0x40
    01746 F599      BNE	0x177A
(1717) 							{
(1718) 								for(i=0;i<32;i++)
    01747 24AA      CLR	R10
    01748 C02E      RJMP	0x1777
(1719) 								{
(1720) 									T_dat=Uart0RxData[i*2+1];//高字节
    01749 EF8C      LDI	R24,0xFC
    0174A E092      LDI	R25,2
    0174B 2DEA      MOV	R30,R10
    0174C 27FF      CLR	R31
    0174D 0FEE      LSL	R30
    0174E 1FFF      ROL	R31
    0174F 0FE8      ADD	R30,R24
    01750 1FF9      ADC	R31,R25
    01751 8020      LD	R2,Z
    01752 2433      CLR	R3
    01753 9230 02E2 STS	T_dat+1,R3
    01755 9220 02E1 STS	T_dat,R2
(1721) 									T_dat<<=8;
    01757 2C32      MOV	R3,R2
    01758 2422      CLR	R2
    01759 9230 02E2 STS	T_dat+1,R3
    0175B 9220 02E1 STS	T_dat,R2
(1722) 									T_dat|=Uart0RxData[i*2+0];//低字节
    0175D EF8B      LDI	R24,0xFB
    0175E E092      LDI	R25,2
    0175F 2DEA      MOV	R30,R10
    01760 27FF      CLR	R31
    01761 0FEE      LSL	R30
    01762 1FFF      ROL	R31
    01763 0FE8      ADD	R30,R24
    01764 1FF9      ADC	R31,R25
    01765 8020      LD	R2,Z
    01766 2433      CLR	R3
    01767 9040 02E1 LDS	R4,T_dat
    01769 9050 02E2 LDS	R5,T_dat+1
    0176B 2842      OR	R4,R2
    0176C 2853      OR	R5,R3
    0176D 9250 02E2 STS	T_dat+1,R5
    0176F 9240 02E1 STS	T_dat,R4
(1723) 									SendManchester();
    01771 D14F      RCALL	_SendManchester
(1724) 									Delay_ms(20);
    01772 E104      LDI	R16,0x14
    01773 E010      LDI	R17,0
    01774 940E 05F4 CALL	_Delay_ms
    01776 94A3      INC	R10
    01777 2D8A      MOV	R24,R10
    01778 3280      CPI	R24,0x20
    01779 F278      BCS	0x1749
(1725) 								}
(1726) 							}	
(1727) 
(1728) 							Uart0TxData[0]=0xE8;
    0177A EE88      LDI	R24,0xE8
    0177B 9380 012F STS	Uart0TxData,R24
(1729) 							Uart0TxData[1]=0x40;
    0177D E480      LDI	R24,0x40
    0177E 9380 0130 STS	Uart0TxData+1,R24
(1730) 							Uart0TxData[2]=0x83;
    01780 E883      LDI	R24,0x83
    01781 9380 0131 STS	Uart0TxData+2,R24
(1731) 							Uart0TxData[3]=2;//包2
    01783 E082      LDI	R24,2
    01784 9380 0132 STS	Uart0TxData+3,R24
(1732) 							SendUart0_2(9,5);// 超时40ms	 
    01786 E025      LDI	R18,5
    01787 E030      LDI	R19,0
    01788 E009      LDI	R16,0x9
    01789 940E 04EB CALL	_SendUart0_2
(1733) 							if(Uart0RxCounter==64) 
    0178B 9180 02FA LDS	R24,Uart0RxCounter
    0178D 3480      CPI	R24,0x40
    0178E F599      BNE	0x17C2
(1734) 							{
(1735) 								for(i=0;i<32;i++)
    0178F 24AA      CLR	R10
    01790 C02E      RJMP	0x17BF
(1736) 								{
(1737) 									T_dat=Uart0RxData[i*2+1];//高字节
    01791 EF8C      LDI	R24,0xFC
    01792 E092      LDI	R25,2
    01793 2DEA      MOV	R30,R10
    01794 27FF      CLR	R31
    01795 0FEE      LSL	R30
    01796 1FFF      ROL	R31
    01797 0FE8      ADD	R30,R24
    01798 1FF9      ADC	R31,R25
    01799 8020      LD	R2,Z
    0179A 2433      CLR	R3
    0179B 9230 02E2 STS	T_dat+1,R3
    0179D 9220 02E1 STS	T_dat,R2
(1738) 									T_dat<<=8;
    0179F 2C32      MOV	R3,R2
    017A0 2422      CLR	R2
    017A1 9230 02E2 STS	T_dat+1,R3
    017A3 9220 02E1 STS	T_dat,R2
(1739) 									T_dat|=Uart0RxData[i*2+0];//低字节
    017A5 EF8B      LDI	R24,0xFB
    017A6 E092      LDI	R25,2
    017A7 2DEA      MOV	R30,R10
    017A8 27FF      CLR	R31
    017A9 0FEE      LSL	R30
    017AA 1FFF      ROL	R31
    017AB 0FE8      ADD	R30,R24
    017AC 1FF9      ADC	R31,R25
    017AD 8020      LD	R2,Z
    017AE 2433      CLR	R3
    017AF 9040 02E1 LDS	R4,T_dat
    017B1 9050 02E2 LDS	R5,T_dat+1
    017B3 2842      OR	R4,R2
    017B4 2853      OR	R5,R3
    017B5 9250 02E2 STS	T_dat+1,R5
    017B7 9240 02E1 STS	T_dat,R4
(1740) 									SendManchester();
    017B9 D107      RCALL	_SendManchester
(1741) 									Delay_ms(20);
    017BA E104      LDI	R16,0x14
    017BB E010      LDI	R17,0
    017BC 940E 05F4 CALL	_Delay_ms
    017BE 94A3      INC	R10
    017BF 2D8A      MOV	R24,R10
    017C0 3280      CPI	R24,0x20
    017C1 F278      BCS	0x1791
(1742) 								}
(1743) 							}	
(1744) 
(1745) 							Uart0TxData[0]=0xE8;
    017C2 EE88      LDI	R24,0xE8
    017C3 9380 012F STS	Uart0TxData,R24
(1746) 							Uart0TxData[1]=0x40;
    017C5 E480      LDI	R24,0x40
    017C6 9380 0130 STS	Uart0TxData+1,R24
(1747) 							Uart0TxData[2]=0x83;
    017C8 E883      LDI	R24,0x83
    017C9 9380 0131 STS	Uart0TxData+2,R24
(1748) 							Uart0TxData[3]=3;//包3
    017CB E083      LDI	R24,3
    017CC 9380 0132 STS	Uart0TxData+3,R24
(1749) 							SendUart0_2(9,5);// 超时40ms	 
    017CE E025      LDI	R18,5
    017CF E030      LDI	R19,0
    017D0 E009      LDI	R16,0x9
    017D1 940E 04EB CALL	_SendUart0_2
(1750) 							if(Uart0RxCounter==64) 
    017D3 9180 02FA LDS	R24,Uart0RxCounter
    017D5 3480      CPI	R24,0x40
    017D6 F599      BNE	0x180A
(1751) 							{
(1752) 								for(i=0;i<32;i++)
    017D7 24AA      CLR	R10
    017D8 C02E      RJMP	0x1807
(1753) 								{
(1754) 									T_dat=Uart0RxData[i*2+1];//高字节
    017D9 EF8C      LDI	R24,0xFC
    017DA E092      LDI	R25,2
    017DB 2DEA      MOV	R30,R10
    017DC 27FF      CLR	R31
    017DD 0FEE      LSL	R30
    017DE 1FFF      ROL	R31
    017DF 0FE8      ADD	R30,R24
    017E0 1FF9      ADC	R31,R25
    017E1 8020      LD	R2,Z
    017E2 2433      CLR	R3
    017E3 9230 02E2 STS	T_dat+1,R3
    017E5 9220 02E1 STS	T_dat,R2
(1755) 									T_dat<<=8;
    017E7 2C32      MOV	R3,R2
    017E8 2422      CLR	R2
    017E9 9230 02E2 STS	T_dat+1,R3
    017EB 9220 02E1 STS	T_dat,R2
(1756) 									T_dat|=Uart0RxData[i*2+0];//低字节
    017ED EF8B      LDI	R24,0xFB
    017EE E092      LDI	R25,2
    017EF 2DEA      MOV	R30,R10
    017F0 27FF      CLR	R31
    017F1 0FEE      LSL	R30
    017F2 1FFF      ROL	R31
    017F3 0FE8      ADD	R30,R24
    017F4 1FF9      ADC	R31,R25
    017F5 8020      LD	R2,Z
    017F6 2433      CLR	R3
    017F7 9040 02E1 LDS	R4,T_dat
    017F9 9050 02E2 LDS	R5,T_dat+1
    017FB 2842      OR	R4,R2
    017FC 2853      OR	R5,R3
    017FD 9250 02E2 STS	T_dat+1,R5
    017FF 9240 02E1 STS	T_dat,R4
(1757) 									SendManchester();
    01801 D0BF      RCALL	_SendManchester
(1758) 									Delay_ms(20);
    01802 E104      LDI	R16,0x14
    01803 E010      LDI	R17,0
    01804 940E 05F4 CALL	_Delay_ms
    01806 94A3      INC	R10
    01807 2D8A      MOV	R24,R10
    01808 3280      CPI	R24,0x20
    01809 F278      BCS	0x17D9
(1759) 								}
(1760) 							}	
(1761) 
(1762) 							Uart0TxData[0]=0xE8;
    0180A EE88      LDI	R24,0xE8
    0180B 9380 012F STS	Uart0TxData,R24
(1763) 							Uart0TxData[1]=0x40;
    0180D E480      LDI	R24,0x40
    0180E 9380 0130 STS	Uart0TxData+1,R24
(1764) 							Uart0TxData[2]=0x83;
    01810 E883      LDI	R24,0x83
    01811 9380 0131 STS	Uart0TxData+2,R24
(1765) 							Uart0TxData[3]=4;//包4
    01813 E084      LDI	R24,4
    01814 9380 0132 STS	Uart0TxData+3,R24
(1766) 							SendUart0_2(9,5);// 超时40ms	 
    01816 E025      LDI	R18,5
    01817 E030      LDI	R19,0
    01818 E009      LDI	R16,0x9
    01819 940E 04EB CALL	_SendUart0_2
(1767) 							if(Uart0RxCounter==64) 
    0181B 9180 02FA LDS	R24,Uart0RxCounter
    0181D 3480      CPI	R24,0x40
    0181E F009      BEQ	0x1820
    0181F C094      RJMP	0x18B4
(1768) 							{
(1769) 								for(i=0;i<32;i++)
    01820 24AA      CLR	R10
    01821 C02E      RJMP	0x1850
(1770) 								{
(1771) 									T_dat=Uart0RxData[i*2+1];//高字节
    01822 EF8C      LDI	R24,0xFC
    01823 E092      LDI	R25,2
    01824 2DEA      MOV	R30,R10
    01825 27FF      CLR	R31
    01826 0FEE      LSL	R30
    01827 1FFF      ROL	R31
    01828 0FE8      ADD	R30,R24
    01829 1FF9      ADC	R31,R25
    0182A 8020      LD	R2,Z
    0182B 2433      CLR	R3
    0182C 9230 02E2 STS	T_dat+1,R3
    0182E 9220 02E1 STS	T_dat,R2
(1772) 									T_dat<<=8;
    01830 2C32      MOV	R3,R2
    01831 2422      CLR	R2
    01832 9230 02E2 STS	T_dat+1,R3
    01834 9220 02E1 STS	T_dat,R2
(1773) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01836 EF8B      LDI	R24,0xFB
    01837 E092      LDI	R25,2
    01838 2DEA      MOV	R30,R10
    01839 27FF      CLR	R31
    0183A 0FEE      LSL	R30
    0183B 1FFF      ROL	R31
    0183C 0FE8      ADD	R30,R24
    0183D 1FF9      ADC	R31,R25
    0183E 8020      LD	R2,Z
    0183F 2433      CLR	R3
    01840 9040 02E1 LDS	R4,T_dat
    01842 9050 02E2 LDS	R5,T_dat+1
    01844 2842      OR	R4,R2
    01845 2853      OR	R5,R3
    01846 9250 02E2 STS	T_dat+1,R5
    01848 9240 02E1 STS	T_dat,R4
(1774) 									SendManchester();
    0184A D076      RCALL	_SendManchester
(1775) 									Delay_ms(20);
    0184B E104      LDI	R16,0x14
    0184C E010      LDI	R17,0
    0184D 940E 05F4 CALL	_Delay_ms
    0184F 94A3      INC	R10
    01850 2D8A      MOV	R24,R10
    01851 3280      CPI	R24,0x20
    01852 F278      BCS	0x1822
(1776) 								}
(1777) 							}	
(1778) 						}
    01853 C060      RJMP	0x18B4
(1779) 						else  if(R_dat==0xca) //写仪器信息
    01854 9180 02DF LDS	R24,R_dat
    01856 9190 02E0 LDS	R25,R_dat+1
    01858 3C8A      CPI	R24,0xCA
    01859 E0E0      LDI	R30,0
    0185A 079E      CPC	R25,R30
    0185B F009      BEQ	0x185D
    0185C C057      RJMP	0x18B4
(1780) 						{
(1781) 							DataFlag=4;
    0185D E084      LDI	R24,4
    0185E E090      LDI	R25,0
    0185F 9390 02C2 STS	DataFlag+1,R25
    01861 9380 02C1 STS	DataFlag,R24
(1782) 							coeff_len=320;
    01863 E480      LDI	R24,0x40
    01864 E091      LDI	R25,1
    01865 9390 012D STS	coeff_len+1,R25
    01867 9380 012C STS	coeff_len,R24
(1783) 							coeff_count=0;
    01869 2422      CLR	R2
    0186A 2433      CLR	R3
    0186B 9230 012B STS	coeff_count+1,R3
    0186D 9220 012A STS	coeff_count,R2
(1784) 							TimeOutFlag=0;
    0186F 9220 02D9 STS	TimeOutFlag,R2
(1785) 							Timer0Counter=2000;//16s定时
    01871 ED80      LDI	R24,0xD0
    01872 E097      LDI	R25,7
    01873 9390 0346 STS	Timer0Counter+1,R25
    01875 9380 0345 STS	Timer0Counter,R24
(1786) 							TCNT0=0x06; //8ms
    01877 E086      LDI	R24,6
    01878 BF82      OUT	0x32,R24
(1787) 							TCCR0|=0x06;//256分频
    01879 B783      IN	R24,0x33
    0187A 6086      ORI	R24,6
    0187B BF83      OUT	0x33,R24
(1788) 							TIFR|=0x01; //清定时器0中断标志
    0187C B786      IN	R24,0x36
    0187D 6081      ORI	R24,1
    0187E BF86      OUT	0x36,R24
(1789) 							TIMSK|=0x01;//使能定时器0中断		
    0187F B787      IN	R24,0x37
    01880 6081      ORI	R24,1
    01881 BF87      OUT	0x37,R24
(1790) 						}
(1791) 						break;
    01882 C031      RJMP	0x18B4
(1792) 					
(1793) 					case 0xd0://压力板与电机板版本
(1794) 					   if(R_dat==0xdf)//电机板与第2路压力板版本号	
    01883 9180 02DF LDS	R24,R_dat
    01885 9190 02E0 LDS	R25,R_dat+1
    01887 3D8F      CPI	R24,0xDF
    01888 E0E0      LDI	R30,0
    01889 079E      CPC	R25,R30
    0188A F549      BNE	0x18B4
(1795) 					    {			 
(1796) 						  SendUart1(0xdf,3);//电机板
    0188B E023      LDI	R18,3
    0188C E030      LDI	R19,0
    0188D ED0F      LDI	R16,0xDF
    0188E 940E 02B3 CALL	_SendUart1
(1797) 						  T_dat=Uart1RxData[0];
    01890 9020 02F6 LDS	R2,Uart1RxData
    01892 2433      CLR	R3
    01893 9230 02E2 STS	T_dat+1,R3
    01895 9220 02E1 STS	T_dat,R2
(1798) 						  T_dat<<=8;
    01897 9020 02E1 LDS	R2,T_dat
    01899 9030 02E2 LDS	R3,T_dat+1
    0189B 2C32      MOV	R3,R2
    0189C 2422      CLR	R2
    0189D 9230 02E2 STS	T_dat+1,R3
    0189F 9220 02E1 STS	T_dat,R2
(1799) 						  
(1800) 						  SendTPS(0xdf);//第2路压力板
    018A1 ED0F      LDI	R16,0xDF
    018A2 940E 0310 CALL	_SendTPS
(1801) 						  T_dat|=ReceiveTPS();
    018A4 940E 037A CALL	_ReceiveTPS
    018A6 2EA0      MOV	R10,R16
    018A7 2C2A      MOV	R2,R10
    018A8 2433      CLR	R3
    018A9 9040 02E1 LDS	R4,T_dat
    018AB 9050 02E2 LDS	R5,T_dat+1
    018AD 2842      OR	R4,R2
    018AE 2853      OR	R5,R3
    018AF 9250 02E2 STS	T_dat+1,R5
    018B1 9240 02E1 STS	T_dat,R4
(1802) 						  
(1803) 						  SendManchester();	
    018B3 D00D      RCALL	_SendManchester
(1804) 						}
(1805) 					break;
(1806) 					
(1807) 					default: 
(1808) 						break;	
(1809) 				}
(1810) 			}
(1811) 			
(1812) 		RDataEnd:
(1813) 			IntFlag=0;
    018B4 2422      CLR	R2
    018B5 9220 02BF STS	IntFlag,R2
(1814) 			EIFR|=0x01;//清INT0中断标志
    018B7 B788      IN	R24,0x38
    018B8 6081      ORI	R24,1
    018B9 BF88      OUT	0x38,R24
(1815) 			EIMSK|=0x01;//使能INT0中断 
    018BA B789      IN	R24,0x39
    018BB 6081      ORI	R24,1
    018BC BF89      OUT	0x39,R24
    018BD 940C 069D JMP	0x69D
    018BF 9629      ADIW	R28,0x9
    018C0 9508      RET
_SendManchester:
  L                    --> R20
    018C1 934A      ST	-Y,R20
(1816) 		}  
(1817) 	}
(1818) }
(1819) 
(1820)  
(1821) 
(1822) void SendManchester(void) //曼码发送程序,总耗时最大约120+560+8400+720=9800us，最小约120+560+5040+720=6440us
(1823) { //每位80us
(1824)  //同步：1高6低
(1825)  //1:    1高2低
(1826)  //0：   1高4低  
(1827)   unsigned char L;
(1828)   SREG&=0x7f;//关总中断 
    018C2 B78F      IN	R24,0x3F
    018C3 778F      ANDI	R24,0x7F
    018C4 BF8F      OUT	0x3F,R24
(1829)   
(1830)     M1_H //先给总线放电，耗时约120us
    018C5 9180 0065 LDS	R24,0x65
    018C7 6088      ORI	R24,0x8
    018C8 9380 0065 STS	0x65,R24
(1831) 	
(1832)   //模拟同步头数据
(1833) 	//4位命令
(1834) 	T_dat_buf[21]=(T_com&0x08)>>3;
    018CA 9180 02DA LDS	R24,T_com
    018CC 7088      ANDI	R24,0x8
    018CD 9586      LSR	R24
    018CE 9586      LSR	R24
    018CF 9586      LSR	R24
    018D0 9380 02D8 STS	T_dat_buf+21,R24
(1835) 	T_dat_buf[20]=(T_com&0x04)>>2;
    018D2 9180 02DA LDS	R24,T_com
    018D4 7084      ANDI	R24,4
    018D5 9586      LSR	R24
    018D6 9586      LSR	R24
    018D7 9380 02D7 STS	T_dat_buf+20,R24
(1836) 	T_dat_buf[19]=(T_com&0x02)>>1;
    018D9 9180 02DA LDS	R24,T_com
    018DB 7082      ANDI	R24,2
    018DC 9586      LSR	R24
    018DD 9380 02D6 STS	T_dat_buf+19,R24
(1837) 	T_dat_buf[18]=T_com&0x01;
    018DF 9180 02DA LDS	R24,T_com
    018E1 7081      ANDI	R24,1
    018E2 9380 02D5 STS	T_dat_buf+18,R24
(1838) 	//16位数据
(1839) 	T_dat_buf[17]=(T_dat&0x8000)>>15;
    018E4 E02F      LDI	R18,0xF
    018E5 E030      LDI	R19,0
    018E6 9100 02E1 LDS	R16,T_dat
    018E8 9110 02E2 LDS	R17,T_dat+1
    018EA 7000      ANDI	R16,0
    018EB 7810      ANDI	R17,0x80
    018EC 940E 1DCD CALL	lsr16
    018EE 9300 02D4 STS	T_dat_buf+17,R16
(1840) 	T_dat_buf[16]=(T_dat&0x4000)>>14;
    018F0 E02E      LDI	R18,0xE
    018F1 E030      LDI	R19,0
    018F2 9100 02E1 LDS	R16,T_dat
    018F4 9110 02E2 LDS	R17,T_dat+1
    018F6 7000      ANDI	R16,0
    018F7 7410      ANDI	R17,0x40
    018F8 940E 1D61 CALL	asr16
    018FA 9300 02D3 STS	T_dat_buf+16,R16
(1841) 	T_dat_buf[15]=(T_dat&0x2000)>>13;
    018FC E02D      LDI	R18,0xD
    018FD E030      LDI	R19,0
    018FE 9100 02E1 LDS	R16,T_dat
    01900 9110 02E2 LDS	R17,T_dat+1
    01902 7000      ANDI	R16,0
    01903 7210      ANDI	R17,0x20
    01904 940E 1D61 CALL	asr16
    01906 9300 02D2 STS	T_dat_buf+15,R16
(1842) 	T_dat_buf[14]=(T_dat&0x1000)>>12;
    01908 E02C      LDI	R18,0xC
    01909 E030      LDI	R19,0
    0190A 9100 02E1 LDS	R16,T_dat
    0190C 9110 02E2 LDS	R17,T_dat+1
    0190E 7000      ANDI	R16,0
    0190F 7110      ANDI	R17,0x10
    01910 940E 1D61 CALL	asr16
    01912 9300 02D1 STS	T_dat_buf+14,R16
(1843) 	T_dat_buf[13]=(T_dat&0x0800)>>11;
    01914 E02B      LDI	R18,0xB
    01915 E030      LDI	R19,0
    01916 9100 02E1 LDS	R16,T_dat
    01918 9110 02E2 LDS	R17,T_dat+1
    0191A 7000      ANDI	R16,0
    0191B 7018      ANDI	R17,0x8
    0191C 940E 1D61 CALL	asr16
    0191E 9300 02D0 STS	T_dat_buf+13,R16
(1844)     T_dat_buf[12]=(T_dat&0x0400)>>10;
    01920 E02A      LDI	R18,0xA
    01921 E030      LDI	R19,0
    01922 9100 02E1 LDS	R16,T_dat
    01924 9110 02E2 LDS	R17,T_dat+1
    01926 7000      ANDI	R16,0
    01927 7014      ANDI	R17,4
    01928 940E 1D61 CALL	asr16
    0192A 9300 02CF STS	T_dat_buf+12,R16
(1845)     T_dat_buf[11]=(T_dat&0x0200)>>9;
    0192C E029      LDI	R18,0x9
    0192D E030      LDI	R19,0
    0192E 9100 02E1 LDS	R16,T_dat
    01930 9110 02E2 LDS	R17,T_dat+1
    01932 7000      ANDI	R16,0
    01933 7012      ANDI	R17,2
    01934 940E 1D61 CALL	asr16
    01936 9300 02CE STS	T_dat_buf+11,R16
(1846) 	T_dat_buf[10]=(T_dat&0x0100)>>8;
    01938 9180 02E1 LDS	R24,T_dat
    0193A 9190 02E2 LDS	R25,T_dat+1
    0193C 7080      ANDI	R24,0
    0193D 7091      ANDI	R25,1
    0193E 011C      MOVW	R2,R24
    0193F 2C23      MOV	R2,R3
    01940 2433      CLR	R3
    01941 FC27      SBRC	R2,7
    01942 9430      COM	R3
    01943 9220 02CD STS	T_dat_buf+10,R2
(1847) 	T_dat_buf[9]=(T_dat&0x0080)>>7;
    01945 E027      LDI	R18,7
    01946 E030      LDI	R19,0
    01947 9100 02E1 LDS	R16,T_dat
    01949 9110 02E2 LDS	R17,T_dat+1
    0194B 7800      ANDI	R16,0x80
    0194C 7010      ANDI	R17,0
    0194D 940E 1D61 CALL	asr16
    0194F 9300 02CC STS	T_dat_buf+9,R16
(1848) 	T_dat_buf[8]=(T_dat&0x0040)>>6;
    01951 E026      LDI	R18,6
    01952 E030      LDI	R19,0
    01953 9100 02E1 LDS	R16,T_dat
    01955 9110 02E2 LDS	R17,T_dat+1
    01957 7400      ANDI	R16,0x40
    01958 7010      ANDI	R17,0
    01959 940E 1D61 CALL	asr16
    0195B 9300 02CB STS	T_dat_buf+8,R16
(1849) 	T_dat_buf[7]=(T_dat&0x0020)>>5;
    0195D E025      LDI	R18,5
    0195E E030      LDI	R19,0
    0195F 9100 02E1 LDS	R16,T_dat
    01961 9110 02E2 LDS	R17,T_dat+1
    01963 7200      ANDI	R16,0x20
    01964 7010      ANDI	R17,0
    01965 940E 1D61 CALL	asr16
    01967 9300 02CA STS	T_dat_buf+7,R16
(1850) 	T_dat_buf[6]=(T_dat&0x0010)>>4;
    01969 9180 02E1 LDS	R24,T_dat
    0196B 9190 02E2 LDS	R25,T_dat+1
    0196D 7180      ANDI	R24,0x10
    0196E 7090      ANDI	R25,0
    0196F 011C      MOVW	R2,R24
    01970 9435      ASR	R3
    01971 9427      ROR	R2
    01972 9435      ASR	R3
    01973 9427      ROR	R2
    01974 9435      ASR	R3
    01975 9427      ROR	R2
    01976 9435      ASR	R3
    01977 9427      ROR	R2
    01978 9220 02C9 STS	T_dat_buf+6,R2
(1851) 	T_dat_buf[5]=(T_dat&0x0008)>>3;
    0197A 9180 02E1 LDS	R24,T_dat
    0197C 9190 02E2 LDS	R25,T_dat+1
    0197E 7088      ANDI	R24,0x8
    0197F 7090      ANDI	R25,0
    01980 011C      MOVW	R2,R24
    01981 9435      ASR	R3
    01982 9427      ROR	R2
    01983 9435      ASR	R3
    01984 9427      ROR	R2
    01985 9435      ASR	R3
    01986 9427      ROR	R2
    01987 9220 02C8 STS	T_dat_buf+5,R2
(1852) 	T_dat_buf[4]=(T_dat&0x0004)>>2;
    01989 9180 02E1 LDS	R24,T_dat
    0198B 9190 02E2 LDS	R25,T_dat+1
    0198D 7084      ANDI	R24,4
    0198E 7090      ANDI	R25,0
    0198F 011C      MOVW	R2,R24
    01990 9435      ASR	R3
    01991 9427      ROR	R2
    01992 9435      ASR	R3
    01993 9427      ROR	R2
    01994 9220 02C7 STS	T_dat_buf+4,R2
(1853) 	T_dat_buf[3]=(T_dat&0x0002)>>1;
    01996 9180 02E1 LDS	R24,T_dat
    01998 9190 02E2 LDS	R25,T_dat+1
    0199A 7082      ANDI	R24,2
    0199B 7090      ANDI	R25,0
    0199C 011C      MOVW	R2,R24
    0199D 9435      ASR	R3
    0199E 9427      ROR	R2
    0199F 9220 02C6 STS	T_dat_buf+3,R2
(1854) 	T_dat_buf[2]=T_dat&0x0001;
    019A1 9180 02E1 LDS	R24,T_dat
    019A3 9190 02E2 LDS	R25,T_dat+1
    019A5 7081      ANDI	R24,1
    019A6 7090      ANDI	R25,0
    019A7 9380 02C5 STS	T_dat_buf+2,R24
(1855) 	//计算校验位，奇校验
(1856) 	T_dat_buf[1]=1;
    019A9 E081      LDI	R24,1
    019AA 9380 02C4 STS	T_dat_buf+1,R24
(1857)   	for(L=2;L<22;L++)
    019AC E042      LDI	R20,2
    019AD C00D      RJMP	0x19BB
(1858) 		{T_dat_buf[1]^=T_dat_buf[L];}
    019AE EC83      LDI	R24,0xC3
    019AF E092      LDI	R25,2
    019B0 2FE4      MOV	R30,R20
    019B1 27FF      CLR	R31
    019B2 0FE8      ADD	R30,R24
    019B3 1FF9      ADC	R31,R25
    019B4 8020      LD	R2,Z
    019B5 9030 02C4 LDS	R3,T_dat_buf+1
    019B7 2432      EOR	R3,R2
    019B8 9230 02C4 STS	T_dat_buf+1,R3
    019BA 9543      INC	R20
    019BB 3146      CPI	R20,0x16
    019BC F388      BCS	0x19AE
(1859)     DELAY80
    019BD 2422      CLR	R2
    019BE 2433      CLR	R3
    019BF 9230 02BE STS	Tt+1,R3
    019C1 9220 02BD STS	Tt,R2
    019C3 C009      RJMP	0x19CD
    019C4 9180 02BD LDS	R24,Tt
    019C6 9190 02BE LDS	R25,Tt+1
    019C8 9601      ADIW	R24,1
    019C9 9390 02BE STS	Tt+1,R25
    019CB 9380 02BD STS	Tt,R24
    019CD 9180 02BD LDS	R24,Tt
    019CF 9190 02BE LDS	R25,Tt+1
    019D1 3280      CPI	R24,0x20
    019D2 E0E0      LDI	R30,0
    019D3 079E      CPC	R25,R30
    019D4 F378      BCS	0x19C4
(1860)     M1_L
    019D5 9180 0065 LDS	R24,0x65
    019D7 7F87      ANDI	R24,0xF7
    019D8 9380 0065 STS	0x65,R24
(1861) 	DELAY40
    019DA 2422      CLR	R2
    019DB 2433      CLR	R3
    019DC 9230 02BE STS	Tt+1,R3
    019DE 9220 02BD STS	Tt,R2
    019E0 C009      RJMP	0x19EA
    019E1 9180 02BD LDS	R24,Tt
    019E3 9190 02BE LDS	R25,Tt+1
    019E5 9601      ADIW	R24,1
    019E6 9390 02BE STS	Tt+1,R25
    019E8 9380 02BD STS	Tt,R24
    019EA 9180 02BD LDS	R24,Tt
    019EC 9190 02BE LDS	R25,Tt+1
    019EE 3180      CPI	R24,0x10
    019EF E0E0      LDI	R30,0
    019F0 079E      CPC	R25,R30
    019F1 F378      BCS	0x19E1
(1862)    
(1863)    
(1864) 	//同步头,560us
(1865) 	//充电开始，高80us	 
(1866) 	M2_H 	
    019F2 9180 0065 LDS	R24,0x65
    019F4 6180      ORI	R24,0x10
    019F5 9380 0065 STS	0x65,R24
(1867) 	DELAY80
    019F7 2422      CLR	R2
    019F8 2433      CLR	R3
    019F9 9230 02BE STS	Tt+1,R3
    019FB 9220 02BD STS	Tt,R2
    019FD C009      RJMP	0x1A07
    019FE 9180 02BD LDS	R24,Tt
    01A00 9190 02BE LDS	R25,Tt+1
    01A02 9601      ADIW	R24,1
    01A03 9390 02BE STS	Tt+1,R25
    01A05 9380 02BD STS	Tt,R24
    01A07 9180 02BD LDS	R24,Tt
    01A09 9190 02BE LDS	R25,Tt+1
    01A0B 3280      CPI	R24,0x20
    01A0C E0E0      LDI	R30,0
    01A0D 079E      CPC	R25,R30
    01A0E F378      BCS	0x19FE
(1868) 	M2_L   //充电结束	
    01A0F 9180 0065 LDS	R24,0x65
    01A11 7E8F      ANDI	R24,0xEF
    01A12 9380 0065 STS	0x65,R24
(1869) 	//放电开始，低80*6=480us
(1870) 	DELAY40
    01A14 2422      CLR	R2
    01A15 2433      CLR	R3
    01A16 9230 02BE STS	Tt+1,R3
    01A18 9220 02BD STS	Tt,R2
    01A1A C009      RJMP	0x1A24
    01A1B 9180 02BD LDS	R24,Tt
    01A1D 9190 02BE LDS	R25,Tt+1
    01A1F 9601      ADIW	R24,1
    01A20 9390 02BE STS	Tt+1,R25
    01A22 9380 02BD STS	Tt,R24
    01A24 9180 02BD LDS	R24,Tt
    01A26 9190 02BE LDS	R25,Tt+1
    01A28 3180      CPI	R24,0x10
    01A29 E0E0      LDI	R30,0
    01A2A 079E      CPC	R25,R30
    01A2B F378      BCS	0x1A1B
(1871) 	M1_H    
    01A2C 9180 0065 LDS	R24,0x65
    01A2E 6088      ORI	R24,0x8
    01A2F 9380 0065 STS	0x65,R24
(1872)     DELAY80
    01A31 2422      CLR	R2
    01A32 2433      CLR	R3
    01A33 9230 02BE STS	Tt+1,R3
    01A35 9220 02BD STS	Tt,R2
    01A37 C009      RJMP	0x1A41
    01A38 9180 02BD LDS	R24,Tt
    01A3A 9190 02BE LDS	R25,Tt+1
    01A3C 9601      ADIW	R24,1
    01A3D 9390 02BE STS	Tt+1,R25
    01A3F 9380 02BD STS	Tt,R24
    01A41 9180 02BD LDS	R24,Tt
    01A43 9190 02BE LDS	R25,Tt+1
    01A45 3280      CPI	R24,0x20
    01A46 E0E0      LDI	R30,0
    01A47 079E      CPC	R25,R30
    01A48 F378      BCS	0x1A38
(1873) 	DELAY80
    01A49 2422      CLR	R2
    01A4A 2433      CLR	R3
    01A4B 9230 02BE STS	Tt+1,R3
    01A4D 9220 02BD STS	Tt,R2
    01A4F C009      RJMP	0x1A59
    01A50 9180 02BD LDS	R24,Tt
    01A52 9190 02BE LDS	R25,Tt+1
    01A54 9601      ADIW	R24,1
    01A55 9390 02BE STS	Tt+1,R25
    01A57 9380 02BD STS	Tt,R24
    01A59 9180 02BD LDS	R24,Tt
    01A5B 9190 02BE LDS	R25,Tt+1
    01A5D 3280      CPI	R24,0x20
    01A5E E0E0      LDI	R30,0
    01A5F 079E      CPC	R25,R30
    01A60 F378      BCS	0x1A50
(1874) 	DELAY80
    01A61 2422      CLR	R2
    01A62 2433      CLR	R3
    01A63 9230 02BE STS	Tt+1,R3
    01A65 9220 02BD STS	Tt,R2
    01A67 C009      RJMP	0x1A71
    01A68 9180 02BD LDS	R24,Tt
    01A6A 9190 02BE LDS	R25,Tt+1
    01A6C 9601      ADIW	R24,1
    01A6D 9390 02BE STS	Tt+1,R25
    01A6F 9380 02BD STS	Tt,R24
    01A71 9180 02BD LDS	R24,Tt
    01A73 9190 02BE LDS	R25,Tt+1
    01A75 3280      CPI	R24,0x20
    01A76 E0E0      LDI	R30,0
    01A77 079E      CPC	R25,R30
    01A78 F378      BCS	0x1A68
(1875) 	DELAY80
    01A79 2422      CLR	R2
    01A7A 2433      CLR	R3
    01A7B 9230 02BE STS	Tt+1,R3
    01A7D 9220 02BD STS	Tt,R2
    01A7F C009      RJMP	0x1A89
    01A80 9180 02BD LDS	R24,Tt
    01A82 9190 02BE LDS	R25,Tt+1
    01A84 9601      ADIW	R24,1
    01A85 9390 02BE STS	Tt+1,R25
    01A87 9380 02BD STS	Tt,R24
    01A89 9180 02BD LDS	R24,Tt
    01A8B 9190 02BE LDS	R25,Tt+1
    01A8D 3280      CPI	R24,0x20
    01A8E E0E0      LDI	R30,0
    01A8F 079E      CPC	R25,R30
    01A90 F378      BCS	0x1A80
(1876) 	DELAY80
    01A91 2422      CLR	R2
    01A92 2433      CLR	R3
    01A93 9230 02BE STS	Tt+1,R3
    01A95 9220 02BD STS	Tt,R2
    01A97 C009      RJMP	0x1AA1
    01A98 9180 02BD LDS	R24,Tt
    01A9A 9190 02BE LDS	R25,Tt+1
    01A9C 9601      ADIW	R24,1
    01A9D 9390 02BE STS	Tt+1,R25
    01A9F 9380 02BD STS	Tt,R24
    01AA1 9180 02BD LDS	R24,Tt
    01AA3 9190 02BE LDS	R25,Tt+1
    01AA5 3280      CPI	R24,0x20
    01AA6 E0E0      LDI	R30,0
    01AA7 079E      CPC	R25,R30
    01AA8 F378      BCS	0x1A98
(1877) 	M1_L    
    01AA9 9180 0065 LDS	R24,0x65
    01AAB 7F87      ANDI	R24,0xF7
    01AAC 9380 0065 STS	0x65,R24
(1878) 	DELAY40  //放电结束
    01AAE 2422      CLR	R2
    01AAF 2433      CLR	R3
    01AB0 9230 02BE STS	Tt+1,R3
    01AB2 9220 02BD STS	Tt,R2
    01AB4 C009      RJMP	0x1ABE
    01AB5 9180 02BD LDS	R24,Tt
    01AB7 9190 02BE LDS	R25,Tt+1
    01AB9 9601      ADIW	R24,1
    01ABA 9390 02BE STS	Tt+1,R25
    01ABC 9380 02BD STS	Tt,R24
    01ABE 9180 02BD LDS	R24,Tt
    01AC0 9190 02BE LDS	R25,Tt+1
    01AC2 3180      CPI	R24,0x10
    01AC3 E0E0      LDI	R30,0
    01AC4 079E      CPC	R25,R30
    01AC5 F378      BCS	0x1AB5
(1879) 	
(1880)      //连续发送 ,全0时每位400us，共8400us，全1时每位240us，共5040us
(1881)  	for(L=21;L>0;L--)
    01AC6 E145      LDI	R20,0x15
    01AC7 C124      RJMP	0x1BEC
(1882) 	{   
(1883) 	  if(T_dat_buf[L])//1，一高二低
    01AC8 EC83      LDI	R24,0xC3
    01AC9 E092      LDI	R25,2
    01ACA 2FE4      MOV	R30,R20
    01ACB 27FF      CLR	R31
    01ACC 0FE8      ADD	R30,R24
    01ACD 1FF9      ADC	R31,R25
    01ACE 8020      LD	R2,Z
    01ACF 2022      TST	R2
    01AD0 F409      BNE	0x1AD2
    01AD1 C075      RJMP	0x1B47
(1884)         {         	 		
(1885) 	        M2_H 
    01AD2 9180 0065 LDS	R24,0x65
    01AD4 6180      ORI	R24,0x10
    01AD5 9380 0065 STS	0x65,R24
(1886) 	        DELAY80
    01AD7 2422      CLR	R2
    01AD8 2433      CLR	R3
    01AD9 9230 02BE STS	Tt+1,R3
    01ADB 9220 02BD STS	Tt,R2
    01ADD C009      RJMP	0x1AE7
    01ADE 9180 02BD LDS	R24,Tt
    01AE0 9190 02BE LDS	R25,Tt+1
    01AE2 9601      ADIW	R24,1
    01AE3 9390 02BE STS	Tt+1,R25
    01AE5 9380 02BD STS	Tt,R24
    01AE7 9180 02BD LDS	R24,Tt
    01AE9 9190 02BE LDS	R25,Tt+1
    01AEB 3280      CPI	R24,0x20
    01AEC E0E0      LDI	R30,0
    01AED 079E      CPC	R25,R30
    01AEE F378      BCS	0x1ADE
(1887) 	        M2_L
    01AEF 9180 0065 LDS	R24,0x65
    01AF1 7E8F      ANDI	R24,0xEF
    01AF2 9380 0065 STS	0x65,R24
(1888) 			DELAY40
    01AF4 2422      CLR	R2
    01AF5 2433      CLR	R3
    01AF6 9230 02BE STS	Tt+1,R3
    01AF8 9220 02BD STS	Tt,R2
    01AFA C009      RJMP	0x1B04
    01AFB 9180 02BD LDS	R24,Tt
    01AFD 9190 02BE LDS	R25,Tt+1
    01AFF 9601      ADIW	R24,1
    01B00 9390 02BE STS	Tt+1,R25
    01B02 9380 02BD STS	Tt,R24
    01B04 9180 02BD LDS	R24,Tt
    01B06 9190 02BE LDS	R25,Tt+1
    01B08 3180      CPI	R24,0x10
    01B09 E0E0      LDI	R30,0
    01B0A 079E      CPC	R25,R30
    01B0B F378      BCS	0x1AFB
(1889) 	        M1_H       
    01B0C 9180 0065 LDS	R24,0x65
    01B0E 6088      ORI	R24,0x8
    01B0F 9380 0065 STS	0x65,R24
(1890)          	DELAY80
    01B11 2422      CLR	R2
    01B12 2433      CLR	R3
    01B13 9230 02BE STS	Tt+1,R3
    01B15 9220 02BD STS	Tt,R2
    01B17 C009      RJMP	0x1B21
    01B18 9180 02BD LDS	R24,Tt
    01B1A 9190 02BE LDS	R25,Tt+1
    01B1C 9601      ADIW	R24,1
    01B1D 9390 02BE STS	Tt+1,R25
    01B1F 9380 02BD STS	Tt,R24
    01B21 9180 02BD LDS	R24,Tt
    01B23 9190 02BE LDS	R25,Tt+1
    01B25 3280      CPI	R24,0x20
    01B26 E0E0      LDI	R30,0
    01B27 079E      CPC	R25,R30
    01B28 F378      BCS	0x1B18
(1891) 			M1_L
    01B29 9180 0065 LDS	R24,0x65
    01B2B 7F87      ANDI	R24,0xF7
    01B2C 9380 0065 STS	0x65,R24
(1892) 			DELAY40
    01B2E 2422      CLR	R2
    01B2F 2433      CLR	R3
    01B30 9230 02BE STS	Tt+1,R3
    01B32 9220 02BD STS	Tt,R2
    01B34 C009      RJMP	0x1B3E
    01B35 9180 02BD LDS	R24,Tt
    01B37 9190 02BE LDS	R25,Tt+1
    01B39 9601      ADIW	R24,1
    01B3A 9390 02BE STS	Tt+1,R25
    01B3C 9380 02BD STS	Tt,R24
    01B3E 9180 02BD LDS	R24,Tt
    01B40 9190 02BE LDS	R25,Tt+1
    01B42 3180      CPI	R24,0x10
    01B43 E0E0      LDI	R30,0
    01B44 079E      CPC	R25,R30
    01B45 F378      BCS	0x1B35
(1893) 		} 
    01B46 C0A4      RJMP	0x1BEB
(1894)        else 		//0，一高四低 				                
(1895)         {
(1896) 		 	M2_H 
    01B47 9180 0065 LDS	R24,0x65
    01B49 6180      ORI	R24,0x10
    01B4A 9380 0065 STS	0x65,R24
(1897) 	        DELAY80
    01B4C 2422      CLR	R2
    01B4D 2433      CLR	R3
    01B4E 9230 02BE STS	Tt+1,R3
    01B50 9220 02BD STS	Tt,R2
    01B52 C009      RJMP	0x1B5C
    01B53 9180 02BD LDS	R24,Tt
    01B55 9190 02BE LDS	R25,Tt+1
    01B57 9601      ADIW	R24,1
    01B58 9390 02BE STS	Tt+1,R25
    01B5A 9380 02BD STS	Tt,R24
    01B5C 9180 02BD LDS	R24,Tt
    01B5E 9190 02BE LDS	R25,Tt+1
    01B60 3280      CPI	R24,0x20
    01B61 E0E0      LDI	R30,0
    01B62 079E      CPC	R25,R30
    01B63 F378      BCS	0x1B53
(1898) 	        M2_L
    01B64 9180 0065 LDS	R24,0x65
    01B66 7E8F      ANDI	R24,0xEF
    01B67 9380 0065 STS	0x65,R24
(1899) 			DELAY40
    01B69 2422      CLR	R2
    01B6A 2433      CLR	R3
    01B6B 9230 02BE STS	Tt+1,R3
    01B6D 9220 02BD STS	Tt,R2
    01B6F C009      RJMP	0x1B79
    01B70 9180 02BD LDS	R24,Tt
    01B72 9190 02BE LDS	R25,Tt+1
    01B74 9601      ADIW	R24,1
    01B75 9390 02BE STS	Tt+1,R25
    01B77 9380 02BD STS	Tt,R24
    01B79 9180 02BD LDS	R24,Tt
    01B7B 9190 02BE LDS	R25,Tt+1
    01B7D 3180      CPI	R24,0x10
    01B7E E0E0      LDI	R30,0
    01B7F 079E      CPC	R25,R30
    01B80 F378      BCS	0x1B70
(1900) 	        M1_H       
    01B81 9180 0065 LDS	R24,0x65
    01B83 6088      ORI	R24,0x8
    01B84 9380 0065 STS	0x65,R24
(1901)          	DELAY80
    01B86 2422      CLR	R2
    01B87 2433      CLR	R3
    01B88 9230 02BE STS	Tt+1,R3
    01B8A 9220 02BD STS	Tt,R2
    01B8C C009      RJMP	0x1B96
    01B8D 9180 02BD LDS	R24,Tt
    01B8F 9190 02BE LDS	R25,Tt+1
    01B91 9601      ADIW	R24,1
    01B92 9390 02BE STS	Tt+1,R25
    01B94 9380 02BD STS	Tt,R24
    01B96 9180 02BD LDS	R24,Tt
    01B98 9190 02BE LDS	R25,Tt+1
    01B9A 3280      CPI	R24,0x20
    01B9B E0E0      LDI	R30,0
    01B9C 079E      CPC	R25,R30
    01B9D F378      BCS	0x1B8D
(1902) 			DELAY80
    01B9E 2422      CLR	R2
    01B9F 2433      CLR	R3
    01BA0 9230 02BE STS	Tt+1,R3
    01BA2 9220 02BD STS	Tt,R2
    01BA4 C009      RJMP	0x1BAE
    01BA5 9180 02BD LDS	R24,Tt
    01BA7 9190 02BE LDS	R25,Tt+1
    01BA9 9601      ADIW	R24,1
    01BAA 9390 02BE STS	Tt+1,R25
    01BAC 9380 02BD STS	Tt,R24
    01BAE 9180 02BD LDS	R24,Tt
    01BB0 9190 02BE LDS	R25,Tt+1
    01BB2 3280      CPI	R24,0x20
    01BB3 E0E0      LDI	R30,0
    01BB4 079E      CPC	R25,R30
    01BB5 F378      BCS	0x1BA5
(1903) 			DELAY80
    01BB6 2422      CLR	R2
    01BB7 2433      CLR	R3
    01BB8 9230 02BE STS	Tt+1,R3
    01BBA 9220 02BD STS	Tt,R2
    01BBC C009      RJMP	0x1BC6
    01BBD 9180 02BD LDS	R24,Tt
    01BBF 9190 02BE LDS	R25,Tt+1
    01BC1 9601      ADIW	R24,1
    01BC2 9390 02BE STS	Tt+1,R25
    01BC4 9380 02BD STS	Tt,R24
    01BC6 9180 02BD LDS	R24,Tt
    01BC8 9190 02BE LDS	R25,Tt+1
    01BCA 3280      CPI	R24,0x20
    01BCB E0E0      LDI	R30,0
    01BCC 079E      CPC	R25,R30
    01BCD F378      BCS	0x1BBD
(1904) 			M1_L
    01BCE 9180 0065 LDS	R24,0x65
    01BD0 7F87      ANDI	R24,0xF7
    01BD1 9380 0065 STS	0x65,R24
(1905) 			DELAY40
    01BD3 2422      CLR	R2
    01BD4 2433      CLR	R3
    01BD5 9230 02BE STS	Tt+1,R3
    01BD7 9220 02BD STS	Tt,R2
    01BD9 C009      RJMP	0x1BE3
    01BDA 9180 02BD LDS	R24,Tt
    01BDC 9190 02BE LDS	R25,Tt+1
    01BDE 9601      ADIW	R24,1
    01BDF 9390 02BE STS	Tt+1,R25
    01BE1 9380 02BD STS	Tt,R24
    01BE3 9180 02BD LDS	R24,Tt
    01BE5 9190 02BE LDS	R25,Tt+1
    01BE7 3180      CPI	R24,0x10
    01BE8 E0E0      LDI	R30,0
    01BE9 079E      CPC	R25,R30
    01BEA F378      BCS	0x1BDA
    01BEB 954A      DEC	R20
    01BEC E080      LDI	R24,0
    01BED 1784      CP	R24,R20
    01BEE F408      BCC	0x1BF0
    01BEF CED8      RJMP	0x1AC8
(1906) 		}
(1907)     }	       	   
(1908) 		   //结束位，一高八低，720us
(1909)  	 	    M2_H 
    01BF0 9180 0065 LDS	R24,0x65
    01BF2 6180      ORI	R24,0x10
    01BF3 9380 0065 STS	0x65,R24
(1910) 		    DELAY80
    01BF5 2422      CLR	R2
    01BF6 2433      CLR	R3
    01BF7 9230 02BE STS	Tt+1,R3
    01BF9 9220 02BD STS	Tt,R2
    01BFB C009      RJMP	0x1C05
    01BFC 9180 02BD LDS	R24,Tt
    01BFE 9190 02BE LDS	R25,Tt+1
    01C00 9601      ADIW	R24,1
    01C01 9390 02BE STS	Tt+1,R25
    01C03 9380 02BD STS	Tt,R24
    01C05 9180 02BD LDS	R24,Tt
    01C07 9190 02BE LDS	R25,Tt+1
    01C09 3280      CPI	R24,0x20
    01C0A E0E0      LDI	R30,0
    01C0B 079E      CPC	R25,R30
    01C0C F378      BCS	0x1BFC
(1911) 	        M2_L
    01C0D 9180 0065 LDS	R24,0x65
    01C0F 7E8F      ANDI	R24,0xEF
    01C10 9380 0065 STS	0x65,R24
(1912) 			DELAY40
    01C12 2422      CLR	R2
    01C13 2433      CLR	R3
    01C14 9230 02BE STS	Tt+1,R3
    01C16 9220 02BD STS	Tt,R2
    01C18 C009      RJMP	0x1C22
    01C19 9180 02BD LDS	R24,Tt
    01C1B 9190 02BE LDS	R25,Tt+1
    01C1D 9601      ADIW	R24,1
    01C1E 9390 02BE STS	Tt+1,R25
    01C20 9380 02BD STS	Tt,R24
    01C22 9180 02BD LDS	R24,Tt
    01C24 9190 02BE LDS	R25,Tt+1
    01C26 3180      CPI	R24,0x10
    01C27 E0E0      LDI	R30,0
    01C28 079E      CPC	R25,R30
    01C29 F378      BCS	0x1C19
(1913) 	        M1_H       
    01C2A 9180 0065 LDS	R24,0x65
    01C2C 6088      ORI	R24,0x8
    01C2D 9380 0065 STS	0x65,R24
(1914)          	DELAY80
    01C2F 2422      CLR	R2
    01C30 2433      CLR	R3
    01C31 9230 02BE STS	Tt+1,R3
    01C33 9220 02BD STS	Tt,R2
    01C35 C009      RJMP	0x1C3F
    01C36 9180 02BD LDS	R24,Tt
    01C38 9190 02BE LDS	R25,Tt+1
    01C3A 9601      ADIW	R24,1
    01C3B 9390 02BE STS	Tt+1,R25
    01C3D 9380 02BD STS	Tt,R24
    01C3F 9180 02BD LDS	R24,Tt
    01C41 9190 02BE LDS	R25,Tt+1
    01C43 3280      CPI	R24,0x20
    01C44 E0E0      LDI	R30,0
    01C45 079E      CPC	R25,R30
    01C46 F378      BCS	0x1C36
(1915) 			DELAY80
    01C47 2422      CLR	R2
    01C48 2433      CLR	R3
    01C49 9230 02BE STS	Tt+1,R3
    01C4B 9220 02BD STS	Tt,R2
    01C4D C009      RJMP	0x1C57
    01C4E 9180 02BD LDS	R24,Tt
    01C50 9190 02BE LDS	R25,Tt+1
    01C52 9601      ADIW	R24,1
    01C53 9390 02BE STS	Tt+1,R25
    01C55 9380 02BD STS	Tt,R24
    01C57 9180 02BD LDS	R24,Tt
    01C59 9190 02BE LDS	R25,Tt+1
    01C5B 3280      CPI	R24,0x20
    01C5C E0E0      LDI	R30,0
    01C5D 079E      CPC	R25,R30
    01C5E F378      BCS	0x1C4E
(1916) 			DELAY80
    01C5F 2422      CLR	R2
    01C60 2433      CLR	R3
    01C61 9230 02BE STS	Tt+1,R3
    01C63 9220 02BD STS	Tt,R2
    01C65 C009      RJMP	0x1C6F
    01C66 9180 02BD LDS	R24,Tt
    01C68 9190 02BE LDS	R25,Tt+1
    01C6A 9601      ADIW	R24,1
    01C6B 9390 02BE STS	Tt+1,R25
    01C6D 9380 02BD STS	Tt,R24
    01C6F 9180 02BD LDS	R24,Tt
    01C71 9190 02BE LDS	R25,Tt+1
    01C73 3280      CPI	R24,0x20
    01C74 E0E0      LDI	R30,0
    01C75 079E      CPC	R25,R30
    01C76 F378      BCS	0x1C66
(1917) 			DELAY80
    01C77 2422      CLR	R2
    01C78 2433      CLR	R3
    01C79 9230 02BE STS	Tt+1,R3
    01C7B 9220 02BD STS	Tt,R2
    01C7D C009      RJMP	0x1C87
    01C7E 9180 02BD LDS	R24,Tt
    01C80 9190 02BE LDS	R25,Tt+1
    01C82 9601      ADIW	R24,1
    01C83 9390 02BE STS	Tt+1,R25
    01C85 9380 02BD STS	Tt,R24
    01C87 9180 02BD LDS	R24,Tt
    01C89 9190 02BE LDS	R25,Tt+1
    01C8B 3280      CPI	R24,0x20
    01C8C E0E0      LDI	R30,0
    01C8D 079E      CPC	R25,R30
    01C8E F378      BCS	0x1C7E
(1918) 			DELAY80
    01C8F 2422      CLR	R2
    01C90 2433      CLR	R3
    01C91 9230 02BE STS	Tt+1,R3
    01C93 9220 02BD STS	Tt,R2
    01C95 C009      RJMP	0x1C9F
    01C96 9180 02BD LDS	R24,Tt
    01C98 9190 02BE LDS	R25,Tt+1
    01C9A 9601      ADIW	R24,1
    01C9B 9390 02BE STS	Tt+1,R25
    01C9D 9380 02BD STS	Tt,R24
    01C9F 9180 02BD LDS	R24,Tt
    01CA1 9190 02BE LDS	R25,Tt+1
    01CA3 3280      CPI	R24,0x20
    01CA4 E0E0      LDI	R30,0
    01CA5 079E      CPC	R25,R30
    01CA6 F378      BCS	0x1C96
(1919) 			DELAY80
    01CA7 2422      CLR	R2
    01CA8 2433      CLR	R3
    01CA9 9230 02BE STS	Tt+1,R3
    01CAB 9220 02BD STS	Tt,R2
    01CAD C009      RJMP	0x1CB7
    01CAE 9180 02BD LDS	R24,Tt
    01CB0 9190 02BE LDS	R25,Tt+1
    01CB2 9601      ADIW	R24,1
    01CB3 9390 02BE STS	Tt+1,R25
    01CB5 9380 02BD STS	Tt,R24
    01CB7 9180 02BD LDS	R24,Tt
    01CB9 9190 02BE LDS	R25,Tt+1
    01CBB 3280      CPI	R24,0x20
    01CBC E0E0      LDI	R30,0
    01CBD 079E      CPC	R25,R30
    01CBE F378      BCS	0x1CAE
(1920) 			DELAY80
    01CBF 2422      CLR	R2
    01CC0 2433      CLR	R3
    01CC1 9230 02BE STS	Tt+1,R3
    01CC3 9220 02BD STS	Tt,R2
    01CC5 C009      RJMP	0x1CCF
    01CC6 9180 02BD LDS	R24,Tt
    01CC8 9190 02BE LDS	R25,Tt+1
    01CCA 9601      ADIW	R24,1
    01CCB 9390 02BE STS	Tt+1,R25
    01CCD 9380 02BD STS	Tt,R24
    01CCF 9180 02BD LDS	R24,Tt
    01CD1 9190 02BE LDS	R25,Tt+1
    01CD3 3280      CPI	R24,0x20
    01CD4 E0E0      LDI	R30,0
    01CD5 079E      CPC	R25,R30
    01CD6 F378      BCS	0x1CC6
(1921) 			M1_L
    01CD7 9180 0065 LDS	R24,0x65
    01CD9 7F87      ANDI	R24,0xF7
    01CDA 9380 0065 STS	0x65,R24
(1922) 			DELAY40
    01CDC 2422      CLR	R2
    01CDD 2433      CLR	R3
    01CDE 9230 02BE STS	Tt+1,R3
    01CE0 9220 02BD STS	Tt,R2
    01CE2 C009      RJMP	0x1CEC
    01CE3 9180 02BD LDS	R24,Tt
    01CE5 9190 02BE LDS	R25,Tt+1
    01CE7 9601      ADIW	R24,1
    01CE8 9390 02BE STS	Tt+1,R25
    01CEA 9380 02BD STS	Tt,R24
    01CEC 9180 02BD LDS	R24,Tt
    01CEE 9190 02BE LDS	R25,Tt+1
    01CF0 3180      CPI	R24,0x10
    01CF1 E0E0      LDI	R30,0
    01CF2 079E      CPC	R25,R30
    01CF3 F378      BCS	0x1CE3
(1923) 	
(1924)  	EIFR|=0x08;//清INT3中断标志 
    01CF4 B788      IN	R24,0x38
    01CF5 6088      ORI	R24,0x8
    01CF6 BF88      OUT	0x38,R24
(1925)  	SREG|=0x80; //开总中断
    01CF7 9478      BSET	7
    01CF8 9149      LD	R20,Y+
    01CF9 9508      RET
(1926) }
(1927) 
(1928) 
(1929) 
(1930) void EEPROM_write(unsigned int Address,unsigned char Data)  	//内部EEPROM写
(1931) {//时钟频率为1MHz，典型的EEPROM字节写耗时约8.5ms
(1932)     while(EECR&0x02);                   // 等待上一次写操作结束
_EEPROM_write:
  Data                 --> R18
  Address              --> R16
    01CFA 99E1      SBIC	0x1C,1
    01CFB CFFE      RJMP	_EEPROM_write
(1933)     EEAR=Address;
    01CFC BB1F      OUT	0x1F,R17
    01CFD BB0E      OUT	0x1E,R16
(1934)     EEDR=Data;                        	// 设置地址和数据寄存器
    01CFE BB2D      OUT	0x1D,R18
(1935)     EECR|=0x04;                         //置位EEMWE
    01CFF 9AE2      SBI	0x1C,2
(1936)     EECR|=0x02;                         //置位EEWE 以启动写操作
    01D00 9AE1      SBI	0x1C,1
    01D01 9508      RET
(1937) }
(1938) 
(1939) unsigned char EEPROM_read(unsigned int Address)  				//内部EEPROM读
(1940) {
(1941)     while(EECR&0x02);      				//等待上一次操作结束
_EEPROM_read:
  Address              --> R16
    01D02 99E1      SBIC	0x1C,1
    01D03 CFFE      RJMP	_EEPROM_read
(1942)     EEAR = Address;                     //设置地址寄存器						
    01D04 BB1F      OUT	0x1F,R17
    01D05 BB0E      OUT	0x1E,R16
(1943) 	EECR|=0x01;             			//设置EERE 以启动读操作
    01D06 9AE0      SBI	0x1C,0
(1944)     return EEDR;                   		//自数据寄存器返回数据
    01D07 B30D      IN	R16,0x1D
    01D08 9508      RET
_crc16:
  ii                   --> R20
  ch                   --> R10
  cl                   --> R22
  savelo               --> R14
  savehi               --> Y,+0
  flag                 --> R12
  length               --> R18
  r_data               --> Y,+11
    01D09 940E 1D5C CALL	push_arg4
    01D0B 940E 1D87 CALL	push_xgsetF0FC
    01D0D 9721      SBIW	R28,1
(1945) }    
(1946) 
(1947) void crc16(unsigned char r_data[],unsigned int length)
(1948) {
(1949)         unsigned char cl,ch;
(1950)         unsigned char savehi,savelo;
(1951)         int ii,flag;
(1952)         crc16hi=0xFF;
    01D0E EF8F      LDI	R24,0xFF
    01D0F 9380 0121 STS	crc16hi,R24
(1953)         crc16lo=0xFF;
    01D11 9380 0120 STS	crc16lo,R24
(1954)         cl=0x1;
    01D13 E061      LDI	R22,1
(1955)         ch=0xA0;
    01D14 EA80      LDI	R24,0xA0
    01D15 2EA8      MOV	R10,R24
(1956)         for (ii=0;ii<length-2;ii++)
    01D16 2744      CLR	R20
    01D17 2755      CLR	R21
    01D18 C038      RJMP	0x1D51
(1957)         {
(1958)             crc16lo=(crc16lo ^ r_data[ii]);
    01D19 01FA      MOVW	R30,R20
    01D1A 840B      LDD	R0,Y+11
    01D1B 841C      LDD	R1,Y+12
    01D1C 0DE0      ADD	R30,R0
    01D1D 1DF1      ADC	R31,R1
    01D1E 8020      LD	R2,Z
    01D1F 9030 0120 LDS	R3,crc16lo
    01D21 2432      EOR	R3,R2
    01D22 9230 0120 STS	crc16lo,R3
(1959)                 for (flag=0;flag<8;flag++)
    01D24 24CC      CLR	R12
    01D25 24DD      CLR	R13
(1960)                 {
(1961)                        savehi=crc16hi;
    01D26 9020 0121 LDS	R2,crc16hi
    01D28 8228      ST	Y,R2
(1962)                         savelo=crc16lo;
    01D29 90E0 0120 LDS	R14,crc16lo
(1963)                        crc16hi=(crc16hi>>1);
    01D2B 9426      LSR	R2
    01D2C 9220 0121 STS	crc16hi,R2
(1964)                        crc16lo=(crc16lo>>1);
    01D2E 2C2E      MOV	R2,R14
    01D2F 9426      LSR	R2
    01D30 9220 0120 STS	crc16lo,R2
(1965)                         if ((savehi & 0x01)==0x01)
    01D32 8188      LD	R24,Y
    01D33 7081      ANDI	R24,1
    01D34 3081      CPI	R24,1
    01D35 F421      BNE	0x1D3A
(1966)                                 crc16lo=(crc16lo | 0x80);
    01D36 2D82      MOV	R24,R2
    01D37 6880      ORI	R24,0x80
    01D38 9380 0120 STS	crc16lo,R24
(1967)                         if        ((savelo & 0x01)==0x01)
    01D3A 2D8E      MOV	R24,R14
    01D3B 7081      ANDI	R24,1
    01D3C 3081      CPI	R24,1
    01D3D F451      BNE	0x1D48
(1968)                         {
(1969)                                 crc16hi = (crc16hi ^ ch);
    01D3E 9020 0121 LDS	R2,crc16hi
    01D40 242A      EOR	R2,R10
    01D41 9220 0121 STS	crc16hi,R2
(1970) 								crc16lo = (crc16lo ^ cl);
FILE: <library>
    01D43 9020 0120 LDS	R2,crc16lo
    01D45 2626      EOR	R2,R22
    01D46 9220 0120 STS	crc16lo,R2
    01D48 01C6      MOVW	R24,R12
    01D49 9601      ADIW	R24,1
    01D4A 016C      MOVW	R12,R24
    01D4B 3088      CPI	R24,0x8
    01D4C E0E0      LDI	R30,0
    01D4D 079E      CPC	R25,R30
    01D4E F2BC      BLT	0x1D26
    01D4F 5F4F      SUBI	R20,0xFF
    01D50 4F5F      SBCI	R21,0xFF
    01D51 01C9      MOVW	R24,R18
    01D52 9702      SBIW	R24,2
    01D53 1748      CP	R20,R24
    01D54 0759      CPC	R21,R25
    01D55 F408      BCC	0x1D57
    01D56 CFC2      RJMP	0x1D19
    01D57 9621      ADIW	R28,1
    01D58 940E 1D7C CALL	pop_xgsetF0FC
    01D5A 9624      ADIW	R28,4
    01D5B 9508      RET
push_arg4:
    01D5C 933A      ST	-Y,R19
    01D5D 932A      ST	-Y,R18
push_arg2:
    01D5E 931A      ST	-Y,R17
    01D5F 930A      ST	-Y,R16
    01D60 9508      RET
asr16:
    01D61 2322      TST	R18
    01D62 F021      BEQ	0x1D67
    01D63 9515      ASR	R17
    01D64 9507      ROR	R16
    01D65 952A      DEC	R18
    01D66 CFFA      RJMP	asr16
    01D67 9508      RET
elpm32:
    01D68 93EA      ST	-Y,R30
    01D69 93FA      ST	-Y,R31
    01D6A 920A      ST	-Y,R0
    01D6B 2FE0      MOV	R30,R16
    01D6C 2FF1      MOV	R31,R17
    01D6D 95D8      ELPM
    01D6E 2D00      MOV	R16,R0
    01D6F 9631      ADIW	R30,1
    01D70 95D8      ELPM
    01D71 2D10      MOV	R17,R0
    01D72 9631      ADIW	R30,1
    01D73 95D8      ELPM
    01D74 2D20      MOV	R18,R0
    01D75 9631      ADIW	R30,1
    01D76 95D8      ELPM
    01D77 2D30      MOV	R19,R0
    01D78 9009      LD	R0,Y+
    01D79 91F9      LD	R31,Y+
    01D7A 91E9      LD	R30,Y+
    01D7B 9508      RET
pop_xgsetF0FC:
    01D7C 90A9      LD	R10,Y+
    01D7D 90B9      LD	R11,Y+
    01D7E 90C9      LD	R12,Y+
    01D7F 90D9      LD	R13,Y+
    01D80 90E9      LD	R14,Y+
    01D81 90F9      LD	R15,Y+
    01D82 9149      LD	R20,Y+
    01D83 9159      LD	R21,Y+
    01D84 9169      LD	R22,Y+
    01D85 9179      LD	R23,Y+
    01D86 9508      RET
push_xgsetF0FC:
    01D87 937A      ST	-Y,R23
    01D88 936A      ST	-Y,R22
push_xgset30FC:
    01D89 935A      ST	-Y,R21
    01D8A 934A      ST	-Y,R20
push_xgset00FC:
    01D8B 92FA      ST	-Y,R15
    01D8C 92EA      ST	-Y,R14
push_xgset003C:
    01D8D 92DA      ST	-Y,R13
    01D8E 92CA      ST	-Y,R12
    01D8F 92BA      ST	-Y,R11
    01D90 92AA      ST	-Y,R10
    01D91 9508      RET
push_xgsetF00C:
    01D92 937A      ST	-Y,R23
    01D93 936A      ST	-Y,R22
    01D94 935A      ST	-Y,R21
    01D95 934A      ST	-Y,R20
    01D96 92BA      ST	-Y,R11
    01D97 92AA      ST	-Y,R10
    01D98 9508      RET
pop_xgsetF00C:
    01D99 90A9      LD	R10,Y+
    01D9A 90B9      LD	R11,Y+
    01D9B 9149      LD	R20,Y+
    01D9C 9159      LD	R21,Y+
    01D9D 9169      LD	R22,Y+
    01D9E 9179      LD	R23,Y+
    01D9F 9508      RET
push_xgsetF03C:
    01DA0 937A      ST	-Y,R23
    01DA1 936A      ST	-Y,R22
    01DA2 935A      ST	-Y,R21
    01DA3 934A      ST	-Y,R20
    01DA4 92DA      ST	-Y,R13
    01DA5 92CA      ST	-Y,R12
    01DA6 92BA      ST	-Y,R11
    01DA7 92AA      ST	-Y,R10
    01DA8 9508      RET
pop_xgsetF03C:
    01DA9 90A9      LD	R10,Y+
    01DAA 90B9      LD	R11,Y+
    01DAB 90C9      LD	R12,Y+
    01DAC 90D9      LD	R13,Y+
    01DAD 9149      LD	R20,Y+
    01DAE 9159      LD	R21,Y+
    01DAF 9169      LD	R22,Y+
    01DB0 9179      LD	R23,Y+
    01DB1 9508      RET
neg32:
    01DB2 9500      COM	R16
    01DB3 9510      COM	R17
    01DB4 9520      COM	R18
    01DB5 9530      COM	R19
    01DB6 5F0F      SUBI	R16,0xFF
    01DB7 4F1F      SBCI	R17,0xFF
    01DB8 4F2F      SBCI	R18,0xFF
    01DB9 4F3F      SBCI	R19,0xFF
    01DBA 9508      RET
lsl32:
    01DBB 920F      PUSH	R0
    01DBC 9009      LD	R0,Y+
    01DBD 2000      TST	R0
    01DBE F031      BEQ	0x1DC5
    01DBF 0F00      LSL	R16
    01DC0 1F11      ROL	R17
    01DC1 1F22      ROL	R18
    01DC2 1F33      ROL	R19
    01DC3 940A      DEC	R0
    01DC4 CFF8      RJMP	0x1DBD
    01DC5 900F      POP	R0
    01DC6 9508      RET
lsl8:
    01DC7 2311      TST	R17
    01DC8 F019      BEQ	0x1DCC
    01DC9 0F00      LSL	R16
    01DCA 951A      DEC	R17
    01DCB CFFB      RJMP	lsl8
    01DCC 9508      RET
lsr16:
    01DCD 2322      TST	R18
    01DCE F021      BEQ	0x1DD3
    01DCF 9516      LSR	R17
    01DD0 9507      ROR	R16
    01DD1 952A      DEC	R18
    01DD2 CFFA      RJMP	lsr16
    01DD3 9508      RET
lsr32:
    01DD4 920F      PUSH	R0
    01DD5 9009      LD	R0,Y+
    01DD6 2000      TST	R0
    01DD7 F031      BEQ	0x1DDE
    01DD8 9536      LSR	R19
    01DD9 9527      ROR	R18
    01DDA 9517      ROR	R17
    01DDB 9507      ROR	R16
    01DDC 940A      DEC	R0
    01DDD CFF8      RJMP	0x1DD6
    01DDE 900F      POP	R0
    01DDF 9508      RET
fpint:
    01DE0 924A      ST	-Y,R4
    01DE1 925A      ST	-Y,R5
    01DE2 926A      ST	-Y,R6
    01DE3 938A      ST	-Y,R24
    01DE4 940E 1EE0 CALL	unpacku
    01DE6 F111      BEQ	0x1E09
    01DE7 2055      TST	R5
    01DE8 F0E2      BMI	0x1E05
    01DE9 E18F      LDI	R24,0x1F
    01DEA 1648      CP	R4,R24
    01DEB F4C0      BCC	0x1E04
    01DEC E187      LDI	R24,0x17
    01DED 1648      CP	R4,R24
    01DEE F0D1      BEQ	0x1E09
    01DEF F458      BCC	0x1DFB
    01DF0 9441      NEG	R4
    01DF1 EE89      LDI	R24,0xE9
    01DF2 1A48      SUB	R4,R24
    01DF3 C005      RJMP	0x1DF9
    01DF4 9535      ASR	R19
    01DF5 9527      ROR	R18
    01DF6 9517      ROR	R17
    01DF7 9507      ROR	R16
    01DF8 944A      DEC	R4
    01DF9 F7D1      BNE	0x1DF4
    01DFA C00E      RJMP	0x1E09
    01DFB E187      LDI	R24,0x17
    01DFC 1A48      SUB	R4,R24
    01DFD 0F00      LSL	R16
    01DFE 1F11      ROL	R17
    01DFF 1F22      ROL	R18
    01E00 1F33      ROL	R19
    01E01 944A      DEC	R4
    01E02 F7D1      BNE	0x1DFD
    01E03 C005      RJMP	0x1E09
    01E04 E73F      LDI	R19,0x7F
    01E05 2F23      MOV	R18,R19
    01E06 2F13      MOV	R17,R19
    01E07 2F03      MOV	R16,R19
    01E08 C004      RJMP	0x1E0D
    01E09 2066      TST	R6
    01E0A F011      BEQ	0x1E0D
    01E0B 940E 1DB2 CALL	neg32
    01E0D 9189      LD	R24,Y+
    01E0E 9069      LD	R6,Y+
    01E0F 9059      LD	R5,Y+
    01E10 9049      LD	R4,Y+
    01E11 9508      RET
uint2fp:
    01E12 9468      BSET	6
    01E13 C001      RJMP	0x1E15
int2fp:
    01E14 94E8      BCLR	6
    01E15 2722      CLR	R18
    01E16 2733      CLR	R19
    01E17 F046      BRTS	0x1E20
    01E18 FD17      SBRC	R17,7
    01E19 9520      COM	R18
    01E1A FD17      SBRC	R17,7
    01E1B 9530      COM	R19
    01E1C C003      RJMP	0x1E20
ulong2fp:
    01E1D 9468      BSET	6
    01E1E C001      RJMP	0x1E20
long2fp:
    01E1F 94E8      BCLR	6
    01E20 924A      ST	-Y,R4
    01E21 925A      ST	-Y,R5
    01E22 926A      ST	-Y,R6
    01E23 938A      ST	-Y,R24
    01E24 E187      LDI	R24,0x17
    01E25 2E48      MOV	R4,R24
    01E26 2455      CLR	R5
    01E27 2466      CLR	R6
    01E28 F036      BRTS	0x1E2F
    01E29 2333      TST	R19
    01E2A F422      BPL	0x1E2F
    01E2B 940E 1DB2 CALL	neg32
    01E2D E880      LDI	R24,0x80
    01E2E 2E68      MOV	R6,R24
    01E2F 940E 1EF9 CALL	normalize_and_pack
    01E31 9189      LD	R24,Y+
    01E32 9069      LD	R6,Y+
    01E33 9059      LD	R5,Y+
    01E34 9049      LD	R4,Y+
    01E35 9508      RET
fpdiv1:
    01E36 93FA      ST	-Y,R31
    01E37 93EA      ST	-Y,R30
    01E38 81EA      LDD	R30,Y+2
    01E39 81FB      LDD	R31,Y+3
    01E3A D027      RCALL	0x1E62
    01E3B 91E9      LD	R30,Y+
    01E3C 91F9      LD	R31,Y+
    01E3D 9622      ADIW	R28,2
    01E3E 9508      RET
fpdiv2:
    01E3F 93FA      ST	-Y,R31
    01E40 93EA      ST	-Y,R30
    01E41 2FEC      MOV	R30,R28
    01E42 2FFD      MOV	R31,R29
    01E43 9632      ADIW	R30,2
    01E44 D01D      RCALL	0x1E62
    01E45 91E9      LD	R30,Y+
    01E46 91F9      LD	R31,Y+
    01E47 9624      ADIW	R28,4
    01E48 9508      RET
fpdiv1x:
    01E49 93FA      ST	-Y,R31
    01E4A 93EA      ST	-Y,R30
    01E4B 81EA      LDD	R30,Y+2
    01E4C 81FB      LDD	R31,Y+3
    01E4D D014      RCALL	0x1E62
    01E4E 91E9      LD	R30,Y+
    01E4F 91F9      LD	R31,Y+
    01E50 8339      STD	Y+1,R19
    01E51 8328      ST	Y,R18
    01E52 931A      ST	-Y,R17
    01E53 930A      ST	-Y,R16
    01E54 9508      RET
fpdiv2x:
    01E55 93FA      ST	-Y,R31
    01E56 93EA      ST	-Y,R30
    01E57 2FEC      MOV	R30,R28
    01E58 2FFD      MOV	R31,R29
    01E59 9632      ADIW	R30,2
    01E5A D007      RCALL	0x1E62
    01E5B 91E9      LD	R30,Y+
    01E5C 91F9      LD	R31,Y+
    01E5D 833B      STD	Y+3,R19
    01E5E 832A      STD	Y+2,R18
    01E5F 8319      STD	Y+1,R17
    01E60 8308      ST	Y,R16
    01E61 9508      RET
    01E62 920A      ST	-Y,R0
    01E63 921A      ST	-Y,R1
    01E64 922A      ST	-Y,R2
    01E65 923A      ST	-Y,R3
    01E66 940E 1F3E CALL	saveFPRegs
    01E68 933A      ST	-Y,R19
    01E69 932A      ST	-Y,R18
    01E6A 931A      ST	-Y,R17
    01E6B 930A      ST	-Y,R16
    01E6C 8100      LD	R16,Z
    01E6D 8111      LDD	R17,Z+1
    01E6E 8122      LDD	R18,Z+2
    01E6F 8133      LDD	R19,Z+3
    01E70 940E 1EE0 CALL	unpacku
    01E72 F409      BNE	0x1E74
    01E73 C057      RJMP	0x1ECB
    01E74 2CE6      MOV	R14,R6
    01E75 2CD5      MOV	R13,R5
    01E76 2CC4      MOV	R12,R4
    01E77 2EB3      MOV	R11,R19
    01E78 2EA2      MOV	R10,R18
    01E79 2E91      MOV	R9,R17
    01E7A 2E80      MOV	R8,R16
    01E7B 9109      LD	R16,Y+
    01E7C 9119      LD	R17,Y+
    01E7D 9129      LD	R18,Y+
    01E7E 9139      LD	R19,Y+
    01E7F 940E 1EE0 CALL	unpacku
    01E81 F1A1      BEQ	0x1EB6
    01E82 246E      EOR	R6,R14
    01E83 184C      SUB	R4,R12
    01E84 085D      SBC	R5,R13
    01E85 E880      LDI	R24,0x80
    01E86 1648      CP	R4,R24
    01E87 0653      CPC	R5,R19
    01E88 F00C      BLT	0x1E8A
    01E89 C033      RJMP	0x1EBD
    01E8A E881      LDI	R24,0x81
    01E8B 1648      CP	R4,R24
    01E8C EF8F      LDI	R24,0xFF
    01E8D 0658      CPC	R5,R24
    01E8E F40C      BGE	0x1E90
    01E8F C036      RJMP	0x1EC6
    01E90 E280      LDI	R24,0x20
    01E91 2433      CLR	R3
    01E92 2E23      MOV	R2,R19
    01E93 2E12      MOV	R1,R18
    01E94 2E01      MOV	R0,R17
    01E95 2F30      MOV	R19,R16
    01E96 2722      CLR	R18
    01E97 2711      CLR	R17
    01E98 2700      CLR	R16
    01E99 9426      LSR	R2
    01E9A 9417      ROR	R1
    01E9B 9407      ROR	R0
    01E9C 9537      ROR	R19
    01E9D 9527      ROR	R18
    01E9E 0F00      LSL	R16
    01E9F 1F11      ROL	R17
    01EA0 1F22      ROL	R18
    01EA1 1F33      ROL	R19
    01EA2 1C00      ROL	R0
    01EA3 1C11      ROL	R1
    01EA4 1C22      ROL	R2
    01EA5 1C33      ROL	R3
    01EA6 F028      BCS	0x1EAC
    01EA7 1808      SUB	R0,R8
    01EA8 0819      SBC	R1,R9
    01EA9 082A      SBC	R2,R10
    01EAA 083B      SBC	R3,R11
    01EAB C004      RJMP	0x1EB0
    01EAC 0C08      ADD	R0,R8
    01EAD 1C19      ADC	R1,R9
    01EAE 1C2A      ADC	R2,R10
    01EAF 1C3B      ADC	R3,R11
    01EB0 F00A      BMI	0x1EB2
    01EB1 6001      ORI	R16,1
    01EB2 958A      DEC	R24
    01EB3 F751      BNE	0x1E9E
    01EB4 940E 1EF9 CALL	normalize_and_pack
    01EB6 940E 1F4D CALL	restoreFPRegs
    01EB8 9039      LD	R3,Y+
    01EB9 9029      LD	R2,Y+
    01EBA 9019      LD	R1,Y+
    01EBB 9009      LD	R0,Y+
    01EBC 9508      RET
    01EBD EF0F      LDI	R16,0xFF
    01EBE 2F10      MOV	R17,R16
    01EBF E72F      LDI	R18,0x7F
    01EC0 E73F      LDI	R19,0x7F
    01EC1 2066      TST	R6
    01EC2 F399      BEQ	0x1EB6
    01EC3 940E 1DB2 CALL	neg32
    01EC5 CFF0      RJMP	0x1EB6
    01EC6 2700      CLR	R16
    01EC7 2F10      MOV	R17,R16
    01EC8 2F20      MOV	R18,R16
    01EC9 2F30      MOV	R19,R16
    01ECA CFEB      RJMP	0x1EB6
    01ECB 9109      LD	R16,Y+
    01ECC 9119      LD	R17,Y+
    01ECD 9129      LD	R18,Y+
    01ECE 9139      LD	R19,Y+
    01ECF CFED      RJMP	0x1EBD
unpacks:
    01ED0 D00F      RCALL	unpacku
    01ED1 F029      BEQ	0x1ED7
    01ED2 2066      TST	R6
    01ED3 F011      BEQ	0x1ED6
    01ED4 940E 1DB2 CALL	neg32
    01ED6 9498      BCLR	1
    01ED7 9508      RET
tstR16_R19:
    01ED8 2300      TST	R16
    01ED9 F429      BNE	0x1EDF
    01EDA 2311      TST	R17
    01EDB F419      BNE	0x1EDF
    01EDC 2322      TST	R18
    01EDD F409      BNE	0x1EDF
    01EDE 2333      TST	R19
    01EDF 9508      RET
unpacku:
    01EE0 DFF7      RCALL	tstR16_R19
    01EE1 F099      BEQ	0x1EF5
    01EE2 938A      ST	-Y,R24
    01EE3 2E63      MOV	R6,R19
    01EE4 E880      LDI	R24,0x80
    01EE5 2268      AND	R6,R24
    01EE6 0F22      LSL	R18
    01EE7 1F33      ROL	R19
    01EE8 2E43      MOV	R4,R19
    01EE9 E78F      LDI	R24,0x7F
    01EEA 1A48      SUB	R4,R24
    01EEB 2455      CLR	R5
    01EEC 2788      CLR	R24
    01EED 0A58      SBC	R5,R24
    01EEE 9526      LSR	R18
    01EEF E830      LDI	R19,0x80
    01EF0 2B23      OR	R18,R19
    01EF1 2733      CLR	R19
    01EF2 9189      LD	R24,Y+
    01EF3 9498      BCLR	1
    01EF4 9508      RET
    01EF5 2444      CLR	R4
    01EF6 2455      CLR	R5
    01EF7 2466      CLR	R6
    01EF8 9508      RET
normalize_and_pack:
    01EF9 DFDE      RCALL	tstR16_R19
    01EFA F409      BNE	0x1EFC
    01EFB 9508      RET
    01EFC 93AA      ST	-Y,R26
    01EFD 93BA      ST	-Y,R27
    01EFE 01D2      MOVW	R26,R4
    01EFF 939A      ST	-Y,R25
    01F00 938A      ST	-Y,R24
    01F01 E78E      LDI	R24,0x7E
    01F02 E090      LDI	R25,0
    01F03 2333      TST	R19
    01F04 F049      BEQ	0x1F0E
    01F05 9536      LSR	R19
    01F06 9527      ROR	R18
    01F07 9517      ROR	R17
    01F08 9507      ROR	R16
    01F09 17A8      CP	R26,R24
    01F0A 07B9      CPC	R27,R25
    01F0B F4CC      BGE	0x1F25
    01F0C 9611      ADIW	R26,1
    01F0D CFF5      RJMP	0x1F03
    01F0E 9580      COM	R24
    01F0F 9590      COM	R25
    01F10 9601      ADIW	R24,1
    01F11 2322      TST	R18
    01F12 F0BA      BMI	0x1F2A
    01F13 0F00      LSL	R16
    01F14 1F11      ROL	R17
    01F15 1F22      ROL	R18
    01F16 17A8      CP	R26,R24
    01F17 07B9      CPC	R27,R25
    01F18 F014      BLT	0x1F1B
    01F19 9711      SBIW	R26,1
    01F1A CFF6      RJMP	0x1F11
    01F1B 2700      CLR	R16
    01F1C 2711      CLR	R17
    01F1D 2722      CLR	R18
    01F1E 2733      CLR	R19
    01F1F 9189      LD	R24,Y+
    01F20 9199      LD	R25,Y+
    01F21 012D      MOVW	R4,R26
    01F22 91B9      LD	R27,Y+
    01F23 91A9      LD	R26,Y+
    01F24 9508      RET
    01F25 2733      CLR	R19
    01F26 EF0F      LDI	R16,0xFF
    01F27 2F10      MOV	R17,R16
    01F28 E72F      LDI	R18,0x7F
    01F29 2F32      MOV	R19,R18
    01F2A 9189      LD	R24,Y+
    01F2B 9199      LD	R25,Y+
    01F2C 012D      MOVW	R4,R26
    01F2D C002      RJMP	0x1F30
pack:
    01F2E 93AA      ST	-Y,R26
    01F2F 93BA      ST	-Y,R27
    01F30 DFA7      RCALL	tstR16_R19
    01F31 F049      BEQ	0x1F3B
    01F32 01D2      MOVW	R26,R4
    01F33 58A1      SUBI	R26,0x81
    01F34 4FBF      SBCI	R27,0xFF
    01F35 012D      MOVW	R4,R26
    01F36 2D34      MOV	R19,R4
    01F37 0F22      LSL	R18
    01F38 9536      LSR	R19
    01F39 9527      ROR	R18
    01F3A 2936      OR	R19,R6
    01F3B 91B9      LD	R27,Y+
    01F3C 91A9      LD	R26,Y+
    01F3D 9508      RET
saveFPRegs:
    01F3E 924A      ST	-Y,R4
    01F3F 925A      ST	-Y,R5
    01F40 926A      ST	-Y,R6
    01F41 927A      ST	-Y,R7
    01F42 928A      ST	-Y,R8
    01F43 929A      ST	-Y,R9
    01F44 92AA      ST	-Y,R10
    01F45 92BA      ST	-Y,R11
    01F46 92CA      ST	-Y,R12
    01F47 92DA      ST	-Y,R13
    01F48 92EA      ST	-Y,R14
    01F49 92FA      ST	-Y,R15
    01F4A 938A      ST	-Y,R24
    01F4B 939A      ST	-Y,R25
    01F4C 9508      RET
restoreFPRegs:
    01F4D 9199      LD	R25,Y+
    01F4E 9189      LD	R24,Y+
    01F4F 90F9      LD	R15,Y+
    01F50 90E9      LD	R14,Y+
    01F51 90D9      LD	R13,Y+
    01F52 90C9      LD	R12,Y+
    01F53 90B9      LD	R11,Y+
    01F54 90A9      LD	R10,Y+
    01F55 9099      LD	R9,Y+
    01F56 9089      LD	R8,Y+
    01F57 9079      LD	R7,Y+
    01F58 9069      LD	R6,Y+
    01F59 9059      LD	R5,Y+
    01F5A 9049      LD	R4,Y+
    01F5B 9508      RET
fpmule:
    01F5C 940E 1F3E CALL	saveFPRegs
    01F5E 93AA      ST	-Y,R26
    01F5F 93BA      ST	-Y,R27
    01F60 940E 1EE0 CALL	unpacku
    01F62 F1E1      BEQ	0x1F9F
    01F63 2CE6      MOV	R14,R6
    01F64 2CD5      MOV	R13,R5
    01F65 2CC4      MOV	R12,R4
    01F66 2EB3      MOV	R11,R19
    01F67 2EA2      MOV	R10,R18
    01F68 2E91      MOV	R9,R17
    01F69 2E80      MOV	R8,R16
    01F6A 8100      LD	R16,Z
    01F6B 8111      LDD	R17,Z+1
    01F6C 8122      LDD	R18,Z+2
    01F6D 8133      LDD	R19,Z+3
    01F6E 940E 1EE0 CALL	unpacku
    01F70 F171      BEQ	0x1F9F
    01F71 246E      EOR	R6,R14
    01F72 0C4C      ADD	R4,R12
    01F73 1C5D      ADC	R5,R13
    01F74 E880      LDI	R24,0x80
    01F75 1648      CP	R4,R24
    01F76 0653      CPC	R5,R19
    01F77 F564      BGE	0x1FA4
    01F78 E881      LDI	R24,0x81
    01F79 1648      CP	R4,R24
    01F7A EF8F      LDI	R24,0xFF
    01F7B 0658      CPC	R5,R24
    01F7C F16C      BLT	0x1FAA
    01F7D 9EA2      MUL	R10,R18
    01F7E 2DB1      MOV	R27,R1
    01F7F 2DA0      MOV	R26,R0
    01F80 9E91      MUL	R9,R17
    01F81 2D91      MOV	R25,R1
    01F82 2D80      MOV	R24,R0
    01F83 9EA0      MUL	R10,R16
    01F84 0D80      ADD	R24,R0
    01F85 1D91      ADC	R25,R1
    01F86 1FA3      ADC	R26,R19
    01F87 1FB3      ADC	R27,R19
    01F88 9E82      MUL	R8,R18
    01F89 0D80      ADD	R24,R0
    01F8A 1D91      ADC	R25,R1
    01F8B 1FA3      ADC	R26,R19
    01F8C 1FB3      ADC	R27,R19
    01F8D 9E92      MUL	R9,R18
    01F8E 0D90      ADD	R25,R0
    01F8F 1DA1      ADC	R26,R1
    01F90 1FB3      ADC	R27,R19
    01F91 9EA1      MUL	R10,R17
    01F92 0D90      ADD	R25,R0
    01F93 1DA1      ADC	R26,R1
    01F94 1FB3      ADC	R27,R19
    01F95 2F2B      MOV	R18,R27
    01F96 2F1A      MOV	R17,R26
    01F97 2F09      MOV	R16,R25
    01F98 0F88      LSL	R24
    01F99 1F00      ROL	R16
    01F9A 1F11      ROL	R17
    01F9B 1F22      ROL	R18
    01F9C 1F33      ROL	R19
    01F9D 940E 1EF9 CALL	normalize_and_pack
    01F9F 91B9      LD	R27,Y+
    01FA0 91A9      LD	R26,Y+
    01FA1 940E 1F4D CALL	restoreFPRegs
    01FA3 9508      RET
    01FA4 EF0F      LDI	R16,0xFF
    01FA5 2F10      MOV	R17,R16
    01FA6 E72F      LDI	R18,0x7F
    01FA7 E78F      LDI	R24,0x7F
    01FA8 2E48      MOV	R4,R24
    01FA9 CFF5      RJMP	0x1F9F
    01FAA 2700      CLR	R16
    01FAB 2F10      MOV	R17,R16
    01FAC 2F20      MOV	R18,R16
    01FAD 2F30      MOV	R19,R16
    01FAE CFF0      RJMP	0x1F9F
fpmule1:
    01FAF 93FA      ST	-Y,R31
    01FB0 93EA      ST	-Y,R30
    01FB1 81EA      LDD	R30,Y+2
    01FB2 81FB      LDD	R31,Y+3
    01FB3 940E 1F5C CALL	fpmule
    01FB5 91E9      LD	R30,Y+
    01FB6 91F9      LD	R31,Y+
    01FB7 9622      ADIW	R28,2
    01FB8 9508      RET

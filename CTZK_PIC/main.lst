Interrupt Vectors
    00000 940C 0052 JMP	__start|__text_start
    00008 940C 1C20 JMP	_int3_isr
    00020 940C 009C JMP	_timer0_ovf_isr
    00024 940C 1BFF JMP	_usart0_isr
    0002E 940C 1BB9 JMP	_E_comp
    0003A 940C 00C1 JMP	_timer3_ovf_isr

Program Code (text area)
__start|__text_start:
    00052 EFCF      LDI	R28,0xFF
    00053 E1D0      LDI	R29,0x10
    00054 BFCD      OUT	0x3D,R28
    00055 BFDE      OUT	0x3E,R29
    00056 58C0      SUBI	R28,0x80
    00057 40D0      SBCI	R29,0
    00058 EA0A      LDI	R16,0xAA
    00059 8308      ST	Y,R16
    0005A 2400      CLR	R0
    0005B E0E0      LDI	R30,0
    0005C E0F1      LDI	R31,1
    0005D E013      LDI	R17,3
    0005E 33EF      CPI	R30,0x3F
    0005F 07F1      CPC	R31,R17
    00060 F011      BEQ	0x0063
    00061 9201      ST	Z+,R0
    00062 CFFB      RJMP	0x005E
    00063 8300      ST	Z,R16
    00064 EAE4      LDI	R30,0xA4
    00065 E0F0      LDI	R31,0
    00066 E0A0      LDI	R26,0
    00067 E0B1      LDI	R27,1
    00068 E010      LDI	R17,0
    00069 E000      LDI	R16,0
    0006A BF0B      OUT	0x3B,R16
    0006B 3AE4      CPI	R30,0xA4
    0006C 07F1      CPC	R31,R17
    0006D F021      BEQ	0x0072
    0006E 95C8      LPM
    0006F 9631      ADIW	R30,1
    00070 920D      ST	X+,R0
    00071 CFF9      RJMP	0x006B
    00072 940E 061F CALL	_main
_exit:
    00074 CFFF      RJMP	_exit
FILE: D:\chen\Core\FirmWare_CT\CTZK_PIC\main.c
(0001)  /**************************************************
(0002) CTZK
(0003) //20161110 增加了全部采样的CRC16校验
(0004) //20161113 改进了流量数据中时间和相位由无符号短整型转为浮点数时的转换方法，以防上位机软件出现相位超大值
(0005) //20161224 将电机断流判断值由26mA改为13mA，因为目前调节电机工作时空载电流值仅为23~28mA，升级版本为V4.0
(0006) //20161229 修改收张电机的本电机同向和反向判断，修改调节电机的电机方向控制（与原来相反）
(0007) //20170308 流量采样增加校验帧，升级版本为V4.2
(0008) //20170607 电机断路电流由原来的13mA改为26mA 升级版本为V4.3
(0009) //20170608 改动电机过流档位并把最大档位提升到250mA，升级版本为V4.4
(0010) //20170609 加入调节电机微调功能，升级版本为V4.5
(0011) //20170613 增加电机断路电流上位机可设定(共6档)，增加调节电机微调时间由电机命令中自带参数，改上传电流由数字量为工程量（单位mA），堵转电流上传改为档位，版本升为V4.6
(0012) //20170614 上传的电缆电压也改为工程量，全部采样增加电缆电压
(0013) //20170703 全采时总线电压稍作处理，有电机运行时上传真实电压+5V，没有电机运行时上传0
(0014) //20170704 总线电压采样时马笼头电压+2，电机电压+2，电机断路档位以10mA为台阶上跳
(0015) //20170706 微调每档均多加1秒，方便上位机查看电机电流 V4.9
(0016) **************************************************/
(0017) #include <iom128v.h>								   	
(0018) #include <macros.h>
(0019) #include <stdio.h>
(0020) 
(0021) #define  BB     0x49        //固件版本号
(0022) 
(0023) #define M1_L    PORTD&=0xfb;
(0024) #define M1_H    PORTD|=0x04;
(0025) #define M2_L    PORTD&=0xfd;
(0026) #define M2_H    PORTD|=0x02;
(0027) 
(0028)  
(0029) //收放电机管脚定义和控制项
(0030) #define DIR1_PIN    ((PINA&0x04)>>2)
(0031) #define PWM1_PIN    ((PINA&0x02)>>1)
(0032) #define BREAKE1_PIN (PINA&0x01)
(0033) 
(0034) #define DIR1_H      {DDRA|=0x04;PORTA|=0x04;}
(0035) #define PWM1_H      {DDRA|=0x02;PORTA|=0x02;}
(0036) #define BREAKE1_H   {DDRA|=0x01;PORTA|=0x01;}
(0037) 
(0038) #define DIR1_L      {DDRA|=0x04;PORTA&=0xfb;}
(0039) #define PWM1_L      {DDRA|=0x02;PORTA&=0xFD;}
(0040) #define BREAKE1_L   {DDRA|=0x01;PORTA&=0xFE;}
(0041) 
(0042) //调节电机管脚定义和控制项
(0043) #define PWM2_PIN    ((PINF&0x04)>>2)
(0044) #define BREAKE2_PIN ((PINF&0x02)>>1)
(0045) #define DIR2_PIN    (PINF&0x01)
(0046) 
(0047) #define PWM2_H      {DDRF|=0x04;PORTF|=0x04;}
(0048) #define BREAKE2_H   {DDRF|=0x02;PORTF|=0x02;}
(0049) #define DIR2_H      {DDRF|=0x01;PORTF|=0x01;}
(0050) 
(0051) #define PWM2_L      {DDRF|=0x04;PORTF&=0xfb;}
(0052) #define BREAKE2_L   {DDRF|=0x02;PORTF&=0xFD;}
(0053) #define DIR2_L      {DDRF|=0x01;PORTF&=0xFE;}
(0054) 
(0055) //电机电源
(0056) #define VM_H        {DDRB|=0x80;PORTB|=0x80;}
(0057) 
(0058) //同时关二个电机，先把PWM置低，后把DIR和BREAK置低，最后关电机电源
(0059) //最好不关刹车，这样电机堵转停止后不会有1.6秒的反向电压，电机不会喘气
(0060) #define MOTORSTOP   {DDRA|=0x07;PORTA&=0xFD;PORTA&=0xF8;   DDRF|=0x07;PORTF&=0xFB;PORTF&=0xF8;     DDRB|=0x80;PORTB&=0x7f;}
(0061) 
(0062) #define DELAY10 for(Tt=0;Tt<4;Tt++);
(0063) #define DELAY20 for(Tt=0;Tt<4;Tt++);
(0064) #define DELAY40 for(Tt=0;Tt<16;Tt++); 
(0065) #define DELAY50 for(Tt=0;Tt<21;Tt++); 
(0066) #define DELAY80 for(Tt=0;Tt<32;Tt++); 
(0067) #define DELAY89 for(Tt=0;Tt<36;Tt++); 
(0068) #define DELAY100 for(Tt=0;Tt<42;Tt++); 
(0069) #define DELAY170 for(Tt=0;Tt<72;Tt++);
(0070) #define DELAY268 for(Tt=0;Tt<113;Tt++);
(0071) #define DELAY397 for(Tt=0;Tt<165;Tt++);
(0072) #define DELAY400 for(Tt=0;Tt<168;Tt++);
(0073) 
(0074) union FIB
(0075) {
(0076)  float f;
(0077)  unsigned int i[2];
(0078)  unsigned char b[4];
(0079) }myFIB;
(0080) 
(0081) union MotorStatus
(0082) {
(0083)  unsigned int i;
(0084)  struct 
(0085)  { 
(0086)    unsigned int PWM:1;//bit0,电机运行状态，0：停止，1：运行
(0087)    unsigned int DIR:1;//bit1,电机运行方向，0：反转,收臂-调大(DIR_L)，1：正转,张臂-调小(DIR_H)
(0088)    unsigned int BrokenStop:1;//bit2, 断路停
(0089)    unsigned int CommandStop:1;//bit3,手动停
(0090)    unsigned int OverCurrent:1;//bit4,过流停
(0091)    unsigned int UnderVoltage:1;//bit5,欠压停
(0092)    unsigned int StartResult:2;//bit6-bit7,电机最近一次启动结果(0：正常上电启动，1：本电机同向运行，2：本电机反向运行，3：另一个电机正在运行)
(0093)    
(0094)    unsigned int ThisCurrent:8;//bit8-bit15 ,  电机当前或停止前最近一次电流
(0095)  }s;
(0096) }Motor1Status,Motor2Status;//电机状态
(0097) 
(0098) unsigned char Motor1Gear,Motor2Gear;// 电机过流档位
(0099) unsigned char Motor1Thr,Motor2Thr;//电机堵转过流阈值
(0100) unsigned char MotorIdelGear;//电机断路档位
(0101) unsigned char MotorIdelCur;// 电机断路电流
(0102)  
(0103) 
(0104) unsigned char T_Flag;
(0105) 
(0106) unsigned int Timer0Counter;//定时器0超过4ms时的计数
(0107) 
(0108) unsigned char Uart0RxData[74];//串口接收数据缓存
(0109) unsigned char Uart0RxCounter;
(0110) 
(0111) unsigned char Rx[18];//解码接收9位共18个半位
(0112) int  T_dat,R_dat;//曼码发送数据
(0113) unsigned char T_com;//曼码发送命令
(0114) 
(0115) unsigned char TimeOutFlag;//发送超时标志
(0116) 
(0117) unsigned char T_dat_buf[22];//曼码发送缓冲 
(0118) 
(0119) unsigned int DataFlag;//下发标定系数开始标志
(0120) unsigned char Int_count;
(0121) unsigned char IntFlag;//接收帧状态
(0122) 
(0123) unsigned int Tt,k;
(0124) unsigned int T2cn;
(0125) unsigned char coeffdata[320];
(0126) 
(0127) unsigned char Uart0TxData[74];//串口发送数据缓存
(0128) 
(0129) unsigned char EEPAdd;//接收系数存放地址索引
(0130) unsigned int coeff_len,coeff_count;//接收系数长度，接收系数计数
(0131) unsigned int CompCounter;
(0132) 
(0133) unsigned int bf;
(0134) 
(0135) unsigned long lfib;//短整型转浮点数时用的临时变量
(0136) unsigned char crc16hi,crc16lo,crc16array[18];
(0137) 
(0138) void InitialIO(void);
(0139) void init_USART0(void);
(0140) void SendUart0_2(unsigned char len,unsigned int s);
(0141) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn);
(0142) void Pwm_startup(unsigned char motor);
(0143) void Start(void);
(0144) void SendManchester(void); 
(0145) unsigned char SampleADC(unsigned char ch);
(0146) void EEPROM_write(unsigned int Address,unsigned char Data);
(0147) unsigned char EEPROM_read(unsigned int Address);
(0148) void CheckMotor(unsigned int t);
(0149) void crc16(unsigned char r_data[],unsigned int length);
(0150) void Gear2Thr(void);
(0151) 
(0152) void InitialIO(void)
(0153) {//1输出，0输入
(0154)  PORTA=0x00;
_InitialIO:
    00075 2422      CLR	R2
    00076 BA2B      OUT	0x1B,R2
(0155)  DDRA=0x07; //PA0=BREAKE1 PA1=PWM1 PA2=DIR1
    00077 E087      LDI	R24,7
    00078 BB8A      OUT	0x1A,R24
(0156) 
(0157)  PORTB=0x00; 
    00079 BA28      OUT	0x18,R2
(0158)  DDRB=0x80; //PB7=VM_CTRL
    0007A E880      LDI	R24,0x80
    0007B BB87      OUT	0x17,R24
(0159)  
(0160)  PORTC=0x00;
    0007C BA25      OUT	0x15,R2
(0161)  DDRC=0x00; 
    0007D BA24      OUT	0x14,R2
(0162)  
(0163)  PORTD=0x00; 
    0007E BA22      OUT	0x12,R2
(0164)  DDRD=0x06;//PD1=M2 PD2=M1
    0007F E086      LDI	R24,6
    00080 BB81      OUT	0x11,R24
(0165)  
(0166)  PORTE=0x00; 
    00081 B823      OUT	0x03,R2
(0167)  DDRE=0x00;
    00082 B822      OUT	0x02,R2
(0168)  
(0169)  PORTF=0x00; 
    00083 9220 0062 STS	0x62,R2
(0170)  DDRF=0x07;//PF0=DIR2 PF1=BREAKE2 PF2=PWM2
    00085 E087      LDI	R24,7
    00086 9380 0061 STS	0x61,R24
(0171)  
(0172)  PORTG=0x00; 
    00088 9220 0065 STS	0x65,R2
(0173)  DDRG=0x00; 
    0008A 9220 0064 STS	0x64,R2
    0008C 9508      RET
(0174) }
(0175) 
(0176) //UART0 initialize
(0177) // desired baud rate: 57600
(0178) // actual: baud rate:58824 (2.1%)
(0179) // char size: 8 bit
(0180) // parity: Disabled
(0181) void uart0_init(void)
(0182) {
(0183)  UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    0008D 2422      CLR	R2
    0008E B82A      OUT	0x0A,R2
(0184)  UCSR0A = 0x02;
    0008F E082      LDI	R24,2
    00090 B98B      OUT	0x0B,R24
(0185)  UCSR0C = 0x06;
    00091 E086      LDI	R24,6
    00092 9380 0095 STS	0x95,R24
(0186)  UBRR0L = 0x10; //set baud rate lo 57600
    00094 E180      LDI	R24,0x10
    00095 B989      OUT	0x09,R24
(0187)  UBRR0H = 0x00; //set baud rate hi
    00096 9220 0090 STS	0x90,R2
(0188)  UCSR0B = 0x98;
    00098 E988      LDI	R24,0x98
    00099 B98A      OUT	0x0A,R24
    0009A 9508      RET
(0189) }
(0190) 
(0191) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0192) void uart0_rx_isr(void)
(0193) {
_uart0_rx_isr:
    0009B 9518      RETI
_timer0_ovf_isr:
    0009C 922A      ST	-Y,R2
    0009D 938A      ST	-Y,R24
    0009E 939A      ST	-Y,R25
    0009F B62F      IN	R2,0x3F
    000A0 922A      ST	-Y,R2
(0194)  //uart has received a character in UDR
(0195) }
(0196) 
(0197) #pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
(0198) void timer0_ovf_isr(void)
(0199) {
(0200) Timer0Counter--;
    000A1 9180 032E LDS	R24,Timer0Counter
    000A3 9190 032F LDS	R25,Timer0Counter+1
    000A5 9701      SBIW	R24,1
    000A6 9390 032F STS	Timer0Counter+1,R25
    000A8 9380 032E STS	Timer0Counter,R24
(0201) if(Timer0Counter==0)
    000AA 3080      CPI	R24,0
    000AB 0789      CPC	R24,R25
    000AC F461      BNE	0x00B9
(0202) {
(0203)  TCNT0=0;
    000AD 2422      CLR	R2
    000AE BE22      OUT	0x32,R2
(0204)  TimeOutFlag=1;
    000AF E081      LDI	R24,1
    000B0 9380 02CB STS	TimeOutFlag,R24
(0205)  TIMSK&=0xFE;//关定时器0中断
    000B2 B787      IN	R24,0x37
    000B3 7F8E      ANDI	R24,0xFE
    000B4 BF87      OUT	0x37,R24
(0206)  UCSR0B&=0x7f;//关串口接收中断
    000B5 B18A      IN	R24,0x0A
    000B6 778F      ANDI	R24,0x7F
    000B7 B98A      OUT	0x0A,R24
(0207)  }
    000B8 C002      RJMP	0x00BB
(0208)  else
(0209)  {
(0210)  TCNT0=0x06;//定时8ms
    000B9 E086      LDI	R24,6
    000BA BF82      OUT	0x32,R24
(0211)  }
    000BB 9029      LD	R2,Y+
    000BC BE2F      OUT	0x3F,R2
    000BD 9199      LD	R25,Y+
    000BE 9189      LD	R24,Y+
    000BF 9029      LD	R2,Y+
    000C0 9518      RETI
_timer3_ovf_isr:
    000C1 921A      ST	-Y,R1
    000C2 922A      ST	-Y,R2
    000C3 938A      ST	-Y,R24
    000C4 939A      ST	-Y,R25
    000C5 B61F      IN	R1,0x3F
    000C6 921A      ST	-Y,R1
(0212) }
(0213) 
(0214) #pragma interrupt_handler timer3_ovf_isr:iv_TIM3_OVF
(0215) void timer3_ovf_isr(void)
(0216) {
(0217)  	 ETIMSK = 0x00; //Timer3中断关闭
    000C7 2422      CLR	R2
    000C8 9220 007D STS	0x7D,R2
(0218) 	 TCCR3B = 0x00; //stop
    000CA 9220 008A STS	0x8A,R2
(0219) 		
(0220)   		   if(PWM1_PIN==1)//收放电机正在运行
    000CC B389      IN	R24,0x19
    000CD 7082      ANDI	R24,2
    000CE 9586      LSR	R24
    000CF 3081      CPI	R24,1
    000D0 F449      BNE	0x00DA
(0221)    		   {
(0222)  		   Motor1Status.s.CommandStop=1;
    000D1 9180 0339 LDS	R24,Motor1Status
    000D3 9190 033A LDS	R25,Motor1Status+1
    000D5 6088      ORI	R24,0x8
    000D6 9390 033A STS	Motor1Status+1,R25
    000D8 9380 0339 STS	Motor1Status,R24
(0223)    		   }
(0224)  		   if(PWM2_PIN==1)//调节电机正在运行
    000DA B180      IN	R24,0x00
    000DB 7084      ANDI	R24,4
    000DC 9586      LSR	R24
    000DD 9586      LSR	R24
    000DE 3081      CPI	R24,1
    000DF F449      BNE	0x00E9
(0225)    		   { 
(0226)  		   Motor2Status.s.CommandStop=1;
    000E0 9180 0337 LDS	R24,Motor2Status
    000E2 9190 0338 LDS	R25,Motor2Status+1
    000E4 6088      ORI	R24,0x8
    000E5 9390 0338 STS	Motor2Status+1,R25
    000E7 9380 0337 STS	Motor2Status,R24
(0227)    		   }
(0228)  	 	   MOTORSTOP  //关电机
    000E9 B38A      IN	R24,0x1A
    000EA 6087      ORI	R24,7
    000EB BB8A      OUT	0x1A,R24
    000EC B38B      IN	R24,0x1B
    000ED 7F8D      ANDI	R24,0xFD
    000EE BB8B      OUT	0x1B,R24
    000EF B38B      IN	R24,0x1B
    000F0 7F88      ANDI	R24,0xF8
    000F1 BB8B      OUT	0x1B,R24
    000F2 9180 0061 LDS	R24,0x61
    000F4 6087      ORI	R24,7
    000F5 9380 0061 STS	0x61,R24
    000F7 9180 0062 LDS	R24,0x62
    000F9 7F8B      ANDI	R24,0xFB
    000FA 9380 0062 STS	0x62,R24
    000FC 9180 0062 LDS	R24,0x62
    000FE 7F88      ANDI	R24,0xF8
    000FF 9380 0062 STS	0x62,R24
    00101 9ABF      SBI	0x17,7
    00102 B388      IN	R24,0x18
    00103 778F      ANDI	R24,0x7F
    00104 BB88      OUT	0x18,R24
    00105 9019      LD	R1,Y+
    00106 BE1F      OUT	0x3F,R1
    00107 9199      LD	R25,Y+
    00108 9189      LD	R24,Y+
    00109 9029      LD	R2,Y+
    0010A 9019      LD	R1,Y+
    0010B 9518      RETI
_SendUart0_2:
  t                    --> R20
  i                    --> R22
  s                    --> R10
  len                  --> R12
    0010C 940E 231C CALL	push_xgsetF03C
    0010E 0159      MOVW	R10,R18
    0010F 2EC0      MOV	R12,R16
(0229) }
(0230) 
(0231) void SendUart0_2(unsigned char len,unsigned int s)   //串口发送数据
(0232) {//要求流量板在s个8ms内通过串口返回数据
(0233) unsigned char t,i; 	
(0234) 
(0235) for(t=0;t<74;t++)
    00110 2744      CLR	R20
    00111 C009      RJMP	0x011B
(0236)   Uart0RxData[t]=0xff;
    00112 EE84      LDI	R24,0xE4
    00113 E092      LDI	R25,2
    00114 2FE4      MOV	R30,R20
    00115 27FF      CLR	R31
    00116 0FE8      ADD	R30,R24
    00117 1FF9      ADC	R31,R25
    00118 EF8F      LDI	R24,0xFF
    00119 8380      ST	Z,R24
    0011A 9543      INC	R20
    0011B 344A      CPI	R20,0x4A
    0011C F3A8      BCS	0x0112
(0237)   
(0238) Uart0RxCounter=0; //清串口接受计数  
    0011D 2422      CLR	R2
    0011E 9220 02E3 STS	Uart0RxCounter,R2
(0239) 
(0240) for(t=0;t<len;t++)
    00120 2744      CLR	R20
    00121 C010      RJMP	0x0132
(0241) {
(0242) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    00122 9B5D      SBIS	0x0B,5
    00123 CFFE      RJMP	0x0122
(0243) for(i=0;i<200;i++);
    00124 2766      CLR	R22
    00125 C001      RJMP	0x0127
    00126 9563      INC	R22
    00127 3C68      CPI	R22,0xC8
    00128 F3E8      BCS	0x0126
(0244) UDR0=Uart0TxData[t];  
    00129 E281      LDI	R24,0x21
    0012A E091      LDI	R25,1
    0012B 2FE4      MOV	R30,R20
    0012C 27FF      CLR	R31
    0012D 0FE8      ADD	R30,R24
    0012E 1FF9      ADC	R31,R25
    0012F 8020      LD	R2,Z
    00130 B82C      OUT	0x0C,R2
    00131 9543      INC	R20
    00132 154C      CP	R20,R12
    00133 F370      BCS	0x0122
(0245) }
(0246)                   
(0247) if(s>0)
    00134 20AA      TST	R10
    00135 F411      BNE	0x0138
    00136 20BB      TST	R11
    00137 F111      BEQ	0x015A
(0248) {
(0249)  //超时设定
(0250) TimeOutFlag=0; //超时标志置0
    00138 2422      CLR	R2
    00139 9220 02CB STS	TimeOutFlag,R2
(0251) Timer0Counter=s; //8ms定时循环次数
    0013B 92B0 032F STS	Timer0Counter+1,R11
    0013D 92A0 032E STS	Timer0Counter,R10
(0252) TCNT0=0x06;//定时8ms
    0013F E086      LDI	R24,6
    00140 BF82      OUT	0x32,R24
(0253) TCCR0|=0x06;//256分频
    00141 B783      IN	R24,0x33
    00142 6086      ORI	R24,6
    00143 BF83      OUT	0x33,R24
(0254) TIFR|=0x01; //清定时器0中断标志
    00144 B786      IN	R24,0x36
    00145 6081      ORI	R24,1
    00146 BF86      OUT	0x36,R24
(0255) TIMSK|=0x01;//使能定时器0中断
    00147 B787      IN	R24,0x37
    00148 6081      ORI	R24,1
    00149 BF87      OUT	0x37,R24
(0256) t=UDR0;//开串口接收中断前读空缓存
    0014A B14C      IN	R20,0x0C
(0257) UCSR0B|=0x80;//开串口接收中断
    0014B 9A57      SBI	0x0A,7
    0014C C003      RJMP	0x0150
(0258) while(TimeOutFlag==0)
(0259) {
(0260) CheckMotor(0);
    0014D 2700      CLR	R16
    0014E 2711      CLR	R17
    0014F D1FA      RCALL	_CheckMotor
    00150 9020 02CB LDS	R2,TimeOutFlag
    00152 2022      TST	R2
    00153 F3C9      BEQ	0x014D
(0261) }
(0262) TIMSK&=0xFE;//关定时器0中断
    00154 B787      IN	R24,0x37
    00155 7F8E      ANDI	R24,0xFE
    00156 BF87      OUT	0x37,R24
(0263) UCSR0B&=0x7f;//关串口接收中断
    00157 B18A      IN	R24,0x0A
    00158 778F      ANDI	R24,0x7F
    00159 B98A      OUT	0x0A,R24
(0264) }
    0015A 940C 2325 JMP	pop_xgsetF03C
_SendUart0_3:
  t                    --> R20
  i                    --> R22
  cn                   --> R10
  s                    --> R12
  len                  --> R14
    0015C 940E 2311 CALL	push_xgsetF0FC
    0015E 0169      MOVW	R12,R18
    0015F 2EE0      MOV	R14,R16
    00160 84AA      LDD	R10,Y+10
(0265) }
(0266) 
(0267) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn)   //串口发送数据，不死等，收到采集板返回的cn个字节后即退出，如一直没收到cn个字节，则超时时间s*8ms到后也退出
(0268) {//要求流量板在s个8ms内通过串口返回数据
(0269) unsigned char t,i; 	
(0270) 
(0271) for(t=0;t<74;t++)
    00161 2744      CLR	R20
    00162 C009      RJMP	0x016C
(0272)   Uart0RxData[t]=0xff;
    00163 EE84      LDI	R24,0xE4
    00164 E092      LDI	R25,2
    00165 2FE4      MOV	R30,R20
    00166 27FF      CLR	R31
    00167 0FE8      ADD	R30,R24
    00168 1FF9      ADC	R31,R25
    00169 EF8F      LDI	R24,0xFF
    0016A 8380      ST	Z,R24
    0016B 9543      INC	R20
    0016C 344A      CPI	R20,0x4A
    0016D F3A8      BCS	0x0163
(0273)   
(0274) Uart0RxCounter=0; //清串口接受计数  
    0016E 2422      CLR	R2
    0016F 9220 02E3 STS	Uart0RxCounter,R2
(0275) 
(0276) for(t=0;t<len;t++)
    00171 2744      CLR	R20
    00172 C010      RJMP	0x0183
(0277) {
(0278) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    00173 9B5D      SBIS	0x0B,5
    00174 CFFE      RJMP	0x0173
(0279) for(i=0;i<200;i++);
    00175 2766      CLR	R22
    00176 C001      RJMP	0x0178
    00177 9563      INC	R22
    00178 3C68      CPI	R22,0xC8
    00179 F3E8      BCS	0x0177
(0280) UDR0=Uart0TxData[t];  
    0017A E281      LDI	R24,0x21
    0017B E091      LDI	R25,1
    0017C 2FE4      MOV	R30,R20
    0017D 27FF      CLR	R31
    0017E 0FE8      ADD	R30,R24
    0017F 1FF9      ADC	R31,R25
    00180 8020      LD	R2,Z
    00181 B82C      OUT	0x0C,R2
    00182 9543      INC	R20
    00183 154E      CP	R20,R14
    00184 F370      BCS	0x0173
(0281) }
(0282)                   
(0283) if(s>0)
    00185 20CC      TST	R12
    00186 F411      BNE	0x0189
    00187 20DD      TST	R13
    00188 F139      BEQ	0x01B0
(0284) {
(0285)  //超时设定
(0286) TimeOutFlag=0; //超时标志置0
    00189 2422      CLR	R2
    0018A 9220 02CB STS	TimeOutFlag,R2
(0287) Timer0Counter=s; //8ms定时循环次数
    0018C 92D0 032F STS	Timer0Counter+1,R13
    0018E 92C0 032E STS	Timer0Counter,R12
(0288) TCNT0=0x06;//定时8ms
    00190 E086      LDI	R24,6
    00191 BF82      OUT	0x32,R24
(0289) TCCR0|=0x06;//256分频
    00192 B783      IN	R24,0x33
    00193 6086      ORI	R24,6
    00194 BF83      OUT	0x33,R24
(0290) TIFR|=0x01; //清定时器0中断标志
    00195 B786      IN	R24,0x36
    00196 6081      ORI	R24,1
    00197 BF86      OUT	0x36,R24
(0291) TIMSK|=0x01;//使能定时器0中断
    00198 B787      IN	R24,0x37
    00199 6081      ORI	R24,1
    0019A BF87      OUT	0x37,R24
(0292) t=UDR0;//开串口接收中断前读空缓存
    0019B B14C      IN	R20,0x0C
(0293) UCSR0B|=0x80;//开串口接收中断
    0019C 9A57      SBI	0x0A,7
    0019D C008      RJMP	0x01A6
(0294) while(TimeOutFlag==0)
(0295) {
(0296) CheckMotor(0);
    0019E 2700      CLR	R16
    0019F 2711      CLR	R17
    001A0 D1A9      RCALL	_CheckMotor
(0297)  if(Uart0RxCounter>=cn)
    001A1 9020 02E3 LDS	R2,Uart0RxCounter
    001A3 142A      CP	R2,R10
    001A4 F008      BCS	0x01A6
(0298)    break;
    001A5 C004      RJMP	0x01AA
    001A6 9020 02CB LDS	R2,TimeOutFlag
    001A8 2022      TST	R2
    001A9 F3A1      BEQ	0x019E
(0299) }
(0300) TIMSK&=0xFE;//关定时器0中断
    001AA B787      IN	R24,0x37
    001AB 7F8E      ANDI	R24,0xFE
    001AC BF87      OUT	0x37,R24
(0301) UCSR0B&=0x7f;//关串口接收中断
    001AD B18A      IN	R24,0x0A
    001AE 778F      ANDI	R24,0x7F
    001AF B98A      OUT	0x0A,R24
(0302) }
    001B0 940C 2306 JMP	pop_xgsetF0FC
_Pwm_startup:
  c                    --> R20
  b                    --> R22
  motor                --> R16
    001B2 934A      ST	-Y,R20
    001B3 936A      ST	-Y,R22
(0303) }
(0304) 
(0305) 
(0306) void Pwm_startup(unsigned char motor)//电机软启动
(0307) {	unsigned char c,b;
(0308) 
(0309) 	if(motor==1)
    001B4 3001      CPI	R16,1
    001B5 F009      BEQ	0x01B7
    001B6 C07F      RJMP	0x0236
(0310) 	{         
(0311) 	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    001B7 2766      CLR	R22
    001B8 C037      RJMP	0x01F0
(0312) 		 {
(0313) 		  PWM1_H
    001B9 9AD1      SBI	0x1A,1
    001BA 9AD9      SBI	0x1B,1
(0314) 		  DELAY100
    001BB 2422      CLR	R2
    001BC 2433      CLR	R3
    001BD 9230 02B0 STS	Tt+1,R3
    001BF 9220 02AF STS	Tt,R2
    001C1 C009      RJMP	0x01CB
    001C2 9180 02AF LDS	R24,Tt
    001C4 9190 02B0 LDS	R25,Tt+1
    001C6 9601      ADIW	R24,1
    001C7 9390 02B0 STS	Tt+1,R25
    001C9 9380 02AF STS	Tt,R24
    001CB 9180 02AF LDS	R24,Tt
    001CD 9190 02B0 LDS	R25,Tt+1
    001CF 328A      CPI	R24,0x2A
    001D0 E0E0      LDI	R30,0
    001D1 079E      CPC	R25,R30
    001D2 F378      BCS	0x01C2
(0315) 		  PWM1_L
    001D3 9AD1      SBI	0x1A,1
    001D4 B38B      IN	R24,0x1B
    001D5 7F8D      ANDI	R24,0xFD
    001D6 BB8B      OUT	0x1B,R24
(0316) 		  DELAY100
    001D7 2422      CLR	R2
    001D8 2433      CLR	R3
    001D9 9230 02B0 STS	Tt+1,R3
    001DB 9220 02AF STS	Tt,R2
    001DD C009      RJMP	0x01E7
    001DE 9180 02AF LDS	R24,Tt
    001E0 9190 02B0 LDS	R25,Tt+1
    001E2 9601      ADIW	R24,1
    001E3 9390 02B0 STS	Tt+1,R25
    001E5 9380 02AF STS	Tt,R24
    001E7 9180 02AF LDS	R24,Tt
    001E9 9190 02B0 LDS	R25,Tt+1
    001EB 328A      CPI	R24,0x2A
    001EC E0E0      LDI	R30,0
    001ED 079E      CPC	R25,R30
    001EE F378      BCS	0x01DE
    001EF 9563      INC	R22
    001F0 316E      CPI	R22,0x1E
    001F1 F238      BCS	0x01B9
(0317) 		 }
(0318)  
(0319)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    001F2 2744      CLR	R20
    001F3 C03E      RJMP	0x0232
(0320) 		 {
(0321) 	       PWM1_L
    001F4 9AD1      SBI	0x1A,1
    001F5 B38B      IN	R24,0x1B
    001F6 7F8D      ANDI	R24,0xFD
    001F7 BB8B      OUT	0x1B,R24
(0322) 		   for(b=0;b<(200-c);b++)
    001F8 2766      CLR	R22
    001F9 C00C      RJMP	0x0206
(0323) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    001FA 0000      NOP
    001FB 0000      NOP
    001FC 0000      NOP
    001FD 0000      NOP
    001FE 0000      NOP
    001FF 0000      NOP
    00200 0000      NOP
    00201 0000      NOP
    00202 0000      NOP
    00203 0000      NOP
    00204 0000      NOP
    00205 9563      INC	R22
    00206 2E24      MOV	R2,R20
    00207 2433      CLR	R3
    00208 EC88      LDI	R24,0xC8
    00209 E090      LDI	R25,0
    0020A 012C      MOVW	R4,R24
    0020B 1842      SUB	R4,R2
    0020C 0853      SBC	R5,R3
    0020D 2E26      MOV	R2,R22
    0020E 2433      CLR	R3
    0020F 1424      CP	R2,R4
    00210 0435      CPC	R3,R5
    00211 F344      BLT	0x01FA
(0324) 			
(0325) 	       if(Motor1Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    00212 9020 0339 LDS	R2,Motor1Status
    00214 9030 033A LDS	R3,Motor1Status+1
    00216 FC25      SBRC	R2,5
    00217 C003      RJMP	0x021B
(0326) 		   {PWM1_H}
    00218 9AD1      SBI	0x1A,1
    00219 9AD9      SBI	0x1B,1
    0021A C004      RJMP	0x021F
(0327) 		   else 
(0328) 		   {PWM1_L}
    0021B 9AD1      SBI	0x1A,1
    0021C B38B      IN	R24,0x1B
    0021D 7F8D      ANDI	R24,0xFD
    0021E BB8B      OUT	0x1B,R24
(0329) 		   
(0330) 	       for(b=0;b<(c+50);b++)
    0021F 2766      CLR	R22
    00220 C00C      RJMP	0x022D
(0331) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00221 0000      NOP
    00222 0000      NOP
    00223 0000      NOP
    00224 0000      NOP
    00225 0000      NOP
    00226 0000      NOP
    00227 0000      NOP
    00228 0000      NOP
    00229 0000      NOP
    0022A 0000      NOP
    0022B 0000      NOP
    0022C 9563      INC	R22
    0022D 2F84      MOV	R24,R20
    0022E 5C8E      SUBI	R24,0xCE
    0022F 1768      CP	R22,R24
    00230 F380      BCS	0x0221
    00231 9543      INC	R20
    00232 3C48      CPI	R20,0xC8
    00233 F408      BCC	0x0235
    00234 CFBF      RJMP	0x01F4
(0332) 		 }	
(0333) 	} 
    00235 C0A4      RJMP	0x02DA
(0334) 	else if(motor==2)
    00236 3002      CPI	R16,2
    00237 F009      BEQ	0x0239
    00238 C0A1      RJMP	0x02DA
(0335) 	{  
(0336) 	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    00239 2766      CLR	R22
    0023A C045      RJMP	0x0280
(0337) 		 {
(0338) 		  PWM2_H
    0023B 9180 0061 LDS	R24,0x61
    0023D 6084      ORI	R24,4
    0023E 9380 0061 STS	0x61,R24
    00240 9180 0062 LDS	R24,0x62
    00242 6084      ORI	R24,4
    00243 9380 0062 STS	0x62,R24
(0339) 		  DELAY100
    00245 2422      CLR	R2
    00246 2433      CLR	R3
    00247 9230 02B0 STS	Tt+1,R3
    00249 9220 02AF STS	Tt,R2
    0024B C009      RJMP	0x0255
    0024C 9180 02AF LDS	R24,Tt
    0024E 9190 02B0 LDS	R25,Tt+1
    00250 9601      ADIW	R24,1
    00251 9390 02B0 STS	Tt+1,R25
    00253 9380 02AF STS	Tt,R24
    00255 9180 02AF LDS	R24,Tt
    00257 9190 02B0 LDS	R25,Tt+1
    00259 328A      CPI	R24,0x2A
    0025A E0E0      LDI	R30,0
    0025B 079E      CPC	R25,R30
    0025C F378      BCS	0x024C
(0340) 		  PWM2_L
    0025D 9180 0061 LDS	R24,0x61
    0025F 6084      ORI	R24,4
    00260 9380 0061 STS	0x61,R24
    00262 9180 0062 LDS	R24,0x62
    00264 7F8B      ANDI	R24,0xFB
    00265 9380 0062 STS	0x62,R24
(0341) 		  DELAY100
    00267 2422      CLR	R2
    00268 2433      CLR	R3
    00269 9230 02B0 STS	Tt+1,R3
    0026B 9220 02AF STS	Tt,R2
    0026D C009      RJMP	0x0277
    0026E 9180 02AF LDS	R24,Tt
    00270 9190 02B0 LDS	R25,Tt+1
    00272 9601      ADIW	R24,1
    00273 9390 02B0 STS	Tt+1,R25
    00275 9380 02AF STS	Tt,R24
    00277 9180 02AF LDS	R24,Tt
    00279 9190 02B0 LDS	R25,Tt+1
    0027B 328A      CPI	R24,0x2A
    0027C E0E0      LDI	R30,0
    0027D 079E      CPC	R25,R30
    0027E F378      BCS	0x026E
    0027F 9563      INC	R22
    00280 316E      CPI	R22,0x1E
    00281 F408      BCC	0x0283
    00282 CFB8      RJMP	0x023B
(0342) 		 }
(0343)  
(0344)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    00283 2744      CLR	R20
    00284 C052      RJMP	0x02D7
(0345) 		 {
(0346) 	       PWM2_L
    00285 9180 0061 LDS	R24,0x61
    00287 6084      ORI	R24,4
    00288 9380 0061 STS	0x61,R24
    0028A 9180 0062 LDS	R24,0x62
    0028C 7F8B      ANDI	R24,0xFB
    0028D 9380 0062 STS	0x62,R24
(0347) 		   for(b=0;b<(200-c);b++)
    0028F 2766      CLR	R22
    00290 C00C      RJMP	0x029D
(0348) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00291 0000      NOP
    00292 0000      NOP
    00293 0000      NOP
    00294 0000      NOP
    00295 0000      NOP
    00296 0000      NOP
    00297 0000      NOP
    00298 0000      NOP
    00299 0000      NOP
    0029A 0000      NOP
    0029B 0000      NOP
    0029C 9563      INC	R22
    0029D 2E24      MOV	R2,R20
    0029E 2433      CLR	R3
    0029F EC88      LDI	R24,0xC8
    002A0 E090      LDI	R25,0
    002A1 012C      MOVW	R4,R24
    002A2 1842      SUB	R4,R2
    002A3 0853      SBC	R5,R3
    002A4 2E26      MOV	R2,R22
    002A5 2433      CLR	R3
    002A6 1424      CP	R2,R4
    002A7 0435      CPC	R3,R5
    002A8 F344      BLT	0x0291
(0349) 			
(0350) 	       if(Motor2Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    002A9 9020 0337 LDS	R2,Motor2Status
    002AB 9030 0338 LDS	R3,Motor2Status+1
    002AD FC25      SBRC	R2,5
    002AE C00B      RJMP	0x02BA
(0351) 		   {PWM2_H}
    002AF 9180 0061 LDS	R24,0x61
    002B1 6084      ORI	R24,4
    002B2 9380 0061 STS	0x61,R24
    002B4 9180 0062 LDS	R24,0x62
    002B6 6084      ORI	R24,4
    002B7 9380 0062 STS	0x62,R24
    002B9 C00A      RJMP	0x02C4
(0352) 		   else 
(0353) 		   {PWM2_L}
    002BA 9180 0061 LDS	R24,0x61
    002BC 6084      ORI	R24,4
    002BD 9380 0061 STS	0x61,R24
    002BF 9180 0062 LDS	R24,0x62
    002C1 7F8B      ANDI	R24,0xFB
    002C2 9380 0062 STS	0x62,R24
(0354) 		   
(0355) 	       for(b=0;b<(c+50);b++)
    002C4 2766      CLR	R22
    002C5 C00C      RJMP	0x02D2
(0356) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    002C6 0000      NOP
    002C7 0000      NOP
    002C8 0000      NOP
    002C9 0000      NOP
    002CA 0000      NOP
    002CB 0000      NOP
    002CC 0000      NOP
    002CD 0000      NOP
    002CE 0000      NOP
    002CF 0000      NOP
    002D0 0000      NOP
    002D1 9563      INC	R22
    002D2 2F84      MOV	R24,R20
    002D3 5C8E      SUBI	R24,0xCE
    002D4 1768      CP	R22,R24
    002D5 F380      BCS	0x02C6
    002D6 9543      INC	R20
    002D7 3C48      CPI	R20,0xC8
    002D8 F408      BCC	0x02DA
    002D9 CFAB      RJMP	0x0285
(0357) 		 }	
(0358) 	}
    002DA 9169      LD	R22,Y+
    002DB 9149      LD	R20,Y+
    002DC 9508      RET
_SampleADC:
  adcl                 --> Y,+0
  c                    --> R10
  ADdata               --> R12
  ch                   --> R10
    002DD 940E 231C CALL	push_xgsetF03C
    002DF 2EA0      MOV	R10,R16
    002E0 9724      SBIW	R28,4
(0359) }
(0360) 
(0361)    
(0362) unsigned char SampleADC(unsigned char ch)//耗时约5ms
(0363) {     unsigned char c;
(0364)       unsigned long adcl;
(0365) 	  unsigned int ADdata;
(0366) 
(0367) 	  ADMUX  = ch;//片外基准，选择单端输入通道 
    002E1 B8A7      OUT	0x07,R10
(0368) 	  ADCSRA =0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    002E2 EC83      LDI	R24,0xC3
    002E3 B986      OUT	0x06,R24
(0369)    
(0370) 	  //第一次采样值不要
(0371) 	  for(ADdata=0;ADdata<100;ADdata++);
    002E4 24CC      CLR	R12
    002E5 24DD      CLR	R13
    002E6 C003      RJMP	0x02EA
    002E7 01C6      MOVW	R24,R12
    002E8 9601      ADIW	R24,1
    002E9 016C      MOVW	R12,R24
    002EA 01C6      MOVW	R24,R12
    002EB 3684      CPI	R24,0x64
    002EC E0E0      LDI	R30,0
    002ED 079E      CPC	R25,R30
    002EE F3C0      BCS	0x02E7
(0372) 	  while((ADCSRA&0x40)==0x40);//等待转换完成
    002EF B186      IN	R24,0x06
    002F0 7480      ANDI	R24,0x40
    002F1 3480      CPI	R24,0x40
    002F2 F3E1      BEQ	0x02EF
(0373) 	  ADdata=ADCL;
    002F3 B0C4      IN	R12,0x04
    002F4 24DD      CLR	R13
(0374) 	  ADdata=ADCH;  
    002F5 B0C5      IN	R12,0x05
    002F6 24DD      CLR	R13
(0375)   
(0376) 	  adcl=0;
    002F7 E080      LDI	R24,0
    002F8 8388      ST	Y,R24
    002F9 8389      STD	Y+1,R24
    002FA 838A      STD	Y+2,R24
    002FB 838B      STD	Y+3,R24
(0377) 	  for(c=0;c<32;c++)//32次值取平均
    002FC 24AA      CLR	R10
    002FD C02C      RJMP	0x032A
(0378) 	  {
(0379) 	   ADCSRA = 0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    002FE EC83      LDI	R24,0xC3
    002FF B986      OUT	0x06,R24
(0380) 	   for(ADdata=0;ADdata<100;ADdata++);
    00300 24CC      CLR	R12
    00301 24DD      CLR	R13
    00302 C003      RJMP	0x0306
    00303 01C6      MOVW	R24,R12
    00304 9601      ADIW	R24,1
    00305 016C      MOVW	R12,R24
    00306 01C6      MOVW	R24,R12
    00307 3684      CPI	R24,0x64
    00308 E0E0      LDI	R30,0
    00309 079E      CPC	R25,R30
    0030A F3C0      BCS	0x0303
(0381) 	   while((ADCSRA&0x40)==0x40);//等待转换完成	
    0030B B186      IN	R24,0x06
    0030C 7480      ANDI	R24,0x40
    0030D 3480      CPI	R24,0x40
    0030E F3E1      BEQ	0x030B
(0382) 	   ADdata=ADCL;   
    0030F B0C4      IN	R12,0x04
    00310 24DD      CLR	R13
(0383) 	   ADdata|=(ADCH<<8);
    00311 B025      IN	R2,0x05
    00312 2433      CLR	R3
    00313 2C32      MOV	R3,R2
    00314 2422      CLR	R2
    00315 28C2      OR	R12,R2
    00316 28D3      OR	R13,R3
(0384) 	   ADdata&=0x03ff;//10位有效转换结果
    00317 01C6      MOVW	R24,R12
    00318 7093      ANDI	R25,3
    00319 016C      MOVW	R12,R24
(0385) 	   adcl+=ADdata;
    0031A 011C      MOVW	R2,R24
    0031B 2444      CLR	R4
    0031C 2455      CLR	R5
    0031D 8068      LD	R6,Y
    0031E 8079      LDD	R7,Y+1
    0031F 808A      LDD	R8,Y+2
    00320 809B      LDD	R9,Y+3
    00321 0C62      ADD	R6,R2
    00322 1C73      ADC	R7,R3
    00323 1C84      ADC	R8,R4
    00324 1C95      ADC	R9,R5
    00325 8268      ST	Y,R6
    00326 8279      STD	Y+1,R7
    00327 828A      STD	Y+2,R8
    00328 829B      STD	Y+3,R9
    00329 94A3      INC	R10
    0032A 2D8A      MOV	R24,R10
    0032B 3280      CPI	R24,0x20
    0032C F288      BCS	0x02FE
(0386) 	  }
(0387) 
(0388) 	  adcl>>=7;//除以32，再除以4，相当于8位AD
    0032D E087      LDI	R24,7
    0032E E090      LDI	R25,0
    0032F 8108      LD	R16,Y
    00330 8119      LDD	R17,Y+1
    00331 812A      LDD	R18,Y+2
    00332 813B      LDD	R19,Y+3
    00333 938A      ST	-Y,R24
    00334 940E 234A CALL	lsr32
    00336 8308      ST	Y,R16
    00337 8319      STD	Y+1,R17
    00338 832A      STD	Y+2,R18
    00339 833B      STD	Y+3,R19
(0389) 	  return (adcl&0x000000ff);//取8位有效位
    0033A EF4F      LDI	R20,0xFF
    0033B E050      LDI	R21,0
    0033C E060      LDI	R22,0
    0033D E070      LDI	R23,0
    0033E 8028      LD	R2,Y
    0033F 8039      LDD	R3,Y+1
    00340 804A      LDD	R4,Y+2
    00341 805B      LDD	R5,Y+3
    00342 2224      AND	R2,R20
    00343 2235      AND	R3,R21
    00344 2246      AND	R4,R22
    00345 2257      AND	R5,R23
    00346 2D02      MOV	R16,R2
    00347 9624      ADIW	R28,4
    00348 940C 2325 JMP	pop_xgsetF03C
_CheckMotor:
  n                    --> R12
  f                    --> Y,+0
  a                    --> R12
  t                    --> R10
    0034A 940E 231C CALL	push_xgsetF03C
    0034C 0158      MOVW	R10,R16
    0034D 9724      SBIW	R28,4
(0390) }
(0391) 
(0392) void CheckMotor(unsigned int t)//电机不转时耗时5us，最大定时8388ms
(0393) {   
(0394)     float f;
(0395) 	unsigned char a;
(0396)     unsigned int n;
(0397)     TCCR1B = 0x00; //stop
    0034E 2422      CLR	R2
    0034F BC2E      OUT	0x2E,R2
(0398) 	if(t>8388)
    00350 EC84      LDI	R24,0xC4
    00351 E290      LDI	R25,0x20
    00352 158A      CP	R24,R10
    00353 059B      CPC	R25,R11
    00354 F408      BCC	0x0356
(0399) 	   t=8388;
    00355 015C      MOVW	R10,R24
(0400) 	f=t;
    00356 0185      MOVW	R16,R10
    00357 940E 23FD CALL	uint2fp
    00359 8308      ST	Y,R16
    0035A 8319      STD	Y+1,R17
    0035B 832A      STD	Y+2,R18
    0035C 833B      STD	Y+3,R19
(0401) 	f*=7.8125;
    0035D EA00      LDI	R16,0xA0
    0035E E010      LDI	R17,0
    0035F 940E 22E2 CALL	elpm32
    00361 01CE      MOVW	R24,R28
    00362 939A      ST	-Y,R25
    00363 938A      ST	-Y,R24
    00364 940E 259A CALL	fpmule1
    00366 8308      ST	Y,R16
    00367 8319      STD	Y+1,R17
    00368 832A      STD	Y+2,R18
    00369 833B      STD	Y+3,R19
(0402) 	n=f;
    0036A 8108      LD	R16,Y
    0036B 8119      LDD	R17,Y+1
    0036C 812A      LDD	R18,Y+2
    0036D 813B      LDD	R19,Y+3
    0036E 940E 23CB CALL	fpint
    00370 0168      MOVW	R12,R16
(0403)     TCNT1 = 65536-n;   
    00371 0116      MOVW	R2,R12
    00372 2444      CLR	R4
    00373 2455      CLR	R5
    00374 E040      LDI	R20,0
    00375 E050      LDI	R21,0
    00376 E061      LDI	R22,1
    00377 E070      LDI	R23,0
    00378 1942      SUB	R20,R2
    00379 0953      SBC	R21,R3
    0037A 0964      SBC	R22,R4
    0037B 0975      SBC	R23,R5
    0037C BD5D      OUT	0x2D,R21
    0037D BD4C      OUT	0x2C,R20
(0404)  	TCCR1B = 0x05; //1024分频
    0037E E085      LDI	R24,5
    0037F BD8E      OUT	0x2E,R24
(0405) 	TIFR|=0x04; //清定时器1中断标志
    00380 B786      IN	R24,0x36
    00381 6084      ORI	R24,4
    00382 BF86      OUT	0x36,R24
    00383 C16A      RJMP	0x04EE
(0406) 	while((TIFR&0x04)==0x00) 
(0407)    {
(0408)    if(PWM1_PIN==1)//电机运行时才实时检测电流，否则电流保存最后一次的测试值
    00384 B389      IN	R24,0x19
    00385 7082      ANDI	R24,2
    00386 9586      LSR	R24
    00387 3081      CPI	R24,1
    00388 F009      BEQ	0x038A
    00389 C085      RJMP	0x040F
(0409)    {
(0410)     a=SampleADC(7);
    0038A E007      LDI	R16,7
    0038B DF51      RCALL	_SampleADC
    0038C 2EC0      MOV	R12,R16
(0411)     if(a>Motor1Thr)//过流关电机
    0038D 9020 0334 LDS	R2,Motor1Thr
    0038F 2433      CLR	R3
    00390 2C4C      MOV	R4,R12
    00391 2455      CLR	R5
    00392 1424      CP	R2,R4
    00393 0435      CPC	R3,R5
    00394 F534      BGE	0x03BB
(0412)     {
(0413) 	 MOTORSTOP//关电机
    00395 B38A      IN	R24,0x1A
    00396 6087      ORI	R24,7
    00397 BB8A      OUT	0x1A,R24
    00398 B38B      IN	R24,0x1B
    00399 7F8D      ANDI	R24,0xFD
    0039A BB8B      OUT	0x1B,R24
    0039B B38B      IN	R24,0x1B
    0039C 7F88      ANDI	R24,0xF8
    0039D BB8B      OUT	0x1B,R24
    0039E 9180 0061 LDS	R24,0x61
    003A0 6087      ORI	R24,7
    003A1 9380 0061 STS	0x61,R24
    003A3 9180 0062 LDS	R24,0x62
    003A5 7F8B      ANDI	R24,0xFB
    003A6 9380 0062 STS	0x62,R24
    003A8 9180 0062 LDS	R24,0x62
    003AA 7F88      ANDI	R24,0xF8
    003AB 9380 0062 STS	0x62,R24
    003AD 9ABF      SBI	0x17,7
    003AE B388      IN	R24,0x18
    003AF 778F      ANDI	R24,0x7F
    003B0 BB88      OUT	0x18,R24
(0414)      Motor1Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
    003B1 9180 0339 LDS	R24,Motor1Status
    003B3 9190 033A LDS	R25,Motor1Status+1
    003B5 6180      ORI	R24,0x10
    003B6 9390 033A STS	Motor1Status+1,R25
    003B8 9380 0339 STS	Motor1Status,R24
(0415) 	}
    003BA C029      RJMP	0x03E4
(0416) 	else if(a<MotorIdelCur)//断路关电机 
    003BB 9020 0331 LDS	R2,MotorIdelCur
    003BD 14C2      CP	R12,R2
    003BE F528      BCC	0x03E4
(0417) 	{
(0418) 	 MOTORSTOP//关电机
    003BF B38A      IN	R24,0x1A
    003C0 6087      ORI	R24,7
    003C1 BB8A      OUT	0x1A,R24
    003C2 B38B      IN	R24,0x1B
    003C3 7F8D      ANDI	R24,0xFD
    003C4 BB8B      OUT	0x1B,R24
    003C5 B38B      IN	R24,0x1B
    003C6 7F88      ANDI	R24,0xF8
    003C7 BB8B      OUT	0x1B,R24
    003C8 9180 0061 LDS	R24,0x61
    003CA 6087      ORI	R24,7
    003CB 9380 0061 STS	0x61,R24
    003CD 9180 0062 LDS	R24,0x62
    003CF 7F8B      ANDI	R24,0xFB
    003D0 9380 0062 STS	0x62,R24
    003D2 9180 0062 LDS	R24,0x62
    003D4 7F88      ANDI	R24,0xF8
    003D5 9380 0062 STS	0x62,R24
    003D7 9ABF      SBI	0x17,7
    003D8 B388      IN	R24,0x18
    003D9 778F      ANDI	R24,0x7F
    003DA BB88      OUT	0x18,R24
(0419)      Motor1Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
    003DB 9180 0339 LDS	R24,Motor1Status
    003DD 9190 033A LDS	R25,Motor1Status+1
    003DF 6084      ORI	R24,4
    003E0 9390 033A STS	Motor1Status+1,R25
    003E2 9380 0339 STS	Motor1Status,R24
(0420) 	}
(0421) 	f=a;
    003E4 2D0C      MOV	R16,R12
    003E5 2711      CLR	R17
    003E6 940E 23FF CALL	int2fp
    003E8 8308      ST	Y,R16
    003E9 8319      STD	Y+1,R17
    003EA 832A      STD	Y+2,R18
    003EB 833B      STD	Y+3,R19
(0422) 	f*=1.2952;//f/=0.7721;
    003EC E90C      LDI	R16,0x9C
    003ED E010      LDI	R17,0
    003EE 940E 22E2 CALL	elpm32
    003F0 01CE      MOVW	R24,R28
    003F1 939A      ST	-Y,R25
    003F2 938A      ST	-Y,R24
    003F3 940E 259A CALL	fpmule1
    003F5 8308      ST	Y,R16
    003F6 8319      STD	Y+1,R17
    003F7 832A      STD	Y+2,R18
    003F8 833B      STD	Y+3,R19
(0423) 	Motor1Status.s.ThisCurrent=f;
    003F9 8108      LD	R16,Y
    003FA 8119      LDD	R17,Y+1
    003FB 812A      LDD	R18,Y+2
    003FC 813B      LDD	R19,Y+3
    003FD 940E 23CB CALL	fpint
    003FF 01C8      MOVW	R24,R16
    00400 7090      ANDI	R25,0
    00401 2F98      MOV	R25,R24
    00402 2788      CLR	R24
    00403 7080      ANDI	R24,0
    00404 91E0 0339 LDS	R30,Motor1Status
    00406 91F0 033A LDS	R31,Motor1Status+1
    00408 70F0      ANDI	R31,0
    00409 2BE8      OR	R30,R24
    0040A 2BF9      OR	R31,R25
    0040B 93F0 033A STS	Motor1Status+1,R31
    0040D 93E0 0339 STS	Motor1Status,R30
(0424)    }
(0425)     Motor1Status.s.PWM=PWM1_PIN; 
    0040F B389      IN	R24,0x19
    00410 2799      CLR	R25
    00411 7082      ANDI	R24,2
    00412 7090      ANDI	R25,0
    00413 9595      ASR	R25
    00414 9587      ROR	R24
    00415 7081      ANDI	R24,1
    00416 7090      ANDI	R25,0
    00417 91E0 0339 LDS	R30,Motor1Status
    00419 91F0 033A LDS	R31,Motor1Status+1
    0041B 7FEE      ANDI	R30,0xFE
    0041C 2BE8      OR	R30,R24
    0041D 2BF9      OR	R31,R25
    0041E 93F0 033A STS	Motor1Status+1,R31
    00420 93E0 0339 STS	Motor1Status,R30
(0426) 	Motor1Status.s.DIR=DIR1_PIN;
    00422 B389      IN	R24,0x19
    00423 2799      CLR	R25
    00424 7084      ANDI	R24,4
    00425 7090      ANDI	R25,0
    00426 9595      ASR	R25
    00427 9587      ROR	R24
    00428 9595      ASR	R25
    00429 9587      ROR	R24
    0042A 7081      ANDI	R24,1
    0042B 7090      ANDI	R25,0
    0042C 0F88      LSL	R24
    0042D 1F99      ROL	R25
    0042E 7082      ANDI	R24,2
    0042F 7090      ANDI	R25,0
    00430 7FED      ANDI	R30,0xFD
    00431 2BE8      OR	R30,R24
    00432 2BF9      OR	R31,R25
    00433 93F0 033A STS	Motor1Status+1,R31
    00435 93E0 0339 STS	Motor1Status,R30
(0427) 	 
(0428) 		  	   
(0429)    if(PWM2_PIN==1)//电机运行时才实时检测电流，否则电流保存最后一次的测试值
    00437 B180      IN	R24,0x00
    00438 7084      ANDI	R24,4
    00439 9586      LSR	R24
    0043A 9586      LSR	R24
    0043B 3081      CPI	R24,1
    0043C F009      BEQ	0x043E
    0043D C085      RJMP	0x04C3
(0430)    {
(0431) 	a=SampleADC(6);
    0043E E006      LDI	R16,6
    0043F DE9D      RCALL	_SampleADC
    00440 2EC0      MOV	R12,R16
(0432)     if(a>Motor2Thr)//过流关电机
    00441 9020 0333 LDS	R2,Motor2Thr
    00443 2433      CLR	R3
    00444 2C4C      MOV	R4,R12
    00445 2455      CLR	R5
    00446 1424      CP	R2,R4
    00447 0435      CPC	R3,R5
    00448 F534      BGE	0x046F
(0433)     {
(0434) 	 MOTORSTOP//关电机
    00449 B38A      IN	R24,0x1A
    0044A 6087      ORI	R24,7
    0044B BB8A      OUT	0x1A,R24
    0044C B38B      IN	R24,0x1B
    0044D 7F8D      ANDI	R24,0xFD
    0044E BB8B      OUT	0x1B,R24
    0044F B38B      IN	R24,0x1B
    00450 7F88      ANDI	R24,0xF8
    00451 BB8B      OUT	0x1B,R24
    00452 9180 0061 LDS	R24,0x61
    00454 6087      ORI	R24,7
    00455 9380 0061 STS	0x61,R24
    00457 9180 0062 LDS	R24,0x62
    00459 7F8B      ANDI	R24,0xFB
    0045A 9380 0062 STS	0x62,R24
    0045C 9180 0062 LDS	R24,0x62
    0045E 7F88      ANDI	R24,0xF8
    0045F 9380 0062 STS	0x62,R24
    00461 9ABF      SBI	0x17,7
    00462 B388      IN	R24,0x18
    00463 778F      ANDI	R24,0x7F
    00464 BB88      OUT	0x18,R24
(0435)      Motor2Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
    00465 9180 0337 LDS	R24,Motor2Status
    00467 9190 0338 LDS	R25,Motor2Status+1
    00469 6180      ORI	R24,0x10
    0046A 9390 0338 STS	Motor2Status+1,R25
    0046C 9380 0337 STS	Motor2Status,R24
(0436) 	} 
    0046E C029      RJMP	0x0498
(0437) 	else if(a<MotorIdelCur) //断路关电机
    0046F 9020 0331 LDS	R2,MotorIdelCur
    00471 14C2      CP	R12,R2
    00472 F528      BCC	0x0498
(0438) 	{
(0439) 	 MOTORSTOP//关电机
    00473 B38A      IN	R24,0x1A
    00474 6087      ORI	R24,7
    00475 BB8A      OUT	0x1A,R24
    00476 B38B      IN	R24,0x1B
    00477 7F8D      ANDI	R24,0xFD
    00478 BB8B      OUT	0x1B,R24
    00479 B38B      IN	R24,0x1B
    0047A 7F88      ANDI	R24,0xF8
    0047B BB8B      OUT	0x1B,R24
    0047C 9180 0061 LDS	R24,0x61
    0047E 6087      ORI	R24,7
    0047F 9380 0061 STS	0x61,R24
    00481 9180 0062 LDS	R24,0x62
    00483 7F8B      ANDI	R24,0xFB
    00484 9380 0062 STS	0x62,R24
    00486 9180 0062 LDS	R24,0x62
    00488 7F88      ANDI	R24,0xF8
    00489 9380 0062 STS	0x62,R24
    0048B 9ABF      SBI	0x17,7
    0048C B388      IN	R24,0x18
    0048D 778F      ANDI	R24,0x7F
    0048E BB88      OUT	0x18,R24
(0440)      Motor2Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
    0048F 9180 0337 LDS	R24,Motor2Status
    00491 9190 0338 LDS	R25,Motor2Status+1
    00493 6084      ORI	R24,4
    00494 9390 0338 STS	Motor2Status+1,R25
    00496 9380 0337 STS	Motor2Status,R24
(0441) 	}
(0442) 	f=a;
    00498 2D0C      MOV	R16,R12
    00499 2711      CLR	R17
    0049A 940E 23FF CALL	int2fp
    0049C 8308      ST	Y,R16
    0049D 8319      STD	Y+1,R17
    0049E 832A      STD	Y+2,R18
    0049F 833B      STD	Y+3,R19
(0443) 	f*=1.2952;//f/=0.7721;
    004A0 E90C      LDI	R16,0x9C
    004A1 E010      LDI	R17,0
    004A2 940E 22E2 CALL	elpm32
    004A4 01CE      MOVW	R24,R28
    004A5 939A      ST	-Y,R25
    004A6 938A      ST	-Y,R24
    004A7 940E 259A CALL	fpmule1
    004A9 8308      ST	Y,R16
    004AA 8319      STD	Y+1,R17
    004AB 832A      STD	Y+2,R18
    004AC 833B      STD	Y+3,R19
(0444) 	Motor2Status.s.ThisCurrent=f;
    004AD 8108      LD	R16,Y
    004AE 8119      LDD	R17,Y+1
    004AF 812A      LDD	R18,Y+2
    004B0 813B      LDD	R19,Y+3
    004B1 940E 23CB CALL	fpint
    004B3 01C8      MOVW	R24,R16
    004B4 7090      ANDI	R25,0
    004B5 2F98      MOV	R25,R24
    004B6 2788      CLR	R24
    004B7 7080      ANDI	R24,0
    004B8 91E0 0337 LDS	R30,Motor2Status
    004BA 91F0 0338 LDS	R31,Motor2Status+1
    004BC 70F0      ANDI	R31,0
    004BD 2BE8      OR	R30,R24
    004BE 2BF9      OR	R31,R25
    004BF 93F0 0338 STS	Motor2Status+1,R31
    004C1 93E0 0337 STS	Motor2Status,R30
(0445)    }
(0446)    Motor2Status.s.PWM=PWM2_PIN; 
    004C3 B180      IN	R24,0x00
    004C4 2799      CLR	R25
    004C5 7084      ANDI	R24,4
    004C6 7090      ANDI	R25,0
    004C7 9595      ASR	R25
    004C8 9587      ROR	R24
    004C9 9595      ASR	R25
    004CA 9587      ROR	R24
    004CB 7081      ANDI	R24,1
    004CC 7090      ANDI	R25,0
    004CD 91E0 0337 LDS	R30,Motor2Status
    004CF 91F0 0338 LDS	R31,Motor2Status+1
    004D1 7FEE      ANDI	R30,0xFE
    004D2 2BE8      OR	R30,R24
    004D3 2BF9      OR	R31,R25
    004D4 93F0 0338 STS	Motor2Status+1,R31
    004D6 93E0 0337 STS	Motor2Status,R30
(0447)    Motor2Status.s.DIR=DIR2_PIN;  
    004D8 B180      IN	R24,0x00
    004D9 2799      CLR	R25
    004DA 7081      ANDI	R24,1
    004DB 7090      ANDI	R25,0
    004DC 7081      ANDI	R24,1
    004DD 7090      ANDI	R25,0
    004DE 0F88      LSL	R24
    004DF 1F99      ROL	R25
    004E0 7082      ANDI	R24,2
    004E1 7090      ANDI	R25,0
    004E2 7FED      ANDI	R30,0xFD
    004E3 2BE8      OR	R30,R24
    004E4 2BF9      OR	R31,R25
    004E5 93F0 0338 STS	Motor2Status+1,R31
    004E7 93E0 0337 STS	Motor2Status,R30
(0448)    if(t==0){break;}//不定时则检测一次电机状态后直接跳出
    004E9 20AA      TST	R10
    004EA F419      BNE	0x04EE
    004EB 20BB      TST	R11
    004EC F409      BNE	0x04EE
    004ED C003      RJMP	0x04F1
    004EE B626      IN	R2,0x36
    004EF FE22      SBRS	R2,2
    004F0 CE93      RJMP	0x0384
(0449)    } 
(0450)    TCCR1B = 0x00; //stop
    004F1 2422      CLR	R2
    004F2 BC2E      OUT	0x2E,R2
    004F3 9624      ADIW	R28,4
    004F4 940C 2325 JMP	pop_xgsetF03C
(0451) }
(0452) 
(0453) 
(0454) void Start(void)
(0455) {
(0456)  InitialIO();
_Start:
    004F6 DB7E      RCALL	_InitialIO
(0457)  uart0_init();
    004F7 DB95      RCALL	_uart0_init
(0458)  
(0459)  MOTORSTOP//关电机
    004F8 B38A      IN	R24,0x1A
    004F9 6087      ORI	R24,7
    004FA BB8A      OUT	0x1A,R24
    004FB B38B      IN	R24,0x1B
    004FC 7F8D      ANDI	R24,0xFD
    004FD BB8B      OUT	0x1B,R24
    004FE B38B      IN	R24,0x1B
    004FF 7F88      ANDI	R24,0xF8
    00500 BB8B      OUT	0x1B,R24
    00501 9180 0061 LDS	R24,0x61
    00503 6087      ORI	R24,7
    00504 9380 0061 STS	0x61,R24
    00506 9180 0062 LDS	R24,0x62
    00508 7F8B      ANDI	R24,0xFB
    00509 9380 0062 STS	0x62,R24
    0050B 9180 0062 LDS	R24,0x62
    0050D 7F88      ANDI	R24,0xF8
    0050E 9380 0062 STS	0x62,R24
    00510 9ABF      SBI	0x17,7
    00511 B388      IN	R24,0x18
    00512 778F      ANDI	R24,0x7F
    00513 BB88      OUT	0x18,R24
(0460)  BREAKE1_L//放开刹车
    00514 9AD0      SBI	0x1A,0
    00515 B38B      IN	R24,0x1B
    00516 7F8E      ANDI	R24,0xFE
    00517 BB8B      OUT	0x1B,R24
(0461)  BREAKE2_L//放开刹车
    00518 9180 0061 LDS	R24,0x61
    0051A 6082      ORI	R24,2
    0051B 9380 0061 STS	0x61,R24
    0051D 9180 0062 LDS	R24,0x62
    0051F 7F8D      ANDI	R24,0xFD
    00520 9380 0062 STS	0x62,R24
(0462)  
(0463)  Motor1Status.s.PWM=PWM1_PIN; 
    00522 B389      IN	R24,0x19
    00523 2799      CLR	R25
    00524 7082      ANDI	R24,2
    00525 7090      ANDI	R25,0
    00526 9595      ASR	R25
    00527 9587      ROR	R24
    00528 7081      ANDI	R24,1
    00529 7090      ANDI	R25,0
    0052A 91E0 0339 LDS	R30,Motor1Status
    0052C 91F0 033A LDS	R31,Motor1Status+1
    0052E 7FEE      ANDI	R30,0xFE
    0052F 2BE8      OR	R30,R24
    00530 2BF9      OR	R31,R25
    00531 93F0 033A STS	Motor1Status+1,R31
    00533 93E0 0339 STS	Motor1Status,R30
(0464)  Motor1Status.s.DIR=DIR1_PIN;
    00535 B389      IN	R24,0x19
    00536 2799      CLR	R25
    00537 7084      ANDI	R24,4
    00538 7090      ANDI	R25,0
    00539 9595      ASR	R25
    0053A 9587      ROR	R24
    0053B 9595      ASR	R25
    0053C 9587      ROR	R24
    0053D 7081      ANDI	R24,1
    0053E 7090      ANDI	R25,0
    0053F 0F88      LSL	R24
    00540 1F99      ROL	R25
    00541 7082      ANDI	R24,2
    00542 7090      ANDI	R25,0
    00543 7FED      ANDI	R30,0xFD
    00544 2BE8      OR	R30,R24
    00545 2BF9      OR	R31,R25
    00546 93F0 033A STS	Motor1Status+1,R31
    00548 93E0 0339 STS	Motor1Status,R30
(0465)  Motor1Status.s.BrokenStop=0;
    0054A 01CF      MOVW	R24,R30
    0054B 7F8B      ANDI	R24,0xFB
    0054C 9390 033A STS	Motor1Status+1,R25
    0054E 9380 0339 STS	Motor1Status,R24
(0466)  Motor1Status.s.CommandStop=0;
    00550 7F87      ANDI	R24,0xF7
    00551 9390 033A STS	Motor1Status+1,R25
    00553 9380 0339 STS	Motor1Status,R24
(0467)  Motor1Status.s.OverCurrent=0;
    00555 7E8F      ANDI	R24,0xEF
    00556 9390 033A STS	Motor1Status+1,R25
    00558 9380 0339 STS	Motor1Status,R24
(0468)  Motor1Status.s.UnderVoltage=0;
    0055A 7D8F      ANDI	R24,0xDF
    0055B 9390 033A STS	Motor1Status+1,R25
    0055D 9380 0339 STS	Motor1Status,R24
(0469)  Motor1Status.s.StartResult=0;
    0055F 738F      ANDI	R24,0x3F
    00560 9390 033A STS	Motor1Status+1,R25
    00562 9380 0339 STS	Motor1Status,R24
(0470)  Motor1Status.s.ThisCurrent=0;
    00564 7090      ANDI	R25,0
    00565 9390 033A STS	Motor1Status+1,R25
    00567 9380 0339 STS	Motor1Status,R24
(0471)  
(0472)  Motor2Status.s.PWM=PWM2_PIN; 
    00569 B180      IN	R24,0x00
    0056A 2799      CLR	R25
    0056B 7084      ANDI	R24,4
    0056C 7090      ANDI	R25,0
    0056D 9595      ASR	R25
    0056E 9587      ROR	R24
    0056F 9595      ASR	R25
    00570 9587      ROR	R24
    00571 7081      ANDI	R24,1
    00572 7090      ANDI	R25,0
    00573 91E0 0337 LDS	R30,Motor2Status
    00575 91F0 0338 LDS	R31,Motor2Status+1
    00577 7FEE      ANDI	R30,0xFE
    00578 2BE8      OR	R30,R24
    00579 2BF9      OR	R31,R25
    0057A 93F0 0338 STS	Motor2Status+1,R31
    0057C 93E0 0337 STS	Motor2Status,R30
(0473)  Motor2Status.s.DIR=DIR2_PIN;
    0057E B180      IN	R24,0x00
    0057F 2799      CLR	R25
    00580 7081      ANDI	R24,1
    00581 7090      ANDI	R25,0
    00582 7081      ANDI	R24,1
    00583 7090      ANDI	R25,0
    00584 0F88      LSL	R24
    00585 1F99      ROL	R25
    00586 7082      ANDI	R24,2
    00587 7090      ANDI	R25,0
    00588 7FED      ANDI	R30,0xFD
    00589 2BE8      OR	R30,R24
    0058A 2BF9      OR	R31,R25
    0058B 93F0 0338 STS	Motor2Status+1,R31
    0058D 93E0 0337 STS	Motor2Status,R30
(0474)  Motor2Status.s.BrokenStop=0;
    0058F 01CF      MOVW	R24,R30
    00590 7F8B      ANDI	R24,0xFB
    00591 9390 0338 STS	Motor2Status+1,R25
    00593 9380 0337 STS	Motor2Status,R24
(0475)  Motor2Status.s.CommandStop=0;
    00595 7F87      ANDI	R24,0xF7
    00596 9390 0338 STS	Motor2Status+1,R25
    00598 9380 0337 STS	Motor2Status,R24
(0476)  Motor2Status.s.OverCurrent=0;
    0059A 7E8F      ANDI	R24,0xEF
    0059B 9390 0338 STS	Motor2Status+1,R25
    0059D 9380 0337 STS	Motor2Status,R24
(0477)  Motor2Status.s.UnderVoltage=0;
    0059F 7D8F      ANDI	R24,0xDF
    005A0 9390 0338 STS	Motor2Status+1,R25
    005A2 9380 0337 STS	Motor2Status,R24
(0478)  Motor2Status.s.StartResult=0;
    005A4 738F      ANDI	R24,0x3F
    005A5 9390 0338 STS	Motor2Status+1,R25
    005A7 9380 0337 STS	Motor2Status,R24
(0479)  Motor2Status.s.ThisCurrent=0;
    005A9 7090      ANDI	R25,0
    005AA 9390 0338 STS	Motor2Status+1,R25
    005AC 9380 0337 STS	Motor2Status,R24
(0480)  
(0481)  IntFlag=0;//无接收帧中断
    005AE 2422      CLR	R2
    005AF 9220 02B1 STS	IntFlag,R2
(0482)  DataFlag=0;//无标定系数下发 
    005B1 2433      CLR	R3
    005B2 9230 02B4 STS	DataFlag+1,R3
    005B4 9220 02B3 STS	DataFlag,R2
(0483)  coeff_len=0;
    005B6 9230 011F STS	coeff_len+1,R3
    005B8 9220 011E STS	coeff_len,R2
(0484)  coeff_count=0;//标定系数计数
    005BA 9230 011D STS	coeff_count+1,R3
    005BC 9220 011C STS	coeff_count,R2
(0485)  
(0486)  ACSR|=0x10;//清模拟比较器中断标志
    005BE 9A44      SBI	0x08,4
(0487)  ACSR&=0xf7;//关模拟比较器中断，
    005BF B188      IN	R24,0x08
    005C0 7F87      ANDI	R24,0xF7
    005C1 B988      OUT	0x08,R24
(0488)  ACSR|=0x02;//开模拟比较器,AIN1连到比较器负极，0:比较器输出变化即中断，1：保留，2：下降沿中断，3:上升沿中断       
    005C2 9A41      SBI	0x08,1
(0489)  ACSR|=0x08;//开模拟比较器中断，任何时候都要进行欠压监测	
    005C3 9A43      SBI	0x08,3
(0490)  ACSR|=0x10;//清模拟比较器中断标志	
    005C4 9A44      SBI	0x08,4
(0491) 	
(0492) 
(0493)  EIFR|=0x08;//清INT3中断标志,每位控制一个中断，可控制8个中断
    005C5 B788      IN	R24,0x38
    005C6 6088      ORI	R24,0x8
    005C7 BF88      OUT	0x38,R24
(0494)  EICRA|=0xc0; //INT3上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发
    005C8 9180 006A LDS	R24,0x6A
    005CA 6C80      ORI	R24,0xC0
    005CB 9380 006A STS	0x6A,R24
(0495)  EIMSK|=0x08;//使能INT3中断 ,每位控制一个中断，可控制8个中断
    005CD B789      IN	R24,0x39
    005CE 6088      ORI	R24,0x8
    005CF BF89      OUT	0x39,R24
(0496)  
(0497)  SREG=0x80;//总中断使能
    005D0 E880      LDI	R24,0x80
    005D1 BF8F      OUT	0x3F,R24
(0498)  
(0499)  M1_H
    005D2 9A92      SBI	0x12,2
(0500)  CheckMotor(50);
    005D3 E302      LDI	R16,0x32
    005D4 E010      LDI	R17,0
    005D5 DD74      RCALL	_CheckMotor
(0501)  M1_L
    005D6 B382      IN	R24,0x12
    005D7 7F8B      ANDI	R24,0xFB
    005D8 BB82      OUT	0x12,R24
    005D9 9508      RET
(0502)  
(0503) }
(0504) 
(0505) void Gear2Thr(void)
(0506) {
(0507) //将电机过流档位换算为数字量，方便中断函数中进行比较运算
(0508)   if(Motor1Gear<1) {Motor1Gear=1;}//堵转电流最小为1档
_Gear2Thr:
    005DA 9180 0336 LDS	R24,Motor1Gear
    005DC 3081      CPI	R24,1
    005DD F418      BCC	0x05E1
    005DE E081      LDI	R24,1
    005DF 9380 0336 STS	Motor1Gear,R24
(0509)   if(Motor1Gear>6) {Motor1Gear=6;}//堵转电流最大为6档
    005E1 E086      LDI	R24,6
    005E2 9020 0336 LDS	R2,Motor1Gear
    005E4 1582      CP	R24,R2
    005E5 F410      BCC	0x05E8
    005E6 9380 0336 STS	Motor1Gear,R24
(0510)   if(Motor2Gear<1) {Motor2Gear=6;}//堵转电流最小为1档
    005E8 9180 0335 LDS	R24,Motor2Gear
    005EA 3081      CPI	R24,1
    005EB F418      BCC	0x05EF
    005EC E086      LDI	R24,6
    005ED 9380 0335 STS	Motor2Gear,R24
(0511)   if(Motor2Gear>6) {Motor2Gear=6;}//堵转电流最大为6档
    005EF E086      LDI	R24,6
    005F0 9020 0335 LDS	R2,Motor2Gear
    005F2 1582      CP	R24,R2
    005F3 F410      BCC	0x05F6
    005F4 9380 0335 STS	Motor2Gear,R24
(0512)   //第1档从100mA起步，每档差值30mA,7.721/10mA，第6档约250mA
(0513)   Motor1Thr= 78+ (Motor1Gear-1)*23;
    005F6 9110 0336 LDS	R17,Motor1Gear
    005F8 E107      LDI	R16,0x17
    005F9 0301      MULSU	R16,R17
    005FA 2D80      MOV	R24,R0
    005FB 5187      SUBI	R24,0x17
    005FC 5B82      SUBI	R24,0xB2
    005FD 9380 0334 STS	Motor1Thr,R24
(0514)   Motor2Thr= 78+ (Motor2Gear-1)*23;
    005FF 9110 0335 LDS	R17,Motor2Gear
    00601 0301      MULSU	R16,R17
    00602 2D80      MOV	R24,R0
    00603 5187      SUBI	R24,0x17
    00604 5B82      SUBI	R24,0xB2
    00605 9380 0333 STS	Motor2Thr,R24
(0515)   
(0516)   if(MotorIdelGear<1){MotorIdelGear=1;}//电机断路电流最小1档
    00607 9180 0332 LDS	R24,MotorIdelGear
    00609 3081      CPI	R24,1
    0060A F418      BCC	0x060E
    0060B E081      LDI	R24,1
    0060C 9380 0332 STS	MotorIdelGear,R24
(0517)   if(MotorIdelGear>6){MotorIdelGear=6;}//电机断路电流最大6档
    0060E E086      LDI	R24,6
    0060F 9020 0332 LDS	R2,MotorIdelGear
    00611 1582      CP	R24,R2
    00612 F410      BCC	0x0615
    00613 9380 0332 STS	MotorIdelGear,R24
(0518)   //从10mA起步，最大60mA
(0519)   MotorIdelCur=(MotorIdelGear-1)*8+8;
    00615 9180 0332 LDS	R24,MotorIdelGear
    00617 5081      SUBI	R24,1
    00618 0F88      LSL	R24
    00619 0F88      LSL	R24
    0061A 0F88      LSL	R24
    0061B 5F88      SUBI	R24,0xF8
    0061C 9380 0331 STS	MotorIdelCur,R24
    0061E 9508      RET
_main:
  l                    --> Y,+5
  pt                   --> Y,+2
  mk                   --> Y,+2
  at                   --> Y,+2
  add                  --> Y,+2
  j                    --> R12
  TestDataBlockCount   --> R12
  TestDataBlockIndex   --> R10
  f                    --> Y,+1
  i                    --> R10
    0061F 9729      SBIW	R28,0x9
(0520)   
(0521) }
(0522) 
(0523) void main(void)
(0524) { 
(0525)   unsigned char i;
(0526)   unsigned int add,at,mk,pt,j;
(0527)   unsigned long l;
(0528)   unsigned int TestDataBlockIndex,TestDataBlockCount;
(0529)   float f;
(0530)  
(0531)   Start();
    00620 DED5      RCALL	_Start
(0532)   
(0533)   CheckMotor(50); 
    00621 E302      LDI	R16,0x32
    00622 E010      LDI	R17,0
    00623 DD26      RCALL	_CheckMotor
(0534)   
(0535)   Motor1Gear=EEPROM_read(0);
    00624 2700      CLR	R16
    00625 2711      CLR	R17
    00626 940E 2242 CALL	_EEPROM_read
    00628 9300 0336 STS	Motor1Gear,R16
(0536)   Motor2Gear=EEPROM_read(1);
    0062A E001      LDI	R16,1
    0062B E010      LDI	R17,0
    0062C 940E 2242 CALL	_EEPROM_read
    0062E 9300 0335 STS	Motor2Gear,R16
(0537)   MotorIdelCur=EEPROM_read(2);
    00630 E002      LDI	R16,2
    00631 E010      LDI	R17,0
    00632 940E 2242 CALL	_EEPROM_read
    00634 2EA0      MOV	R10,R16
    00635 92A0 0331 STS	MotorIdelCur,R10
(0538)   Gear2Thr();
    00637 DFA2      RCALL	_Gear2Thr
(0539)   
(0540)   //采集总线电压，判断是否进入存储状态  
(0541)   if(SampleADC(5)<45)//Cable端的电压低于30V 
    00638 E005      LDI	R16,5
    00639 DCA3      RCALL	_SampleADC
    0063A 2EA0      MOV	R10,R16
    0063B 320D      CPI	R16,0x2D
    0063C F010      BCS	0x063F
    0063D 940C 1BB5 JMP	0x1BB5
(0542) 	{	  UCSR0B = 0x00;
    0063F 2422      CLR	R2
    00640 B82A      OUT	0x0A,R2
(0543) 	      PORTE&=0xFD;
    00641 B183      IN	R24,0x03
    00642 7F8D      ANDI	R24,0xFD
    00643 B983      OUT	0x03,R24
(0544) 		  DDRE|=0x02;
    00644 9A11      SBI	0x02,1
(0545) 		  PORTE&=0xFD;	 
    00645 B183      IN	R24,0x03
    00646 7F8D      ANDI	R24,0xFD
    00647 B983      OUT	0x03,R24
(0546) 		  while(1); 
    00648 CFFF      RJMP	0x0648
(0547) 	}
(0548) 	     
(0549) while(1)//若Cable端为高电压，则进入正常的通讯状态
(0550) { 
(0551)    CheckMotor(0);//实时进行电机过流检测
    00649 2700      CLR	R16
    0064A 2711      CLR	R17
    0064B DCFE      RCALL	_CheckMotor
(0552) 
(0553)    if(IntFlag==2)//校验位错误，不上传任何响应，上位机按超时处理
    0064C 9180 02B1 LDS	R24,IntFlag
    0064E 3082      CPI	R24,2
    0064F F459      BNE	0x065B
(0554)    { 
(0555) 	IntFlag=0;//无命令帧
    00650 2422      CLR	R2
    00651 9220 02B1 STS	IntFlag,R2
(0556) 	EIFR|=0x08;//清INT3中断标志
    00653 B788      IN	R24,0x38
    00654 6088      ORI	R24,0x8
    00655 BF88      OUT	0x38,R24
(0557)     EIMSK|=0x08;//使能INT3中断	 
    00656 B789      IN	R24,0x39
    00657 6088      ORI	R24,0x8
    00658 BF89      OUT	0x39,R24
(0558)    }
    00659 940C 1BB5 JMP	0x1BB5
(0559)    else if(IntFlag==1)//接收到了正常命令帧
    0065B 9180 02B1 LDS	R24,IntFlag
    0065D 3081      CPI	R24,1
    0065E F011      BEQ	0x0661
    0065F 940C 1BB5 JMP	0x1BB5
(0560)    {
(0561) 	if(DataFlag)
    00661 9020 02B3 LDS	R2,DataFlag
    00663 9030 02B4 LDS	R3,DataFlag+1
    00665 2022      TST	R2
    00666 F419      BNE	0x066A
    00667 2033      TST	R3
    00668 F409      BNE	0x066A
    00669 C4B9      RJMP	0x0B23
(0562)      { 		  
(0563) 	  coeffdata[coeff_count]=R_dat;
    0066A E68B      LDI	R24,0x6B
    0066B E091      LDI	R25,1
    0066C 91E0 011C LDS	R30,coeff_count
    0066E 91F0 011D LDS	R31,coeff_count+1
    00670 0FE8      ADD	R30,R24
    00671 1FF9      ADC	R31,R25
    00672 9020 02CD LDS	R2,R_dat
    00674 9030 02CE LDS	R3,R_dat+1
    00676 8220      ST	Z,R2
(0564) 	  coeff_count++;	  
    00677 9180 011C LDS	R24,coeff_count
    00679 9190 011D LDS	R25,coeff_count+1
    0067B 9601      ADIW	R24,1
    0067C 9390 011D STS	coeff_count+1,R25
    0067E 9380 011C STS	coeff_count,R24
(0565)  
(0566) 	  if(coeff_count==coeff_len)
    00680 9020 011E LDS	R2,coeff_len
    00682 9030 011F LDS	R3,coeff_len+1
    00684 1582      CP	R24,R2
    00685 0593      CPC	R25,R3
    00686 F011      BEQ	0x0689
    00687 940C 1BAC JMP	0x1BAC
(0567) 	  {
(0568) 		if(DataFlag==1)//下发压力温度系数
    00689 9180 02B3 LDS	R24,DataFlag
    0068B 9190 02B4 LDS	R25,DataFlag+1
    0068D 3081      CPI	R24,1
    0068E E0E0      LDI	R30,0
    0068F 079E      CPC	R25,R30
    00690 F009      BEQ	0x0692
    00691 C0E5      RJMP	0x0777
(0569)    	    {
(0570) 		 Uart0TxData[0]=0xE8;
    00692 EE88      LDI	R24,0xE8
    00693 9380 0121 STS	Uart0TxData,R24
(0571) 		 Uart0TxData[1]=0x40;
    00695 E480      LDI	R24,0x40
    00696 9380 0122 STS	Uart0TxData+1,R24
(0572) 		 Uart0TxData[2]=0x88;
    00698 E888      LDI	R24,0x88
    00699 9380 0123 STS	Uart0TxData+2,R24
(0573) 		 Uart0TxData[3]=0;//压力温度系数包0
    0069B 2422      CLR	R2
    0069C 9220 0124 STS	Uart0TxData+3,R2
(0574) 		 Uart0TxData[4]=0x21;
    0069E E281      LDI	R24,0x21
    0069F 9380 0125 STS	Uart0TxData+4,R24
(0575) 		 Uart0TxData[5]=0x22;
    006A1 E282      LDI	R24,0x22
    006A2 9380 0126 STS	Uart0TxData+5,R24
(0576) 		 Uart0TxData[6]=0x23;
    006A4 E283      LDI	R24,0x23
    006A5 9380 0127 STS	Uart0TxData+6,R24
(0577) 		 Uart0TxData[7]=0x24;
    006A7 E284      LDI	R24,0x24
    006A8 9380 0128 STS	Uart0TxData+7,R24
(0578) 		 Uart0TxData[8]=0x32;	 
    006AA E382      LDI	R24,0x32
    006AB 9380 0129 STS	Uart0TxData+8,R24
(0579) 		 for(k=0;k<64;k++)
    006AD 2433      CLR	R3
    006AE 9230 02AE STS	k+1,R3
    006B0 9220 02AD STS	k,R2
    006B2 C01A      RJMP	0x06CD
(0580) 		 {
(0581) 		 Uart0TxData[9+k]=coeffdata[k];  
    006B3 90A0 02AD LDS	R10,k
    006B5 90B0 02AE LDS	R11,k+1
    006B7 E68B      LDI	R24,0x6B
    006B8 E091      LDI	R25,1
    006B9 01F5      MOVW	R30,R10
    006BA 0FE8      ADD	R30,R24
    006BB 1FF9      ADC	R31,R25
    006BC 8020      LD	R2,Z
    006BD E281      LDI	R24,0x21
    006BE E091      LDI	R25,1
    006BF 01F5      MOVW	R30,R10
    006C0 9639      ADIW	R30,0x9
    006C1 0FE8      ADD	R30,R24
    006C2 1FF9      ADC	R31,R25
    006C3 8220      ST	Z,R2
    006C4 9180 02AD LDS	R24,k
    006C6 9190 02AE LDS	R25,k+1
    006C8 9601      ADIW	R24,1
    006C9 9390 02AE STS	k+1,R25
    006CB 9380 02AD STS	k,R24
    006CD 9180 02AD LDS	R24,k
    006CF 9190 02AE LDS	R25,k+1
    006D1 3480      CPI	R24,0x40
    006D2 E0E0      LDI	R30,0
    006D3 079E      CPC	R25,R30
    006D4 F2F0      BCS	0x06B3
(0582) 		 }		 
(0583) 		 SendUart0_2(74,20);//超时160ms
    006D5 E124      LDI	R18,0x14
    006D6 E030      LDI	R19,0
    006D7 E40A      LDI	R16,0x4A
    006D8 DA33      RCALL	_SendUart0_2
(0584) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    006D9 9180 02E3 LDS	R24,Uart0RxCounter
    006DB 3089      CPI	R24,0x9
    006DC F4B1      BNE	0x06F3
    006DD 9180 02E4 LDS	R24,Uart0RxData
    006DF 3585      CPI	R24,0x55
    006E0 F491      BNE	0x06F3
    006E1 9180 02E5 LDS	R24,Uart0RxData+1
    006E3 3480      CPI	R24,0x40
    006E4 F471      BNE	0x06F3
    006E5 9180 02E6 LDS	R24,Uart0RxData+2
    006E7 3888      CPI	R24,0x88
    006E8 F451      BNE	0x06F3
(0585) 		 {T_dat&=0xff00; }
    006E9 9180 02CF LDS	R24,T_dat
    006EB 9190 02D0 LDS	R25,T_dat+1
    006ED 7080      ANDI	R24,0
    006EE 9390 02D0 STS	T_dat+1,R25
    006F0 9380 02CF STS	T_dat,R24
    006F2 C006      RJMP	0x06F9
(0586) 		 else
(0587) 		 {T_dat=0x00aa; }
    006F3 EA8A      LDI	R24,0xAA
    006F4 E090      LDI	R25,0
    006F5 9390 02D0 STS	T_dat+1,R25
    006F7 9380 02CF STS	T_dat,R24
(0588) 		 
(0589) 		 Uart0TxData[0]=0xE8;
    006F9 EE88      LDI	R24,0xE8
    006FA 9380 0121 STS	Uart0TxData,R24
(0590) 		 Uart0TxData[1]=0x40;
    006FC E480      LDI	R24,0x40
    006FD 9380 0122 STS	Uart0TxData+1,R24
(0591) 		 Uart0TxData[2]=0x88;
    006FF E888      LDI	R24,0x88
    00700 9380 0123 STS	Uart0TxData+2,R24
(0592) 		 Uart0TxData[3]=1;//压力温度系数包1
    00702 E081      LDI	R24,1
    00703 9380 0124 STS	Uart0TxData+3,R24
(0593) 		 Uart0TxData[4]=0x21;
    00705 E281      LDI	R24,0x21
    00706 9380 0125 STS	Uart0TxData+4,R24
(0594) 		 Uart0TxData[5]=0x22;
    00708 E282      LDI	R24,0x22
    00709 9380 0126 STS	Uart0TxData+5,R24
(0595) 		 Uart0TxData[6]=0x23;
    0070B E283      LDI	R24,0x23
    0070C 9380 0127 STS	Uart0TxData+6,R24
(0596) 		 Uart0TxData[7]=0x24;
    0070E E284      LDI	R24,0x24
    0070F 9380 0128 STS	Uart0TxData+7,R24
(0597) 		 Uart0TxData[8]=0x32;	 
    00711 E382      LDI	R24,0x32
    00712 9380 0129 STS	Uart0TxData+8,R24
(0598) 		 for(k=0;k<64;k++)
    00714 2422      CLR	R2
    00715 2433      CLR	R3
    00716 9230 02AE STS	k+1,R3
    00718 9220 02AD STS	k,R2
    0071A C01C      RJMP	0x0737
(0599) 		 {
(0600) 		 Uart0TxData[9+k]=coeffdata[k+64];  
    0071B 90A0 02AD LDS	R10,k
    0071D 90B0 02AE LDS	R11,k+1
    0071F E68B      LDI	R24,0x6B
    00720 E091      LDI	R25,1
    00721 01F5      MOVW	R30,R10
    00722 5CE0      SUBI	R30,0xC0
    00723 4FFF      SBCI	R31,0xFF
    00724 0FE8      ADD	R30,R24
    00725 1FF9      ADC	R31,R25
    00726 8020      LD	R2,Z
    00727 E281      LDI	R24,0x21
    00728 E091      LDI	R25,1
    00729 01F5      MOVW	R30,R10
    0072A 9639      ADIW	R30,0x9
    0072B 0FE8      ADD	R30,R24
    0072C 1FF9      ADC	R31,R25
    0072D 8220      ST	Z,R2
    0072E 9180 02AD LDS	R24,k
    00730 9190 02AE LDS	R25,k+1
    00732 9601      ADIW	R24,1
    00733 9390 02AE STS	k+1,R25
    00735 9380 02AD STS	k,R24
    00737 9180 02AD LDS	R24,k
    00739 9190 02AE LDS	R25,k+1
    0073B 3480      CPI	R24,0x40
    0073C E0E0      LDI	R30,0
    0073D 079E      CPC	R25,R30
    0073E F2E0      BCS	0x071B
(0601) 		 }		 
(0602) 		 SendUart0_2(74,20);//超时160ms
    0073F E124      LDI	R18,0x14
    00740 E030      LDI	R19,0
    00741 E40A      LDI	R16,0x4A
    00742 D9C9      RCALL	_SendUart0_2
(0603) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00743 9180 02E3 LDS	R24,Uart0RxCounter
    00745 3089      CPI	R24,0x9
    00746 F4B1      BNE	0x075D
    00747 9180 02E4 LDS	R24,Uart0RxData
    00749 3585      CPI	R24,0x55
    0074A F491      BNE	0x075D
    0074B 9180 02E5 LDS	R24,Uart0RxData+1
    0074D 3480      CPI	R24,0x40
    0074E F471      BNE	0x075D
    0074F 9180 02E6 LDS	R24,Uart0RxData+2
    00751 3888      CPI	R24,0x88
    00752 F451      BNE	0x075D
(0604) 		 {T_dat&=0x00ff; }
    00753 9180 02CF LDS	R24,T_dat
    00755 9190 02D0 LDS	R25,T_dat+1
    00757 7090      ANDI	R25,0
    00758 9390 02D0 STS	T_dat+1,R25
    0075A 9380 02CF STS	T_dat,R24
    0075C C009      RJMP	0x0766
(0605) 		 else
(0606) 		 {T_dat|=0x5500; }
    0075D 9180 02CF LDS	R24,T_dat
    0075F 9190 02D0 LDS	R25,T_dat+1
    00761 6595      ORI	R25,0x55
    00762 9390 02D0 STS	T_dat+1,R25
    00764 9380 02CF STS	T_dat,R24
(0607) 		 
(0608) 		 DataFlag=0;
    00766 2422      CLR	R2
    00767 2433      CLR	R3
    00768 9230 02B4 STS	DataFlag+1,R3
    0076A 9220 02B3 STS	DataFlag,R2
(0609) 		 coeff_len=0;	
    0076C 9230 011F STS	coeff_len+1,R3
    0076E 9220 011E STS	coeff_len,R2
(0610) 		 T_com=0x0A;
    00770 E08A      LDI	R24,0xA
    00771 9380 02CC STS	T_com,R24
(0611) 		 SendManchester();		
    00773 940E 1E37 CALL	_SendManchester
(0612) 		}
    00775 940C 1BAC JMP	0x1BAC
(0613) 		else if(DataFlag==2)//下发流量系数
    00777 9180 02B3 LDS	R24,DataFlag
    00779 9190 02B4 LDS	R25,DataFlag+1
    0077B 3082      CPI	R24,2
    0077C E0E0      LDI	R30,0
    0077D 079E      CPC	R25,R30
    0077E F009      BEQ	0x0780
    0077F C0E6      RJMP	0x0866
(0614) 		{
(0615) 		  Uart0TxData[0]=0xE8;
    00780 EE88      LDI	R24,0xE8
    00781 9380 0121 STS	Uart0TxData,R24
(0616) 		 Uart0TxData[1]=0x40;
    00783 E480      LDI	R24,0x40
    00784 9380 0122 STS	Uart0TxData+1,R24
(0617) 		 Uart0TxData[2]=0x88;
    00786 E888      LDI	R24,0x88
    00787 9380 0123 STS	Uart0TxData+2,R24
(0618) 		 Uart0TxData[3]=2;//流量系数包2
    00789 E082      LDI	R24,2
    0078A 9380 0124 STS	Uart0TxData+3,R24
(0619) 		 Uart0TxData[4]=0x21;
    0078C E281      LDI	R24,0x21
    0078D 9380 0125 STS	Uart0TxData+4,R24
(0620) 		 Uart0TxData[5]=0x22;
    0078F E282      LDI	R24,0x22
    00790 9380 0126 STS	Uart0TxData+5,R24
(0621) 		 Uart0TxData[6]=0x23;
    00792 E283      LDI	R24,0x23
    00793 9380 0127 STS	Uart0TxData+6,R24
(0622) 		 Uart0TxData[7]=0x24;
    00795 E284      LDI	R24,0x24
    00796 9380 0128 STS	Uart0TxData+7,R24
(0623) 		 Uart0TxData[8]=0x32;	 
    00798 E382      LDI	R24,0x32
    00799 9380 0129 STS	Uart0TxData+8,R24
(0624) 		 for(k=0;k<64;k++)
    0079B 2422      CLR	R2
    0079C 2433      CLR	R3
    0079D 9230 02AE STS	k+1,R3
    0079F 9220 02AD STS	k,R2
    007A1 C01A      RJMP	0x07BC
(0625) 		 {
(0626) 		 Uart0TxData[9+k]=coeffdata[k];  
    007A2 90A0 02AD LDS	R10,k
    007A4 90B0 02AE LDS	R11,k+1
    007A6 E68B      LDI	R24,0x6B
    007A7 E091      LDI	R25,1
    007A8 01F5      MOVW	R30,R10
    007A9 0FE8      ADD	R30,R24
    007AA 1FF9      ADC	R31,R25
    007AB 8020      LD	R2,Z
    007AC E281      LDI	R24,0x21
    007AD E091      LDI	R25,1
    007AE 01F5      MOVW	R30,R10
    007AF 9639      ADIW	R30,0x9
    007B0 0FE8      ADD	R30,R24
    007B1 1FF9      ADC	R31,R25
    007B2 8220      ST	Z,R2
    007B3 9180 02AD LDS	R24,k
    007B5 9190 02AE LDS	R25,k+1
    007B7 9601      ADIW	R24,1
    007B8 9390 02AE STS	k+1,R25
    007BA 9380 02AD STS	k,R24
    007BC 9180 02AD LDS	R24,k
    007BE 9190 02AE LDS	R25,k+1
    007C0 3480      CPI	R24,0x40
    007C1 E0E0      LDI	R30,0
    007C2 079E      CPC	R25,R30
    007C3 F2F0      BCS	0x07A2
(0627) 		 }		 
(0628) 		 SendUart0_2(74,20);//超时160ms
    007C4 E124      LDI	R18,0x14
    007C5 E030      LDI	R19,0
    007C6 E40A      LDI	R16,0x4A
    007C7 D944      RCALL	_SendUart0_2
(0629) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    007C8 9180 02E3 LDS	R24,Uart0RxCounter
    007CA 3089      CPI	R24,0x9
    007CB F4B1      BNE	0x07E2
    007CC 9180 02E4 LDS	R24,Uart0RxData
    007CE 3585      CPI	R24,0x55
    007CF F491      BNE	0x07E2
    007D0 9180 02E5 LDS	R24,Uart0RxData+1
    007D2 3480      CPI	R24,0x40
    007D3 F471      BNE	0x07E2
    007D4 9180 02E6 LDS	R24,Uart0RxData+2
    007D6 3888      CPI	R24,0x88
    007D7 F451      BNE	0x07E2
(0630) 		 {T_dat&=0xff00; }
    007D8 9180 02CF LDS	R24,T_dat
    007DA 9190 02D0 LDS	R25,T_dat+1
    007DC 7080      ANDI	R24,0
    007DD 9390 02D0 STS	T_dat+1,R25
    007DF 9380 02CF STS	T_dat,R24
    007E1 C006      RJMP	0x07E8
(0631) 		 else
(0632) 		 {T_dat=0x00aa; }
    007E2 EA8A      LDI	R24,0xAA
    007E3 E090      LDI	R25,0
    007E4 9390 02D0 STS	T_dat+1,R25
    007E6 9380 02CF STS	T_dat,R24
(0633) 		 
(0634) 		 Uart0TxData[0]=0xE8;
    007E8 EE88      LDI	R24,0xE8
    007E9 9380 0121 STS	Uart0TxData,R24
(0635) 		 Uart0TxData[1]=0x40;
    007EB E480      LDI	R24,0x40
    007EC 9380 0122 STS	Uart0TxData+1,R24
(0636) 		 Uart0TxData[2]=0x88;
    007EE E888      LDI	R24,0x88
    007EF 9380 0123 STS	Uart0TxData+2,R24
(0637) 		 Uart0TxData[3]=3;//流量系数包3
    007F1 E083      LDI	R24,3
    007F2 9380 0124 STS	Uart0TxData+3,R24
(0638) 		 Uart0TxData[4]=0x21;
    007F4 E281      LDI	R24,0x21
    007F5 9380 0125 STS	Uart0TxData+4,R24
(0639) 		 Uart0TxData[5]=0x22;
    007F7 E282      LDI	R24,0x22
    007F8 9380 0126 STS	Uart0TxData+5,R24
(0640) 		 Uart0TxData[6]=0x23;
    007FA E283      LDI	R24,0x23
    007FB 9380 0127 STS	Uart0TxData+6,R24
(0641) 		 Uart0TxData[7]=0x24;
    007FD E284      LDI	R24,0x24
    007FE 9380 0128 STS	Uart0TxData+7,R24
(0642) 		 Uart0TxData[8]=0x32;	 
    00800 E382      LDI	R24,0x32
    00801 9380 0129 STS	Uart0TxData+8,R24
(0643) 		 for(k=0;k<64;k++)
    00803 2422      CLR	R2
    00804 2433      CLR	R3
    00805 9230 02AE STS	k+1,R3
    00807 9220 02AD STS	k,R2
    00809 C01C      RJMP	0x0826
(0644) 		 {
(0645) 		 Uart0TxData[9+k]=coeffdata[k+64];  
    0080A 90A0 02AD LDS	R10,k
    0080C 90B0 02AE LDS	R11,k+1
    0080E E68B      LDI	R24,0x6B
    0080F E091      LDI	R25,1
    00810 01F5      MOVW	R30,R10
    00811 5CE0      SUBI	R30,0xC0
    00812 4FFF      SBCI	R31,0xFF
    00813 0FE8      ADD	R30,R24
    00814 1FF9      ADC	R31,R25
    00815 8020      LD	R2,Z
    00816 E281      LDI	R24,0x21
    00817 E091      LDI	R25,1
    00818 01F5      MOVW	R30,R10
    00819 9639      ADIW	R30,0x9
    0081A 0FE8      ADD	R30,R24
    0081B 1FF9      ADC	R31,R25
    0081C 8220      ST	Z,R2
    0081D 9180 02AD LDS	R24,k
    0081F 9190 02AE LDS	R25,k+1
    00821 9601      ADIW	R24,1
    00822 9390 02AE STS	k+1,R25
    00824 9380 02AD STS	k,R24
    00826 9180 02AD LDS	R24,k
    00828 9190 02AE LDS	R25,k+1
    0082A 3480      CPI	R24,0x40
    0082B E0E0      LDI	R30,0
    0082C 079E      CPC	R25,R30
    0082D F2E0      BCS	0x080A
(0646) 		 }		 
(0647) 		 SendUart0_2(74,20);//超时160ms
    0082E E124      LDI	R18,0x14
    0082F E030      LDI	R19,0
    00830 E40A      LDI	R16,0x4A
    00831 D8DA      RCALL	_SendUart0_2
(0648) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00832 9180 02E3 LDS	R24,Uart0RxCounter
    00834 3089      CPI	R24,0x9
    00835 F4B1      BNE	0x084C
    00836 9180 02E4 LDS	R24,Uart0RxData
    00838 3585      CPI	R24,0x55
    00839 F491      BNE	0x084C
    0083A 9180 02E5 LDS	R24,Uart0RxData+1
    0083C 3480      CPI	R24,0x40
    0083D F471      BNE	0x084C
    0083E 9180 02E6 LDS	R24,Uart0RxData+2
    00840 3888      CPI	R24,0x88
    00841 F451      BNE	0x084C
(0649) 		 {T_dat&=0x00ff; }
    00842 9180 02CF LDS	R24,T_dat
    00844 9190 02D0 LDS	R25,T_dat+1
    00846 7090      ANDI	R25,0
    00847 9390 02D0 STS	T_dat+1,R25
    00849 9380 02CF STS	T_dat,R24
    0084B C009      RJMP	0x0855
(0650) 		 else
(0651) 		 {T_dat|=0x5500; }
    0084C 9180 02CF LDS	R24,T_dat
    0084E 9190 02D0 LDS	R25,T_dat+1
    00850 6595      ORI	R25,0x55
    00851 9390 02D0 STS	T_dat+1,R25
    00853 9380 02CF STS	T_dat,R24
(0652) 		 
(0653) 		 DataFlag=0;
    00855 2422      CLR	R2
    00856 2433      CLR	R3
    00857 9230 02B4 STS	DataFlag+1,R3
    00859 9220 02B3 STS	DataFlag,R2
(0654) 		 coeff_len=0;	
    0085B 9230 011F STS	coeff_len+1,R3
    0085D 9220 011E STS	coeff_len,R2
(0655) 		 T_com=0x0B;
    0085F E08B      LDI	R24,0xB
    00860 9380 02CC STS	T_com,R24
(0656) 		 SendManchester();		
    00862 940E 1E37 CALL	_SendManchester
(0657) 		}	
    00864 940C 1BAC JMP	0x1BAC
(0658) 		else if(DataFlag==3)//提取测试数据
    00866 9180 02B3 LDS	R24,DataFlag
    00868 9190 02B4 LDS	R25,DataFlag+1
    0086A 3083      CPI	R24,3
    0086B E0E0      LDI	R30,0
    0086C 079E      CPC	R25,R30
    0086D F009      BEQ	0x086F
    0086E C0A4      RJMP	0x0913
(0659) 		{
(0660) 		 DataFlag=0;
    0086F 2422      CLR	R2
    00870 2433      CLR	R3
    00871 9230 02B4 STS	DataFlag+1,R3
    00873 9220 02B3 STS	DataFlag,R2
(0661) 		 coeff_len=0;	
    00875 9230 011F STS	coeff_len+1,R3
    00877 9220 011E STS	coeff_len,R2
(0662) 		 T_com=0x09;
    00879 E089      LDI	R24,0x9
    0087A 9380 02CC STS	T_com,R24
(0663) 		 TestDataBlockIndex=coeffdata[1];
    0087C 90A0 016C LDS	R10,coeffdata+1
    0087E 24BB      CLR	R11
(0664) 		 TestDataBlockIndex<<=8;
    0087F 2CBA      MOV	R11,R10
    00880 24AA      CLR	R10
(0665) 		 TestDataBlockIndex|=coeffdata[0];//首块地址/索引
    00881 9020 016B LDS	R2,coeffdata
    00883 2433      CLR	R3
    00884 28A2      OR	R10,R2
    00885 28B3      OR	R11,R3
(0666) 		 TestDataBlockCount=coeffdata[3];
    00886 90C0 016E LDS	R12,coeffdata+3
    00888 24DD      CLR	R13
(0667) 		 TestDataBlockCount<<=8;
    00889 2CDC      MOV	R13,R12
    0088A 24CC      CLR	R12
(0668) 		 TestDataBlockCount|=coeffdata[2];//需提取的总包数，每包64字节，每块4096字节共64包
    0088B 9020 016D LDS	R2,coeffdata+2
    0088D 2433      CLR	R3
    0088E 28C2      OR	R12,R2
    0088F 28D3      OR	R13,R3
(0669) 		 
(0670) 		 for(k=0;k<TestDataBlockCount;k++)//按用户要求分包进行上传，每包64字节传32帧
    00890 2422      CLR	R2
    00891 9230 02AE STS	k+1,R3
    00893 9220 02AD STS	k,R2
    00895 C073      RJMP	0x0909
(0671) 		 {
(0672) 		   Uart0TxData[0]=0xE8;
    00896 EE88      LDI	R24,0xE8
    00897 9380 0121 STS	Uart0TxData,R24
(0673) 		   Uart0TxData[1]=0x40;
    00899 E480      LDI	R24,0x40
    0089A 9380 0122 STS	Uart0TxData+1,R24
(0674) 		   Uart0TxData[2]=0x9A;//读测试数据
    0089C E98A      LDI	R24,0x9A
    0089D 9380 0123 STS	Uart0TxData+2,R24
(0675) 		   Uart0TxData[3]=8;
    0089F E088      LDI	R24,0x8
    008A0 9380 0124 STS	Uart0TxData+3,R24
(0676) 		   
(0677) 		   //统一块索引
(0678) 		   Uart0TxData[4]=(k); 	
    008A2 9020 02AD LDS	R2,k
    008A4 9030 02AE LDS	R3,k+1
    008A6 9220 0125 STS	Uart0TxData+4,R2
(0679) 		   Uart0TxData[5]=(k>>8); 	//包索引	
    008A8 2C23      MOV	R2,R3
    008A9 2433      CLR	R3
    008AA 9220 0126 STS	Uart0TxData+5,R2
(0680) 		   Uart0TxData[6]=(TestDataBlockIndex);
    008AC 92A0 0127 STS	Uart0TxData+6,R10
(0681) 		   Uart0TxData[7]=(TestDataBlockIndex>>8);//首块索引
    008AE 0115      MOVW	R2,R10
    008AF 2C23      MOV	R2,R3
    008B0 2433      CLR	R3
    008B1 9220 0128 STS	Uart0TxData+7,R2
(0682) 		   
(0683) 		   /*
(0684) 		   // 单独块索引
(0685) 		   Uart0TxData[4]=(k%8); 	
(0686) 		   Uart0TxData[5]=0; 	//包索引	
(0687) 		   Uart0TxData[6]=(TestDataBlockIndex+k/8);
(0688) 		   Uart0TxData[7]=((TestDataBlockIndex+k/8)>>8);//首块索引
(0689) 		   */
(0690) 		   
(0691) 		   SendUart0_2(9,6);//超时48ms
    008B3 E026      LDI	R18,6
    008B4 E030      LDI	R19,0
    008B5 E009      LDI	R16,0x9
    008B6 D855      RCALL	_SendUart0_2
(0692) 		   for(bf=0;bf<32;bf++)
    008B7 2422      CLR	R2
    008B8 2433      CLR	R3
    008B9 9230 0119 STS	bf+1,R3
    008BB 9220 0118 STS	bf,R2
    008BD C039      RJMP	0x08F7
(0693) 		   {	   	
(0694) 		 	T_dat=Uart0RxData[bf*2+1];//高字节
    008BE EE84      LDI	R24,0xE4
    008BF E092      LDI	R25,2
    008C0 91E0 0118 LDS	R30,bf
    008C2 91F0 0119 LDS	R31,bf+1
    008C4 0FEE      LSL	R30
    008C5 1FFF      ROL	R31
    008C6 9631      ADIW	R30,1
    008C7 0FE8      ADD	R30,R24
    008C8 1FF9      ADC	R31,R25
    008C9 8020      LD	R2,Z
    008CA 2433      CLR	R3
    008CB 9230 02D0 STS	T_dat+1,R3
    008CD 9220 02CF STS	T_dat,R2
(0695) 		 	T_dat<<=8;
    008CF 2C32      MOV	R3,R2
    008D0 2422      CLR	R2
    008D1 9230 02D0 STS	T_dat+1,R3
    008D3 9220 02CF STS	T_dat,R2
(0696) 		 	T_dat|=Uart0RxData[bf*2+0];//低字节
    008D5 91E0 0118 LDS	R30,bf
    008D7 91F0 0119 LDS	R31,bf+1
    008D9 0FEE      LSL	R30
    008DA 1FFF      ROL	R31
    008DB 0FE8      ADD	R30,R24
    008DC 1FF9      ADC	R31,R25
    008DD 8020      LD	R2,Z
    008DE 2433      CLR	R3
    008DF 9040 02CF LDS	R4,T_dat
    008E1 9050 02D0 LDS	R5,T_dat+1
    008E3 2842      OR	R4,R2
    008E4 2853      OR	R5,R3
    008E5 9250 02D0 STS	T_dat+1,R5
    008E7 9240 02CF STS	T_dat,R4
(0697) 		 	SendManchester();	
    008E9 940E 1E37 CALL	_SendManchester
(0698) 			CheckMotor(10);	 
    008EB E00A      LDI	R16,0xA
    008EC E010      LDI	R17,0
    008ED DA5C      RCALL	_CheckMotor
    008EE 9180 0118 LDS	R24,bf
    008F0 9190 0119 LDS	R25,bf+1
    008F2 9601      ADIW	R24,1
    008F3 9390 0119 STS	bf+1,R25
    008F5 9380 0118 STS	bf,R24
    008F7 9180 0118 LDS	R24,bf
    008F9 9190 0119 LDS	R25,bf+1
    008FB 3280      CPI	R24,0x20
    008FC E0E0      LDI	R30,0
    008FD 079E      CPC	R25,R30
    008FE F408      BCC	0x0900
    008FF CFBE      RJMP	0x08BE
    00900 9180 02AD LDS	R24,k
    00902 9190 02AE LDS	R25,k+1
    00904 9601      ADIW	R24,1
    00905 9390 02AE STS	k+1,R25
    00907 9380 02AD STS	k,R24
    00909 9020 02AD LDS	R2,k
    0090B 9030 02AE LDS	R3,k+1
    0090D 142C      CP	R2,R12
    0090E 043D      CPC	R3,R13
    0090F F408      BCC	0x0911
    00910 CF85      RJMP	0x0896
(0699) 		   }		
(0700) 		  }
(0701) 		} 
    00911 940C 1BAC JMP	0x1BAC
(0702) 		else if(DataFlag==4)//下发仪器信息
    00913 9180 02B3 LDS	R24,DataFlag
    00915 9190 02B4 LDS	R25,DataFlag+1
    00917 3084      CPI	R24,4
    00918 E0E0      LDI	R30,0
    00919 079E      CPC	R25,R30
    0091A F011      BEQ	0x091D
    0091B 940C 1BAC JMP	0x1BAC
(0703) 		{
(0704) 		T_dat=0x0000;
    0091D 2422      CLR	R2
    0091E 2433      CLR	R3
    0091F 9230 02D0 STS	T_dat+1,R3
    00921 9220 02CF STS	T_dat,R2
(0705) 		
(0706) 		 Uart0TxData[0]=0xE8;
    00923 EE88      LDI	R24,0xE8
    00924 9380 0121 STS	Uart0TxData,R24
(0707) 		 Uart0TxData[1]=0x40;
    00926 E480      LDI	R24,0x40
    00927 9380 0122 STS	Uart0TxData+1,R24
(0708) 		 Uart0TxData[2]=0x84;
    00929 E884      LDI	R24,0x84
    0092A 9380 0123 STS	Uart0TxData+2,R24
(0709) 		 Uart0TxData[3]=0;//包0
    0092C 9220 0124 STS	Uart0TxData+3,R2
(0710) 		 Uart0TxData[4]=0x21;
    0092E E281      LDI	R24,0x21
    0092F 9380 0125 STS	Uart0TxData+4,R24
(0711) 		 Uart0TxData[5]=0x22;
    00931 E282      LDI	R24,0x22
    00932 9380 0126 STS	Uart0TxData+5,R24
(0712) 		 Uart0TxData[6]=0x23;
    00934 E283      LDI	R24,0x23
    00935 9380 0127 STS	Uart0TxData+6,R24
(0713) 		 Uart0TxData[7]=0x24;
    00937 E284      LDI	R24,0x24
    00938 9380 0128 STS	Uart0TxData+7,R24
(0714) 		 Uart0TxData[8]=0x32;	 
    0093A E382      LDI	R24,0x32
    0093B 9380 0129 STS	Uart0TxData+8,R24
(0715) 		 for(k=0;k<64;k++)
    0093D 9230 02AE STS	k+1,R3
    0093F 9220 02AD STS	k,R2
    00941 C01A      RJMP	0x095C
(0716) 		 {
(0717) 		 Uart0TxData[9+k]=coeffdata[k];  
    00942 90A0 02AD LDS	R10,k
    00944 90B0 02AE LDS	R11,k+1
    00946 E68B      LDI	R24,0x6B
    00947 E091      LDI	R25,1
    00948 01F5      MOVW	R30,R10
    00949 0FE8      ADD	R30,R24
    0094A 1FF9      ADC	R31,R25
    0094B 8020      LD	R2,Z
    0094C E281      LDI	R24,0x21
    0094D E091      LDI	R25,1
    0094E 01F5      MOVW	R30,R10
    0094F 9639      ADIW	R30,0x9
    00950 0FE8      ADD	R30,R24
    00951 1FF9      ADC	R31,R25
    00952 8220      ST	Z,R2
    00953 9180 02AD LDS	R24,k
    00955 9190 02AE LDS	R25,k+1
    00957 9601      ADIW	R24,1
    00958 9390 02AE STS	k+1,R25
    0095A 9380 02AD STS	k,R24
    0095C 9180 02AD LDS	R24,k
    0095E 9190 02AE LDS	R25,k+1
    00960 3480      CPI	R24,0x40
    00961 E0E0      LDI	R30,0
    00962 079E      CPC	R25,R30
    00963 F2F0      BCS	0x0942
(0718) 		 }		 
(0719) 		 SendUart0_2(74,20);//超时160ms
    00964 E124      LDI	R18,0x14
    00965 E030      LDI	R19,0
    00966 E40A      LDI	R16,0x4A
    00967 940E 010C CALL	_SendUart0_2
(0720) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00969 9180 02E3 LDS	R24,Uart0RxCounter
    0096B 3089      CPI	R24,0x9
    0096C F461      BNE	0x0979
    0096D 9180 02E4 LDS	R24,Uart0RxData
    0096F 3585      CPI	R24,0x55
    00970 F441      BNE	0x0979
    00971 9180 02E5 LDS	R24,Uart0RxData+1
    00973 3480      CPI	R24,0x40
    00974 F421      BNE	0x0979
    00975 9180 02E6 LDS	R24,Uart0RxData+2
    00977 3884      CPI	R24,0x84
    00978 F049      BEQ	0x0982
(0721) 		 {T_dat|=0x0001; }
    00979 9180 02CF LDS	R24,T_dat
    0097B 9190 02D0 LDS	R25,T_dat+1
    0097D 6081      ORI	R24,1
    0097E 9390 02D0 STS	T_dat+1,R25
    00980 9380 02CF STS	T_dat,R24
(0722)  		 
(0723) 		 Uart0TxData[0]=0xE8;
    00982 EE88      LDI	R24,0xE8
    00983 9380 0121 STS	Uart0TxData,R24
(0724) 		 Uart0TxData[1]=0x40;
    00985 E480      LDI	R24,0x40
    00986 9380 0122 STS	Uart0TxData+1,R24
(0725) 		 Uart0TxData[2]=0x84;
    00988 E884      LDI	R24,0x84
    00989 9380 0123 STS	Uart0TxData+2,R24
(0726) 		 Uart0TxData[3]=1;//包1
    0098B E081      LDI	R24,1
    0098C 9380 0124 STS	Uart0TxData+3,R24
(0727) 		 Uart0TxData[4]=0x21;
    0098E E281      LDI	R24,0x21
    0098F 9380 0125 STS	Uart0TxData+4,R24
(0728) 		 Uart0TxData[5]=0x22;
    00991 E282      LDI	R24,0x22
    00992 9380 0126 STS	Uart0TxData+5,R24
(0729) 		 Uart0TxData[6]=0x23;
    00994 E283      LDI	R24,0x23
    00995 9380 0127 STS	Uart0TxData+6,R24
(0730) 		 Uart0TxData[7]=0x24;
    00997 E284      LDI	R24,0x24
    00998 9380 0128 STS	Uart0TxData+7,R24
(0731) 		 Uart0TxData[8]=0x32;	 
    0099A E382      LDI	R24,0x32
    0099B 9380 0129 STS	Uart0TxData+8,R24
(0732) 		 for(k=0;k<64;k++)
    0099D 2422      CLR	R2
    0099E 2433      CLR	R3
    0099F 9230 02AE STS	k+1,R3
    009A1 9220 02AD STS	k,R2
    009A3 C01C      RJMP	0x09C0
(0733) 		 {
(0734) 		 Uart0TxData[9+k]=coeffdata[k+64];  
    009A4 90A0 02AD LDS	R10,k
    009A6 90B0 02AE LDS	R11,k+1
    009A8 E68B      LDI	R24,0x6B
    009A9 E091      LDI	R25,1
    009AA 01F5      MOVW	R30,R10
    009AB 5CE0      SUBI	R30,0xC0
    009AC 4FFF      SBCI	R31,0xFF
    009AD 0FE8      ADD	R30,R24
    009AE 1FF9      ADC	R31,R25
    009AF 8020      LD	R2,Z
    009B0 E281      LDI	R24,0x21
    009B1 E091      LDI	R25,1
    009B2 01F5      MOVW	R30,R10
    009B3 9639      ADIW	R30,0x9
    009B4 0FE8      ADD	R30,R24
    009B5 1FF9      ADC	R31,R25
    009B6 8220      ST	Z,R2
    009B7 9180 02AD LDS	R24,k
    009B9 9190 02AE LDS	R25,k+1
    009BB 9601      ADIW	R24,1
    009BC 9390 02AE STS	k+1,R25
    009BE 9380 02AD STS	k,R24
    009C0 9180 02AD LDS	R24,k
    009C2 9190 02AE LDS	R25,k+1
    009C4 3480      CPI	R24,0x40
    009C5 E0E0      LDI	R30,0
    009C6 079E      CPC	R25,R30
    009C7 F2E0      BCS	0x09A4
(0735) 		 }		 
(0736) 		 SendUart0_2(74,20);//超时160ms
    009C8 E124      LDI	R18,0x14
    009C9 E030      LDI	R19,0
    009CA E40A      LDI	R16,0x4A
    009CB 940E 010C CALL	_SendUart0_2
(0737) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    009CD 9180 02E3 LDS	R24,Uart0RxCounter
    009CF 3089      CPI	R24,0x9
    009D0 F461      BNE	0x09DD
    009D1 9180 02E4 LDS	R24,Uart0RxData
    009D3 3585      CPI	R24,0x55
    009D4 F441      BNE	0x09DD
    009D5 9180 02E5 LDS	R24,Uart0RxData+1
    009D7 3480      CPI	R24,0x40
    009D8 F421      BNE	0x09DD
    009D9 9180 02E6 LDS	R24,Uart0RxData+2
    009DB 3884      CPI	R24,0x84
    009DC F049      BEQ	0x09E6
(0738)          {T_dat|=0x0002; }
    009DD 9180 02CF LDS	R24,T_dat
    009DF 9190 02D0 LDS	R25,T_dat+1
    009E1 6082      ORI	R24,2
    009E2 9390 02D0 STS	T_dat+1,R25
    009E4 9380 02CF STS	T_dat,R24
(0739) 		 
(0740) 		 Uart0TxData[0]=0xE8;
    009E6 EE88      LDI	R24,0xE8
    009E7 9380 0121 STS	Uart0TxData,R24
(0741) 		 Uart0TxData[1]=0x40;
    009E9 E480      LDI	R24,0x40
    009EA 9380 0122 STS	Uart0TxData+1,R24
(0742) 		 Uart0TxData[2]=0x84;
    009EC E884      LDI	R24,0x84
    009ED 9380 0123 STS	Uart0TxData+2,R24
(0743) 		 Uart0TxData[3]=2;//包2
    009EF E082      LDI	R24,2
    009F0 9380 0124 STS	Uart0TxData+3,R24
(0744) 		 Uart0TxData[4]=0x21;
    009F2 E281      LDI	R24,0x21
    009F3 9380 0125 STS	Uart0TxData+4,R24
(0745) 		 Uart0TxData[5]=0x22;
    009F5 E282      LDI	R24,0x22
    009F6 9380 0126 STS	Uart0TxData+5,R24
(0746) 		 Uart0TxData[6]=0x23;
    009F8 E283      LDI	R24,0x23
    009F9 9380 0127 STS	Uart0TxData+6,R24
(0747) 		 Uart0TxData[7]=0x24;
    009FB E284      LDI	R24,0x24
    009FC 9380 0128 STS	Uart0TxData+7,R24
(0748) 		 Uart0TxData[8]=0x32;	 
    009FE E382      LDI	R24,0x32
    009FF 9380 0129 STS	Uart0TxData+8,R24
(0749) 		 for(k=0;k<64;k++)
    00A01 2422      CLR	R2
    00A02 2433      CLR	R3
    00A03 9230 02AE STS	k+1,R3
    00A05 9220 02AD STS	k,R2
    00A07 C01C      RJMP	0x0A24
(0750) 		 {
(0751) 		 Uart0TxData[9+k]=coeffdata[k+128];  
    00A08 90A0 02AD LDS	R10,k
    00A0A 90B0 02AE LDS	R11,k+1
    00A0C E68B      LDI	R24,0x6B
    00A0D E091      LDI	R25,1
    00A0E 01F5      MOVW	R30,R10
    00A0F 58E0      SUBI	R30,0x80
    00A10 4FFF      SBCI	R31,0xFF
    00A11 0FE8      ADD	R30,R24
    00A12 1FF9      ADC	R31,R25
    00A13 8020      LD	R2,Z
    00A14 E281      LDI	R24,0x21
    00A15 E091      LDI	R25,1
    00A16 01F5      MOVW	R30,R10
    00A17 9639      ADIW	R30,0x9
    00A18 0FE8      ADD	R30,R24
    00A19 1FF9      ADC	R31,R25
    00A1A 8220      ST	Z,R2
    00A1B 9180 02AD LDS	R24,k
    00A1D 9190 02AE LDS	R25,k+1
    00A1F 9601      ADIW	R24,1
    00A20 9390 02AE STS	k+1,R25
    00A22 9380 02AD STS	k,R24
    00A24 9180 02AD LDS	R24,k
    00A26 9190 02AE LDS	R25,k+1
    00A28 3480      CPI	R24,0x40
    00A29 E0E0      LDI	R30,0
    00A2A 079E      CPC	R25,R30
    00A2B F2E0      BCS	0x0A08
(0752) 		 }		 
(0753) 		 SendUart0_2(74,20);//超时160ms
    00A2C E124      LDI	R18,0x14
    00A2D E030      LDI	R19,0
    00A2E E40A      LDI	R16,0x4A
    00A2F 940E 010C CALL	_SendUart0_2
(0754) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00A31 9180 02E3 LDS	R24,Uart0RxCounter
    00A33 3089      CPI	R24,0x9
    00A34 F461      BNE	0x0A41
    00A35 9180 02E4 LDS	R24,Uart0RxData
    00A37 3585      CPI	R24,0x55
    00A38 F441      BNE	0x0A41
    00A39 9180 02E5 LDS	R24,Uart0RxData+1
    00A3B 3480      CPI	R24,0x40
    00A3C F421      BNE	0x0A41
    00A3D 9180 02E6 LDS	R24,Uart0RxData+2
    00A3F 3884      CPI	R24,0x84
    00A40 F049      BEQ	0x0A4A
(0755)          {T_dat|=0x0004; }
    00A41 9180 02CF LDS	R24,T_dat
    00A43 9190 02D0 LDS	R25,T_dat+1
    00A45 6084      ORI	R24,4
    00A46 9390 02D0 STS	T_dat+1,R25
    00A48 9380 02CF STS	T_dat,R24
(0756) 		 
(0757) 		 Uart0TxData[0]=0xE8;
    00A4A EE88      LDI	R24,0xE8
    00A4B 9380 0121 STS	Uart0TxData,R24
(0758) 		 Uart0TxData[1]=0x40;
    00A4D E480      LDI	R24,0x40
    00A4E 9380 0122 STS	Uart0TxData+1,R24
(0759) 		 Uart0TxData[2]=0x84;
    00A50 E884      LDI	R24,0x84
    00A51 9380 0123 STS	Uart0TxData+2,R24
(0760) 		 Uart0TxData[3]=3;//包3
    00A53 E083      LDI	R24,3
    00A54 9380 0124 STS	Uart0TxData+3,R24
(0761) 		 Uart0TxData[4]=0x21;
    00A56 E281      LDI	R24,0x21
    00A57 9380 0125 STS	Uart0TxData+4,R24
(0762) 		 Uart0TxData[5]=0x22;
    00A59 E282      LDI	R24,0x22
    00A5A 9380 0126 STS	Uart0TxData+5,R24
(0763) 		 Uart0TxData[6]=0x23;
    00A5C E283      LDI	R24,0x23
    00A5D 9380 0127 STS	Uart0TxData+6,R24
(0764) 		 Uart0TxData[7]=0x24;
    00A5F E284      LDI	R24,0x24
    00A60 9380 0128 STS	Uart0TxData+7,R24
(0765) 		 Uart0TxData[8]=0x32;	 
    00A62 E382      LDI	R24,0x32
    00A63 9380 0129 STS	Uart0TxData+8,R24
(0766) 		 for(k=0;k<64;k++)
    00A65 2422      CLR	R2
    00A66 2433      CLR	R3
    00A67 9230 02AE STS	k+1,R3
    00A69 9220 02AD STS	k,R2
    00A6B C01C      RJMP	0x0A88
(0767) 		 {
(0768) 		 Uart0TxData[9+k]=coeffdata[k+192];  
    00A6C 90A0 02AD LDS	R10,k
    00A6E 90B0 02AE LDS	R11,k+1
    00A70 E68B      LDI	R24,0x6B
    00A71 E091      LDI	R25,1
    00A72 01F5      MOVW	R30,R10
    00A73 54E0      SUBI	R30,0x40
    00A74 4FFF      SBCI	R31,0xFF
    00A75 0FE8      ADD	R30,R24
    00A76 1FF9      ADC	R31,R25
    00A77 8020      LD	R2,Z
    00A78 E281      LDI	R24,0x21
    00A79 E091      LDI	R25,1
    00A7A 01F5      MOVW	R30,R10
    00A7B 9639      ADIW	R30,0x9
    00A7C 0FE8      ADD	R30,R24
    00A7D 1FF9      ADC	R31,R25
    00A7E 8220      ST	Z,R2
    00A7F 9180 02AD LDS	R24,k
    00A81 9190 02AE LDS	R25,k+1
    00A83 9601      ADIW	R24,1
    00A84 9390 02AE STS	k+1,R25
    00A86 9380 02AD STS	k,R24
    00A88 9180 02AD LDS	R24,k
    00A8A 9190 02AE LDS	R25,k+1
    00A8C 3480      CPI	R24,0x40
    00A8D E0E0      LDI	R30,0
    00A8E 079E      CPC	R25,R30
    00A8F F2E0      BCS	0x0A6C
(0769) 		 }		 
(0770) 		 SendUart0_2(74,20);//超时160ms
    00A90 E124      LDI	R18,0x14
    00A91 E030      LDI	R19,0
    00A92 E40A      LDI	R16,0x4A
    00A93 940E 010C CALL	_SendUart0_2
(0771) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00A95 9180 02E3 LDS	R24,Uart0RxCounter
    00A97 3089      CPI	R24,0x9
    00A98 F461      BNE	0x0AA5
    00A99 9180 02E4 LDS	R24,Uart0RxData
    00A9B 3585      CPI	R24,0x55
    00A9C F441      BNE	0x0AA5
    00A9D 9180 02E5 LDS	R24,Uart0RxData+1
    00A9F 3480      CPI	R24,0x40
    00AA0 F421      BNE	0x0AA5
    00AA1 9180 02E6 LDS	R24,Uart0RxData+2
    00AA3 3884      CPI	R24,0x84
    00AA4 F049      BEQ	0x0AAE
(0772)          {T_dat|=0x0008; }
    00AA5 9180 02CF LDS	R24,T_dat
    00AA7 9190 02D0 LDS	R25,T_dat+1
    00AA9 6088      ORI	R24,0x8
    00AAA 9390 02D0 STS	T_dat+1,R25
    00AAC 9380 02CF STS	T_dat,R24
(0773) 		 
(0774) 		 Uart0TxData[0]=0xE8;
    00AAE EE88      LDI	R24,0xE8
    00AAF 9380 0121 STS	Uart0TxData,R24
(0775) 		 Uart0TxData[1]=0x40;
    00AB1 E480      LDI	R24,0x40
    00AB2 9380 0122 STS	Uart0TxData+1,R24
(0776) 		 Uart0TxData[2]=0x84;
    00AB4 E884      LDI	R24,0x84
    00AB5 9380 0123 STS	Uart0TxData+2,R24
(0777) 		 Uart0TxData[3]=4;//包4
    00AB7 E084      LDI	R24,4
    00AB8 9380 0124 STS	Uart0TxData+3,R24
(0778) 		 Uart0TxData[4]=0x21;
    00ABA E281      LDI	R24,0x21
    00ABB 9380 0125 STS	Uart0TxData+4,R24
(0779) 		 Uart0TxData[5]=0x22;
    00ABD E282      LDI	R24,0x22
    00ABE 9380 0126 STS	Uart0TxData+5,R24
(0780) 		 Uart0TxData[6]=0x23;
    00AC0 E283      LDI	R24,0x23
    00AC1 9380 0127 STS	Uart0TxData+6,R24
(0781) 		 Uart0TxData[7]=0x24;
    00AC3 E284      LDI	R24,0x24
    00AC4 9380 0128 STS	Uart0TxData+7,R24
(0782) 		 Uart0TxData[8]=0x32;	 
    00AC6 E382      LDI	R24,0x32
    00AC7 9380 0129 STS	Uart0TxData+8,R24
(0783) 		 for(k=0;k<64;k++)
    00AC9 2422      CLR	R2
    00ACA 2433      CLR	R3
    00ACB 9230 02AE STS	k+1,R3
    00ACD 9220 02AD STS	k,R2
    00ACF C01C      RJMP	0x0AEC
(0784) 		 {
(0785) 		 Uart0TxData[9+k]=coeffdata[k+256];  
    00AD0 90A0 02AD LDS	R10,k
    00AD2 90B0 02AE LDS	R11,k+1
    00AD4 E68B      LDI	R24,0x6B
    00AD5 E091      LDI	R25,1
    00AD6 01F5      MOVW	R30,R10
    00AD7 50E0      SUBI	R30,0
    00AD8 4FFF      SBCI	R31,0xFF
    00AD9 0FE8      ADD	R30,R24
    00ADA 1FF9      ADC	R31,R25
    00ADB 8020      LD	R2,Z
    00ADC E281      LDI	R24,0x21
    00ADD E091      LDI	R25,1
    00ADE 01F5      MOVW	R30,R10
    00ADF 9639      ADIW	R30,0x9
    00AE0 0FE8      ADD	R30,R24
    00AE1 1FF9      ADC	R31,R25
    00AE2 8220      ST	Z,R2
    00AE3 9180 02AD LDS	R24,k
    00AE5 9190 02AE LDS	R25,k+1
    00AE7 9601      ADIW	R24,1
    00AE8 9390 02AE STS	k+1,R25
    00AEA 9380 02AD STS	k,R24
    00AEC 9180 02AD LDS	R24,k
    00AEE 9190 02AE LDS	R25,k+1
    00AF0 3480      CPI	R24,0x40
    00AF1 E0E0      LDI	R30,0
    00AF2 079E      CPC	R25,R30
    00AF3 F2E0      BCS	0x0AD0
(0786) 		 }		 
(0787) 		 SendUart0_2(74,20);//超时160ms
    00AF4 E124      LDI	R18,0x14
    00AF5 E030      LDI	R19,0
    00AF6 E40A      LDI	R16,0x4A
    00AF7 940E 010C CALL	_SendUart0_2
(0788) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00AF9 9180 02E3 LDS	R24,Uart0RxCounter
    00AFB 3089      CPI	R24,0x9
    00AFC F461      BNE	0x0B09
    00AFD 9180 02E4 LDS	R24,Uart0RxData
    00AFF 3585      CPI	R24,0x55
    00B00 F441      BNE	0x0B09
    00B01 9180 02E5 LDS	R24,Uart0RxData+1
    00B03 3480      CPI	R24,0x40
    00B04 F421      BNE	0x0B09
    00B05 9180 02E6 LDS	R24,Uart0RxData+2
    00B07 3884      CPI	R24,0x84
    00B08 F049      BEQ	0x0B12
(0789)          {T_dat|=0x0010; }
    00B09 9180 02CF LDS	R24,T_dat
    00B0B 9190 02D0 LDS	R25,T_dat+1
    00B0D 6180      ORI	R24,0x10
    00B0E 9390 02D0 STS	T_dat+1,R25
    00B10 9380 02CF STS	T_dat,R24
(0790) 		 
(0791) 		 DataFlag=0;
    00B12 2422      CLR	R2
    00B13 2433      CLR	R3
    00B14 9230 02B4 STS	DataFlag+1,R3
    00B16 9220 02B3 STS	DataFlag,R2
(0792) 		 coeff_len=0;	
    00B18 9230 011F STS	coeff_len+1,R3
    00B1A 9220 011E STS	coeff_len,R2
(0793) 		 T_com=0x0C;
    00B1C E08C      LDI	R24,0xC
    00B1D 9380 02CC STS	T_com,R24
(0794) 		 SendManchester();		
    00B1F 940E 1E37 CALL	_SendManchester
(0795) 		}     
(0796) 	  }	 
(0797) 	}
    00B21 940C 1BAC JMP	0x1BAC
(0798) 	 
(0799)    else//若不是下发标定系数，则进入以下各个命令的子语句
(0800) 	{ 
(0801) 	T_com=(R_dat>>4);
    00B23 9020 02CD LDS	R2,R_dat
    00B25 9030 02CE LDS	R3,R_dat+1
    00B27 9435      ASR	R3
    00B28 9427      ROR	R2
    00B29 9435      ASR	R3
    00B2A 9427      ROR	R2
    00B2B 9435      ASR	R3
    00B2C 9427      ROR	R2
    00B2D 9435      ASR	R3
    00B2E 9427      ROR	R2
    00B2F 9220 02CC STS	T_com,R2
(0802)     switch(R_dat&0xf0)
    00B31 9180 02CD LDS	R24,R_dat
    00B33 9190 02CE LDS	R25,R_dat+1
    00B35 7F80      ANDI	R24,0xF0
    00B36 7090      ANDI	R25,0
    00B37 015C      MOVW	R10,R24
    00B38 3680      CPI	R24,0x60
    00B39 E0E0      LDI	R30,0
    00B3A 079E      CPC	R25,R30
    00B3B F409      BNE	0x0B3D
    00B3C C35A      RJMP	0x0E97
    00B3D E680      LDI	R24,0x60
    00B3E E090      LDI	R25,0
    00B3F 158A      CP	R24,R10
    00B40 059B      CPC	R25,R11
    00B41 F40C      BGE	0x0B43
    00B42 C033      RJMP	0x0B76
    00B43 01C5      MOVW	R24,R10
    00B44 3380      CPI	R24,0x30
    00B45 E0E0      LDI	R30,0
    00B46 079E      CPC	R25,R30
    00B47 F409      BNE	0x0B49
    00B48 C0ED      RJMP	0x0C36
    00B49 E380      LDI	R24,0x30
    00B4A E090      LDI	R25,0
    00B4B 158A      CP	R24,R10
    00B4C 059B      CPC	R25,R11
    00B4D F0A4      BLT	0x0B62
    00B4E 01C5      MOVW	R24,R10
    00B4F 3180      CPI	R24,0x10
    00B50 E0E0      LDI	R30,0
    00B51 079E      CPC	R25,R30
    00B52 F409      BNE	0x0B54
    00B53 C05F      RJMP	0x0BB3
    00B54 3180      CPI	R24,0x10
    00B55 E0E0      LDI	R30,0
    00B56 079E      CPC	R25,R30
    00B57 F414      BGE	0x0B5A
    00B58 940C 1BAC JMP	0x1BAC
    00B5A 01C5      MOVW	R24,R10
    00B5B 3280      CPI	R24,0x20
    00B5C E0E0      LDI	R30,0
    00B5D 079E      CPC	R25,R30
    00B5E F409      BNE	0x0B60
    00B5F C093      RJMP	0x0BF3
    00B60 940C 1BAC JMP	0x1BAC
    00B62 01C5      MOVW	R24,R10
    00B63 3480      CPI	R24,0x40
    00B64 E0E0      LDI	R30,0
    00B65 079E      CPC	R25,R30
    00B66 F409      BNE	0x0B68
    00B67 C191      RJMP	0x0CF9
    00B68 3480      CPI	R24,0x40
    00B69 E0E0      LDI	R30,0
    00B6A 079E      CPC	R25,R30
    00B6B F414      BGE	0x0B6E
    00B6C 940C 1BAC JMP	0x1BAC
    00B6E 01C5      MOVW	R24,R10
    00B6F 3580      CPI	R24,0x50
    00B70 E0E0      LDI	R30,0
    00B71 079E      CPC	R25,R30
    00B72 F409      BNE	0x0B74
    00B73 C1DC      RJMP	0x0D50
    00B74 940C 1BAC JMP	0x1BAC
    00B76 01C5      MOVW	R24,R10
    00B77 3980      CPI	R24,0x90
    00B78 E0E0      LDI	R30,0
    00B79 079E      CPC	R25,R30
    00B7A F409      BNE	0x0B7C
    00B7B C6DE      RJMP	0x125A
    00B7C E980      LDI	R24,0x90
    00B7D E090      LDI	R25,0
    00B7E 158A      CP	R24,R10
    00B7F 059B      CPC	R25,R11
    00B80 F0A4      BLT	0x0B95
    00B81 01C5      MOVW	R24,R10
    00B82 3780      CPI	R24,0x70
    00B83 E0E0      LDI	R30,0
    00B84 079E      CPC	R25,R30
    00B85 F409      BNE	0x0B87
    00B86 C3EB      RJMP	0x0F72
    00B87 3780      CPI	R24,0x70
    00B88 E0E0      LDI	R30,0
    00B89 079E      CPC	R25,R30
    00B8A F414      BGE	0x0B8D
    00B8B 940C 1BAC JMP	0x1BAC
    00B8D 01C5      MOVW	R24,R10
    00B8E 3880      CPI	R24,0x80
    00B8F E0E0      LDI	R30,0
    00B90 079E      CPC	R25,R30
    00B91 F409      BNE	0x0B93
    00B92 C4EC      RJMP	0x107F
    00B93 940C 1BAC JMP	0x1BAC
    00B95 01C5      MOVW	R24,R10
    00B96 3B80      CPI	R24,0xB0
    00B97 E0E0      LDI	R30,0
    00B98 079E      CPC	R25,R30
    00B99 F411      BNE	0x0B9C
    00B9A 940C 169D JMP	0x169D
    00B9C EB80      LDI	R24,0xB0
    00B9D E090      LDI	R25,0
    00B9E 158A      CP	R24,R10
    00B9F 059B      CPC	R25,R11
    00BA0 F04C      BLT	0x0BAA
    00BA1 01C5      MOVW	R24,R10
    00BA2 3A80      CPI	R24,0xA0
    00BA3 E0E0      LDI	R30,0
    00BA4 079E      CPC	R25,R30
    00BA5 F411      BNE	0x0BA8
    00BA6 940C 15D5 JMP	0x15D5
    00BA8 940C 1BAC JMP	0x1BAC
    00BAA 01C5      MOVW	R24,R10
    00BAB 3C80      CPI	R24,0xC0
    00BAC E0E0      LDI	R30,0
    00BAD 079E      CPC	R25,R30
    00BAE F411      BNE	0x0BB1
    00BAF 940C 1765 JMP	0x1765
    00BB1 940C 1BAC JMP	0x1BAC
(0803)      { 
(0804) 	  case 0x10://复位 	
(0805) 		Uart0TxData[0]=0xE8;
    00BB3 EE88      LDI	R24,0xE8
    00BB4 9380 0121 STS	Uart0TxData,R24
(0806) 		Uart0TxData[1]=0x40;
    00BB6 E480      LDI	R24,0x40
    00BB7 9380 0122 STS	Uart0TxData+1,R24
(0807) 		Uart0TxData[2]=0x8D;//流量板握手，超时40ms
    00BB9 E88D      LDI	R24,0x8D
    00BBA 9380 0123 STS	Uart0TxData+2,R24
(0808) 		Uart0TxData[3]=31;
    00BBC E18F      LDI	R24,0x1F
    00BBD 9380 0124 STS	Uart0TxData+3,R24
(0809) 		SendUart0_2(9,5); 
    00BBF E025      LDI	R18,5
    00BC0 E030      LDI	R19,0
    00BC1 E009      LDI	R16,0x9
    00BC2 940E 010C CALL	_SendUart0_2
(0810) 		if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    00BC4 9180 02E3 LDS	R24,Uart0RxCounter
    00BC6 3089      CPI	R24,0x9
    00BC7 F499      BNE	0x0BDB
    00BC8 9180 02E4 LDS	R24,Uart0RxData
    00BCA 3585      CPI	R24,0x55
    00BCB F479      BNE	0x0BDB
    00BCC 9180 02E5 LDS	R24,Uart0RxData+1
    00BCE 3480      CPI	R24,0x40
    00BCF F459      BNE	0x0BDB
    00BD0 9180 02E6 LDS	R24,Uart0RxData+2
    00BD2 388D      CPI	R24,0x8D
    00BD3 F439      BNE	0x0BDB
(0811) 		 {T_dat=0x00;}
    00BD4 2422      CLR	R2
    00BD5 2433      CLR	R3
    00BD6 9230 02D0 STS	T_dat+1,R3
    00BD8 9220 02CF STS	T_dat,R2
    00BDA C006      RJMP	0x0BE1
(0812) 		else
(0813) 		 {T_dat=0xff;}
    00BDB EF8F      LDI	R24,0xFF
    00BDC E090      LDI	R25,0
    00BDD 9390 02D0 STS	T_dat+1,R25
    00BDF 9380 02CF STS	T_dat,R24
(0814) 		T_dat<<=8;
    00BE1 9020 02CF LDS	R2,T_dat
    00BE3 9030 02D0 LDS	R3,T_dat+1
    00BE5 2C32      MOV	R3,R2
    00BE6 2422      CLR	R2
    00BE7 9230 02D0 STS	T_dat+1,R3
    00BE9 9220 02CF STS	T_dat,R2
(0815) 		T_dat|=0x00;
    00BEB 9230 02D0 STS	T_dat+1,R3
    00BED 9220 02CF STS	T_dat,R2
(0816) 		SendManchester();	
    00BEF 940E 1E37 CALL	_SendManchester
(0817) 	  break;
    00BF1 940C 1BAC JMP	0x1BAC
(0818) 	  
(0819) 	  case 0x20://读版本号
(0820) 		Uart0TxData[0]=0xE8;
    00BF3 EE88      LDI	R24,0xE8
    00BF4 9380 0121 STS	Uart0TxData,R24
(0821) 		Uart0TxData[1]=0x40;
    00BF6 E480      LDI	R24,0x40
    00BF7 9380 0122 STS	Uart0TxData+1,R24
(0822) 		Uart0TxData[2]=0x8D;//流量板握手，超时40ms
    00BF9 E88D      LDI	R24,0x8D
    00BFA 9380 0123 STS	Uart0TxData+2,R24
(0823) 		Uart0TxData[3]=31;
    00BFC E18F      LDI	R24,0x1F
    00BFD 9380 0124 STS	Uart0TxData+3,R24
(0824) 		SendUart0_2(9,5); 
    00BFF E025      LDI	R18,5
    00C00 E030      LDI	R19,0
    00C01 E009      LDI	R16,0x9
    00C02 940E 010C CALL	_SendUart0_2
(0825) 		if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    00C04 9180 02E3 LDS	R24,Uart0RxCounter
    00C06 3089      CPI	R24,0x9
    00C07 F4A1      BNE	0x0C1C
    00C08 9180 02E4 LDS	R24,Uart0RxData
    00C0A 3585      CPI	R24,0x55
    00C0B F481      BNE	0x0C1C
    00C0C 9180 02E5 LDS	R24,Uart0RxData+1
    00C0E 3480      CPI	R24,0x40
    00C0F F461      BNE	0x0C1C
    00C10 9180 02E6 LDS	R24,Uart0RxData+2
    00C12 388D      CPI	R24,0x8D
    00C13 F441      BNE	0x0C1C
(0826) 		 {T_dat=Uart0RxData[3];}
    00C14 9020 02E7 LDS	R2,Uart0RxData+3
    00C16 2433      CLR	R3
    00C17 9230 02D0 STS	T_dat+1,R3
    00C19 9220 02CF STS	T_dat,R2
    00C1B C006      RJMP	0x0C22
(0827) 		else
(0828) 		 {T_dat=0xff;}    
    00C1C EF8F      LDI	R24,0xFF
    00C1D E090      LDI	R25,0
    00C1E 9390 02D0 STS	T_dat+1,R25
    00C20 9380 02CF STS	T_dat,R24
(0829) 		T_dat<<=8;
    00C22 9020 02CF LDS	R2,T_dat
    00C24 9030 02D0 LDS	R3,T_dat+1
    00C26 2C32      MOV	R3,R2
    00C27 2422      CLR	R2
    00C28 9230 02D0 STS	T_dat+1,R3
    00C2A 9220 02CF STS	T_dat,R2
(0830) 		T_dat|=BB;
    00C2C 01C1      MOVW	R24,R2
    00C2D 6489      ORI	R24,0x49
    00C2E 9390 02D0 STS	T_dat+1,R25
    00C30 9380 02CF STS	T_dat,R24
(0831) 		SendManchester();	
    00C32 940E 1E37 CALL	_SendManchester
(0832) 	  break;
    00C34 940C 1BAC JMP	0x1BAC
(0833) 	  
(0834) 	  case 0x30://Cable电压,VIN/VR电压
(0835) 	   CheckMotor(30);   
    00C36 E10E      LDI	R16,0x1E
    00C37 E010      LDI	R17,0
    00C38 940E 034A CALL	_CheckMotor
(0836) 	   f=SampleADC(5);//Cable 
    00C3A E005      LDI	R16,5
    00C3B 940E 02DD CALL	_SampleADC
    00C3D 2711      CLR	R17
    00C3E 940E 23FF CALL	int2fp
    00C40 8309      STD	Y+1,R16
    00C41 831A      STD	Y+2,R17
    00C42 832B      STD	Y+3,R18
    00C43 833C      STD	Y+4,R19
(0837) 	   f=f*2.5;
    00C44 E908      LDI	R16,0x98
    00C45 E010      LDI	R17,0
    00C46 940E 22E2 CALL	elpm32
    00C48 01CE      MOVW	R24,R28
    00C49 9601      ADIW	R24,1
    00C4A 939A      ST	-Y,R25
    00C4B 938A      ST	-Y,R24
    00C4C 940E 259A CALL	fpmule1
    00C4E 8309      STD	Y+1,R16
    00C4F 831A      STD	Y+2,R17
    00C50 832B      STD	Y+3,R18
    00C51 833C      STD	Y+4,R19
(0838) 	   f=f*67.666;
    00C52 E904      LDI	R16,0x94
    00C53 E010      LDI	R17,0
    00C54 940E 22E2 CALL	elpm32
    00C56 01CE      MOVW	R24,R28
    00C57 9601      ADIW	R24,1
    00C58 939A      ST	-Y,R25
    00C59 938A      ST	-Y,R24
    00C5A 940E 259A CALL	fpmule1
    00C5C 8309      STD	Y+1,R16
    00C5D 831A      STD	Y+2,R17
    00C5E 832B      STD	Y+3,R18
    00C5F 833C      STD	Y+4,R19
(0839) 	   f=f/256;
    00C60 8029      LDD	R2,Y+1
    00C61 803A      LDD	R3,Y+2
    00C62 804B      LDD	R4,Y+3
    00C63 805C      LDD	R5,Y+4
    00C64 E900      LDI	R16,0x90
    00C65 E010      LDI	R17,0
    00C66 940E 22E2 CALL	elpm32
    00C68 933A      ST	-Y,R19
    00C69 932A      ST	-Y,R18
    00C6A 931A      ST	-Y,R17
    00C6B 930A      ST	-Y,R16
    00C6C 0181      MOVW	R16,R2
    00C6D 0192      MOVW	R18,R4
    00C6E 940E 242A CALL	fpdiv2
    00C70 8309      STD	Y+1,R16
    00C71 831A      STD	Y+2,R17
    00C72 832B      STD	Y+3,R18
    00C73 833C      STD	Y+4,R19
(0840) 	   T_dat=f+2;
    00C74 8029      LDD	R2,Y+1
    00C75 803A      LDD	R3,Y+2
    00C76 804B      LDD	R4,Y+3
    00C77 805C      LDD	R5,Y+4
    00C78 E80C      LDI	R16,0x8C
    00C79 E010      LDI	R17,0
    00C7A 940E 22E2 CALL	elpm32
    00C7C 933A      ST	-Y,R19
    00C7D 932A      ST	-Y,R18
    00C7E 931A      ST	-Y,R17
    00C7F 930A      ST	-Y,R16
    00C80 0181      MOVW	R16,R2
    00C81 0192      MOVW	R18,R4
    00C82 940E 23C0 CALL	fpadd2
    00C84 940E 23CB CALL	fpint
    00C86 9310 02D0 STS	T_dat+1,R17
    00C88 9300 02CF STS	T_dat,R16
(0841) 	   CheckMotor(30);
    00C8A E10E      LDI	R16,0x1E
    00C8B E010      LDI	R17,0
    00C8C 940E 034A CALL	_CheckMotor
(0842) 	   T_dat<<=8;   
    00C8E 9020 02CF LDS	R2,T_dat
    00C90 9030 02D0 LDS	R3,T_dat+1
    00C92 2C32      MOV	R3,R2
    00C93 2422      CLR	R2
    00C94 9230 02D0 STS	T_dat+1,R3
    00C96 9220 02CF STS	T_dat,R2
(0843) 	   f=SampleADC(4);//VIN / VR 
    00C98 E004      LDI	R16,4
    00C99 940E 02DD CALL	_SampleADC
    00C9B 2711      CLR	R17
    00C9C 940E 23FF CALL	int2fp
    00C9E 8309      STD	Y+1,R16
    00C9F 831A      STD	Y+2,R17
    00CA0 832B      STD	Y+3,R18
    00CA1 833C      STD	Y+4,R19
(0844) 	   f=f*2.5;
    00CA2 E908      LDI	R16,0x98
    00CA3 E010      LDI	R17,0
    00CA4 940E 22E2 CALL	elpm32
    00CA6 01CE      MOVW	R24,R28
    00CA7 9601      ADIW	R24,1
    00CA8 939A      ST	-Y,R25
    00CA9 938A      ST	-Y,R24
    00CAA 940E 259A CALL	fpmule1
    00CAC 8309      STD	Y+1,R16
    00CAD 831A      STD	Y+2,R17
    00CAE 832B      STD	Y+3,R18
    00CAF 833C      STD	Y+4,R19
(0845) 	   f=f*67.666;
    00CB0 E904      LDI	R16,0x94
    00CB1 E010      LDI	R17,0
    00CB2 940E 22E2 CALL	elpm32
    00CB4 01CE      MOVW	R24,R28
    00CB5 9601      ADIW	R24,1
    00CB6 939A      ST	-Y,R25
    00CB7 938A      ST	-Y,R24
    00CB8 940E 259A CALL	fpmule1
    00CBA 8309      STD	Y+1,R16
    00CBB 831A      STD	Y+2,R17
    00CBC 832B      STD	Y+3,R18
    00CBD 833C      STD	Y+4,R19
(0846) 	   f=f/256;
    00CBE 8029      LDD	R2,Y+1
    00CBF 803A      LDD	R3,Y+2
    00CC0 804B      LDD	R4,Y+3
    00CC1 805C      LDD	R5,Y+4
    00CC2 E900      LDI	R16,0x90
    00CC3 E010      LDI	R17,0
    00CC4 940E 22E2 CALL	elpm32
    00CC6 933A      ST	-Y,R19
    00CC7 932A      ST	-Y,R18
    00CC8 931A      ST	-Y,R17
    00CC9 930A      ST	-Y,R16
    00CCA 0181      MOVW	R16,R2
    00CCB 0192      MOVW	R18,R4
    00CCC 940E 242A CALL	fpdiv2
    00CCE 8309      STD	Y+1,R16
    00CCF 831A      STD	Y+2,R17
    00CD0 832B      STD	Y+3,R18
    00CD1 833C      STD	Y+4,R19
(0847) 	   i=f+2;
    00CD2 8029      LDD	R2,Y+1
    00CD3 803A      LDD	R3,Y+2
    00CD4 804B      LDD	R4,Y+3
    00CD5 805C      LDD	R5,Y+4
    00CD6 E80C      LDI	R16,0x8C
    00CD7 E010      LDI	R17,0
    00CD8 940E 22E2 CALL	elpm32
    00CDA 933A      ST	-Y,R19
    00CDB 932A      ST	-Y,R18
    00CDC 931A      ST	-Y,R17
    00CDD 930A      ST	-Y,R16
    00CDE 0181      MOVW	R16,R2
    00CDF 0192      MOVW	R18,R4
    00CE0 940E 23C0 CALL	fpadd2
    00CE2 940E 23CB CALL	fpint
    00CE4 2EA0      MOV	R10,R16
(0848) 	   T_dat|=i; 
    00CE5 2C2A      MOV	R2,R10
    00CE6 2433      CLR	R3
    00CE7 9040 02CF LDS	R4,T_dat
    00CE9 9050 02D0 LDS	R5,T_dat+1
    00CEB 2842      OR	R4,R2
    00CEC 2853      OR	R5,R3
    00CED 9250 02D0 STS	T_dat+1,R5
    00CEF 9240 02CF STS	T_dat,R4
(0849) 	   CheckMotor(30);
    00CF1 E10E      LDI	R16,0x1E
    00CF2 E010      LDI	R17,0
    00CF3 940E 034A CALL	_CheckMotor
(0850) 	   SendManchester();   
    00CF5 940E 1E37 CALL	_SendManchester
(0851) 	  break;
    00CF7 940C 1BAC JMP	0x1BAC
(0852) 	  
(0853) 	  case 0x40: //采集板压力和温度
(0854) 	  /*
(0855) 		CheckMotor(40); //40ms定时		
(0856) 		T_dat=1234;//没有流量板时暂用一固定数值表示压力
(0857) 		SendManchester();
(0858)         CheckMotor(40); //40ms定时		 
(0859) 		T_dat=5678;//没有流量板时暂用一固定数值表示温度
(0860) 		SendManchester();
(0861) 		*/
(0862) 		Uart0TxData[0]=0xE8;
    00CF9 EE88      LDI	R24,0xE8
    00CFA 9380 0121 STS	Uart0TxData,R24
(0863) 		Uart0TxData[1]=0x40;
    00CFC E480      LDI	R24,0x40
    00CFD 9380 0122 STS	Uart0TxData+1,R24
(0864) 		Uart0TxData[2]=0x89;
    00CFF E889      LDI	R24,0x89
    00D00 9380 0123 STS	Uart0TxData+2,R24
(0865) 		Uart0TxData[3]=9;
    00D02 E089      LDI	R24,0x9
    00D03 9380 0124 STS	Uart0TxData+3,R24
(0866) 		SendUart0_2(9,50);//流量板直读检测，超时400ms
    00D05 E322      LDI	R18,0x32
    00D06 E030      LDI	R19,0
    00D07 E009      LDI	R16,0x9
    00D08 940E 010C CALL	_SendUart0_2
(0867) 		
(0868) 		 T_dat=Uart0RxData[1];
    00D0A 9020 02E5 LDS	R2,Uart0RxData+1
    00D0C 2433      CLR	R3
    00D0D 9230 02D0 STS	T_dat+1,R3
    00D0F 9220 02CF STS	T_dat,R2
(0869) 		 T_dat<<=8;
    00D11 9020 02CF LDS	R2,T_dat
    00D13 9030 02D0 LDS	R3,T_dat+1
    00D15 2C32      MOV	R3,R2
    00D16 2422      CLR	R2
    00D17 9230 02D0 STS	T_dat+1,R3
    00D19 9220 02CF STS	T_dat,R2
(0870) 		 T_dat|=Uart0RxData[0];
    00D1B 9020 02E4 LDS	R2,Uart0RxData
    00D1D 2433      CLR	R3
    00D1E 9040 02CF LDS	R4,T_dat
    00D20 9050 02D0 LDS	R5,T_dat+1
    00D22 2842      OR	R4,R2
    00D23 2853      OR	R5,R3
    00D24 9250 02D0 STS	T_dat+1,R5
    00D26 9240 02CF STS	T_dat,R4
(0871) 		 SendManchester();//压力
    00D28 940E 1E37 CALL	_SendManchester
(0872) 		 
(0873) 		 CheckMotor(30);	
    00D2A E10E      LDI	R16,0x1E
    00D2B E010      LDI	R17,0
    00D2C 940E 034A CALL	_CheckMotor
(0874) 		 T_dat=Uart0RxData[3];
    00D2E 9020 02E7 LDS	R2,Uart0RxData+3
    00D30 2433      CLR	R3
    00D31 9230 02D0 STS	T_dat+1,R3
    00D33 9220 02CF STS	T_dat,R2
(0875) 		 T_dat<<=8;
    00D35 9020 02CF LDS	R2,T_dat
    00D37 9030 02D0 LDS	R3,T_dat+1
    00D39 2C32      MOV	R3,R2
    00D3A 2422      CLR	R2
    00D3B 9230 02D0 STS	T_dat+1,R3
    00D3D 9220 02CF STS	T_dat,R2
(0876) 		 T_dat|=Uart0RxData[2];
    00D3F 9020 02E6 LDS	R2,Uart0RxData+2
    00D41 2433      CLR	R3
    00D42 9040 02CF LDS	R4,T_dat
    00D44 9050 02D0 LDS	R5,T_dat+1
    00D46 2842      OR	R4,R2
    00D47 2853      OR	R5,R3
    00D48 9250 02D0 STS	T_dat+1,R5
    00D4A 9240 02CF STS	T_dat,R4
(0877) 		 SendManchester();//温度
    00D4C 940E 1E37 CALL	_SendManchester
(0878) 	break;
    00D4E 940C 1BAC JMP	0x1BAC
(0879) 	
(0880) 	case 0x50://流量采样	    	          	  	   	  	 
(0881) 		  /*	
(0882) 		  CheckMotor(40); //40ms定时		
(0883) 		  myFIB.f=123.456; 
(0884) 		  T_dat=myFIB.i[1];
(0885) 		  SendManchester();
(0886) 		  CheckMotor(40);
(0887) 		  T_dat=myFIB.i[0];
(0888) 		  SendManchester();
(0889) 		  CheckMotor(40);
(0890) 		  myFIB.f=789.012; 
(0891) 		  T_dat=myFIB.i[1];
(0892) 		  SendManchester();
(0893) 		  CheckMotor(40);
(0894) 		  T_dat=myFIB.i[0];
(0895) 		  SendManchester();
(0896) 		  CheckMotor(40);
(0897) 		  */
(0898) 		  Uart0TxData[0]=0xE8;
    00D50 EE88      LDI	R24,0xE8
    00D51 9380 0121 STS	Uart0TxData,R24
(0899) 		  Uart0TxData[1]=0x40;
    00D53 E480      LDI	R24,0x40
    00D54 9380 0122 STS	Uart0TxData+1,R24
(0900) 		  Uart0TxData[2]=0x89;
    00D56 E889      LDI	R24,0x89
    00D57 9380 0123 STS	Uart0TxData+2,R24
(0901) 		  Uart0TxData[3]=9;
    00D59 E089      LDI	R24,0x9
    00D5A 9380 0124 STS	Uart0TxData+3,R24
(0902) 		  SendUart0_2(9,50);//流量板直读检测，超时400ms
    00D5C E322      LDI	R18,0x32
    00D5D E030      LDI	R19,0
    00D5E E009      LDI	R16,0x9
    00D5F 940E 010C CALL	_SendUart0_2
(0903) 		
(0904) 		  lfib=Uart0RxData[5];
    00D61 9020 02E9 LDS	R2,Uart0RxData+5
    00D63 2433      CLR	R3
    00D64 2444      CLR	R4
    00D65 2455      CLR	R5
    00D66 9230 0115 STS	lfib+1,R3
    00D68 9220 0114 STS	lfib,R2
    00D6A 9250 0117 STS	lfib+3,R5
    00D6C 9240 0116 STS	lfib+2,R4
(0905) 		  lfib<<=8;
    00D6E E088      LDI	R24,0x8
    00D6F E090      LDI	R25,0
    00D70 9120 0116 LDS	R18,lfib+2
    00D72 9130 0117 LDS	R19,lfib+3
    00D74 9100 0114 LDS	R16,lfib
    00D76 9110 0115 LDS	R17,lfib+1
    00D78 938A      ST	-Y,R24
    00D79 940E 2337 CALL	lsl32
    00D7B 9310 0115 STS	lfib+1,R17
    00D7D 9300 0114 STS	lfib,R16
    00D7F 9330 0117 STS	lfib+3,R19
    00D81 9320 0116 STS	lfib+2,R18
(0906) 		  lfib|=Uart0RxData[4];
    00D83 9020 02E8 LDS	R2,Uart0RxData+4
    00D85 2433      CLR	R3
    00D86 2444      CLR	R4
    00D87 2455      CLR	R5
    00D88 0138      MOVW	R6,R16
    00D89 0149      MOVW	R8,R18
    00D8A 2862      OR	R6,R2
    00D8B 2873      OR	R7,R3
    00D8C 2884      OR	R8,R4
    00D8D 2895      OR	R9,R5
    00D8E 9270 0115 STS	lfib+1,R7
    00D90 9260 0114 STS	lfib,R6
    00D92 9290 0117 STS	lfib+3,R9
    00D94 9280 0116 STS	lfib+2,R8
(0907) 		  lfib&=0x0000ffff;
    00D96 EF4F      LDI	R20,0xFF
    00D97 EF5F      LDI	R21,0xFF
    00D98 E060      LDI	R22,0
    00D99 E070      LDI	R23,0
    00D9A 0113      MOVW	R2,R6
    00D9B 0124      MOVW	R4,R8
    00D9C 2224      AND	R2,R20
    00D9D 2235      AND	R3,R21
    00D9E 2246      AND	R4,R22
    00D9F 2257      AND	R5,R23
    00DA0 9230 0115 STS	lfib+1,R3
    00DA2 9220 0114 STS	lfib,R2
    00DA4 9250 0117 STS	lfib+3,R5
    00DA6 9240 0116 STS	lfib+2,R4
(0908) 		  myFIB.f=(unsigned long)lfib; 
    00DA8 0181      MOVW	R16,R2
    00DA9 0192      MOVW	R18,R4
    00DAA 940E 2408 CALL	ulong2fp
    00DAC 9310 033C STS	myFIB+1,R17
    00DAE 9300 033B STS	myFIB,R16
    00DB0 9330 033E STS	myFIB+3,R19
    00DB2 9320 033D STS	myFIB+2,R18
(0909) 		  
(0910) 		  T_dat=myFIB.i[1];
    00DB4 9020 033D LDS	R2,myFIB+2
    00DB6 9030 033E LDS	R3,myFIB+3
    00DB8 9230 02D0 STS	T_dat+1,R3
    00DBA 9220 02CF STS	T_dat,R2
(0911) 		  SendManchester();//流量-时间
    00DBC 940E 1E37 CALL	_SendManchester
(0912) 		  crc16array[0]=(unsigned char)(T_dat);
    00DBE 9020 02CF LDS	R2,T_dat
    00DC0 9030 02D0 LDS	R3,T_dat+1
    00DC2 9220 0100 STS	crc16array,R2
(0913) 		  crc16array[1]=(unsigned char)(T_dat>>8);
    00DC4 2C23      MOV	R2,R3
    00DC5 2433      CLR	R3
    00DC6 FC27      SBRC	R2,7
    00DC7 9430      COM	R3
    00DC8 9220 0101 STS	crc16array+1,R2
(0914) 		  
(0915) 		  CheckMotor(30);	
    00DCA E10E      LDI	R16,0x1E
    00DCB E010      LDI	R17,0
    00DCC 940E 034A CALL	_CheckMotor
(0916) 		  T_dat=myFIB.i[0];
    00DCE 9020 033B LDS	R2,myFIB
    00DD0 9030 033C LDS	R3,myFIB+1
    00DD2 9230 02D0 STS	T_dat+1,R3
    00DD4 9220 02CF STS	T_dat,R2
(0917) 		  SendManchester();//流量-时间
    00DD6 940E 1E37 CALL	_SendManchester
(0918) 		  crc16array[2]=(unsigned char)(T_dat);
    00DD8 9020 02CF LDS	R2,T_dat
    00DDA 9030 02D0 LDS	R3,T_dat+1
    00DDC 9220 0102 STS	crc16array+2,R2
(0919) 		  crc16array[3]=(unsigned char)(T_dat>>8);
    00DDE 2C23      MOV	R2,R3
    00DDF 2433      CLR	R3
    00DE0 FC27      SBRC	R2,7
    00DE1 9430      COM	R3
    00DE2 9220 0103 STS	crc16array+3,R2
(0920) 	  
(0921) 		  CheckMotor(30);	
    00DE4 E10E      LDI	R16,0x1E
    00DE5 E010      LDI	R17,0
    00DE6 940E 034A CALL	_CheckMotor
(0922) 		  
(0923) 		  lfib=Uart0RxData[7];
    00DE8 9020 02EB LDS	R2,Uart0RxData+7
    00DEA 2433      CLR	R3
    00DEB 2444      CLR	R4
    00DEC 2455      CLR	R5
    00DED 9230 0115 STS	lfib+1,R3
    00DEF 9220 0114 STS	lfib,R2
    00DF1 9250 0117 STS	lfib+3,R5
    00DF3 9240 0116 STS	lfib+2,R4
(0924) 		  lfib<<=8;
    00DF5 E088      LDI	R24,0x8
    00DF6 E090      LDI	R25,0
    00DF7 9120 0116 LDS	R18,lfib+2
    00DF9 9130 0117 LDS	R19,lfib+3
    00DFB 9100 0114 LDS	R16,lfib
    00DFD 9110 0115 LDS	R17,lfib+1
    00DFF 938A      ST	-Y,R24
    00E00 940E 2337 CALL	lsl32
    00E02 9310 0115 STS	lfib+1,R17
    00E04 9300 0114 STS	lfib,R16
    00E06 9330 0117 STS	lfib+3,R19
    00E08 9320 0116 STS	lfib+2,R18
(0925) 		  lfib|=Uart0RxData[6];
    00E0A 9020 02EA LDS	R2,Uart0RxData+6
    00E0C 2433      CLR	R3
    00E0D 2444      CLR	R4
    00E0E 2455      CLR	R5
    00E0F 0138      MOVW	R6,R16
    00E10 0149      MOVW	R8,R18
    00E11 2862      OR	R6,R2
    00E12 2873      OR	R7,R3
    00E13 2884      OR	R8,R4
    00E14 2895      OR	R9,R5
    00E15 9270 0115 STS	lfib+1,R7
    00E17 9260 0114 STS	lfib,R6
    00E19 9290 0117 STS	lfib+3,R9
    00E1B 9280 0116 STS	lfib+2,R8
(0926) 		  lfib&=0x0000ffff;
    00E1D EF4F      LDI	R20,0xFF
    00E1E EF5F      LDI	R21,0xFF
    00E1F E060      LDI	R22,0
    00E20 E070      LDI	R23,0
    00E21 0113      MOVW	R2,R6
    00E22 0124      MOVW	R4,R8
    00E23 2224      AND	R2,R20
    00E24 2235      AND	R3,R21
    00E25 2246      AND	R4,R22
    00E26 2257      AND	R5,R23
    00E27 9230 0115 STS	lfib+1,R3
    00E29 9220 0114 STS	lfib,R2
    00E2B 9250 0117 STS	lfib+3,R5
    00E2D 9240 0116 STS	lfib+2,R4
(0927) 		  myFIB.f=(unsigned long)lfib; 
    00E2F 0181      MOVW	R16,R2
    00E30 0192      MOVW	R18,R4
    00E31 940E 2408 CALL	ulong2fp
    00E33 9310 033C STS	myFIB+1,R17
    00E35 9300 033B STS	myFIB,R16
    00E37 9330 033E STS	myFIB+3,R19
    00E39 9320 033D STS	myFIB+2,R18
(0928) 		  
(0929) 		  T_dat=myFIB.i[1];
    00E3B 9020 033D LDS	R2,myFIB+2
    00E3D 9030 033E LDS	R3,myFIB+3
    00E3F 9230 02D0 STS	T_dat+1,R3
    00E41 9220 02CF STS	T_dat,R2
(0930) 		  SendManchester();//流量-相位1
    00E43 940E 1E37 CALL	_SendManchester
(0931) 		  crc16array[4]=(unsigned char)(T_dat);
    00E45 9020 02CF LDS	R2,T_dat
    00E47 9030 02D0 LDS	R3,T_dat+1
    00E49 9220 0104 STS	crc16array+4,R2
(0932) 		  crc16array[5]=(unsigned char)(T_dat>>8);
    00E4B 2C23      MOV	R2,R3
    00E4C 2433      CLR	R3
    00E4D FC27      SBRC	R2,7
    00E4E 9430      COM	R3
    00E4F 9220 0105 STS	crc16array+5,R2
(0933) 
(0934) 
(0935) 		  CheckMotor(30);	
    00E51 E10E      LDI	R16,0x1E
    00E52 E010      LDI	R17,0
    00E53 940E 034A CALL	_CheckMotor
(0936) 		  T_dat=myFIB.i[0];
    00E55 9020 033B LDS	R2,myFIB
    00E57 9030 033C LDS	R3,myFIB+1
    00E59 9230 02D0 STS	T_dat+1,R3
    00E5B 9220 02CF STS	T_dat,R2
(0937) 		  SendManchester();//流量-相位2
    00E5D 940E 1E37 CALL	_SendManchester
(0938) 		  crc16array[6]=(unsigned char)(T_dat);
    00E5F 9020 02CF LDS	R2,T_dat
    00E61 9030 02D0 LDS	R3,T_dat+1
    00E63 9220 0106 STS	crc16array+6,R2
(0939) 		  crc16array[7]=(unsigned char)(T_dat>>8);
    00E65 2C23      MOV	R2,R3
    00E66 2433      CLR	R3
    00E67 FC27      SBRC	R2,7
    00E68 9430      COM	R3
    00E69 9220 0107 STS	crc16array+7,R2
(0940) 		  
(0941) 		   CheckMotor(30);	
    00E6B E10E      LDI	R16,0x1E
    00E6C E010      LDI	R17,0
    00E6D 940E 034A CALL	_CheckMotor
(0942) 		  crc16(crc16array,8);//0.75ms
    00E6F E028      LDI	R18,0x8
    00E70 E030      LDI	R19,0
    00E71 E000      LDI	R16,0
    00E72 E011      LDI	R17,1
    00E73 940E 2249 CALL	_crc16
(0943) 		  T_dat=crc16hi;
    00E75 9020 0113 LDS	R2,crc16hi
    00E77 2433      CLR	R3
    00E78 9230 02D0 STS	T_dat+1,R3
    00E7A 9220 02CF STS	T_dat,R2
(0944) 		  T_dat<<=8;
    00E7C 9020 02CF LDS	R2,T_dat
    00E7E 9030 02D0 LDS	R3,T_dat+1
    00E80 2C32      MOV	R3,R2
    00E81 2422      CLR	R2
    00E82 9230 02D0 STS	T_dat+1,R3
    00E84 9220 02CF STS	T_dat,R2
(0945) 		  T_dat|=crc16lo;	  
    00E86 9020 0112 LDS	R2,crc16lo
    00E88 2433      CLR	R3
    00E89 9040 02CF LDS	R4,T_dat
    00E8B 9050 02D0 LDS	R5,T_dat+1
    00E8D 2842      OR	R4,R2
    00E8E 2853      OR	R5,R3
    00E8F 9250 02D0 STS	T_dat+1,R5
    00E91 9240 02CF STS	T_dat,R4
(0946)           SendManchester();//上传CRC校验共2字节
    00E93 940E 1E37 CALL	_SendManchester
(0947) 	break;
    00E95 940C 1BAC JMP	0x1BAC
(0948)  
(0949)   case 0x60://收放电机   
(0950)     if( !(((R_dat)==0x61)  || ((R_dat)==0x62) ) )//既不是正转，也不是反转，则立即返回且不响应上位机
    00E97 90C0 02CD LDS	R12,R_dat
    00E99 90D0 02CE LDS	R13,R_dat+1
    00E9B 01C6      MOVW	R24,R12
    00E9C 3681      CPI	R24,0x61
    00E9D E0E0      LDI	R30,0
    00E9E 079E      CPC	R25,R30
    00E9F F031      BEQ	0x0EA6
    00EA0 3682      CPI	R24,0x62
    00EA1 E0E0      LDI	R30,0
    00EA2 079E      CPC	R25,R30
    00EA3 F011      BEQ	0x0EA6
(0951) 	 break;
    00EA4 940C 1BAC JMP	0x1BAC
(0952) 	
(0953)     if(PWM2_PIN==1)//调节电机正在运行
    00EA6 B180      IN	R24,0x00
    00EA7 7084      ANDI	R24,4
    00EA8 9586      LSR	R24
    00EA9 9586      LSR	R24
    00EAA 3081      CPI	R24,1
    00EAB F471      BNE	0x0EBA
(0954) 	 {
(0955) 	       Motor1Status.s.StartResult=3;//另一电机正在运行
    00EAC 9180 0339 LDS	R24,Motor1Status
    00EAE 9190 033A LDS	R25,Motor1Status+1
    00EB0 6C80      ORI	R24,0xC0
    00EB1 9390 033A STS	Motor1Status+1,R25
    00EB3 9380 0339 STS	Motor1Status,R24
(0956) 		   CheckMotor(100);//很快响应上位机
    00EB5 E604      LDI	R16,0x64
    00EB6 E010      LDI	R17,0
    00EB7 940E 034A CALL	_CheckMotor
(0957) 	 }
    00EB9 C0AC      RJMP	0x0F66
(0958)     else if(PWM1_PIN==1)//收放电机正在运行
    00EBA B389      IN	R24,0x19
    00EBB 7082      ANDI	R24,2
    00EBC 9586      LSR	R24
    00EBD 3081      CPI	R24,1
    00EBE F009      BEQ	0x0EC0
    00EBF C050      RJMP	0x0F10
(0959) 	 { 
(0960) 	   if( ((DIR1_PIN==1) && (R_dat==0x61)) || ((DIR1_PIN==0) && (R_dat==0x62)) )//20161229
    00EC0 B389      IN	R24,0x19
    00EC1 7084      ANDI	R24,4
    00EC2 9586      LSR	R24
    00EC3 9586      LSR	R24
    00EC4 3081      CPI	R24,1
    00EC5 F441      BNE	0x0ECE
    00EC6 9180 02CD LDS	R24,R_dat
    00EC8 9190 02CE LDS	R25,R_dat+1
    00ECA 3681      CPI	R24,0x61
    00ECB E0E0      LDI	R30,0
    00ECC 079E      CPC	R25,R30
    00ECD F069      BEQ	0x0EDB
    00ECE B389      IN	R24,0x19
    00ECF 7084      ANDI	R24,4
    00ED0 9586      LSR	R24
    00ED1 9586      LSR	R24
    00ED2 F499      BNE	0x0EE6
    00ED3 9180 02CD LDS	R24,R_dat
    00ED5 9190 02CE LDS	R25,R_dat+1
    00ED7 3682      CPI	R24,0x62
    00ED8 E0E0      LDI	R30,0
    00ED9 079E      CPC	R25,R30
    00EDA F459      BNE	0x0EE6
(0961) 	    { 
(0962) 		   Motor1Status.s.StartResult=1;//本电机正在同向运行
    00EDB 9180 0339 LDS	R24,Motor1Status
    00EDD 9190 033A LDS	R25,Motor1Status+1
    00EDF 738F      ANDI	R24,0x3F
    00EE0 6480      ORI	R24,0x40
    00EE1 9390 033A STS	Motor1Status+1,R25
    00EE3 9380 0339 STS	Motor1Status,R24
(0963) 		}
    00EE5 C025      RJMP	0x0F0B
(0964) 		else if( ((DIR1_PIN==1) && (R_dat==0x62)) || ((DIR1_PIN==0) && (R_dat==0x61)) ) //20161229
    00EE6 B389      IN	R24,0x19
    00EE7 7084      ANDI	R24,4
    00EE8 9586      LSR	R24
    00EE9 9586      LSR	R24
    00EEA 3081      CPI	R24,1
    00EEB F441      BNE	0x0EF4
    00EEC 9180 02CD LDS	R24,R_dat
    00EEE 9190 02CE LDS	R25,R_dat+1
    00EF0 3682      CPI	R24,0x62
    00EF1 E0E0      LDI	R30,0
    00EF2 079E      CPC	R25,R30
    00EF3 F069      BEQ	0x0F01
    00EF4 B389      IN	R24,0x19
    00EF5 7084      ANDI	R24,4
    00EF6 9586      LSR	R24
    00EF7 9586      LSR	R24
    00EF8 F491      BNE	0x0F0B
    00EF9 9180 02CD LDS	R24,R_dat
    00EFB 9190 02CE LDS	R25,R_dat+1
    00EFD 3681      CPI	R24,0x61
    00EFE E0E0      LDI	R30,0
    00EFF 079E      CPC	R25,R30
    00F00 F451      BNE	0x0F0B
(0965) 		{
(0966) 		    Motor1Status.s.StartResult=2;//本电机正在反向运行
    00F01 9180 0339 LDS	R24,Motor1Status
    00F03 9190 033A LDS	R25,Motor1Status+1
    00F05 738F      ANDI	R24,0x3F
    00F06 6880      ORI	R24,0x80
    00F07 9390 033A STS	Motor1Status+1,R25
    00F09 9380 0339 STS	Motor1Status,R24
(0967) 		}
(0968) 		CheckMotor(100); //很快响应上位机
    00F0B E604      LDI	R16,0x64
    00F0C E010      LDI	R17,0
    00F0D 940E 034A CALL	_CheckMotor
(0969) 	 }
    00F0F C056      RJMP	0x0F66
(0970) 	else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
(0971) 	 {  
(0972) 	    //全部电机状态置初值，上一次停止原因全部清除
(0973) 		Motor1Status.s.BrokenStop=0;
    00F10 9180 0339 LDS	R24,Motor1Status
    00F12 9190 033A LDS	R25,Motor1Status+1
    00F14 7F8B      ANDI	R24,0xFB
    00F15 9390 033A STS	Motor1Status+1,R25
    00F17 9380 0339 STS	Motor1Status,R24
(0974)  	    Motor1Status.s.CommandStop=0;
    00F19 7F87      ANDI	R24,0xF7
    00F1A 9390 033A STS	Motor1Status+1,R25
    00F1C 9380 0339 STS	Motor1Status,R24
(0975)  	    Motor1Status.s.OverCurrent=0;
    00F1E 7E8F      ANDI	R24,0xEF
    00F1F 9390 033A STS	Motor1Status+1,R25
    00F21 9380 0339 STS	Motor1Status,R24
(0976)  	    Motor1Status.s.UnderVoltage=0;
    00F23 7D8F      ANDI	R24,0xDF
    00F24 9390 033A STS	Motor1Status+1,R25
    00F26 9380 0339 STS	Motor1Status,R24
(0977) 		Motor1Status.s.StartResult=0;//正常启动
    00F28 738F      ANDI	R24,0x3F
    00F29 9390 033A STS	Motor1Status+1,R25
    00F2B 9380 0339 STS	Motor1Status,R24
(0978)  	   	
(0979) 		if((R_dat)==0x61)//张开命令
    00F2D 9180 02CD LDS	R24,R_dat
    00F2F 9190 02CE LDS	R25,R_dat+1
    00F31 3681      CPI	R24,0x61
    00F32 E0E0      LDI	R30,0
    00F33 079E      CPC	R25,R30
    00F34 F419      BNE	0x0F38
(0980) 		  { 
(0981) 		   DIR1_H       //张开
    00F35 9AD2      SBI	0x1A,2
    00F36 9ADA      SBI	0x1B,2
(0982) 		  }
    00F37 C00E      RJMP	0x0F46
(0983) 		else if((R_dat)==0x62)          
    00F38 9180 02CD LDS	R24,R_dat
    00F3A 9190 02CE LDS	R25,R_dat+1
    00F3C 3682      CPI	R24,0x62
    00F3D E0E0      LDI	R30,0
    00F3E 079E      CPC	R25,R30
    00F3F F011      BEQ	0x0F42
    00F40 940C 1BB7 JMP	0x1BB7
(0984) 		 { 
(0985) 		   DIR1_L      //收拢
    00F42 9AD2      SBI	0x1A,2
    00F43 B38B      IN	R24,0x1B
    00F44 7F8B      ANDI	R24,0xFB
    00F45 BB8B      OUT	0x1B,R24
(0986) 		 }
(0987) 		 else
(0988) 		 {
(0989) 		 return;//20170609
(0990) 		 }
(0991) 		 
(0992) 		VM_H//开电机电源
    00F46 9ABF      SBI	0x17,7
    00F47 9AC7      SBI	0x18,7
(0993) 		
(0994) 		CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定
    00F48 EF04      LDI	R16,0xF4
    00F49 E011      LDI	R17,1
    00F4A 940E 034A CALL	_CheckMotor
(0995) 		 
(0996) 	    
(0997) 			
(0998) 		//CompCounter=0; //电流监测计数器清0
(0999) 		//EIFR|=0x01;//清INT0中断标志
(1000) 		//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
(1001) 		
(1002) 		TCCR1B = 0x00; //stop
    00F4C 2422      CLR	R2
    00F4D BC2E      OUT	0x2E,R2
(1003)     	TCNT1 = 61629;   //定时500ms
    00F4E EB8D      LDI	R24,0xBD
    00F4F EF90      LDI	R25,0xF0
    00F50 BD9D      OUT	0x2D,R25
    00F51 BD8C      OUT	0x2C,R24
(1004) 		TIFR|=0x04; //清定时器1中断标志
    00F52 B786      IN	R24,0x36
    00F53 6084      ORI	R24,4
    00F54 BF86      OUT	0x36,R24
(1005)  		TCCR1B = 0x05; //1024分频
    00F55 E085      LDI	R24,5
    00F56 BD8E      OUT	0x2E,R24
(1006) 		TIFR|=0x04; //清定时器1中断标志
    00F57 B786      IN	R24,0x36
    00F58 6084      ORI	R24,4
    00F59 BF86      OUT	0x36,R24
(1007) 		
(1008) 		Pwm_startup(1);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测		
    00F5A E001      LDI	R16,1
    00F5B 940E 01B2 CALL	_Pwm_startup
(1009) 			  
(1010) 		while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
    00F5D B626      IN	R2,0x36
    00F5E FE22      SBRS	R2,2
    00F5F CFFD      RJMP	0x0F5D
(1011) 		TCCR1B = 0x00; //stop
    00F60 2422      CLR	R2
    00F61 BC2E      OUT	0x2E,R2
(1012) 		
(1013) 		//EIFR|=0x01;//清INT0中断标志
(1014) 		//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
(1015) 
(1016) 		CheckMotor(500);//延时保证总线电压稳定		
    00F62 EF04      LDI	R16,0xF4
    00F63 E011      LDI	R17,1
    00F64 940E 034A CALL	_CheckMotor
(1017)      }
(1018) 	  T_dat=Motor1Status.i;
    00F66 9020 0339 LDS	R2,Motor1Status
    00F68 9030 033A LDS	R3,Motor1Status+1
    00F6A 9230 02D0 STS	T_dat+1,R3
    00F6C 9220 02CF STS	T_dat,R2
(1019) 	  SendManchester();	 
    00F6E 940E 1E37 CALL	_SendManchester
(1020) 	
(1021) 	break;
    00F70 940C 1BAC JMP	0x1BAC
(1022) 	
(1023) 	case 0x70://调节电机   
(1024)     if( ((R_dat)<0x71)  || ((R_dat)>0x7c)  )//既不是调大，也不是调小，也不微调大，也不是微调小，则立即返回且不响应上位机
    00F72 90C0 02CD LDS	R12,R_dat
    00F74 90D0 02CE LDS	R13,R_dat+1
    00F76 01C6      MOVW	R24,R12
    00F77 3781      CPI	R24,0x71
    00F78 E0E0      LDI	R30,0
    00F79 079E      CPC	R25,R30
    00F7A F02C      BLT	0x0F80
    00F7B E78C      LDI	R24,0x7C
    00F7C E090      LDI	R25,0
    00F7D 158C      CP	R24,R12
    00F7E 059D      CPC	R25,R13
    00F7F F414      BGE	0x0F82
(1025) 	 break;
    00F80 940C 1BAC JMP	0x1BAC
(1026) 
(1027) 	 i=R_dat%2;
    00F82 E022      LDI	R18,2
    00F83 E030      LDI	R19,0
    00F84 9100 02CD LDS	R16,R_dat
    00F86 9110 02CE LDS	R17,R_dat+1
    00F88 940E 22A8 CALL	mod16s
    00F8A 2EA0      MOV	R10,R16
(1028)     if(PWM1_PIN==1)//收放电机正在运行
    00F8B B389      IN	R24,0x19
    00F8C 7082      ANDI	R24,2
    00F8D 9586      LSR	R24
    00F8E 3081      CPI	R24,1
    00F8F F471      BNE	0x0F9E
(1029) 	 {
(1030) 	      Motor2Status.s.StartResult=3;//另一电机正在运行
    00F90 9180 0337 LDS	R24,Motor2Status
    00F92 9190 0338 LDS	R25,Motor2Status+1
    00F94 6C80      ORI	R24,0xC0
    00F95 9390 0338 STS	Motor2Status+1,R25
    00F97 9380 0337 STS	Motor2Status,R24
(1031) 		  CheckMotor(100);//很快响应上位机
    00F99 E604      LDI	R16,0x64
    00F9A E010      LDI	R17,0
    00F9B 940E 034A CALL	_CheckMotor
(1032) 	 }
    00F9D C08F      RJMP	0x102D
(1033)     else if(PWM2_PIN==1)//调节电机正在运行
    00F9E B180      IN	R24,0x00
    00F9F 7084      ANDI	R24,4
    00FA0 9586      LSR	R24
    00FA1 9586      LSR	R24
    00FA2 3081      CPI	R24,1
    00FA3 F581      BNE	0x0FD4
(1034) 	 { 
(1035) 	   
(1036) 	   if( ( (DIR2_PIN==0) && (i==1) ) || ( (DIR2_PIN==1) && (i==0) ) )
    00FA4 9900      SBIC	0x00,0
    00FA5 C003      RJMP	0x0FA9
    00FA6 2D8A      MOV	R24,R10
    00FA7 3081      CPI	R24,1
    00FA8 F031      BEQ	0x0FAF
    00FA9 B180      IN	R24,0x00
    00FAA 7081      ANDI	R24,1
    00FAB 3081      CPI	R24,1
    00FAC F469      BNE	0x0FBA
    00FAD 20AA      TST	R10
    00FAE F459      BNE	0x0FBA
(1037) 	    { 
(1038) 		   Motor2Status.s.StartResult=1;//本电机正在同向运行
    00FAF 9180 0337 LDS	R24,Motor2Status
    00FB1 9190 0338 LDS	R25,Motor2Status+1
    00FB3 738F      ANDI	R24,0x3F
    00FB4 6480      ORI	R24,0x40
    00FB5 9390 0338 STS	Motor2Status+1,R25
    00FB7 9380 0337 STS	Motor2Status,R24
(1039) 		}
    00FB9 C015      RJMP	0x0FCF
(1040) 		else if( ( (DIR2_PIN==0) && (i==0) ) || ((DIR2_PIN==1) && (i==1) ) )
    00FBA 9900      SBIC	0x00,0
    00FBB C002      RJMP	0x0FBE
    00FBC 20AA      TST	R10
    00FBD F039      BEQ	0x0FC5
    00FBE B180      IN	R24,0x00
    00FBF 7081      ANDI	R24,1
    00FC0 3081      CPI	R24,1
    00FC1 F469      BNE	0x0FCF
    00FC2 2D8A      MOV	R24,R10
    00FC3 3081      CPI	R24,1
    00FC4 F451      BNE	0x0FCF
(1041) 		{
(1042) 		   Motor2Status.s.StartResult=2;//本电机正在反向运行
    00FC5 9180 0337 LDS	R24,Motor2Status
    00FC7 9190 0338 LDS	R25,Motor2Status+1
    00FC9 738F      ANDI	R24,0x3F
    00FCA 6880      ORI	R24,0x80
    00FCB 9390 0338 STS	Motor2Status+1,R25
    00FCD 9380 0337 STS	Motor2Status,R24
(1043) 		}	 
(1044) 		CheckMotor(100); //很快响应上位机
    00FCF E604      LDI	R16,0x64
    00FD0 E010      LDI	R17,0
    00FD1 940E 034A CALL	_CheckMotor
(1045) 	 }
    00FD3 C059      RJMP	0x102D
(1046) 	else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
(1047) 	 {  
(1048)  	    //全部电机状态置初值，上一次停止原因全部清除
(1049) 		Motor2Status.s.BrokenStop=0;
    00FD4 9180 0337 LDS	R24,Motor2Status
    00FD6 9190 0338 LDS	R25,Motor2Status+1
    00FD8 7F8B      ANDI	R24,0xFB
    00FD9 9390 0338 STS	Motor2Status+1,R25
    00FDB 9380 0337 STS	Motor2Status,R24
(1050)  	    Motor2Status.s.CommandStop=0;
    00FDD 7F87      ANDI	R24,0xF7
    00FDE 9390 0338 STS	Motor2Status+1,R25
    00FE0 9380 0337 STS	Motor2Status,R24
(1051)  	    Motor2Status.s.OverCurrent=0;
    00FE2 7E8F      ANDI	R24,0xEF
    00FE3 9390 0338 STS	Motor2Status+1,R25
    00FE5 9380 0337 STS	Motor2Status,R24
(1052)  	    Motor2Status.s.UnderVoltage=0;
    00FE7 7D8F      ANDI	R24,0xDF
    00FE8 9390 0338 STS	Motor2Status+1,R25
    00FEA 9380 0337 STS	Motor2Status,R24
(1053) 		Motor2Status.s.StartResult=0;//正常启动
    00FEC 738F      ANDI	R24,0x3F
    00FED 9390 0338 STS	Motor2Status+1,R25
    00FEF 9380 0337 STS	Motor2Status,R24
(1054) 		
(1055) 		 if( i==1 )//奇数命令，调大
    00FF1 2D8A      MOV	R24,R10
    00FF2 3081      CPI	R24,1
    00FF3 F459      BNE	0x0FFF
(1056) 		  { 
(1057) 		   DIR2_L      //20161229 
    00FF4 9180 0061 LDS	R24,0x61
    00FF6 6081      ORI	R24,1
    00FF7 9380 0061 STS	0x61,R24
    00FF9 9180 0062 LDS	R24,0x62
    00FFB 7F8E      ANDI	R24,0xFE
    00FFC 9380 0062 STS	0x62,R24
(1058) 		  }
    00FFE C00E      RJMP	0x100D
(1059) 		else if( i==0 )    //偶数命令，调小
    00FFF 20AA      TST	R10
    01000 F011      BEQ	0x1003
    01001 940C 1BB7 JMP	0x1BB7
(1060) 		 { 
(1061) 		   DIR2_H      //20161229 
    01003 9180 0061 LDS	R24,0x61
    01005 6081      ORI	R24,1
    01006 9380 0061 STS	0x61,R24
    01008 9180 0062 LDS	R24,0x62
    0100A 6081      ORI	R24,1
    0100B 9380 0062 STS	0x62,R24
(1062) 		 }
(1063) 		 else
(1064) 		 {
(1065) 		  return;//20170609
(1066) 		 }
(1067) 		 
(1068) 		VM_H//开电机电源
    0100D 9ABF      SBI	0x17,7
    0100E 9AC7      SBI	0x18,7
(1069) 		
(1070) 		CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定
    0100F EF04      LDI	R16,0xF4
    01010 E011      LDI	R17,1
    01011 940E 034A CALL	_CheckMotor
(1071) 		
(1072) 		//CompCounter=0; //电流监测计数器清0
(1073) 		//EIFR|=0x01;//清INT0中断标志
(1074) 		//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
(1075) 		
(1076) 		TCCR1B = 0x00; //stop
    01013 2422      CLR	R2
    01014 BC2E      OUT	0x2E,R2
(1077)     	TCNT1 = 61629;   //定时500ms
    01015 EB8D      LDI	R24,0xBD
    01016 EF90      LDI	R25,0xF0
    01017 BD9D      OUT	0x2D,R25
    01018 BD8C      OUT	0x2C,R24
(1078) 		TIFR|=0x04; //清定时器1中断标志
    01019 B786      IN	R24,0x36
    0101A 6084      ORI	R24,4
    0101B BF86      OUT	0x36,R24
(1079)  		TCCR1B = 0x05; //1024分频
    0101C E085      LDI	R24,5
    0101D BD8E      OUT	0x2E,R24
(1080) 		TIFR|=0x04; //清定时器1中断标志
    0101E B786      IN	R24,0x36
    0101F 6084      ORI	R24,4
    01020 BF86      OUT	0x36,R24
(1081) 
(1082) 		Pwm_startup(2);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测					
    01021 E002      LDI	R16,2
    01022 940E 01B2 CALL	_Pwm_startup
(1083) 			  
(1084) 		while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
    01024 B626      IN	R2,0x36
    01025 FE22      SBRS	R2,2
    01026 CFFD      RJMP	0x1024
(1085) 		TCCR1B = 0x00; //stop
    01027 2422      CLR	R2
    01028 BC2E      OUT	0x2E,R2
(1086) 		
(1087) 		//EIFR|=0x01;//清INT0中断标志
(1088) 		//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
(1089) 					
(1090) 		CheckMotor(500);//延时保证总线电压稳定		 	 
    01029 EF04      LDI	R16,0xF4
    0102A E011      LDI	R17,1
    0102B 940E 034A CALL	_CheckMotor
(1091)      }
(1092) 	  T_dat=Motor2Status.i;
    0102D 9020 0337 LDS	R2,Motor2Status
    0102F 9030 0338 LDS	R3,Motor2Status+1
    01031 9230 02D0 STS	T_dat+1,R3
    01033 9220 02CF STS	T_dat,R2
(1093) 	  SendManchester();		
    01035 940E 1E37 CALL	_SendManchester
(1094) 	  if(R_dat>0x72)//微调，需要定时，定时到后自动停止
    01037 E782      LDI	R24,0x72
    01038 E090      LDI	R25,0
    01039 9020 02CD LDS	R2,R_dat
    0103B 9030 02CE LDS	R3,R_dat+1
    0103D 1582      CP	R24,R2
    0103E 0593      CPC	R25,R3
    0103F F014      BLT	0x1042
    01040 940C 1BAC JMP	0x1BAC
(1095) 	  {
(1096) 	    ETIFR=0x04;//清Timer3溢出中断标志
    01042 E084      LDI	R24,4
    01043 9380 007C STS	0x7C,R24
(1097) 	    ETIMSK = 0x04; //Timer3溢出中断使能，其它中断关闭
    01045 9380 007D STS	0x7D,R24
(1098) 	    TCCR3B = 0x00;
    01047 2422      CLR	R2
    01048 9220 008A STS	0x8A,R2
(1099) 		
(1100) 		j=(R_dat-0x72+1)/2;
    0104A E022      LDI	R18,2
    0104B E030      LDI	R19,0
    0104C 9100 02CD LDS	R16,R_dat
    0104E 9110 02CE LDS	R17,R_dat+1
    01050 5702      SUBI	R16,0x72
    01051 4010      SBCI	R17,0
    01052 5F0F      SUBI	R16,0xFF
    01053 4F1F      SBCI	R17,0xFF
    01054 940E 22AC CALL	div16s
    01056 0168      MOVW	R12,R16
(1101) 		j+=1;//多加一秒
    01057 01C6      MOVW	R24,R12
    01058 9601      ADIW	R24,1
(1102) 		j=j*7812;
    01059 E804      LDI	R16,0x84
    0105A E11E      LDI	R17,0x1E
    0105B 019C      MOVW	R18,R24
    0105C 940E 22F6 CALL	empy16s
    0105E 0168      MOVW	R12,R16
(1103) 		j=65536-j;
    0105F 0116      MOVW	R2,R12
    01060 2444      CLR	R4
    01061 2455      CLR	R5
    01062 E040      LDI	R20,0
    01063 E050      LDI	R21,0
    01064 E061      LDI	R22,1
    01065 E070      LDI	R23,0
    01066 1942      SUB	R20,R2
    01067 0953      SBC	R21,R3
    01068 0964      SBC	R22,R4
    01069 0975      SBC	R23,R5
(1104) 		j+=1;
    0106A 01CA      MOVW	R24,R20
    0106B 9601      ADIW	R24,1
    0106C 016C      MOVW	R12,R24
(1105) 		
(1106) 		TCNT3H = j>>8;  //最小1秒，最多5秒
    0106D 011C      MOVW	R2,R24
    0106E 2C23      MOV	R2,R3
    0106F 2433      CLR	R3
    01070 9220 0089 STS	0x89,R2
(1107) 		TCNT3L = j;
    01072 92C0 0088 STS	0x88,R12
(1108) 		
(1109)  		//TCNT3H = 0xE1;  //1秒
(1110) 		//TCNT3L = 0x7C;
(1111) 		
(1112) 		 //TCNT3H = 0xC2; //2秒
(1113)  		 //TCNT3L = 0xF7;
(1114)  
(1115) 		// TCNT3H = 0xA4; //3秒
(1116)  		// TCNT3L = 0x73;
(1117)  
(1118)  		
(1119)  		TCCR3A = 0x00;
    01074 2422      CLR	R2
    01075 9220 008B STS	0x8B,R2
(1120)  		TCCR3B = 0x05; //8M时钟，1024分频，定时1秒
    01077 E085      LDI	R24,5
    01078 9380 008A STS	0x8A,R24
(1121) 		ETIFR=0x04;//清Timer3溢出中断标志
    0107A E084      LDI	R24,4
    0107B 9380 007C STS	0x7C,R24
(1122) 	  } 
(1123) 	break;
    0107D 940C 1BAC JMP	0x1BAC
(1124)  
(1125)     case 0x80://电机相关
(1126) 	   if(R_dat==0x80)//只开电机电源，不开电机
    0107F 9180 02CD LDS	R24,R_dat
    01081 9190 02CE LDS	R25,R_dat+1
    01083 3880      CPI	R24,0x80
    01084 E0E0      LDI	R30,0
    01085 079E      CPC	R25,R30
    01086 F4A1      BNE	0x109B
(1127) 		{        	  
(1128) 	      CheckMotor(30);//延迟10ms  
    01087 E10E      LDI	R16,0x1E
    01088 E010      LDI	R17,0
    01089 940E 034A CALL	_CheckMotor
(1129) 		  VM_H//开电机电源
    0108B 9ABF      SBI	0x17,7
    0108C 9AC7      SBI	0x18,7
(1130) 		  CheckMotor(30);//延迟10ms  
    0108D E10E      LDI	R16,0x1E
    0108E E010      LDI	R17,0
    0108F 940E 034A CALL	_CheckMotor
(1131) 		  T_dat=0x0000;   
    01091 2422      CLR	R2
    01092 2433      CLR	R3
    01093 9230 02D0 STS	T_dat+1,R3
    01095 9220 02CF STS	T_dat,R2
(1132) 	      SendManchester();
    01097 940E 1E37 CALL	_SendManchester
(1133) 		}	  
    01099 940C 1BAC JMP	0x1BAC
(1134) 		else if(R_dat==0x81)//获取电机状态	
    0109B 9180 02CD LDS	R24,R_dat
    0109D 9190 02CE LDS	R25,R_dat+1
    0109F 3881      CPI	R24,0x81
    010A0 E0E0      LDI	R30,0
    010A1 079E      CPC	R25,R30
    010A2 F4F1      BNE	0x10C1
(1135) 		{ 
(1136)          //先处理收放电机
(1137) 	      CheckMotor(30);//延迟10ms  
    010A3 E10E      LDI	R16,0x1E
    010A4 E010      LDI	R17,0
    010A5 940E 034A CALL	_CheckMotor
(1138) 		  T_dat=Motor1Status.i;	   
    010A7 9020 0339 LDS	R2,Motor1Status
    010A9 9030 033A LDS	R3,Motor1Status+1
    010AB 9230 02D0 STS	T_dat+1,R3
    010AD 9220 02CF STS	T_dat,R2
(1139) 	      SendManchester();
    010AF 940E 1E37 CALL	_SendManchester
(1140) 		  
(1141) 		  //再处理调节电机 
(1142) 	      CheckMotor(30);//延迟10ms  
    010B1 E10E      LDI	R16,0x1E
    010B2 E010      LDI	R17,0
    010B3 940E 034A CALL	_CheckMotor
(1143) 		  T_dat=Motor2Status.i;	    
    010B5 9020 0337 LDS	R2,Motor2Status
    010B7 9030 0338 LDS	R3,Motor2Status+1
    010B9 9230 02D0 STS	T_dat+1,R3
    010BB 9220 02CF STS	T_dat,R2
(1144) 	      SendManchester();	  
    010BD 940E 1E37 CALL	_SendManchester
(1145) 		}	  
    010BF 940C 1BAC JMP	0x1BAC
(1146)        else if(R_dat==0x82)//电机停止，同时停止二个电机
    010C1 9180 02CD LDS	R24,R_dat
    010C3 9190 02CE LDS	R25,R_dat+1
    010C5 3882      CPI	R24,0x82
    010C6 E0E0      LDI	R30,0
    010C7 079E      CPC	R25,R30
    010C8 F009      BEQ	0x10CA
    010C9 C047      RJMP	0x1111
(1147) 		{	 
(1148) 		   if(PWM1_PIN==1)//收放电机正在运行
    010CA B389      IN	R24,0x19
    010CB 7082      ANDI	R24,2
    010CC 9586      LSR	R24
    010CD 3081      CPI	R24,1
    010CE F449      BNE	0x10D8
(1149)    		   {
(1150)  		   Motor1Status.s.CommandStop=1;
    010CF 9180 0339 LDS	R24,Motor1Status
    010D1 9190 033A LDS	R25,Motor1Status+1
    010D3 6088      ORI	R24,0x8
    010D4 9390 033A STS	Motor1Status+1,R25
    010D6 9380 0339 STS	Motor1Status,R24
(1151)    		   }
(1152)  		   if(PWM2_PIN==1)//调节电机正在运行
    010D8 B180      IN	R24,0x00
    010D9 7084      ANDI	R24,4
    010DA 9586      LSR	R24
    010DB 9586      LSR	R24
    010DC 3081      CPI	R24,1
    010DD F449      BNE	0x10E7
(1153)    		   { 
(1154)  		   Motor2Status.s.CommandStop=1;
    010DE 9180 0337 LDS	R24,Motor2Status
    010E0 9190 0338 LDS	R25,Motor2Status+1
    010E2 6088      ORI	R24,0x8
    010E3 9390 0338 STS	Motor2Status+1,R25
    010E5 9380 0337 STS	Motor2Status,R24
(1155)    		   }
(1156)  	 	   MOTORSTOP  //关电机
    010E7 B38A      IN	R24,0x1A
    010E8 6087      ORI	R24,7
    010E9 BB8A      OUT	0x1A,R24
    010EA B38B      IN	R24,0x1B
    010EB 7F8D      ANDI	R24,0xFD
    010EC BB8B      OUT	0x1B,R24
    010ED B38B      IN	R24,0x1B
    010EE 7F88      ANDI	R24,0xF8
    010EF BB8B      OUT	0x1B,R24
    010F0 9180 0061 LDS	R24,0x61
    010F2 6087      ORI	R24,7
    010F3 9380 0061 STS	0x61,R24
    010F5 9180 0062 LDS	R24,0x62
    010F7 7F8B      ANDI	R24,0xFB
    010F8 9380 0062 STS	0x62,R24
    010FA 9180 0062 LDS	R24,0x62
    010FC 7F88      ANDI	R24,0xF8
    010FD 9380 0062 STS	0x62,R24
    010FF 9ABF      SBI	0x17,7
    01100 B388      IN	R24,0x18
    01101 778F      ANDI	R24,0x7F
    01102 BB88      OUT	0x18,R24
(1157) 		   CheckMotor(200);
    01103 EC08      LDI	R16,0xC8
    01104 E010      LDI	R17,0
    01105 940E 034A CALL	_CheckMotor
(1158) 		   T_dat=0x0000;	
    01107 2422      CLR	R2
    01108 2433      CLR	R3
    01109 9230 02D0 STS	T_dat+1,R3
    0110B 9220 02CF STS	T_dat,R2
(1159) 		   SendManchester();	 
    0110D 940E 1E37 CALL	_SendManchester
(1160) 		}
    0110F 940C 1BAC JMP	0x1BAC
(1161) 		else if(R_dat==0x83)//读取电机堵转电流档位和断路档位
    01111 9180 02CD LDS	R24,R_dat
    01113 9190 02CE LDS	R25,R_dat+1
    01115 3883      CPI	R24,0x83
    01116 E0E0      LDI	R30,0
    01117 079E      CPC	R25,R30
    01118 F009      BEQ	0x111A
    01119 C05D      RJMP	0x1177
(1162) 	    {
(1163) 		  Motor1Gear=EEPROM_read(0);//收放电机
    0111A 2700      CLR	R16
    0111B 2711      CLR	R17
    0111C 940E 2242 CALL	_EEPROM_read
    0111E 2EC0      MOV	R12,R16
    0111F 92C0 0336 STS	Motor1Gear,R12
(1164) 		  Motor2Gear=EEPROM_read(1);//调节电机
    01121 E001      LDI	R16,1
    01122 E010      LDI	R17,0
    01123 940E 2242 CALL	_EEPROM_read
    01125 2EC0      MOV	R12,R16
    01126 92C0 0335 STS	Motor2Gear,R12
(1165) 		  MotorIdelGear=EEPROM_read(2); //电机断路
    01128 E002      LDI	R16,2
    01129 E010      LDI	R17,0
    0112A 940E 2242 CALL	_EEPROM_read
    0112C 2EC0      MOV	R12,R16
    0112D 92C0 0332 STS	MotorIdelGear,R12
(1166) 		  Gear2Thr();
    0112F 940E 05DA CALL	_Gear2Thr
(1167) 		  CheckMotor(30);//延迟30ms  	
    01131 E10E      LDI	R16,0x1E
    01132 E010      LDI	R17,0
    01133 940E 034A CALL	_CheckMotor
(1168) 		  T_dat=MotorIdelGear;
    01135 9020 0332 LDS	R2,MotorIdelGear
    01137 2433      CLR	R3
    01138 9230 02D0 STS	T_dat+1,R3
    0113A 9220 02CF STS	T_dat,R2
(1169) 		  T_dat<<=4;
    0113C 9020 02CF LDS	R2,T_dat
    0113E 9030 02D0 LDS	R3,T_dat+1
    01140 0C22      LSL	R2
    01141 1C33      ROL	R3
    01142 0C22      LSL	R2
    01143 1C33      ROL	R3
    01144 0C22      LSL	R2
    01145 1C33      ROL	R3
    01146 0C22      LSL	R2
    01147 1C33      ROL	R3
    01148 9230 02D0 STS	T_dat+1,R3
    0114A 9220 02CF STS	T_dat,R2
(1170) 		  T_dat|=Motor2Gear;	 
    0114C 9020 0335 LDS	R2,Motor2Gear
    0114E 2433      CLR	R3
    0114F 9040 02CF LDS	R4,T_dat
    01151 9050 02D0 LDS	R5,T_dat+1
    01153 2842      OR	R4,R2
    01154 2853      OR	R5,R3
    01155 9250 02D0 STS	T_dat+1,R5
    01157 9240 02CF STS	T_dat,R4
(1171) 		  T_dat<<=4;
    01159 0112      MOVW	R2,R4
    0115A 0C22      LSL	R2
    0115B 1C33      ROL	R3
    0115C 0C22      LSL	R2
    0115D 1C33      ROL	R3
    0115E 0C22      LSL	R2
    0115F 1C33      ROL	R3
    01160 0C22      LSL	R2
    01161 1C33      ROL	R3
    01162 9230 02D0 STS	T_dat+1,R3
    01164 9220 02CF STS	T_dat,R2
(1172) 		  T_dat|=Motor1Gear; 
    01166 9020 0336 LDS	R2,Motor1Gear
    01168 2433      CLR	R3
    01169 9040 02CF LDS	R4,T_dat
    0116B 9050 02D0 LDS	R5,T_dat+1
    0116D 2842      OR	R4,R2
    0116E 2853      OR	R5,R3
    0116F 9250 02D0 STS	T_dat+1,R5
    01171 9240 02CF STS	T_dat,R4
(1173) 	      SendManchester();
    01173 940E 1E37 CALL	_SendManchester
(1174) 	    }	
    01175 940C 1BAC JMP	0x1BAC
(1175) 		else if(R_dat>0x83)//还剩12档，用于设置电机堵转电流, 收放电机和调节电机各6档
    01177 E883      LDI	R24,0x83
    01178 E090      LDI	R25,0
    01179 9020 02CD LDS	R2,R_dat
    0117B 9030 02CE LDS	R3,R_dat+1
    0117D 1582      CP	R24,R2
    0117E 0593      CPC	R25,R3
    0117F F014      BLT	0x1182
    01180 940C 1BAC JMP	0x1BAC
(1176) 		{
(1177) 		  if(R_dat==0x84)
    01182 01C1      MOVW	R24,R2
    01183 3884      CPI	R24,0x84
    01184 E0E0      LDI	R30,0
    01185 079E      CPC	R25,R30
    01186 F449      BNE	0x1190
(1178) 		  {
(1179) 		    Motor1Gear=1; 
    01187 E081      LDI	R24,1
    01188 9380 0336 STS	Motor1Gear,R24
(1180) 			EEPROM_write(0,Motor1Gear);
    0118A 2F28      MOV	R18,R24
    0118B 2700      CLR	R16
    0118C 2711      CLR	R17
    0118D 940E 223A CALL	_EEPROM_write
(1181) 		  }
    0118F C0BA      RJMP	0x124A
(1182) 		  else if(R_dat==0x85)
    01190 9180 02CD LDS	R24,R_dat
    01192 9190 02CE LDS	R25,R_dat+1
    01194 3885      CPI	R24,0x85
    01195 E0E0      LDI	R30,0
    01196 079E      CPC	R25,R30
    01197 F449      BNE	0x11A1
(1183) 		  {
(1184) 		    Motor1Gear=2; 
    01198 E082      LDI	R24,2
    01199 9380 0336 STS	Motor1Gear,R24
(1185) 			EEPROM_write(0,Motor1Gear);
    0119B 2F28      MOV	R18,R24
    0119C 2700      CLR	R16
    0119D 2711      CLR	R17
    0119E 940E 223A CALL	_EEPROM_write
(1186) 		  }
    011A0 C0A9      RJMP	0x124A
(1187) 		  else if(R_dat==0x86)
    011A1 9180 02CD LDS	R24,R_dat
    011A3 9190 02CE LDS	R25,R_dat+1
    011A5 3886      CPI	R24,0x86
    011A6 E0E0      LDI	R30,0
    011A7 079E      CPC	R25,R30
    011A8 F449      BNE	0x11B2
(1188) 		  {
(1189) 		    Motor1Gear=3; 
    011A9 E083      LDI	R24,3
    011AA 9380 0336 STS	Motor1Gear,R24
(1190) 			EEPROM_write(0,Motor1Gear);
    011AC 2F28      MOV	R18,R24
    011AD 2700      CLR	R16
    011AE 2711      CLR	R17
    011AF 940E 223A CALL	_EEPROM_write
(1191) 		  }
    011B1 C098      RJMP	0x124A
(1192) 		  else if(R_dat==0x87)
    011B2 9180 02CD LDS	R24,R_dat
    011B4 9190 02CE LDS	R25,R_dat+1
    011B6 3887      CPI	R24,0x87
    011B7 E0E0      LDI	R30,0
    011B8 079E      CPC	R25,R30
    011B9 F449      BNE	0x11C3
(1193) 		  {
(1194) 		    Motor1Gear=4; 
    011BA E084      LDI	R24,4
    011BB 9380 0336 STS	Motor1Gear,R24
(1195) 			EEPROM_write(0,Motor1Gear);
    011BD 2F28      MOV	R18,R24
    011BE 2700      CLR	R16
    011BF 2711      CLR	R17
    011C0 940E 223A CALL	_EEPROM_write
(1196) 		  }
    011C2 C087      RJMP	0x124A
(1197) 		  else if(R_dat==0x88)
    011C3 9180 02CD LDS	R24,R_dat
    011C5 9190 02CE LDS	R25,R_dat+1
    011C7 3888      CPI	R24,0x88
    011C8 E0E0      LDI	R30,0
    011C9 079E      CPC	R25,R30
    011CA F449      BNE	0x11D4
(1198) 		  {
(1199) 		    Motor1Gear=5; 
    011CB E085      LDI	R24,5
    011CC 9380 0336 STS	Motor1Gear,R24
(1200) 			EEPROM_write(0,Motor1Gear);
    011CE 2F28      MOV	R18,R24
    011CF 2700      CLR	R16
    011D0 2711      CLR	R17
    011D1 940E 223A CALL	_EEPROM_write
(1201) 		  }
    011D3 C076      RJMP	0x124A
(1202) 		  else if(R_dat==0x89)
    011D4 9180 02CD LDS	R24,R_dat
    011D6 9190 02CE LDS	R25,R_dat+1
    011D8 3889      CPI	R24,0x89
    011D9 E0E0      LDI	R30,0
    011DA 079E      CPC	R25,R30
    011DB F449      BNE	0x11E5
(1203) 		  {
(1204) 		    Motor1Gear=6; 
    011DC E086      LDI	R24,6
    011DD 9380 0336 STS	Motor1Gear,R24
(1205) 			EEPROM_write(0,Motor1Gear);
    011DF 2F28      MOV	R18,R24
    011E0 2700      CLR	R16
    011E1 2711      CLR	R17
    011E2 940E 223A CALL	_EEPROM_write
(1206) 		  }
    011E4 C065      RJMP	0x124A
(1207) 		  else if(R_dat==0x8a)
    011E5 9180 02CD LDS	R24,R_dat
    011E7 9190 02CE LDS	R25,R_dat+1
    011E9 388A      CPI	R24,0x8A
    011EA E0E0      LDI	R30,0
    011EB 079E      CPC	R25,R30
    011EC F449      BNE	0x11F6
(1208) 		  {
(1209) 		    Motor2Gear=1; 
    011ED E081      LDI	R24,1
    011EE 9380 0335 STS	Motor2Gear,R24
(1210) 			EEPROM_write(1,Motor2Gear);
    011F0 2F28      MOV	R18,R24
    011F1 E001      LDI	R16,1
    011F2 E010      LDI	R17,0
    011F3 940E 223A CALL	_EEPROM_write
(1211) 		  }
    011F5 C054      RJMP	0x124A
(1212) 		  else if(R_dat==0x8b)
    011F6 9180 02CD LDS	R24,R_dat
    011F8 9190 02CE LDS	R25,R_dat+1
    011FA 388B      CPI	R24,0x8B
    011FB E0E0      LDI	R30,0
    011FC 079E      CPC	R25,R30
    011FD F449      BNE	0x1207
(1213) 		  {
(1214) 		    Motor2Gear=2;
    011FE E082      LDI	R24,2
    011FF 9380 0335 STS	Motor2Gear,R24
(1215) 			EEPROM_write(1,Motor2Gear);
    01201 2F28      MOV	R18,R24
    01202 E001      LDI	R16,1
    01203 E010      LDI	R17,0
    01204 940E 223A CALL	_EEPROM_write
(1216) 		  }
    01206 C043      RJMP	0x124A
(1217) 		  else if(R_dat==0x8c)
    01207 9180 02CD LDS	R24,R_dat
    01209 9190 02CE LDS	R25,R_dat+1
    0120B 388C      CPI	R24,0x8C
    0120C E0E0      LDI	R30,0
    0120D 079E      CPC	R25,R30
    0120E F449      BNE	0x1218
(1218) 		  {
(1219) 		    Motor2Gear=3;
    0120F E083      LDI	R24,3
    01210 9380 0335 STS	Motor2Gear,R24
(1220) 			EEPROM_write(1,Motor2Gear);
    01212 2F28      MOV	R18,R24
    01213 E001      LDI	R16,1
    01214 E010      LDI	R17,0
    01215 940E 223A CALL	_EEPROM_write
(1221) 		  }
    01217 C032      RJMP	0x124A
(1222) 		  else if(R_dat==0x8d)
    01218 9180 02CD LDS	R24,R_dat
    0121A 9190 02CE LDS	R25,R_dat+1
    0121C 388D      CPI	R24,0x8D
    0121D E0E0      LDI	R30,0
    0121E 079E      CPC	R25,R30
    0121F F449      BNE	0x1229
(1223) 		  {
(1224) 		    Motor2Gear=4;
    01220 E084      LDI	R24,4
    01221 9380 0335 STS	Motor2Gear,R24
(1225) 			EEPROM_write(1,Motor2Gear);
    01223 2F28      MOV	R18,R24
    01224 E001      LDI	R16,1
    01225 E010      LDI	R17,0
    01226 940E 223A CALL	_EEPROM_write
(1226) 		  }
    01228 C021      RJMP	0x124A
(1227) 		  else if(R_dat==0x8e)
    01229 9180 02CD LDS	R24,R_dat
    0122B 9190 02CE LDS	R25,R_dat+1
    0122D 388E      CPI	R24,0x8E
    0122E E0E0      LDI	R30,0
    0122F 079E      CPC	R25,R30
    01230 F449      BNE	0x123A
(1228) 		  {
(1229) 		    Motor2Gear=5;
    01231 E085      LDI	R24,5
    01232 9380 0335 STS	Motor2Gear,R24
(1230) 			EEPROM_write(1,Motor2Gear);
    01234 2F28      MOV	R18,R24
    01235 E001      LDI	R16,1
    01236 E010      LDI	R17,0
    01237 940E 223A CALL	_EEPROM_write
(1231) 		  }
    01239 C010      RJMP	0x124A
(1232) 		  else if(R_dat==0x8f)
    0123A 9180 02CD LDS	R24,R_dat
    0123C 9190 02CE LDS	R25,R_dat+1
    0123E 388F      CPI	R24,0x8F
    0123F E0E0      LDI	R30,0
    01240 079E      CPC	R25,R30
    01241 F441      BNE	0x124A
(1233) 		  {
(1234) 		    Motor2Gear=6;
    01242 E086      LDI	R24,6
    01243 9380 0335 STS	Motor2Gear,R24
(1235) 			EEPROM_write(1,Motor2Gear);
    01245 2F28      MOV	R18,R24
    01246 E001      LDI	R16,1
    01247 E010      LDI	R17,0
    01248 940E 223A CALL	_EEPROM_write
(1236) 		  }	  
(1237) 		  Gear2Thr();
    0124A 940E 05DA CALL	_Gear2Thr
(1238) 		  CheckMotor(30);//延迟30ms  	
    0124C E10E      LDI	R16,0x1E
    0124D E010      LDI	R17,0
    0124E 940E 034A CALL	_CheckMotor
(1239) 		  T_dat=0;	    
    01250 2422      CLR	R2
    01251 2433      CLR	R3
    01252 9230 02D0 STS	T_dat+1,R3
    01254 9220 02CF STS	T_dat,R2
(1240) 	      SendManchester(); 
    01256 940E 1E37 CALL	_SendManchester
(1241) 		}	  
(1242) 	break;
    01258 940C 1BAC JMP	0x1BAC
(1243)  
(1244) 	
(1245) 	 
(1246) 	case 0x90: //标定数据
(1247) 	  if(R_dat==0x90)//提取测试信息
    0125A 9180 02CD LDS	R24,R_dat
    0125C 9190 02CE LDS	R25,R_dat+1
    0125E 3980      CPI	R24,0x90
    0125F E0E0      LDI	R30,0
    01260 079E      CPC	R25,R30
    01261 F009      BEQ	0x1263
    01262 C116      RJMP	0x1379
(1248) 	  {
(1249) 	     Uart0TxData[0]=0xE8;
    01263 EE88      LDI	R24,0xE8
    01264 9380 0121 STS	Uart0TxData,R24
(1250) 		 Uart0TxData[1]=0x40;
    01266 E480      LDI	R24,0x40
    01267 9380 0122 STS	Uart0TxData+1,R24
(1251) 		 Uart0TxData[2]=0xc8;
    01269 EC88      LDI	R24,0xC8
    0126A 9380 0123 STS	Uart0TxData+2,R24
(1252) 		 Uart0TxData[3]=0;//测试信息包0
    0126C 2422      CLR	R2
    0126D 9220 0124 STS	Uart0TxData+3,R2
(1253) 		 SendUart0_2(9,4);// 超时32ms	 
    0126F E024      LDI	R18,4
    01270 E030      LDI	R19,0
    01271 E009      LDI	R16,0x9
    01272 940E 010C CALL	_SendUart0_2
(1254) 		 for(i=0;i<32;i++)
    01274 24AA      CLR	R10
    01275 C02F      RJMP	0x12A5
(1255) 		 {
(1256) 		 CheckMotor(20);
    01276 E104      LDI	R16,0x14
    01277 E010      LDI	R17,0
    01278 940E 034A CALL	_CheckMotor
(1257) 		 T_dat=Uart0RxData[i*2+1];//高字节
    0127A EE85      LDI	R24,0xE5
    0127B E092      LDI	R25,2
    0127C 2DEA      MOV	R30,R10
    0127D 27FF      CLR	R31
    0127E 0FEE      LSL	R30
    0127F 1FFF      ROL	R31
    01280 0FE8      ADD	R30,R24
    01281 1FF9      ADC	R31,R25
    01282 8020      LD	R2,Z
    01283 2433      CLR	R3
    01284 9230 02D0 STS	T_dat+1,R3
    01286 9220 02CF STS	T_dat,R2
(1258) 		 T_dat<<=8;
    01288 2C32      MOV	R3,R2
    01289 2422      CLR	R2
    0128A 9230 02D0 STS	T_dat+1,R3
    0128C 9220 02CF STS	T_dat,R2
(1259) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    0128E EE84      LDI	R24,0xE4
    0128F E092      LDI	R25,2
    01290 2DEA      MOV	R30,R10
    01291 27FF      CLR	R31
    01292 0FEE      LSL	R30
    01293 1FFF      ROL	R31
    01294 0FE8      ADD	R30,R24
    01295 1FF9      ADC	R31,R25
    01296 8020      LD	R2,Z
    01297 2433      CLR	R3
    01298 9040 02CF LDS	R4,T_dat
    0129A 9050 02D0 LDS	R5,T_dat+1
    0129C 2842      OR	R4,R2
    0129D 2853      OR	R5,R3
    0129E 9250 02D0 STS	T_dat+1,R5
    012A0 9240 02CF STS	T_dat,R4
(1260) 		 SendManchester();		 
    012A2 940E 1E37 CALL	_SendManchester
    012A4 94A3      INC	R10
    012A5 2D8A      MOV	R24,R10
    012A6 3280      CPI	R24,0x20
    012A7 F270      BCS	0x1276
(1261) 		 }		
(1262) 
(1263) 		 Uart0TxData[0]=0xE8;
    012A8 EE88      LDI	R24,0xE8
    012A9 9380 0121 STS	Uart0TxData,R24
(1264) 		 Uart0TxData[1]=0x40;
    012AB E480      LDI	R24,0x40
    012AC 9380 0122 STS	Uart0TxData+1,R24
(1265) 		 Uart0TxData[2]=0xc8;
    012AE EC88      LDI	R24,0xC8
    012AF 9380 0123 STS	Uart0TxData+2,R24
(1266) 		 Uart0TxData[3]=1;//测试信息包1
    012B1 E081      LDI	R24,1
    012B2 9380 0124 STS	Uart0TxData+3,R24
(1267) 		 SendUart0_2(9,4);// 超时32ms	 
    012B4 E024      LDI	R18,4
    012B5 E030      LDI	R19,0
    012B6 E009      LDI	R16,0x9
    012B7 940E 010C CALL	_SendUart0_2
(1268) 		 for(i=0;i<32;i++)
    012B9 24AA      CLR	R10
    012BA C02F      RJMP	0x12EA
(1269) 		 {
(1270) 		 T_dat=Uart0RxData[i*2+1];//高字节
    012BB EE85      LDI	R24,0xE5
    012BC E092      LDI	R25,2
    012BD 2DEA      MOV	R30,R10
    012BE 27FF      CLR	R31
    012BF 0FEE      LSL	R30
    012C0 1FFF      ROL	R31
    012C1 0FE8      ADD	R30,R24
    012C2 1FF9      ADC	R31,R25
    012C3 8020      LD	R2,Z
    012C4 2433      CLR	R3
    012C5 9230 02D0 STS	T_dat+1,R3
    012C7 9220 02CF STS	T_dat,R2
(1271) 		 T_dat<<=8;
    012C9 2C32      MOV	R3,R2
    012CA 2422      CLR	R2
    012CB 9230 02D0 STS	T_dat+1,R3
    012CD 9220 02CF STS	T_dat,R2
(1272) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    012CF EE84      LDI	R24,0xE4
    012D0 E092      LDI	R25,2
    012D1 2DEA      MOV	R30,R10
    012D2 27FF      CLR	R31
    012D3 0FEE      LSL	R30
    012D4 1FFF      ROL	R31
    012D5 0FE8      ADD	R30,R24
    012D6 1FF9      ADC	R31,R25
    012D7 8020      LD	R2,Z
    012D8 2433      CLR	R3
    012D9 9040 02CF LDS	R4,T_dat
    012DB 9050 02D0 LDS	R5,T_dat+1
    012DD 2842      OR	R4,R2
    012DE 2853      OR	R5,R3
    012DF 9250 02D0 STS	T_dat+1,R5
    012E1 9240 02CF STS	T_dat,R4
(1273) 		 SendManchester();
    012E3 940E 1E37 CALL	_SendManchester
(1274) 		 CheckMotor(20);
    012E5 E104      LDI	R16,0x14
    012E6 E010      LDI	R17,0
    012E7 940E 034A CALL	_CheckMotor
    012E9 94A3      INC	R10
    012EA 2D8A      MOV	R24,R10
    012EB 3280      CPI	R24,0x20
    012EC F270      BCS	0x12BB
(1275) 		 }	
(1276) 		 
(1277) 		 Uart0TxData[0]=0xE8;
    012ED EE88      LDI	R24,0xE8
    012EE 9380 0121 STS	Uart0TxData,R24
(1278) 		 Uart0TxData[1]=0x40;
    012F0 E480      LDI	R24,0x40
    012F1 9380 0122 STS	Uart0TxData+1,R24
(1279) 		 Uart0TxData[2]=0xc8;
    012F3 EC88      LDI	R24,0xC8
    012F4 9380 0123 STS	Uart0TxData+2,R24
(1280) 		 Uart0TxData[3]=2;//测试信息包2
    012F6 E082      LDI	R24,2
    012F7 9380 0124 STS	Uart0TxData+3,R24
(1281) 		 SendUart0_2(9,4);// 超时32ms	 
    012F9 E024      LDI	R18,4
    012FA E030      LDI	R19,0
    012FB E009      LDI	R16,0x9
    012FC 940E 010C CALL	_SendUart0_2
(1282) 		 for(i=0;i<32;i++)
    012FE 24AA      CLR	R10
    012FF C02F      RJMP	0x132F
(1283) 		 {
(1284) 		 T_dat=Uart0RxData[i*2+1];//高字节
    01300 EE85      LDI	R24,0xE5
    01301 E092      LDI	R25,2
    01302 2DEA      MOV	R30,R10
    01303 27FF      CLR	R31
    01304 0FEE      LSL	R30
    01305 1FFF      ROL	R31
    01306 0FE8      ADD	R30,R24
    01307 1FF9      ADC	R31,R25
    01308 8020      LD	R2,Z
    01309 2433      CLR	R3
    0130A 9230 02D0 STS	T_dat+1,R3
    0130C 9220 02CF STS	T_dat,R2
(1285) 		 T_dat<<=8;
    0130E 2C32      MOV	R3,R2
    0130F 2422      CLR	R2
    01310 9230 02D0 STS	T_dat+1,R3
    01312 9220 02CF STS	T_dat,R2
(1286) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    01314 EE84      LDI	R24,0xE4
    01315 E092      LDI	R25,2
    01316 2DEA      MOV	R30,R10
    01317 27FF      CLR	R31
    01318 0FEE      LSL	R30
    01319 1FFF      ROL	R31
    0131A 0FE8      ADD	R30,R24
    0131B 1FF9      ADC	R31,R25
    0131C 8020      LD	R2,Z
    0131D 2433      CLR	R3
    0131E 9040 02CF LDS	R4,T_dat
    01320 9050 02D0 LDS	R5,T_dat+1
    01322 2842      OR	R4,R2
    01323 2853      OR	R5,R3
    01324 9250 02D0 STS	T_dat+1,R5
    01326 9240 02CF STS	T_dat,R4
(1287) 		 SendManchester();
    01328 940E 1E37 CALL	_SendManchester
(1288) 		 CheckMotor(20);
    0132A E104      LDI	R16,0x14
    0132B E010      LDI	R17,0
    0132C 940E 034A CALL	_CheckMotor
    0132E 94A3      INC	R10
    0132F 2D8A      MOV	R24,R10
    01330 3280      CPI	R24,0x20
    01331 F270      BCS	0x1300
(1289) 		 }		
(1290) 		 
(1291) 		 Uart0TxData[0]=0xE8;
    01332 EE88      LDI	R24,0xE8
    01333 9380 0121 STS	Uart0TxData,R24
(1292) 		 Uart0TxData[1]=0x40;
    01335 E480      LDI	R24,0x40
    01336 9380 0122 STS	Uart0TxData+1,R24
(1293) 		 Uart0TxData[2]=0xc8;
    01338 EC88      LDI	R24,0xC8
    01339 9380 0123 STS	Uart0TxData+2,R24
(1294) 		 Uart0TxData[3]=3;//测试信息包3
    0133B E083      LDI	R24,3
    0133C 9380 0124 STS	Uart0TxData+3,R24
(1295) 		 SendUart0_2(9,4);// 超时32ms	 
    0133E E024      LDI	R18,4
    0133F E030      LDI	R19,0
    01340 E009      LDI	R16,0x9
    01341 940E 010C CALL	_SendUart0_2
(1296) 		 for(i=0;i<32;i++)
    01343 24AA      CLR	R10
    01344 C02F      RJMP	0x1374
(1297) 		 {
(1298) 		 T_dat=Uart0RxData[i*2+1];//高字节
    01345 EE85      LDI	R24,0xE5
    01346 E092      LDI	R25,2
    01347 2DEA      MOV	R30,R10
    01348 27FF      CLR	R31
    01349 0FEE      LSL	R30
    0134A 1FFF      ROL	R31
    0134B 0FE8      ADD	R30,R24
    0134C 1FF9      ADC	R31,R25
    0134D 8020      LD	R2,Z
    0134E 2433      CLR	R3
    0134F 9230 02D0 STS	T_dat+1,R3
    01351 9220 02CF STS	T_dat,R2
(1299) 		 T_dat<<=8;
    01353 2C32      MOV	R3,R2
    01354 2422      CLR	R2
    01355 9230 02D0 STS	T_dat+1,R3
    01357 9220 02CF STS	T_dat,R2
(1300) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    01359 EE84      LDI	R24,0xE4
    0135A E092      LDI	R25,2
    0135B 2DEA      MOV	R30,R10
    0135C 27FF      CLR	R31
    0135D 0FEE      LSL	R30
    0135E 1FFF      ROL	R31
    0135F 0FE8      ADD	R30,R24
    01360 1FF9      ADC	R31,R25
    01361 8020      LD	R2,Z
    01362 2433      CLR	R3
    01363 9040 02CF LDS	R4,T_dat
    01365 9050 02D0 LDS	R5,T_dat+1
    01367 2842      OR	R4,R2
    01368 2853      OR	R5,R3
    01369 9250 02D0 STS	T_dat+1,R5
    0136B 9240 02CF STS	T_dat,R4
(1301) 		 SendManchester();
    0136D 940E 1E37 CALL	_SendManchester
(1302) 		 CheckMotor(20);
    0136F E104      LDI	R16,0x14
    01370 E010      LDI	R17,0
    01371 940E 034A CALL	_CheckMotor
    01373 94A3      INC	R10
    01374 2D8A      MOV	R24,R10
    01375 3280      CPI	R24,0x20
    01376 F270      BCS	0x1345
(1303) 		 }			
(1304) 	  }
    01377 940C 1BAC JMP	0x1BAC
(1305) 	  else if(R_dat==0x91)//上传压力标定数据,20ms/帧 	
    01379 9180 02CD LDS	R24,R_dat
    0137B 9190 02CE LDS	R25,R_dat+1
    0137D 3981      CPI	R24,0x91
    0137E E0E0      LDI	R30,0
    0137F 079E      CPC	R25,R30
    01380 F529      BNE	0x13A6
(1306) 	  {
(1307) 	   //先获取总标定点数    
(1308) 	     DataFlag=3;
    01381 E083      LDI	R24,3
    01382 E090      LDI	R25,0
    01383 9390 02B4 STS	DataFlag+1,R25
    01385 9380 02B3 STS	DataFlag,R24
(1309) 		 coeff_len=4;//上位机还需传4字节，分别为首块地址和包数
    01387 E084      LDI	R24,4
    01388 9390 011F STS	coeff_len+1,R25
    0138A 9380 011E STS	coeff_len,R24
(1310) 	     coeff_count=0;
    0138C 2422      CLR	R2
    0138D 2433      CLR	R3
    0138E 9230 011D STS	coeff_count+1,R3
    01390 9220 011C STS	coeff_count,R2
(1311) 		 TimeOutFlag=0;
    01392 9220 02CB STS	TimeOutFlag,R2
(1312) 		 Timer0Counter=200;//1.6s定时
    01394 EC88      LDI	R24,0xC8
    01395 9390 032F STS	Timer0Counter+1,R25
    01397 9380 032E STS	Timer0Counter,R24
(1313) 	     TCNT0=0x06; //8ms
    01399 E086      LDI	R24,6
    0139A BF82      OUT	0x32,R24
(1314) 	     TCCR0|=0x06;//256分频
    0139B B783      IN	R24,0x33
    0139C 6086      ORI	R24,6
    0139D BF83      OUT	0x33,R24
(1315) 	     TIFR|=0x01; //清定时器0中断标志
    0139E B786      IN	R24,0x36
    0139F 6081      ORI	R24,1
    013A0 BF86      OUT	0x36,R24
(1316)          TIMSK|=0x01;//使能定时器0中断		
    013A1 B787      IN	R24,0x37
    013A2 6081      ORI	R24,1
    013A3 BF87      OUT	0x37,R24
(1317) 		}
    013A4 940C 1BAC JMP	0x1BAC
(1318) 	  else if(R_dat==0x92)//清空标定数据,整机格式化  
    013A6 9180 02CD LDS	R24,R_dat
    013A8 9190 02CE LDS	R25,R_dat+1
    013AA 3982      CPI	R24,0x92
    013AB E0E0      LDI	R30,0
    013AC 079E      CPC	R25,R30
    013AD F5E9      BNE	0x13EB
(1319) 	   { 	
(1320) 	     Uart0TxData[0]=0xE8;
    013AE EE88      LDI	R24,0xE8
    013AF 9380 0121 STS	Uart0TxData,R24
(1321) 		 Uart0TxData[1]=0x40;
    013B1 E480      LDI	R24,0x40
    013B2 9380 0122 STS	Uart0TxData+1,R24
(1322) 		 Uart0TxData[2]=0x8c;
    013B4 E88C      LDI	R24,0x8C
    013B5 9380 0123 STS	Uart0TxData+2,R24
(1323) 		 Uart0TxData[3]=8;
    013B7 E088      LDI	R24,0x8
    013B8 9380 0124 STS	Uart0TxData+3,R24
(1324) 		 Uart0TxData[4]=0;
    013BA 2422      CLR	R2
    013BB 9220 0125 STS	Uart0TxData+4,R2
(1325) 		 Uart0TxData[5]=0;
    013BD 9220 0126 STS	Uart0TxData+5,R2
(1326) 		 Uart0TxData[6]=0xff;
    013BF EF8F      LDI	R24,0xFF
    013C0 9380 0127 STS	Uart0TxData+6,R24
(1327) 		 Uart0TxData[7]=0xff;
    013C2 9380 0128 STS	Uart0TxData+7,R24
(1328) 		 SendUart0_3(9,5000,9);// 最大超时40秒
    013C4 E089      LDI	R24,0x9
    013C5 8388      ST	Y,R24
    013C6 E828      LDI	R18,0x88
    013C7 E133      LDI	R19,0x13
    013C8 E009      LDI	R16,0x9
    013C9 940E 015C CALL	_SendUart0_3
(1329) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8c))
    013CB 9180 02E3 LDS	R24,Uart0RxCounter
    013CD 3089      CPI	R24,0x9
    013CE F499      BNE	0x13E2
    013CF 9180 02E4 LDS	R24,Uart0RxData
    013D1 3585      CPI	R24,0x55
    013D2 F479      BNE	0x13E2
    013D3 9180 02E5 LDS	R24,Uart0RxData+1
    013D5 3480      CPI	R24,0x40
    013D6 F459      BNE	0x13E2
    013D7 9180 02E6 LDS	R24,Uart0RxData+2
    013D9 388C      CPI	R24,0x8C
    013DA F439      BNE	0x13E2
(1330) 		 {T_dat=0x0000;}
    013DB 2422      CLR	R2
    013DC 2433      CLR	R3
    013DD 9230 02D0 STS	T_dat+1,R3
    013DF 9220 02CF STS	T_dat,R2
    013E1 C006      RJMP	0x13E8
(1331) 		 else
(1332) 		 {T_dat=0xffff;}
    013E2 EF8F      LDI	R24,0xFF
    013E3 EF9F      LDI	R25,0xFF
    013E4 9390 02D0 STS	T_dat+1,R25
    013E6 9380 02CF STS	T_dat,R24
(1333) 		 SendManchester();	 
    013E8 940E 1E37 CALL	_SendManchester
(1334) 	  }
    013EA C7C1      RJMP	0x1BAC
(1335) 	   else if(R_dat==0x93)//上传全部系数，共256字节分128帧上传
    013EB 9180 02CD LDS	R24,R_dat
    013ED 9190 02CE LDS	R25,R_dat+1
    013EF 3983      CPI	R24,0x93
    013F0 E0E0      LDI	R30,0
    013F1 079E      CPC	R25,R30
    013F2 F009      BEQ	0x13F4
    013F3 C126      RJMP	0x151A
(1336) 	   {
(1337) 	     Uart0TxData[0]=0xE8;
    013F4 EE88      LDI	R24,0xE8
    013F5 9380 0121 STS	Uart0TxData,R24
(1338) 		 Uart0TxData[1]=0x40;
    013F7 E480      LDI	R24,0x40
    013F8 9380 0122 STS	Uart0TxData+1,R24
(1339) 		 Uart0TxData[2]=0x87;
    013FA E887      LDI	R24,0x87
    013FB 9380 0123 STS	Uart0TxData+2,R24
(1340) 		 Uart0TxData[3]=0;//系数包0
    013FD 2422      CLR	R2
    013FE 9220 0124 STS	Uart0TxData+3,R2
(1341) 		 SendUart0_2(9,4);// 超时32ms	
    01400 E024      LDI	R18,4
    01401 E030      LDI	R19,0
    01402 E009      LDI	R16,0x9
    01403 940E 010C CALL	_SendUart0_2
(1342) 		 if(Uart0RxCounter==64) 
    01405 9180 02E3 LDS	R24,Uart0RxCounter
    01407 3480      CPI	R24,0x40
    01408 F5A1      BNE	0x143D
(1343) 		  {
(1344) 		   for(i=0;i<32;i++)
    01409 24AA      CLR	R10
    0140A C02F      RJMP	0x143A
(1345) 		   {
(1346) 		   CheckMotor(20);
    0140B E104      LDI	R16,0x14
    0140C E010      LDI	R17,0
    0140D 940E 034A CALL	_CheckMotor
(1347) 		   T_dat=Uart0RxData[i*2+1];//高字节
    0140F EE85      LDI	R24,0xE5
    01410 E092      LDI	R25,2
    01411 2DEA      MOV	R30,R10
    01412 27FF      CLR	R31
    01413 0FEE      LSL	R30
    01414 1FFF      ROL	R31
    01415 0FE8      ADD	R30,R24
    01416 1FF9      ADC	R31,R25
    01417 8020      LD	R2,Z
    01418 2433      CLR	R3
    01419 9230 02D0 STS	T_dat+1,R3
    0141B 9220 02CF STS	T_dat,R2
(1348) 		   T_dat<<=8;
    0141D 2C32      MOV	R3,R2
    0141E 2422      CLR	R2
    0141F 9230 02D0 STS	T_dat+1,R3
    01421 9220 02CF STS	T_dat,R2
(1349) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01423 EE84      LDI	R24,0xE4
    01424 E092      LDI	R25,2
    01425 2DEA      MOV	R30,R10
    01426 27FF      CLR	R31
    01427 0FEE      LSL	R30
    01428 1FFF      ROL	R31
    01429 0FE8      ADD	R30,R24
    0142A 1FF9      ADC	R31,R25
    0142B 8020      LD	R2,Z
    0142C 2433      CLR	R3
    0142D 9040 02CF LDS	R4,T_dat
    0142F 9050 02D0 LDS	R5,T_dat+1
    01431 2842      OR	R4,R2
    01432 2853      OR	R5,R3
    01433 9250 02D0 STS	T_dat+1,R5
    01435 9240 02CF STS	T_dat,R4
(1350) 		   SendManchester();		 
    01437 940E 1E37 CALL	_SendManchester
    01439 94A3      INC	R10
    0143A 2D8A      MOV	R24,R10
    0143B 3280      CPI	R24,0x20
    0143C F270      BCS	0x140B
(1351) 		   }	
(1352) 		 }	
(1353) 		 
(1354) 		 Uart0TxData[0]=0xE8;
    0143D EE88      LDI	R24,0xE8
    0143E 9380 0121 STS	Uart0TxData,R24
(1355) 		 Uart0TxData[1]=0x40;
    01440 E480      LDI	R24,0x40
    01441 9380 0122 STS	Uart0TxData+1,R24
(1356) 		 Uart0TxData[2]=0x87;
    01443 E887      LDI	R24,0x87
    01444 9380 0123 STS	Uart0TxData+2,R24
(1357) 		 Uart0TxData[3]=1;//系数包1
    01446 E081      LDI	R24,1
    01447 9380 0124 STS	Uart0TxData+3,R24
(1358) 		 SendUart0_2(9,4);// 超时32ms	 
    01449 E024      LDI	R18,4
    0144A E030      LDI	R19,0
    0144B E009      LDI	R16,0x9
    0144C 940E 010C CALL	_SendUart0_2
(1359) 		 if(Uart0RxCounter==64) 
    0144E 9180 02E3 LDS	R24,Uart0RxCounter
    01450 3480      CPI	R24,0x40
    01451 F5A1      BNE	0x1486
(1360) 		  {
(1361) 		   for(i=0;i<32;i++)
    01452 24AA      CLR	R10
    01453 C02F      RJMP	0x1483
(1362) 		   {
(1363) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01454 EE85      LDI	R24,0xE5
    01455 E092      LDI	R25,2
    01456 2DEA      MOV	R30,R10
    01457 27FF      CLR	R31
    01458 0FEE      LSL	R30
    01459 1FFF      ROL	R31
    0145A 0FE8      ADD	R30,R24
    0145B 1FF9      ADC	R31,R25
    0145C 8020      LD	R2,Z
    0145D 2433      CLR	R3
    0145E 9230 02D0 STS	T_dat+1,R3
    01460 9220 02CF STS	T_dat,R2
(1364) 		   T_dat<<=8;
    01462 2C32      MOV	R3,R2
    01463 2422      CLR	R2
    01464 9230 02D0 STS	T_dat+1,R3
    01466 9220 02CF STS	T_dat,R2
(1365) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01468 EE84      LDI	R24,0xE4
    01469 E092      LDI	R25,2
    0146A 2DEA      MOV	R30,R10
    0146B 27FF      CLR	R31
    0146C 0FEE      LSL	R30
    0146D 1FFF      ROL	R31
    0146E 0FE8      ADD	R30,R24
    0146F 1FF9      ADC	R31,R25
    01470 8020      LD	R2,Z
    01471 2433      CLR	R3
    01472 9040 02CF LDS	R4,T_dat
    01474 9050 02D0 LDS	R5,T_dat+1
    01476 2842      OR	R4,R2
    01477 2853      OR	R5,R3
    01478 9250 02D0 STS	T_dat+1,R5
    0147A 9240 02CF STS	T_dat,R4
(1366) 		   SendManchester();
    0147C 940E 1E37 CALL	_SendManchester
(1367) 		   CheckMotor(20);
    0147E E104      LDI	R16,0x14
    0147F E010      LDI	R17,0
    01480 940E 034A CALL	_CheckMotor
    01482 94A3      INC	R10
    01483 2D8A      MOV	R24,R10
    01484 3280      CPI	R24,0x20
    01485 F270      BCS	0x1454
(1368) 		  }
(1369) 		 }		
(1370) 		 
(1371) 		  Uart0TxData[0]=0xE8;
    01486 EE88      LDI	R24,0xE8
    01487 9380 0121 STS	Uart0TxData,R24
(1372) 		 Uart0TxData[1]=0x40;
    01489 E480      LDI	R24,0x40
    0148A 9380 0122 STS	Uart0TxData+1,R24
(1373) 		 Uart0TxData[2]=0x87;
    0148C E887      LDI	R24,0x87
    0148D 9380 0123 STS	Uart0TxData+2,R24
(1374) 		 Uart0TxData[3]=2;//系数包2
    0148F E082      LDI	R24,2
    01490 9380 0124 STS	Uart0TxData+3,R24
(1375) 		 SendUart0_2(9,4);// 超时32ms	
    01492 E024      LDI	R18,4
    01493 E030      LDI	R19,0
    01494 E009      LDI	R16,0x9
    01495 940E 010C CALL	_SendUart0_2
(1376) 		 if(Uart0RxCounter==64) 
    01497 9180 02E3 LDS	R24,Uart0RxCounter
    01499 3480      CPI	R24,0x40
    0149A F5A1      BNE	0x14CF
(1377) 		  {
(1378) 		   for(i=0;i<32;i++)
    0149B 24AA      CLR	R10
    0149C C02F      RJMP	0x14CC
(1379) 		   {
(1380) 		   CheckMotor(20);
    0149D E104      LDI	R16,0x14
    0149E E010      LDI	R17,0
    0149F 940E 034A CALL	_CheckMotor
(1381) 		   T_dat=Uart0RxData[i*2+1];//高字节
    014A1 EE85      LDI	R24,0xE5
    014A2 E092      LDI	R25,2
    014A3 2DEA      MOV	R30,R10
    014A4 27FF      CLR	R31
    014A5 0FEE      LSL	R30
    014A6 1FFF      ROL	R31
    014A7 0FE8      ADD	R30,R24
    014A8 1FF9      ADC	R31,R25
    014A9 8020      LD	R2,Z
    014AA 2433      CLR	R3
    014AB 9230 02D0 STS	T_dat+1,R3
    014AD 9220 02CF STS	T_dat,R2
(1382) 		   T_dat<<=8;
    014AF 2C32      MOV	R3,R2
    014B0 2422      CLR	R2
    014B1 9230 02D0 STS	T_dat+1,R3
    014B3 9220 02CF STS	T_dat,R2
(1383) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    014B5 EE84      LDI	R24,0xE4
    014B6 E092      LDI	R25,2
    014B7 2DEA      MOV	R30,R10
    014B8 27FF      CLR	R31
    014B9 0FEE      LSL	R30
    014BA 1FFF      ROL	R31
    014BB 0FE8      ADD	R30,R24
    014BC 1FF9      ADC	R31,R25
    014BD 8020      LD	R2,Z
    014BE 2433      CLR	R3
    014BF 9040 02CF LDS	R4,T_dat
    014C1 9050 02D0 LDS	R5,T_dat+1
    014C3 2842      OR	R4,R2
    014C4 2853      OR	R5,R3
    014C5 9250 02D0 STS	T_dat+1,R5
    014C7 9240 02CF STS	T_dat,R4
(1384) 		   SendManchester();		 
    014C9 940E 1E37 CALL	_SendManchester
    014CB 94A3      INC	R10
    014CC 2D8A      MOV	R24,R10
    014CD 3280      CPI	R24,0x20
    014CE F270      BCS	0x149D
(1385) 		   }	
(1386) 		 }	
(1387) 
(1388) 		 Uart0TxData[0]=0xE8;
    014CF EE88      LDI	R24,0xE8
    014D0 9380 0121 STS	Uart0TxData,R24
(1389) 		 Uart0TxData[1]=0x40;
    014D2 E480      LDI	R24,0x40
    014D3 9380 0122 STS	Uart0TxData+1,R24
(1390) 		 Uart0TxData[2]=0x87;
    014D5 E887      LDI	R24,0x87
    014D6 9380 0123 STS	Uart0TxData+2,R24
(1391) 		 Uart0TxData[3]=3;//系数包3
    014D8 E083      LDI	R24,3
    014D9 9380 0124 STS	Uart0TxData+3,R24
(1392) 		 SendUart0_2(9,4);// 超时32ms	 
    014DB E024      LDI	R18,4
    014DC E030      LDI	R19,0
    014DD E009      LDI	R16,0x9
    014DE 940E 010C CALL	_SendUart0_2
(1393) 		 if(Uart0RxCounter==64) 
    014E0 9180 02E3 LDS	R24,Uart0RxCounter
    014E2 3480      CPI	R24,0x40
    014E3 F009      BEQ	0x14E5
    014E4 C6C7      RJMP	0x1BAC
(1394) 		  {
(1395) 		   for(i=0;i<32;i++)
    014E5 24AA      CLR	R10
    014E6 C02F      RJMP	0x1516
(1396) 		   {
(1397) 		   T_dat=Uart0RxData[i*2+1];//高字节
    014E7 EE85      LDI	R24,0xE5
    014E8 E092      LDI	R25,2
    014E9 2DEA      MOV	R30,R10
    014EA 27FF      CLR	R31
    014EB 0FEE      LSL	R30
    014EC 1FFF      ROL	R31
    014ED 0FE8      ADD	R30,R24
    014EE 1FF9      ADC	R31,R25
    014EF 8020      LD	R2,Z
    014F0 2433      CLR	R3
    014F1 9230 02D0 STS	T_dat+1,R3
    014F3 9220 02CF STS	T_dat,R2
(1398) 		   T_dat<<=8;
    014F5 2C32      MOV	R3,R2
    014F6 2422      CLR	R2
    014F7 9230 02D0 STS	T_dat+1,R3
    014F9 9220 02CF STS	T_dat,R2
(1399) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    014FB EE84      LDI	R24,0xE4
    014FC E092      LDI	R25,2
    014FD 2DEA      MOV	R30,R10
    014FE 27FF      CLR	R31
    014FF 0FEE      LSL	R30
    01500 1FFF      ROL	R31
    01501 0FE8      ADD	R30,R24
    01502 1FF9      ADC	R31,R25
    01503 8020      LD	R2,Z
    01504 2433      CLR	R3
    01505 9040 02CF LDS	R4,T_dat
    01507 9050 02D0 LDS	R5,T_dat+1
    01509 2842      OR	R4,R2
    0150A 2853      OR	R5,R3
    0150B 9250 02D0 STS	T_dat+1,R5
    0150D 9240 02CF STS	T_dat,R4
(1400) 		   SendManchester();
    0150F 940E 1E37 CALL	_SendManchester
(1401) 		   CheckMotor(20);
    01511 E104      LDI	R16,0x14
    01512 E010      LDI	R17,0
    01513 940E 034A CALL	_CheckMotor
    01515 94A3      INC	R10
    01516 2D8A      MOV	R24,R10
    01517 3280      CPI	R24,0x20
    01518 F270      BCS	0x14E7
(1402) 		  }
(1403) 		 }		
(1404) 	   }
    01519 C692      RJMP	0x1BAC
(1405) 	   else if(R_dat==0x9a)//电机断路电流为1档
    0151A 9180 02CD LDS	R24,R_dat
    0151C 9190 02CE LDS	R25,R_dat+1
    0151E 398A      CPI	R24,0x9A
    0151F E0E0      LDI	R30,0
    01520 079E      CPC	R25,R30
    01521 F4B9      BNE	0x1539
(1406) 	   {
(1407) 	   	  MotorIdelGear=1;
    01522 E081      LDI	R24,1
    01523 9380 0332 STS	MotorIdelGear,R24
(1408) 	   	  EEPROM_write(2,MotorIdelGear);  
    01525 2F28      MOV	R18,R24
    01526 E002      LDI	R16,2
    01527 E010      LDI	R17,0
    01528 940E 223A CALL	_EEPROM_write
(1409) 		  Gear2Thr();
    0152A 940E 05DA CALL	_Gear2Thr
(1410) 		  CheckMotor(30);//延迟30ms  	
    0152C E10E      LDI	R16,0x1E
    0152D E010      LDI	R17,0
    0152E 940E 034A CALL	_CheckMotor
(1411) 		  T_dat=0;	    
    01530 2422      CLR	R2
    01531 2433      CLR	R3
    01532 9230 02D0 STS	T_dat+1,R3
    01534 9220 02CF STS	T_dat,R2
(1412) 	      SendManchester(); 
    01536 940E 1E37 CALL	_SendManchester
(1413) 	   }
    01538 C673      RJMP	0x1BAC
(1414) 	   else if(R_dat==0x9b)//电机断路电流为2档
    01539 9180 02CD LDS	R24,R_dat
    0153B 9190 02CE LDS	R25,R_dat+1
    0153D 398B      CPI	R24,0x9B
    0153E E0E0      LDI	R30,0
    0153F 079E      CPC	R25,R30
    01540 F4B9      BNE	0x1558
(1415) 	   {
(1416) 	   	  MotorIdelGear=2;
    01541 E082      LDI	R24,2
    01542 9380 0332 STS	MotorIdelGear,R24
(1417) 	   	  EEPROM_write(2,MotorIdelGear);  
    01544 2F28      MOV	R18,R24
    01545 E002      LDI	R16,2
    01546 E010      LDI	R17,0
    01547 940E 223A CALL	_EEPROM_write
(1418) 		  Gear2Thr();
    01549 940E 05DA CALL	_Gear2Thr
(1419) 		  CheckMotor(30);//延迟30ms  	
    0154B E10E      LDI	R16,0x1E
    0154C E010      LDI	R17,0
    0154D 940E 034A CALL	_CheckMotor
(1420) 		  T_dat=0;	    
    0154F 2422      CLR	R2
    01550 2433      CLR	R3
    01551 9230 02D0 STS	T_dat+1,R3
    01553 9220 02CF STS	T_dat,R2
(1421) 	      SendManchester(); 
    01555 940E 1E37 CALL	_SendManchester
(1422) 	   }
    01557 C654      RJMP	0x1BAC
(1423) 	   else if(R_dat==0x9c)//电机断路电流为3档
    01558 9180 02CD LDS	R24,R_dat
    0155A 9190 02CE LDS	R25,R_dat+1
    0155C 398C      CPI	R24,0x9C
    0155D E0E0      LDI	R30,0
    0155E 079E      CPC	R25,R30
    0155F F4B9      BNE	0x1577
(1424) 	   {
(1425) 	   	  MotorIdelGear=3;
    01560 E083      LDI	R24,3
    01561 9380 0332 STS	MotorIdelGear,R24
(1426) 	   	  EEPROM_write(2,MotorIdelGear);  
    01563 2F28      MOV	R18,R24
    01564 E002      LDI	R16,2
    01565 E010      LDI	R17,0
    01566 940E 223A CALL	_EEPROM_write
(1427) 		  Gear2Thr();
    01568 940E 05DA CALL	_Gear2Thr
(1428) 		  CheckMotor(30);//延迟30ms  	
    0156A E10E      LDI	R16,0x1E
    0156B E010      LDI	R17,0
    0156C 940E 034A CALL	_CheckMotor
(1429) 		  T_dat=0;	    
    0156E 2422      CLR	R2
    0156F 2433      CLR	R3
    01570 9230 02D0 STS	T_dat+1,R3
    01572 9220 02CF STS	T_dat,R2
(1430) 	      SendManchester(); 
    01574 940E 1E37 CALL	_SendManchester
(1431) 	   }
    01576 C635      RJMP	0x1BAC
(1432) 	   else if(R_dat==0x9d)//电机断路电流为4档
    01577 9180 02CD LDS	R24,R_dat
    01579 9190 02CE LDS	R25,R_dat+1
    0157B 398D      CPI	R24,0x9D
    0157C E0E0      LDI	R30,0
    0157D 079E      CPC	R25,R30
    0157E F4B9      BNE	0x1596
(1433) 	   {
(1434) 	   	  MotorIdelGear=4;
    0157F E084      LDI	R24,4
    01580 9380 0332 STS	MotorIdelGear,R24
(1435) 	   	  EEPROM_write(2,MotorIdelGear);  
    01582 2F28      MOV	R18,R24
    01583 E002      LDI	R16,2
    01584 E010      LDI	R17,0
    01585 940E 223A CALL	_EEPROM_write
(1436) 		  Gear2Thr();
    01587 940E 05DA CALL	_Gear2Thr
(1437) 		  CheckMotor(30);//延迟30ms  	
    01589 E10E      LDI	R16,0x1E
    0158A E010      LDI	R17,0
    0158B 940E 034A CALL	_CheckMotor
(1438) 		  T_dat=0;	    
    0158D 2422      CLR	R2
    0158E 2433      CLR	R3
    0158F 9230 02D0 STS	T_dat+1,R3
    01591 9220 02CF STS	T_dat,R2
(1439) 	      SendManchester(); 
    01593 940E 1E37 CALL	_SendManchester
(1440) 	   }
    01595 C616      RJMP	0x1BAC
(1441) 	   else if(R_dat==0x9e)//电机断路电流为5档
    01596 9180 02CD LDS	R24,R_dat
    01598 9190 02CE LDS	R25,R_dat+1
    0159A 398E      CPI	R24,0x9E
    0159B E0E0      LDI	R30,0
    0159C 079E      CPC	R25,R30
    0159D F4B9      BNE	0x15B5
(1442) 	   {
(1443) 	   	  MotorIdelGear=5;
    0159E E085      LDI	R24,5
    0159F 9380 0332 STS	MotorIdelGear,R24
(1444) 	   	  EEPROM_write(2,MotorIdelGear);  
    015A1 2F28      MOV	R18,R24
    015A2 E002      LDI	R16,2
    015A3 E010      LDI	R17,0
    015A4 940E 223A CALL	_EEPROM_write
(1445) 		  Gear2Thr();
    015A6 940E 05DA CALL	_Gear2Thr
(1446) 		  CheckMotor(30);//延迟30ms  	
    015A8 E10E      LDI	R16,0x1E
    015A9 E010      LDI	R17,0
    015AA 940E 034A CALL	_CheckMotor
(1447) 		  T_dat=0;	    
    015AC 2422      CLR	R2
    015AD 2433      CLR	R3
    015AE 9230 02D0 STS	T_dat+1,R3
    015B0 9220 02CF STS	T_dat,R2
(1448) 	      SendManchester(); 
    015B2 940E 1E37 CALL	_SendManchester
(1449) 	   }
    015B4 C5F7      RJMP	0x1BAC
(1450) 	   else if(R_dat==0x9f)//电机断路电流为6档
    015B5 9180 02CD LDS	R24,R_dat
    015B7 9190 02CE LDS	R25,R_dat+1
    015B9 398F      CPI	R24,0x9F
    015BA E0E0      LDI	R30,0
    015BB 079E      CPC	R25,R30
    015BC F009      BEQ	0x15BE
    015BD C5EE      RJMP	0x1BAC
(1451) 	   {
(1452) 	   	  MotorIdelGear=6;
    015BE E086      LDI	R24,6
    015BF 9380 0332 STS	MotorIdelGear,R24
(1453) 	   	  EEPROM_write(2,MotorIdelGear);  
    015C1 2F28      MOV	R18,R24
    015C2 E002      LDI	R16,2
    015C3 E010      LDI	R17,0
    015C4 940E 223A CALL	_EEPROM_write
(1454) 		  Gear2Thr();
    015C6 940E 05DA CALL	_Gear2Thr
(1455) 		  CheckMotor(30);//延迟30ms  	
    015C8 E10E      LDI	R16,0x1E
    015C9 E010      LDI	R17,0
    015CA 940E 034A CALL	_CheckMotor
(1456) 		  T_dat=0;	    
    015CC 2422      CLR	R2
    015CD 2433      CLR	R3
    015CE 9230 02D0 STS	T_dat+1,R3
    015D0 9220 02CF STS	T_dat,R2
(1457) 	      SendManchester(); 
    015D2 940E 1E37 CALL	_SendManchester
(1458) 	   }
(1459) 	  
(1460)   break;
    015D4 C5D7      RJMP	0x1BAC
(1461)   
(1462) 	case 0xa0://压力标定系数
(1463) 	   if(R_dat==0xa0)//下发全部标定系数，共128字节,20ms/帧，共2560ms   
    015D5 9180 02CD LDS	R24,R_dat
    015D7 9190 02CE LDS	R25,R_dat+1
    015D9 3A80      CPI	R24,0xA0
    015DA E0E0      LDI	R30,0
    015DB 079E      CPC	R25,R30
    015DC F529      BNE	0x1602
(1464) 	   { 
(1465) 		 DataFlag=1;
    015DD E081      LDI	R24,1
    015DE E090      LDI	R25,0
    015DF 9390 02B4 STS	DataFlag+1,R25
    015E1 9380 02B3 STS	DataFlag,R24
(1466) 		 coeff_len=128;
    015E3 E880      LDI	R24,0x80
    015E4 9390 011F STS	coeff_len+1,R25
    015E6 9380 011E STS	coeff_len,R24
(1467) 		 coeff_count=0;
    015E8 2422      CLR	R2
    015E9 2433      CLR	R3
    015EA 9230 011D STS	coeff_count+1,R3
    015EC 9220 011C STS	coeff_count,R2
(1468) 		 TimeOutFlag=0;
    015EE 9220 02CB STS	TimeOutFlag,R2
(1469) 		 Timer0Counter=1000;//8s定时
    015F0 EE88      LDI	R24,0xE8
    015F1 E093      LDI	R25,3
    015F2 9390 032F STS	Timer0Counter+1,R25
    015F4 9380 032E STS	Timer0Counter,R24
(1470) 	     TCNT0=0x06; //8ms
    015F6 E086      LDI	R24,6
    015F7 BF82      OUT	0x32,R24
(1471) 	     TCCR0|=0x06;//256分频
    015F8 B783      IN	R24,0x33
    015F9 6086      ORI	R24,6
    015FA BF83      OUT	0x33,R24
(1472) 	     TIFR|=0x01; //清定时器0中断标志
    015FB B786      IN	R24,0x36
    015FC 6081      ORI	R24,1
    015FD BF86      OUT	0x36,R24
(1473)          TIMSK|=0x01;//使能定时器0中断				    
    015FE B787      IN	R24,0x37
    015FF 6081      ORI	R24,1
    01600 BF87      OUT	0x37,R24
(1474) 	   }
    01601 C5AA      RJMP	0x1BAC
(1475) 	  else if(R_dat==0xa1)//上传标定系数,28ms/帧 ，共64帧128字节
    01602 9180 02CD LDS	R24,R_dat
    01604 9190 02CE LDS	R25,R_dat+1
    01606 3A81      CPI	R24,0xA1
    01607 E0E0      LDI	R30,0
    01608 079E      CPC	R25,R30
    01609 F009      BEQ	0x160B
    0160A C5A1      RJMP	0x1BAC
(1476) 	  {    
(1477) 		 Uart0TxData[0]=0xE8;
    0160B EE88      LDI	R24,0xE8
    0160C 9380 0121 STS	Uart0TxData,R24
(1478) 		 Uart0TxData[1]=0x40;
    0160E E480      LDI	R24,0x40
    0160F 9380 0122 STS	Uart0TxData+1,R24
(1479) 		 Uart0TxData[2]=0x87;
    01611 E887      LDI	R24,0x87
    01612 9380 0123 STS	Uart0TxData+2,R24
(1480) 		 Uart0TxData[3]=0;//系数包0
    01614 2422      CLR	R2
    01615 9220 0124 STS	Uart0TxData+3,R2
(1481) 		 SendUart0_2(9,5);// 超时40ms	
    01617 E025      LDI	R18,5
    01618 E030      LDI	R19,0
    01619 E009      LDI	R16,0x9
    0161A 940E 010C CALL	_SendUart0_2
(1482) 		 if(Uart0RxCounter==64) 
    0161C 9180 02E3 LDS	R24,Uart0RxCounter
    0161E 3480      CPI	R24,0x40
    0161F F599      BNE	0x1653
(1483) 		  {
(1484) 		   for(i=0;i<32;i++)
    01620 24AA      CLR	R10
    01621 C02E      RJMP	0x1650
(1485) 		   {
(1486) 		   CheckMotor(20);
    01622 E104      LDI	R16,0x14
    01623 E010      LDI	R17,0
    01624 940E 034A CALL	_CheckMotor
(1487) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01626 EE85      LDI	R24,0xE5
    01627 E092      LDI	R25,2
    01628 2DEA      MOV	R30,R10
    01629 27FF      CLR	R31
    0162A 0FEE      LSL	R30
    0162B 1FFF      ROL	R31
    0162C 0FE8      ADD	R30,R24
    0162D 1FF9      ADC	R31,R25
    0162E 8020      LD	R2,Z
    0162F 2433      CLR	R3
    01630 9230 02D0 STS	T_dat+1,R3
    01632 9220 02CF STS	T_dat,R2
(1488) 		   T_dat<<=8;
    01634 2C32      MOV	R3,R2
    01635 2422      CLR	R2
    01636 9230 02D0 STS	T_dat+1,R3
    01638 9220 02CF STS	T_dat,R2
(1489) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    0163A EE84      LDI	R24,0xE4
    0163B E092      LDI	R25,2
    0163C 2DEA      MOV	R30,R10
    0163D 27FF      CLR	R31
    0163E 0FEE      LSL	R30
    0163F 1FFF      ROL	R31
    01640 0FE8      ADD	R30,R24
    01641 1FF9      ADC	R31,R25
    01642 8020      LD	R2,Z
    01643 2433      CLR	R3
    01644 9040 02CF LDS	R4,T_dat
    01646 9050 02D0 LDS	R5,T_dat+1
    01648 2842      OR	R4,R2
    01649 2853      OR	R5,R3
    0164A 9250 02D0 STS	T_dat+1,R5
    0164C 9240 02CF STS	T_dat,R4
(1490) 		   SendManchester();		 
    0164E D7E8      RCALL	_SendManchester
    0164F 94A3      INC	R10
    01650 2D8A      MOV	R24,R10
    01651 3280      CPI	R24,0x20
    01652 F278      BCS	0x1622
(1491) 		   }	
(1492) 		 }	
(1493) 
(1494) 		 Uart0TxData[0]=0xE8;
    01653 EE88      LDI	R24,0xE8
    01654 9380 0121 STS	Uart0TxData,R24
(1495) 		 Uart0TxData[1]=0x40;
    01656 E480      LDI	R24,0x40
    01657 9380 0122 STS	Uart0TxData+1,R24
(1496) 		 Uart0TxData[2]=0x87;
    01659 E887      LDI	R24,0x87
    0165A 9380 0123 STS	Uart0TxData+2,R24
(1497) 		 Uart0TxData[3]=1;//系数包1
    0165C E081      LDI	R24,1
    0165D 9380 0124 STS	Uart0TxData+3,R24
(1498) 		 SendUart0_2(9,5);// 超时40ms		 
    0165F E025      LDI	R18,5
    01660 E030      LDI	R19,0
    01661 E009      LDI	R16,0x9
    01662 940E 010C CALL	_SendUart0_2
(1499) 		 if(Uart0RxCounter==64) 
    01664 9180 02E3 LDS	R24,Uart0RxCounter
    01666 3480      CPI	R24,0x40
    01667 F009      BEQ	0x1669
    01668 C543      RJMP	0x1BAC
(1500) 		  {
(1501) 		   for(i=0;i<32;i++)
    01669 24AA      CLR	R10
    0166A C02E      RJMP	0x1699
(1502) 		   {
(1503) 		   T_dat=Uart0RxData[i*2+1];//高字节
    0166B EE85      LDI	R24,0xE5
    0166C E092      LDI	R25,2
    0166D 2DEA      MOV	R30,R10
    0166E 27FF      CLR	R31
    0166F 0FEE      LSL	R30
    01670 1FFF      ROL	R31
    01671 0FE8      ADD	R30,R24
    01672 1FF9      ADC	R31,R25
    01673 8020      LD	R2,Z
    01674 2433      CLR	R3
    01675 9230 02D0 STS	T_dat+1,R3
    01677 9220 02CF STS	T_dat,R2
(1504) 		   T_dat<<=8;
    01679 2C32      MOV	R3,R2
    0167A 2422      CLR	R2
    0167B 9230 02D0 STS	T_dat+1,R3
    0167D 9220 02CF STS	T_dat,R2
(1505) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    0167F EE84      LDI	R24,0xE4
    01680 E092      LDI	R25,2
    01681 2DEA      MOV	R30,R10
    01682 27FF      CLR	R31
    01683 0FEE      LSL	R30
    01684 1FFF      ROL	R31
    01685 0FE8      ADD	R30,R24
    01686 1FF9      ADC	R31,R25
    01687 8020      LD	R2,Z
    01688 2433      CLR	R3
    01689 9040 02CF LDS	R4,T_dat
    0168B 9050 02D0 LDS	R5,T_dat+1
    0168D 2842      OR	R4,R2
    0168E 2853      OR	R5,R3
    0168F 9250 02D0 STS	T_dat+1,R5
    01691 9240 02CF STS	T_dat,R4
(1506) 		   SendManchester();
    01693 D7A3      RCALL	_SendManchester
(1507) 		   CheckMotor(20);
    01694 E104      LDI	R16,0x14
    01695 E010      LDI	R17,0
    01696 940E 034A CALL	_CheckMotor
    01698 94A3      INC	R10
    01699 2D8A      MOV	R24,R10
    0169A 3280      CPI	R24,0x20
    0169B F278      BCS	0x166B
(1508) 		  }
(1509) 		 }		
(1510) 	  }
(1511) 	break;
    0169C C50F      RJMP	0x1BAC
(1512) 	
(1513) 	
(1514) 	case 0xB0://流量相关
(1515) 	  if(R_dat==0xb0) //下发流量系数
    0169D 9180 02CD LDS	R24,R_dat
    0169F 9190 02CE LDS	R25,R_dat+1
    016A1 3B80      CPI	R24,0xB0
    016A2 E0E0      LDI	R30,0
    016A3 079E      CPC	R25,R30
    016A4 F529      BNE	0x16CA
(1516) 	  {
(1517) 	     DataFlag=2;
    016A5 E082      LDI	R24,2
    016A6 E090      LDI	R25,0
    016A7 9390 02B4 STS	DataFlag+1,R25
    016A9 9380 02B3 STS	DataFlag,R24
(1518) 		 coeff_len=128;
    016AB E880      LDI	R24,0x80
    016AC 9390 011F STS	coeff_len+1,R25
    016AE 9380 011E STS	coeff_len,R24
(1519) 		 coeff_count=0;
    016B0 2422      CLR	R2
    016B1 2433      CLR	R3
    016B2 9230 011D STS	coeff_count+1,R3
    016B4 9220 011C STS	coeff_count,R2
(1520) 		 TimeOutFlag=0;
    016B6 9220 02CB STS	TimeOutFlag,R2
(1521) 		 Timer0Counter=1000;//8s定时
    016B8 EE88      LDI	R24,0xE8
    016B9 E093      LDI	R25,3
    016BA 9390 032F STS	Timer0Counter+1,R25
    016BC 9380 032E STS	Timer0Counter,R24
(1522) 	     TCNT0=0x06; //8ms
    016BE E086      LDI	R24,6
    016BF BF82      OUT	0x32,R24
(1523) 	     TCCR0|=0x06;//256分频
    016C0 B783      IN	R24,0x33
    016C1 6086      ORI	R24,6
    016C2 BF83      OUT	0x33,R24
(1524) 	     TIFR|=0x01; //清定时器0中断标志
    016C3 B786      IN	R24,0x36
    016C4 6081      ORI	R24,1
    016C5 BF86      OUT	0x36,R24
(1525)          TIMSK|=0x01;//使能定时器0中断		
    016C6 B787      IN	R24,0x37
    016C7 6081      ORI	R24,1
    016C8 BF87      OUT	0x37,R24
(1526) 	  }
    016C9 C4E2      RJMP	0x1BAC
(1527) 	  else  if(R_dat==0xb1)//上提流量系数
    016CA 9180 02CD LDS	R24,R_dat
    016CC 9190 02CE LDS	R25,R_dat+1
    016CE 3B81      CPI	R24,0xB1
    016CF E0E0      LDI	R30,0
    016D0 079E      CPC	R25,R30
    016D1 F009      BEQ	0x16D3
    016D2 C4D9      RJMP	0x1BAC
(1528) 	  {
(1529) 	     Uart0TxData[0]=0xE8;
    016D3 EE88      LDI	R24,0xE8
    016D4 9380 0121 STS	Uart0TxData,R24
(1530) 		 Uart0TxData[1]=0x40;
    016D6 E480      LDI	R24,0x40
    016D7 9380 0122 STS	Uart0TxData+1,R24
(1531) 		 Uart0TxData[2]=0x87;
    016D9 E887      LDI	R24,0x87
    016DA 9380 0123 STS	Uart0TxData+2,R24
(1532) 		 Uart0TxData[3]=2;//系数包2
    016DC E082      LDI	R24,2
    016DD 9380 0124 STS	Uart0TxData+3,R24
(1533) 		 SendUart0_2(9,5);// 超时40ms	
    016DF E025      LDI	R18,5
    016E0 E030      LDI	R19,0
    016E1 E009      LDI	R16,0x9
    016E2 940E 010C CALL	_SendUart0_2
(1534) 		 if(Uart0RxCounter==64) 
    016E4 9180 02E3 LDS	R24,Uart0RxCounter
    016E6 3480      CPI	R24,0x40
    016E7 F599      BNE	0x171B
(1535) 		  {
(1536) 		   for(i=0;i<32;i++)
    016E8 24AA      CLR	R10
    016E9 C02E      RJMP	0x1718
(1537) 		   {
(1538) 		   CheckMotor(20);
    016EA E104      LDI	R16,0x14
    016EB E010      LDI	R17,0
    016EC 940E 034A CALL	_CheckMotor
(1539) 		   T_dat=Uart0RxData[i*2+1];//高字节
    016EE EE85      LDI	R24,0xE5
    016EF E092      LDI	R25,2
    016F0 2DEA      MOV	R30,R10
    016F1 27FF      CLR	R31
    016F2 0FEE      LSL	R30
    016F3 1FFF      ROL	R31
    016F4 0FE8      ADD	R30,R24
    016F5 1FF9      ADC	R31,R25
    016F6 8020      LD	R2,Z
    016F7 2433      CLR	R3
    016F8 9230 02D0 STS	T_dat+1,R3
    016FA 9220 02CF STS	T_dat,R2
(1540) 		   T_dat<<=8;
    016FC 2C32      MOV	R3,R2
    016FD 2422      CLR	R2
    016FE 9230 02D0 STS	T_dat+1,R3
    01700 9220 02CF STS	T_dat,R2
(1541) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01702 EE84      LDI	R24,0xE4
    01703 E092      LDI	R25,2
    01704 2DEA      MOV	R30,R10
    01705 27FF      CLR	R31
    01706 0FEE      LSL	R30
    01707 1FFF      ROL	R31
    01708 0FE8      ADD	R30,R24
    01709 1FF9      ADC	R31,R25
    0170A 8020      LD	R2,Z
    0170B 2433      CLR	R3
    0170C 9040 02CF LDS	R4,T_dat
    0170E 9050 02D0 LDS	R5,T_dat+1
    01710 2842      OR	R4,R2
    01711 2853      OR	R5,R3
    01712 9250 02D0 STS	T_dat+1,R5
    01714 9240 02CF STS	T_dat,R4
(1542) 		   SendManchester();		 
    01716 D720      RCALL	_SendManchester
    01717 94A3      INC	R10
    01718 2D8A      MOV	R24,R10
    01719 3280      CPI	R24,0x20
    0171A F278      BCS	0x16EA
(1543) 		   }	
(1544) 		 }	
(1545) 
(1546) 		 Uart0TxData[0]=0xE8;
    0171B EE88      LDI	R24,0xE8
    0171C 9380 0121 STS	Uart0TxData,R24
(1547) 		 Uart0TxData[1]=0x40;
    0171E E480      LDI	R24,0x40
    0171F 9380 0122 STS	Uart0TxData+1,R24
(1548) 		 Uart0TxData[2]=0x87;
    01721 E887      LDI	R24,0x87
    01722 9380 0123 STS	Uart0TxData+2,R24
(1549) 		 Uart0TxData[3]=3;//系数包3
    01724 E083      LDI	R24,3
    01725 9380 0124 STS	Uart0TxData+3,R24
(1550) 		 SendUart0_2(9,5);// 超时40ms	 
    01727 E025      LDI	R18,5
    01728 E030      LDI	R19,0
    01729 E009      LDI	R16,0x9
    0172A 940E 010C CALL	_SendUart0_2
(1551) 		 if(Uart0RxCounter==64) 
    0172C 9180 02E3 LDS	R24,Uart0RxCounter
    0172E 3480      CPI	R24,0x40
    0172F F009      BEQ	0x1731
    01730 C47B      RJMP	0x1BAC
(1552) 		  {
(1553) 		   for(i=0;i<32;i++)
    01731 24AA      CLR	R10
    01732 C02E      RJMP	0x1761
(1554) 		   {
(1555) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01733 EE85      LDI	R24,0xE5
    01734 E092      LDI	R25,2
    01735 2DEA      MOV	R30,R10
    01736 27FF      CLR	R31
    01737 0FEE      LSL	R30
    01738 1FFF      ROL	R31
    01739 0FE8      ADD	R30,R24
    0173A 1FF9      ADC	R31,R25
    0173B 8020      LD	R2,Z
    0173C 2433      CLR	R3
    0173D 9230 02D0 STS	T_dat+1,R3
    0173F 9220 02CF STS	T_dat,R2
(1556) 		   T_dat<<=8;
    01741 2C32      MOV	R3,R2
    01742 2422      CLR	R2
    01743 9230 02D0 STS	T_dat+1,R3
    01745 9220 02CF STS	T_dat,R2
(1557) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01747 EE84      LDI	R24,0xE4
    01748 E092      LDI	R25,2
    01749 2DEA      MOV	R30,R10
    0174A 27FF      CLR	R31
    0174B 0FEE      LSL	R30
    0174C 1FFF      ROL	R31
    0174D 0FE8      ADD	R30,R24
    0174E 1FF9      ADC	R31,R25
    0174F 8020      LD	R2,Z
    01750 2433      CLR	R3
    01751 9040 02CF LDS	R4,T_dat
    01753 9050 02D0 LDS	R5,T_dat+1
    01755 2842      OR	R4,R2
    01756 2853      OR	R5,R3
    01757 9250 02D0 STS	T_dat+1,R5
    01759 9240 02CF STS	T_dat,R4
(1558) 		   SendManchester();
    0175B D6DB      RCALL	_SendManchester
(1559) 		   CheckMotor(20);
    0175C E104      LDI	R16,0x14
    0175D E010      LDI	R17,0
    0175E 940E 034A CALL	_CheckMotor
    01760 94A3      INC	R10
    01761 2D8A      MOV	R24,R10
    01762 3280      CPI	R24,0x20
    01763 F278      BCS	0x1733
(1560) 		  }
(1561) 		 }		
(1562) 	  }
(1563) 	/*   if(R_dat==0xb1)//读幅值
(1564) 	   {
(1565) 		 SendUart0(0xb0,5);//40ms定时
(1566) 		 for(k=0;k<8;k+=2)
(1567) 		  {
(1568) 		  T_dat=Uart0RxData[k];
(1569) 		  T_dat<<=8;
(1570) 		  T_dat|=Uart0RxData[k+1];
(1571) 		  SendManchester();
(1572) 		  CheckMotor(40);
(1573) 		  }
(1574) 		}
(1575) 		else  if((R_dat>0xb0) && (R_dat<0xb5) )//1800点提取,连续提取流量测试数据，4个通道分别提取，命令为0xB1-0xB4
(1576)         {   
(1577) 		  SendUart0(R_dat,125);//1s定时	 
(1578) 		  for(k=0;k<1800;k++)//共1800帧数据，全部提取
(1579) 		  {
(1580) 		  SendUart0(0xFF,1);//8ms定时	   
(1581) 		  T_dat=Uart0RxData[0];
(1582) 		  T_dat<<=8;
(1583) 		  T_dat|=Uart0RxData[1];
(1584) 		  SendManchester();
(1585) 		  CheckMotor(42);
(1586) 		  }
(1587) 		} */  
(1588) 	break;
    01764 C447      RJMP	0x1BAC
(1589) 
(1590)     case 0xc0://所有参数全采，上传16字节共8帧
(1591) 		 if(R_dat==0xc0)
    01765 9180 02CD LDS	R24,R_dat
    01767 9190 02CE LDS	R25,R_dat+1
    01769 3C80      CPI	R24,0xC0
    0176A E0E0      LDI	R30,0
    0176B 079E      CPC	R25,R30
    0176C F009      BEQ	0x176E
    0176D C29E      RJMP	0x1A0C
(1592) 	 {
(1593) 		Uart0TxData[0]=0xE8;
    0176E EE88      LDI	R24,0xE8
    0176F 9380 0121 STS	Uart0TxData,R24
(1594) 		Uart0TxData[1]=0x40;
    01771 E480      LDI	R24,0x40
    01772 9380 0122 STS	Uart0TxData+1,R24
(1595) 		Uart0TxData[2]=0x89;
    01774 E889      LDI	R24,0x89
    01775 9380 0123 STS	Uart0TxData+2,R24
(1596) 		Uart0TxData[3]=9;
    01777 E089      LDI	R24,0x9
    01778 9380 0124 STS	Uart0TxData+3,R24
(1597) 		SendUart0_2(9,50);//流量板直读检测，超时400ms
    0177A E322      LDI	R18,0x32
    0177B E030      LDI	R19,0
    0177C E009      LDI	R16,0x9
    0177D 940E 010C CALL	_SendUart0_2
(1598) 		if(Uart0RxCounter==64)//成功接收到压力、温度、流量数据，先低字节后高字节
    0177F 9180 02E3 LDS	R24,Uart0RxCounter
    01781 3480      CPI	R24,0x40
    01782 F009      BEQ	0x1784
    01783 C428      RJMP	0x1BAC
(1599) 		{
(1600) 		 T_dat=Uart0RxData[1];
    01784 9020 02E5 LDS	R2,Uart0RxData+1
    01786 2433      CLR	R3
    01787 9230 02D0 STS	T_dat+1,R3
    01789 9220 02CF STS	T_dat,R2
(1601) 		 T_dat<<=8;
    0178B 9020 02CF LDS	R2,T_dat
    0178D 9030 02D0 LDS	R3,T_dat+1
    0178F 2C32      MOV	R3,R2
    01790 2422      CLR	R2
    01791 9230 02D0 STS	T_dat+1,R3
    01793 9220 02CF STS	T_dat,R2
(1602) 		 T_dat|=Uart0RxData[0];
    01795 9020 02E4 LDS	R2,Uart0RxData
    01797 2433      CLR	R3
    01798 9040 02CF LDS	R4,T_dat
    0179A 9050 02D0 LDS	R5,T_dat+1
    0179C 2842      OR	R4,R2
    0179D 2853      OR	R5,R3
    0179E 9250 02D0 STS	T_dat+1,R5
    017A0 9240 02CF STS	T_dat,R4
(1603) 		 SendManchester();//压力
    017A2 D694      RCALL	_SendManchester
(1604) 		 crc16array[0]=(unsigned char)(T_dat);
    017A3 9020 02CF LDS	R2,T_dat
    017A5 9030 02D0 LDS	R3,T_dat+1
    017A7 9220 0100 STS	crc16array,R2
(1605) 		 crc16array[1]=(unsigned char)(T_dat>>8);
    017A9 2C23      MOV	R2,R3
    017AA 2433      CLR	R3
    017AB FC27      SBRC	R2,7
    017AC 9430      COM	R3
    017AD 9220 0101 STS	crc16array+1,R2
(1606) 		 
(1607) 		 
(1608) 		 CheckMotor(30);	
    017AF E10E      LDI	R16,0x1E
    017B0 E010      LDI	R17,0
    017B1 940E 034A CALL	_CheckMotor
(1609) 		 T_dat=Uart0RxData[3];
    017B3 9020 02E7 LDS	R2,Uart0RxData+3
    017B5 2433      CLR	R3
    017B6 9230 02D0 STS	T_dat+1,R3
    017B8 9220 02CF STS	T_dat,R2
(1610) 		 T_dat<<=8;
    017BA 9020 02CF LDS	R2,T_dat
    017BC 9030 02D0 LDS	R3,T_dat+1
    017BE 2C32      MOV	R3,R2
    017BF 2422      CLR	R2
    017C0 9230 02D0 STS	T_dat+1,R3
    017C2 9220 02CF STS	T_dat,R2
(1611) 		 T_dat|=Uart0RxData[2];
    017C4 9020 02E6 LDS	R2,Uart0RxData+2
    017C6 2433      CLR	R3
    017C7 9040 02CF LDS	R4,T_dat
    017C9 9050 02D0 LDS	R5,T_dat+1
    017CB 2842      OR	R4,R2
    017CC 2853      OR	R5,R3
    017CD 9250 02D0 STS	T_dat+1,R5
    017CF 9240 02CF STS	T_dat,R4
(1612) 		 SendManchester();//温度
    017D1 D665      RCALL	_SendManchester
(1613) 		 crc16array[2]=(unsigned char)(T_dat);
    017D2 9020 02CF LDS	R2,T_dat
    017D4 9030 02D0 LDS	R3,T_dat+1
    017D6 9220 0102 STS	crc16array+2,R2
(1614) 		 crc16array[3]=(unsigned char)(T_dat>>8);
    017D8 2C23      MOV	R2,R3
    017D9 2433      CLR	R3
    017DA FC27      SBRC	R2,7
    017DB 9430      COM	R3
    017DC 9220 0103 STS	crc16array+3,R2
(1615) 		 
(1616) 		  CheckMotor(30);	
    017DE E10E      LDI	R16,0x1E
    017DF E010      LDI	R17,0
    017E0 940E 034A CALL	_CheckMotor
(1617) 		  
(1618) 		  lfib=Uart0RxData[5];
    017E2 9020 02E9 LDS	R2,Uart0RxData+5
    017E4 2433      CLR	R3
    017E5 2444      CLR	R4
    017E6 2455      CLR	R5
    017E7 9230 0115 STS	lfib+1,R3
    017E9 9220 0114 STS	lfib,R2
    017EB 9250 0117 STS	lfib+3,R5
    017ED 9240 0116 STS	lfib+2,R4
(1619) 		  lfib<<=8;
    017EF E088      LDI	R24,0x8
    017F0 E090      LDI	R25,0
    017F1 9120 0116 LDS	R18,lfib+2
    017F3 9130 0117 LDS	R19,lfib+3
    017F5 9100 0114 LDS	R16,lfib
    017F7 9110 0115 LDS	R17,lfib+1
    017F9 938A      ST	-Y,R24
    017FA 940E 2337 CALL	lsl32
    017FC 9310 0115 STS	lfib+1,R17
    017FE 9300 0114 STS	lfib,R16
    01800 9330 0117 STS	lfib+3,R19
    01802 9320 0116 STS	lfib+2,R18
(1620) 		  lfib|=Uart0RxData[4];
    01804 9020 02E8 LDS	R2,Uart0RxData+4
    01806 2433      CLR	R3
    01807 2444      CLR	R4
    01808 2455      CLR	R5
    01809 0138      MOVW	R6,R16
    0180A 0149      MOVW	R8,R18
    0180B 2862      OR	R6,R2
    0180C 2873      OR	R7,R3
    0180D 2884      OR	R8,R4
    0180E 2895      OR	R9,R5
    0180F 9270 0115 STS	lfib+1,R7
    01811 9260 0114 STS	lfib,R6
    01813 9290 0117 STS	lfib+3,R9
    01815 9280 0116 STS	lfib+2,R8
(1621) 		  lfib&=0x0000ffff;
    01817 EF4F      LDI	R20,0xFF
    01818 EF5F      LDI	R21,0xFF
    01819 E060      LDI	R22,0
    0181A E070      LDI	R23,0
    0181B 0113      MOVW	R2,R6
    0181C 0124      MOVW	R4,R8
    0181D 2224      AND	R2,R20
    0181E 2235      AND	R3,R21
    0181F 2246      AND	R4,R22
    01820 2257      AND	R5,R23
    01821 9230 0115 STS	lfib+1,R3
    01823 9220 0114 STS	lfib,R2
    01825 9250 0117 STS	lfib+3,R5
    01827 9240 0116 STS	lfib+2,R4
(1622) 		  myFIB.f=(unsigned long)lfib; 
    01829 0181      MOVW	R16,R2
    0182A 0192      MOVW	R18,R4
    0182B 940E 2408 CALL	ulong2fp
    0182D 9310 033C STS	myFIB+1,R17
    0182F 9300 033B STS	myFIB,R16
    01831 9330 033E STS	myFIB+3,R19
    01833 9320 033D STS	myFIB+2,R18
(1623) 		  
(1624) 		  T_dat=myFIB.i[1];
    01835 9020 033D LDS	R2,myFIB+2
    01837 9030 033E LDS	R3,myFIB+3
    01839 9230 02D0 STS	T_dat+1,R3
    0183B 9220 02CF STS	T_dat,R2
(1625) 		  SendManchester();//流量-时间1
    0183D D5F9      RCALL	_SendManchester
(1626) 		  crc16array[4]=(unsigned char)(T_dat);
    0183E 9020 02CF LDS	R2,T_dat
    01840 9030 02D0 LDS	R3,T_dat+1
    01842 9220 0104 STS	crc16array+4,R2
(1627) 		  crc16array[5]=(unsigned char)(T_dat>>8);
    01844 2C23      MOV	R2,R3
    01845 2433      CLR	R3
    01846 FC27      SBRC	R2,7
    01847 9430      COM	R3
    01848 9220 0105 STS	crc16array+5,R2
(1628) 		  
(1629) 		  CheckMotor(30);	
    0184A E10E      LDI	R16,0x1E
    0184B E010      LDI	R17,0
    0184C 940E 034A CALL	_CheckMotor
(1630) 		  T_dat=myFIB.i[0];
    0184E 9020 033B LDS	R2,myFIB
    01850 9030 033C LDS	R3,myFIB+1
    01852 9230 02D0 STS	T_dat+1,R3
    01854 9220 02CF STS	T_dat,R2
(1631) 		  SendManchester();//流量-时间2
    01856 D5E0      RCALL	_SendManchester
(1632) 		  crc16array[6]=(unsigned char)(T_dat);
    01857 9020 02CF LDS	R2,T_dat
    01859 9030 02D0 LDS	R3,T_dat+1
    0185B 9220 0106 STS	crc16array+6,R2
(1633) 		  crc16array[7]=(unsigned char)(T_dat>>8);
    0185D 2C23      MOV	R2,R3
    0185E 2433      CLR	R3
    0185F FC27      SBRC	R2,7
    01860 9430      COM	R3
    01861 9220 0107 STS	crc16array+7,R2
(1634) 		  
(1635) 		  CheckMotor(30);	
    01863 E10E      LDI	R16,0x1E
    01864 E010      LDI	R17,0
    01865 940E 034A CALL	_CheckMotor
(1636) 		  
(1637) 		  lfib=Uart0RxData[7];
    01867 9020 02EB LDS	R2,Uart0RxData+7
    01869 2433      CLR	R3
    0186A 2444      CLR	R4
    0186B 2455      CLR	R5
    0186C 9230 0115 STS	lfib+1,R3
    0186E 9220 0114 STS	lfib,R2
    01870 9250 0117 STS	lfib+3,R5
    01872 9240 0116 STS	lfib+2,R4
(1638) 		  lfib<<=8;
    01874 E088      LDI	R24,0x8
    01875 E090      LDI	R25,0
    01876 9120 0116 LDS	R18,lfib+2
    01878 9130 0117 LDS	R19,lfib+3
    0187A 9100 0114 LDS	R16,lfib
    0187C 9110 0115 LDS	R17,lfib+1
    0187E 938A      ST	-Y,R24
    0187F 940E 2337 CALL	lsl32
    01881 9310 0115 STS	lfib+1,R17
    01883 9300 0114 STS	lfib,R16
    01885 9330 0117 STS	lfib+3,R19
    01887 9320 0116 STS	lfib+2,R18
(1639) 		  lfib|=Uart0RxData[6];
    01889 9020 02EA LDS	R2,Uart0RxData+6
    0188B 2433      CLR	R3
    0188C 2444      CLR	R4
    0188D 2455      CLR	R5
    0188E 0138      MOVW	R6,R16
    0188F 0149      MOVW	R8,R18
    01890 2862      OR	R6,R2
    01891 2873      OR	R7,R3
    01892 2884      OR	R8,R4
    01893 2895      OR	R9,R5
    01894 9270 0115 STS	lfib+1,R7
    01896 9260 0114 STS	lfib,R6
    01898 9290 0117 STS	lfib+3,R9
    0189A 9280 0116 STS	lfib+2,R8
(1640) 		  lfib&=0x0000ffff;
    0189C EF4F      LDI	R20,0xFF
    0189D EF5F      LDI	R21,0xFF
    0189E E060      LDI	R22,0
    0189F E070      LDI	R23,0
    018A0 0113      MOVW	R2,R6
    018A1 0124      MOVW	R4,R8
    018A2 2224      AND	R2,R20
    018A3 2235      AND	R3,R21
    018A4 2246      AND	R4,R22
    018A5 2257      AND	R5,R23
    018A6 9230 0115 STS	lfib+1,R3
    018A8 9220 0114 STS	lfib,R2
    018AA 9250 0117 STS	lfib+3,R5
    018AC 9240 0116 STS	lfib+2,R4
(1641) 		  myFIB.f=(unsigned long)lfib; 
    018AE 0181      MOVW	R16,R2
    018AF 0192      MOVW	R18,R4
    018B0 940E 2408 CALL	ulong2fp
    018B2 9310 033C STS	myFIB+1,R17
    018B4 9300 033B STS	myFIB,R16
    018B6 9330 033E STS	myFIB+3,R19
    018B8 9320 033D STS	myFIB+2,R18
(1642) 		  
(1643) 		  T_dat=myFIB.i[1];
    018BA 9020 033D LDS	R2,myFIB+2
    018BC 9030 033E LDS	R3,myFIB+3
    018BE 9230 02D0 STS	T_dat+1,R3
    018C0 9220 02CF STS	T_dat,R2
(1644) 		  SendManchester();//流量-相位1
    018C2 D574      RCALL	_SendManchester
(1645) 		  crc16array[8]=(unsigned char)(T_dat);
    018C3 9020 02CF LDS	R2,T_dat
    018C5 9030 02D0 LDS	R3,T_dat+1
    018C7 9220 0108 STS	crc16array+8,R2
(1646) 		  crc16array[9]=(unsigned char)(T_dat>>8);
    018C9 2C23      MOV	R2,R3
    018CA 2433      CLR	R3
    018CB FC27      SBRC	R2,7
    018CC 9430      COM	R3
    018CD 9220 0109 STS	crc16array+9,R2
(1647) 		  
(1648) 		  CheckMotor(30);	
    018CF E10E      LDI	R16,0x1E
    018D0 E010      LDI	R17,0
    018D1 940E 034A CALL	_CheckMotor
(1649) 		  T_dat=myFIB.i[0];
    018D3 9020 033B LDS	R2,myFIB
    018D5 9030 033C LDS	R3,myFIB+1
    018D7 9230 02D0 STS	T_dat+1,R3
    018D9 9220 02CF STS	T_dat,R2
(1650) 		  SendManchester();//流量-相位2
    018DB D55B      RCALL	_SendManchester
(1651) 		  crc16array[10]=(unsigned char)(T_dat);
    018DC 9020 02CF LDS	R2,T_dat
    018DE 9030 02D0 LDS	R3,T_dat+1
    018E0 9220 010A STS	crc16array+10,R2
(1652) 		  crc16array[11]=(unsigned char)(T_dat>>8);
    018E2 2C23      MOV	R2,R3
    018E3 2433      CLR	R3
    018E4 FC27      SBRC	R2,7
    018E5 9430      COM	R3
    018E6 9220 010B STS	crc16array+11,R2
(1653) 		  
(1654) 		  CheckMotor(30);	 
    018E8 E10E      LDI	R16,0x1E
    018E9 E010      LDI	R17,0
    018EA 940E 034A CALL	_CheckMotor
(1655) 		  T_dat=Motor1Status.i;
    018EC 9020 0339 LDS	R2,Motor1Status
    018EE 9030 033A LDS	R3,Motor1Status+1
    018F0 9230 02D0 STS	T_dat+1,R3
    018F2 9220 02CF STS	T_dat,R2
(1656) 		  SendManchester();//收放电机状态
    018F4 D542      RCALL	_SendManchester
(1657) 		  crc16array[12]=(unsigned char)(T_dat);
    018F5 9020 02CF LDS	R2,T_dat
    018F7 9030 02D0 LDS	R3,T_dat+1
    018F9 9220 010C STS	crc16array+12,R2
(1658) 		  crc16array[13]=(unsigned char)(T_dat>>8);
    018FB 2C23      MOV	R2,R3
    018FC 2433      CLR	R3
    018FD FC27      SBRC	R2,7
    018FE 9430      COM	R3
    018FF 9220 010D STS	crc16array+13,R2
(1659) 		  
(1660) 		  CheckMotor(30);	 
    01901 E10E      LDI	R16,0x1E
    01902 E010      LDI	R17,0
    01903 940E 034A CALL	_CheckMotor
(1661) 		  T_dat=Motor2Status.i;
    01905 9020 0337 LDS	R2,Motor2Status
    01907 9030 0338 LDS	R3,Motor2Status+1
    01909 9230 02D0 STS	T_dat+1,R3
    0190B 9220 02CF STS	T_dat,R2
(1662) 		  SendManchester();//调节电机状态
    0190D D529      RCALL	_SendManchester
(1663) 		  crc16array[14]=(unsigned char)(T_dat);
    0190E 9020 02CF LDS	R2,T_dat
    01910 9030 02D0 LDS	R3,T_dat+1
    01912 9220 010E STS	crc16array+14,R2
(1664) 		  crc16array[15]=(unsigned char)(T_dat>>8);
    01914 2C23      MOV	R2,R3
    01915 2433      CLR	R3
    01916 FC27      SBRC	R2,7
    01917 9430      COM	R3
    01918 9220 010F STS	crc16array+15,R2
(1665) 		  
(1666) 		  CheckMotor(30);	
    0191A E10E      LDI	R16,0x1E
    0191B E010      LDI	R17,0
    0191C 940E 034A CALL	_CheckMotor
(1667) 		  f=SampleADC(5);//Cable 
    0191E E005      LDI	R16,5
    0191F 940E 02DD CALL	_SampleADC
    01921 2EC0      MOV	R12,R16
    01922 2711      CLR	R17
    01923 940E 23FF CALL	int2fp
    01925 8309      STD	Y+1,R16
    01926 831A      STD	Y+2,R17
    01927 832B      STD	Y+3,R18
    01928 833C      STD	Y+4,R19
(1668) 	   	  f=f*2.5;
    01929 E908      LDI	R16,0x98
    0192A E010      LDI	R17,0
    0192B 940E 22E2 CALL	elpm32
    0192D 01CE      MOVW	R24,R28
    0192E 9601      ADIW	R24,1
    0192F 939A      ST	-Y,R25
    01930 938A      ST	-Y,R24
    01931 940E 259A CALL	fpmule1
    01933 8309      STD	Y+1,R16
    01934 831A      STD	Y+2,R17
    01935 832B      STD	Y+3,R18
    01936 833C      STD	Y+4,R19
(1669) 	   	  f=f*67.666;
    01937 E904      LDI	R16,0x94
    01938 E010      LDI	R17,0
    01939 940E 22E2 CALL	elpm32
    0193B 01CE      MOVW	R24,R28
    0193C 9601      ADIW	R24,1
    0193D 939A      ST	-Y,R25
    0193E 938A      ST	-Y,R24
    0193F 940E 259A CALL	fpmule1
    01941 8309      STD	Y+1,R16
    01942 831A      STD	Y+2,R17
    01943 832B      STD	Y+3,R18
    01944 833C      STD	Y+4,R19
(1670) 	   	  f=f/256;
    01945 8029      LDD	R2,Y+1
    01946 803A      LDD	R3,Y+2
    01947 804B      LDD	R4,Y+3
    01948 805C      LDD	R5,Y+4
    01949 E900      LDI	R16,0x90
    0194A E010      LDI	R17,0
    0194B 940E 22E2 CALL	elpm32
    0194D 933A      ST	-Y,R19
    0194E 932A      ST	-Y,R18
    0194F 931A      ST	-Y,R17
    01950 930A      ST	-Y,R16
    01951 0181      MOVW	R16,R2
    01952 0192      MOVW	R18,R4
    01953 940E 242A CALL	fpdiv2
    01955 8309      STD	Y+1,R16
    01956 831A      STD	Y+2,R17
    01957 832B      STD	Y+3,R18
    01958 833C      STD	Y+4,R19
(1671) 	   	  T_dat=f;
    01959 8109      LDD	R16,Y+1
    0195A 811A      LDD	R17,Y+2
    0195B 812B      LDD	R18,Y+3
    0195C 813C      LDD	R19,Y+4
    0195D 940E 23CB CALL	fpint
    0195F 9310 02D0 STS	T_dat+1,R17
    01961 9300 02CF STS	T_dat,R16
(1672) 	   	  CheckMotor(30);
    01963 E10E      LDI	R16,0x1E
    01964 E010      LDI	R17,0
    01965 940E 034A CALL	_CheckMotor
(1673) 	   	  T_dat<<=8;   
    01967 9020 02CF LDS	R2,T_dat
    01969 9030 02D0 LDS	R3,T_dat+1
    0196B 2C32      MOV	R3,R2
    0196C 2422      CLR	R2
    0196D 9230 02D0 STS	T_dat+1,R3
    0196F 9220 02CF STS	T_dat,R2
(1674) 		  if( (PWM1_PIN==1) || (PWM2_PIN==1) )
    01971 B389      IN	R24,0x19
    01972 7082      ANDI	R24,2
    01973 9586      LSR	R24
    01974 3081      CPI	R24,1
    01975 F039      BEQ	0x197D
    01976 B180      IN	R24,0x00
    01977 7084      ANDI	R24,4
    01978 9586      LSR	R24
    01979 9586      LSR	R24
    0197A 3081      CPI	R24,1
    0197B F009      BEQ	0x197D
    0197C C052      RJMP	0x19CF
(1675) 		  {
(1676) 	   	  f=SampleADC(4);//VIN / VR 
    0197D E004      LDI	R16,4
    0197E 940E 02DD CALL	_SampleADC
    01980 2EC0      MOV	R12,R16
    01981 2711      CLR	R17
    01982 940E 23FF CALL	int2fp
    01984 8309      STD	Y+1,R16
    01985 831A      STD	Y+2,R17
    01986 832B      STD	Y+3,R18
    01987 833C      STD	Y+4,R19
(1677) 	   	  f=f*2.5;
    01988 E908      LDI	R16,0x98
    01989 E010      LDI	R17,0
    0198A 940E 22E2 CALL	elpm32
    0198C 01CE      MOVW	R24,R28
    0198D 9601      ADIW	R24,1
    0198E 939A      ST	-Y,R25
    0198F 938A      ST	-Y,R24
    01990 940E 259A CALL	fpmule1
    01992 8309      STD	Y+1,R16
    01993 831A      STD	Y+2,R17
    01994 832B      STD	Y+3,R18
    01995 833C      STD	Y+4,R19
(1678) 	   	  f=f*67.666;
    01996 E904      LDI	R16,0x94
    01997 E010      LDI	R17,0
    01998 940E 22E2 CALL	elpm32
    0199A 01CE      MOVW	R24,R28
    0199B 9601      ADIW	R24,1
    0199C 939A      ST	-Y,R25
    0199D 938A      ST	-Y,R24
    0199E 940E 259A CALL	fpmule1
    019A0 8309      STD	Y+1,R16
    019A1 831A      STD	Y+2,R17
    019A2 832B      STD	Y+3,R18
    019A3 833C      STD	Y+4,R19
(1679) 	   	  f=f/256;
    019A4 8029      LDD	R2,Y+1
    019A5 803A      LDD	R3,Y+2
    019A6 804B      LDD	R4,Y+3
    019A7 805C      LDD	R5,Y+4
    019A8 E900      LDI	R16,0x90
    019A9 E010      LDI	R17,0
    019AA 940E 22E2 CALL	elpm32
    019AC 933A      ST	-Y,R19
    019AD 932A      ST	-Y,R18
    019AE 931A      ST	-Y,R17
    019AF 930A      ST	-Y,R16
    019B0 0181      MOVW	R16,R2
    019B1 0192      MOVW	R18,R4
    019B2 940E 242A CALL	fpdiv2
    019B4 8309      STD	Y+1,R16
    019B5 831A      STD	Y+2,R17
    019B6 832B      STD	Y+3,R18
    019B7 833C      STD	Y+4,R19
(1680) 	   	  i=f;
    019B8 8109      LDD	R16,Y+1
    019B9 811A      LDD	R17,Y+2
    019BA 812B      LDD	R18,Y+3
    019BB 813C      LDD	R19,Y+4
    019BC 940E 23CB CALL	fpint
    019BE 2EA0      MOV	R10,R16
(1681) 		  i+=5;//本来就少2mA，再多+3mA为了好看些
    019BF 2D8A      MOV	R24,R10
    019C0 5F8B      SUBI	R24,0xFB
    019C1 2EA8      MOV	R10,R24
(1682) 	   	  T_dat|=i; 
    019C2 2E28      MOV	R2,R24
    019C3 2433      CLR	R3
    019C4 9040 02CF LDS	R4,T_dat
    019C6 9050 02D0 LDS	R5,T_dat+1
    019C8 2842      OR	R4,R2
    019C9 2853      OR	R5,R3
    019CA 9250 02D0 STS	T_dat+1,R5
    019CC 9240 02CF STS	T_dat,R4
(1683) 		  }
    019CE C006      RJMP	0x19D5
(1684) 		  else
(1685) 		  {
(1686) 		  T_dat=0;
    019CF 2422      CLR	R2
    019D0 2433      CLR	R3
    019D1 9230 02D0 STS	T_dat+1,R3
    019D3 9220 02CF STS	T_dat,R2
(1687) 		  }
(1688) 		  SendManchester();//电机电压
    019D5 D461      RCALL	_SendManchester
(1689) 		  crc16array[16]=(unsigned char)(T_dat);
    019D6 9020 02CF LDS	R2,T_dat
    019D8 9030 02D0 LDS	R3,T_dat+1
    019DA 9220 0110 STS	crc16array+16,R2
(1690) 		  crc16array[17]=(unsigned char)(T_dat>>8);
    019DC 2C23      MOV	R2,R3
    019DD 2433      CLR	R3
    019DE FC27      SBRC	R2,7
    019DF 9430      COM	R3
    019E0 9220 0111 STS	crc16array+17,R2
(1691) 	   
(1692) 		  CheckMotor(30);	
    019E2 E10E      LDI	R16,0x1E
    019E3 E010      LDI	R17,0
    019E4 940E 034A CALL	_CheckMotor
(1693) 		  crc16(crc16array,18);//0.75ms
    019E6 E122      LDI	R18,0x12
    019E7 E030      LDI	R19,0
    019E8 E000      LDI	R16,0
    019E9 E011      LDI	R17,1
    019EA 940E 2249 CALL	_crc16
(1694) 		  T_dat=crc16hi;
    019EC 9020 0113 LDS	R2,crc16hi
    019EE 2433      CLR	R3
    019EF 9230 02D0 STS	T_dat+1,R3
    019F1 9220 02CF STS	T_dat,R2
(1695) 		  T_dat<<=8;
    019F3 9020 02CF LDS	R2,T_dat
    019F5 9030 02D0 LDS	R3,T_dat+1
    019F7 2C32      MOV	R3,R2
    019F8 2422      CLR	R2
    019F9 9230 02D0 STS	T_dat+1,R3
    019FB 9220 02CF STS	T_dat,R2
(1696) 		  T_dat|=crc16lo;	  
    019FD 9020 0112 LDS	R2,crc16lo
    019FF 2433      CLR	R3
    01A00 9040 02CF LDS	R4,T_dat
    01A02 9050 02D0 LDS	R5,T_dat+1
    01A04 2842      OR	R4,R2
    01A05 2853      OR	R5,R3
    01A06 9250 02D0 STS	T_dat+1,R5
    01A08 9240 02CF STS	T_dat,R4
(1697)           SendManchester();//上传CRC校验共2字节
    01A0A D42C      RCALL	_SendManchester
(1698) 		 }	
(1699) 		}
    01A0B C1A0      RJMP	0x1BAC
(1700) 		else  if(R_dat==0xc5) //读仪器信息,共320字节，分5次从流量板中提取，每包64字节
    01A0C 9180 02CD LDS	R24,R_dat
    01A0E 9190 02CE LDS	R25,R_dat+1
    01A10 3C85      CPI	R24,0xC5
    01A11 E0E0      LDI	R30,0
    01A12 079E      CPC	R25,R30
    01A13 F009      BEQ	0x1A15
    01A14 C16A      RJMP	0x1B7F
(1701) 		{
(1702) 		 Uart0TxData[0]=0xE8;
    01A15 EE88      LDI	R24,0xE8
    01A16 9380 0121 STS	Uart0TxData,R24
(1703) 		 Uart0TxData[1]=0x40;
    01A18 E480      LDI	R24,0x40
    01A19 9380 0122 STS	Uart0TxData+1,R24
(1704) 		 Uart0TxData[2]=0x83;
    01A1B E883      LDI	R24,0x83
    01A1C 9380 0123 STS	Uart0TxData+2,R24
(1705) 		 Uart0TxData[3]=0;//包0
    01A1E 2422      CLR	R2
    01A1F 9220 0124 STS	Uart0TxData+3,R2
(1706) 		 SendUart0_2(9,5);// 超时40ms	
    01A21 E025      LDI	R18,5
    01A22 E030      LDI	R19,0
    01A23 E009      LDI	R16,0x9
    01A24 940E 010C CALL	_SendUart0_2
(1707) 		 if(Uart0RxCounter==64) 
    01A26 9180 02E3 LDS	R24,Uart0RxCounter
    01A28 3480      CPI	R24,0x40
    01A29 F599      BNE	0x1A5D
(1708) 		  {
(1709) 		   for(i=0;i<32;i++)
    01A2A 24AA      CLR	R10
    01A2B C02E      RJMP	0x1A5A
(1710) 		   {
(1711) 		   CheckMotor(20);
    01A2C E104      LDI	R16,0x14
    01A2D E010      LDI	R17,0
    01A2E 940E 034A CALL	_CheckMotor
(1712) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01A30 EE85      LDI	R24,0xE5
    01A31 E092      LDI	R25,2
    01A32 2DEA      MOV	R30,R10
    01A33 27FF      CLR	R31
    01A34 0FEE      LSL	R30
    01A35 1FFF      ROL	R31
    01A36 0FE8      ADD	R30,R24
    01A37 1FF9      ADC	R31,R25
    01A38 8020      LD	R2,Z
    01A39 2433      CLR	R3
    01A3A 9230 02D0 STS	T_dat+1,R3
    01A3C 9220 02CF STS	T_dat,R2
(1713) 		   T_dat<<=8;
    01A3E 2C32      MOV	R3,R2
    01A3F 2422      CLR	R2
    01A40 9230 02D0 STS	T_dat+1,R3
    01A42 9220 02CF STS	T_dat,R2
(1714) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01A44 EE84      LDI	R24,0xE4
    01A45 E092      LDI	R25,2
    01A46 2DEA      MOV	R30,R10
    01A47 27FF      CLR	R31
    01A48 0FEE      LSL	R30
    01A49 1FFF      ROL	R31
    01A4A 0FE8      ADD	R30,R24
    01A4B 1FF9      ADC	R31,R25
    01A4C 8020      LD	R2,Z
    01A4D 2433      CLR	R3
    01A4E 9040 02CF LDS	R4,T_dat
    01A50 9050 02D0 LDS	R5,T_dat+1
    01A52 2842      OR	R4,R2
    01A53 2853      OR	R5,R3
    01A54 9250 02D0 STS	T_dat+1,R5
    01A56 9240 02CF STS	T_dat,R4
(1715) 		   SendManchester();		 
    01A58 D3DE      RCALL	_SendManchester
    01A59 94A3      INC	R10
    01A5A 2D8A      MOV	R24,R10
    01A5B 3280      CPI	R24,0x20
    01A5C F278      BCS	0x1A2C
(1716) 		   }	
(1717) 		 }	
(1718) 
(1719) 		 Uart0TxData[0]=0xE8;
    01A5D EE88      LDI	R24,0xE8
    01A5E 9380 0121 STS	Uart0TxData,R24
(1720) 		 Uart0TxData[1]=0x40;
    01A60 E480      LDI	R24,0x40
    01A61 9380 0122 STS	Uart0TxData+1,R24
(1721) 		 Uart0TxData[2]=0x83;
    01A63 E883      LDI	R24,0x83
    01A64 9380 0123 STS	Uart0TxData+2,R24
(1722) 		 Uart0TxData[3]=1;//包1
    01A66 E081      LDI	R24,1
    01A67 9380 0124 STS	Uart0TxData+3,R24
(1723) 		 SendUart0_2(9,5);// 超时40ms	 
    01A69 E025      LDI	R18,5
    01A6A E030      LDI	R19,0
    01A6B E009      LDI	R16,0x9
    01A6C 940E 010C CALL	_SendUart0_2
(1724) 		 if(Uart0RxCounter==64) 
    01A6E 9180 02E3 LDS	R24,Uart0RxCounter
    01A70 3480      CPI	R24,0x40
    01A71 F599      BNE	0x1AA5
(1725) 		  {
(1726) 		   for(i=0;i<32;i++)
    01A72 24AA      CLR	R10
    01A73 C02E      RJMP	0x1AA2
(1727) 		   {
(1728) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01A74 EE85      LDI	R24,0xE5
    01A75 E092      LDI	R25,2
    01A76 2DEA      MOV	R30,R10
    01A77 27FF      CLR	R31
    01A78 0FEE      LSL	R30
    01A79 1FFF      ROL	R31
    01A7A 0FE8      ADD	R30,R24
    01A7B 1FF9      ADC	R31,R25
    01A7C 8020      LD	R2,Z
    01A7D 2433      CLR	R3
    01A7E 9230 02D0 STS	T_dat+1,R3
    01A80 9220 02CF STS	T_dat,R2
(1729) 		   T_dat<<=8;
    01A82 2C32      MOV	R3,R2
    01A83 2422      CLR	R2
    01A84 9230 02D0 STS	T_dat+1,R3
    01A86 9220 02CF STS	T_dat,R2
(1730) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01A88 EE84      LDI	R24,0xE4
    01A89 E092      LDI	R25,2
    01A8A 2DEA      MOV	R30,R10
    01A8B 27FF      CLR	R31
    01A8C 0FEE      LSL	R30
    01A8D 1FFF      ROL	R31
    01A8E 0FE8      ADD	R30,R24
    01A8F 1FF9      ADC	R31,R25
    01A90 8020      LD	R2,Z
    01A91 2433      CLR	R3
    01A92 9040 02CF LDS	R4,T_dat
    01A94 9050 02D0 LDS	R5,T_dat+1
    01A96 2842      OR	R4,R2
    01A97 2853      OR	R5,R3
    01A98 9250 02D0 STS	T_dat+1,R5
    01A9A 9240 02CF STS	T_dat,R4
(1731) 		   SendManchester();
    01A9C D39A      RCALL	_SendManchester
(1732) 		   CheckMotor(20);
    01A9D E104      LDI	R16,0x14
    01A9E E010      LDI	R17,0
    01A9F 940E 034A CALL	_CheckMotor
    01AA1 94A3      INC	R10
    01AA2 2D8A      MOV	R24,R10
    01AA3 3280      CPI	R24,0x20
    01AA4 F278      BCS	0x1A74
(1733) 		  }
(1734) 		 }	
(1735) 		 	
(1736) 		 Uart0TxData[0]=0xE8;
    01AA5 EE88      LDI	R24,0xE8
    01AA6 9380 0121 STS	Uart0TxData,R24
(1737) 		 Uart0TxData[1]=0x40;
    01AA8 E480      LDI	R24,0x40
    01AA9 9380 0122 STS	Uart0TxData+1,R24
(1738) 		 Uart0TxData[2]=0x83;
    01AAB E883      LDI	R24,0x83
    01AAC 9380 0123 STS	Uart0TxData+2,R24
(1739) 		 Uart0TxData[3]=2;//包2
    01AAE E082      LDI	R24,2
    01AAF 9380 0124 STS	Uart0TxData+3,R24
(1740) 		 SendUart0_2(9,5);// 超时40ms	 
    01AB1 E025      LDI	R18,5
    01AB2 E030      LDI	R19,0
    01AB3 E009      LDI	R16,0x9
    01AB4 940E 010C CALL	_SendUart0_2
(1741) 		 if(Uart0RxCounter==64) 
    01AB6 9180 02E3 LDS	R24,Uart0RxCounter
    01AB8 3480      CPI	R24,0x40
    01AB9 F599      BNE	0x1AED
(1742) 		  {
(1743) 		   for(i=0;i<32;i++)
    01ABA 24AA      CLR	R10
    01ABB C02E      RJMP	0x1AEA
(1744) 		   {
(1745) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01ABC EE85      LDI	R24,0xE5
    01ABD E092      LDI	R25,2
    01ABE 2DEA      MOV	R30,R10
    01ABF 27FF      CLR	R31
    01AC0 0FEE      LSL	R30
    01AC1 1FFF      ROL	R31
    01AC2 0FE8      ADD	R30,R24
    01AC3 1FF9      ADC	R31,R25
    01AC4 8020      LD	R2,Z
    01AC5 2433      CLR	R3
    01AC6 9230 02D0 STS	T_dat+1,R3
    01AC8 9220 02CF STS	T_dat,R2
(1746) 		   T_dat<<=8;
    01ACA 2C32      MOV	R3,R2
    01ACB 2422      CLR	R2
    01ACC 9230 02D0 STS	T_dat+1,R3
    01ACE 9220 02CF STS	T_dat,R2
(1747) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01AD0 EE84      LDI	R24,0xE4
    01AD1 E092      LDI	R25,2
    01AD2 2DEA      MOV	R30,R10
    01AD3 27FF      CLR	R31
    01AD4 0FEE      LSL	R30
    01AD5 1FFF      ROL	R31
    01AD6 0FE8      ADD	R30,R24
    01AD7 1FF9      ADC	R31,R25
    01AD8 8020      LD	R2,Z
    01AD9 2433      CLR	R3
    01ADA 9040 02CF LDS	R4,T_dat
    01ADC 9050 02D0 LDS	R5,T_dat+1
    01ADE 2842      OR	R4,R2
    01ADF 2853      OR	R5,R3
    01AE0 9250 02D0 STS	T_dat+1,R5
    01AE2 9240 02CF STS	T_dat,R4
(1748) 		   SendManchester();
    01AE4 D352      RCALL	_SendManchester
(1749) 		   CheckMotor(20);
    01AE5 E104      LDI	R16,0x14
    01AE6 E010      LDI	R17,0
    01AE7 940E 034A CALL	_CheckMotor
    01AE9 94A3      INC	R10
    01AEA 2D8A      MOV	R24,R10
    01AEB 3280      CPI	R24,0x20
    01AEC F278      BCS	0x1ABC
(1750) 		  }
(1751) 		 }	
(1752) 		 
(1753) 		 Uart0TxData[0]=0xE8;
    01AED EE88      LDI	R24,0xE8
    01AEE 9380 0121 STS	Uart0TxData,R24
(1754) 		 Uart0TxData[1]=0x40;
    01AF0 E480      LDI	R24,0x40
    01AF1 9380 0122 STS	Uart0TxData+1,R24
(1755) 		 Uart0TxData[2]=0x83;
    01AF3 E883      LDI	R24,0x83
    01AF4 9380 0123 STS	Uart0TxData+2,R24
(1756) 		 Uart0TxData[3]=3;//包3
    01AF6 E083      LDI	R24,3
    01AF7 9380 0124 STS	Uart0TxData+3,R24
(1757) 		 SendUart0_2(9,5);// 超时40ms	 
    01AF9 E025      LDI	R18,5
    01AFA E030      LDI	R19,0
    01AFB E009      LDI	R16,0x9
    01AFC 940E 010C CALL	_SendUart0_2
(1758) 		 if(Uart0RxCounter==64) 
    01AFE 9180 02E3 LDS	R24,Uart0RxCounter
    01B00 3480      CPI	R24,0x40
    01B01 F599      BNE	0x1B35
(1759) 		  {
(1760) 		   for(i=0;i<32;i++)
    01B02 24AA      CLR	R10
    01B03 C02E      RJMP	0x1B32
(1761) 		   {
(1762) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01B04 EE85      LDI	R24,0xE5
    01B05 E092      LDI	R25,2
    01B06 2DEA      MOV	R30,R10
    01B07 27FF      CLR	R31
    01B08 0FEE      LSL	R30
    01B09 1FFF      ROL	R31
    01B0A 0FE8      ADD	R30,R24
    01B0B 1FF9      ADC	R31,R25
    01B0C 8020      LD	R2,Z
    01B0D 2433      CLR	R3
    01B0E 9230 02D0 STS	T_dat+1,R3
    01B10 9220 02CF STS	T_dat,R2
(1763) 		   T_dat<<=8;
    01B12 2C32      MOV	R3,R2
    01B13 2422      CLR	R2
    01B14 9230 02D0 STS	T_dat+1,R3
    01B16 9220 02CF STS	T_dat,R2
(1764) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01B18 EE84      LDI	R24,0xE4
    01B19 E092      LDI	R25,2
    01B1A 2DEA      MOV	R30,R10
    01B1B 27FF      CLR	R31
    01B1C 0FEE      LSL	R30
    01B1D 1FFF      ROL	R31
    01B1E 0FE8      ADD	R30,R24
    01B1F 1FF9      ADC	R31,R25
    01B20 8020      LD	R2,Z
    01B21 2433      CLR	R3
    01B22 9040 02CF LDS	R4,T_dat
    01B24 9050 02D0 LDS	R5,T_dat+1
    01B26 2842      OR	R4,R2
    01B27 2853      OR	R5,R3
    01B28 9250 02D0 STS	T_dat+1,R5
    01B2A 9240 02CF STS	T_dat,R4
(1765) 		   SendManchester();
    01B2C D30A      RCALL	_SendManchester
(1766) 		   CheckMotor(20);
    01B2D E104      LDI	R16,0x14
    01B2E E010      LDI	R17,0
    01B2F 940E 034A CALL	_CheckMotor
    01B31 94A3      INC	R10
    01B32 2D8A      MOV	R24,R10
    01B33 3280      CPI	R24,0x20
    01B34 F278      BCS	0x1B04
(1767) 		  }
(1768) 		 }	
(1769) 		 
(1770) 		 Uart0TxData[0]=0xE8;
    01B35 EE88      LDI	R24,0xE8
    01B36 9380 0121 STS	Uart0TxData,R24
(1771) 		 Uart0TxData[1]=0x40;
    01B38 E480      LDI	R24,0x40
    01B39 9380 0122 STS	Uart0TxData+1,R24
(1772) 		 Uart0TxData[2]=0x83;
    01B3B E883      LDI	R24,0x83
    01B3C 9380 0123 STS	Uart0TxData+2,R24
(1773) 		 Uart0TxData[3]=4;//包4
    01B3E E084      LDI	R24,4
    01B3F 9380 0124 STS	Uart0TxData+3,R24
(1774) 		 SendUart0_2(9,5);// 超时40ms	 
    01B41 E025      LDI	R18,5
    01B42 E030      LDI	R19,0
    01B43 E009      LDI	R16,0x9
    01B44 940E 010C CALL	_SendUart0_2
(1775) 		 if(Uart0RxCounter==64) 
    01B46 9180 02E3 LDS	R24,Uart0RxCounter
    01B48 3480      CPI	R24,0x40
    01B49 F009      BEQ	0x1B4B
    01B4A C061      RJMP	0x1BAC
(1776) 		  {
(1777) 		   for(i=0;i<32;i++)
    01B4B 24AA      CLR	R10
    01B4C C02E      RJMP	0x1B7B
(1778) 		   {
(1779) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01B4D EE85      LDI	R24,0xE5
    01B4E E092      LDI	R25,2
    01B4F 2DEA      MOV	R30,R10
    01B50 27FF      CLR	R31
    01B51 0FEE      LSL	R30
    01B52 1FFF      ROL	R31
    01B53 0FE8      ADD	R30,R24
    01B54 1FF9      ADC	R31,R25
    01B55 8020      LD	R2,Z
    01B56 2433      CLR	R3
    01B57 9230 02D0 STS	T_dat+1,R3
    01B59 9220 02CF STS	T_dat,R2
(1780) 		   T_dat<<=8;
    01B5B 2C32      MOV	R3,R2
    01B5C 2422      CLR	R2
    01B5D 9230 02D0 STS	T_dat+1,R3
    01B5F 9220 02CF STS	T_dat,R2
(1781) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01B61 EE84      LDI	R24,0xE4
    01B62 E092      LDI	R25,2
    01B63 2DEA      MOV	R30,R10
    01B64 27FF      CLR	R31
    01B65 0FEE      LSL	R30
    01B66 1FFF      ROL	R31
    01B67 0FE8      ADD	R30,R24
    01B68 1FF9      ADC	R31,R25
    01B69 8020      LD	R2,Z
    01B6A 2433      CLR	R3
    01B6B 9040 02CF LDS	R4,T_dat
    01B6D 9050 02D0 LDS	R5,T_dat+1
    01B6F 2842      OR	R4,R2
    01B70 2853      OR	R5,R3
    01B71 9250 02D0 STS	T_dat+1,R5
    01B73 9240 02CF STS	T_dat,R4
(1782) 		   SendManchester();
    01B75 D2C1      RCALL	_SendManchester
(1783) 		   CheckMotor(20);
    01B76 E104      LDI	R16,0x14
    01B77 E010      LDI	R17,0
    01B78 940E 034A CALL	_CheckMotor
    01B7A 94A3      INC	R10
    01B7B 2D8A      MOV	R24,R10
    01B7C 3280      CPI	R24,0x20
    01B7D F278      BCS	0x1B4D
(1784) 		  }
(1785) 		 }	
(1786) 		 
(1787) 		}
    01B7E C02D      RJMP	0x1BAC
(1788) 		else  if(R_dat==0xca) //写仪器信息
    01B7F 9180 02CD LDS	R24,R_dat
    01B81 9190 02CE LDS	R25,R_dat+1
    01B83 3C8A      CPI	R24,0xCA
    01B84 E0E0      LDI	R30,0
    01B85 079E      CPC	R25,R30
    01B86 F529      BNE	0x1BAC
(1789) 		{
(1790) 		 DataFlag=4;
    01B87 E084      LDI	R24,4
    01B88 E090      LDI	R25,0
    01B89 9390 02B4 STS	DataFlag+1,R25
    01B8B 9380 02B3 STS	DataFlag,R24
(1791) 		 coeff_len=320;
    01B8D E480      LDI	R24,0x40
    01B8E E091      LDI	R25,1
    01B8F 9390 011F STS	coeff_len+1,R25
    01B91 9380 011E STS	coeff_len,R24
(1792) 		 coeff_count=0;
    01B93 2422      CLR	R2
    01B94 2433      CLR	R3
    01B95 9230 011D STS	coeff_count+1,R3
    01B97 9220 011C STS	coeff_count,R2
(1793) 		 TimeOutFlag=0;
    01B99 9220 02CB STS	TimeOutFlag,R2
(1794) 		 Timer0Counter=2000;//16s定时
    01B9B ED80      LDI	R24,0xD0
    01B9C E097      LDI	R25,7
    01B9D 9390 032F STS	Timer0Counter+1,R25
    01B9F 9380 032E STS	Timer0Counter,R24
(1795) 	     TCNT0=0x06; //8ms
    01BA1 E086      LDI	R24,6
    01BA2 BF82      OUT	0x32,R24
(1796) 	     TCCR0|=0x06;//256分频
    01BA3 B783      IN	R24,0x33
    01BA4 6086      ORI	R24,6
    01BA5 BF83      OUT	0x33,R24
(1797) 	     TIFR|=0x01; //清定时器0中断标志
    01BA6 B786      IN	R24,0x36
    01BA7 6081      ORI	R24,1
    01BA8 BF86      OUT	0x36,R24
(1798)          TIMSK|=0x01;//使能定时器0中断		
    01BA9 B787      IN	R24,0x37
    01BAA 6081      ORI	R24,1
    01BAB BF87      OUT	0x37,R24
(1799) 		}
(1800) 	break;
(1801)     default: 
(1802) 	break;	
(1803)    }
(1804)   }
(1805) RDataEnd:
(1806) 	IntFlag=0;
    01BAC 2422      CLR	R2
    01BAD 9220 02B1 STS	IntFlag,R2
(1807)     EIFR|=0x08;//清INT3中断标志
    01BAF B788      IN	R24,0x38
    01BB0 6088      ORI	R24,0x8
    01BB1 BF88      OUT	0x38,R24
(1808)     EIMSK|=0x08;//使能INT3中断 
    01BB2 B789      IN	R24,0x39
    01BB3 6088      ORI	R24,0x8
    01BB4 BF89      OUT	0x39,R24
    01BB5 940C 0649 JMP	0x649
    01BB7 9629      ADIW	R28,0x9
    01BB8 9508      RET
_E_comp:
    01BB9 921A      ST	-Y,R1
    01BBA 922A      ST	-Y,R2
    01BBB 938A      ST	-Y,R24
    01BBC 939A      ST	-Y,R25
    01BBD B61F      IN	R1,0x3F
    01BBE 921A      ST	-Y,R1
(1809)   }  
(1810)   }
(1811) }
(1812) 
(1813) #pragma interrupt_handler E_comp:24
(1814) void E_comp(void)  //模拟比较器中断,总线电压被拉低到28.5V后，立即停电机
(1815) {   
(1816)   if(PWM1_PIN==1)//收放电机欠压堵转
    01BBF B389      IN	R24,0x19
    01BC0 7082      ANDI	R24,2
    01BC1 9586      LSR	R24
    01BC2 3081      CPI	R24,1
    01BC3 F449      BNE	0x1BCD
(1817)    {
(1818)  	 Motor1Status.s.UnderVoltage=1;
    01BC4 9180 0339 LDS	R24,Motor1Status
    01BC6 9190 033A LDS	R25,Motor1Status+1
    01BC8 6280      ORI	R24,0x20
    01BC9 9390 033A STS	Motor1Status+1,R25
    01BCB 9380 0339 STS	Motor1Status,R24
(1819)    }
(1820)   if(PWM2_PIN==1)//调节电机欠压堵转
    01BCD B180      IN	R24,0x00
    01BCE 7084      ANDI	R24,4
    01BCF 9586      LSR	R24
    01BD0 9586      LSR	R24
    01BD1 3081      CPI	R24,1
    01BD2 F449      BNE	0x1BDC
(1821)    { 
(1822)  	Motor2Status.s.UnderVoltage=1;
    01BD3 9180 0337 LDS	R24,Motor2Status
    01BD5 9190 0338 LDS	R25,Motor2Status+1
    01BD7 6280      ORI	R24,0x20
    01BD8 9390 0338 STS	Motor2Status+1,R25
    01BDA 9380 0337 STS	Motor2Status,R24
(1823)    } 
(1824)    MOTORSTOP  //关电机 
    01BDC B38A      IN	R24,0x1A
    01BDD 6087      ORI	R24,7
    01BDE BB8A      OUT	0x1A,R24
    01BDF B38B      IN	R24,0x1B
    01BE0 7F8D      ANDI	R24,0xFD
    01BE1 BB8B      OUT	0x1B,R24
    01BE2 B38B      IN	R24,0x1B
    01BE3 7F88      ANDI	R24,0xF8
    01BE4 BB8B      OUT	0x1B,R24
    01BE5 9180 0061 LDS	R24,0x61
    01BE7 6087      ORI	R24,7
    01BE8 9380 0061 STS	0x61,R24
    01BEA 9180 0062 LDS	R24,0x62
    01BEC 7F8B      ANDI	R24,0xFB
    01BED 9380 0062 STS	0x62,R24
    01BEF 9180 0062 LDS	R24,0x62
    01BF1 7F88      ANDI	R24,0xF8
    01BF2 9380 0062 STS	0x62,R24
    01BF4 9ABF      SBI	0x17,7
    01BF5 B388      IN	R24,0x18
    01BF6 778F      ANDI	R24,0x7F
    01BF7 BB88      OUT	0x18,R24
    01BF8 9019      LD	R1,Y+
    01BF9 BE1F      OUT	0x3F,R1
    01BFA 9199      LD	R25,Y+
    01BFB 9189      LD	R24,Y+
    01BFC 9029      LD	R2,Y+
    01BFD 9019      LD	R1,Y+
    01BFE 9518      RETI
_usart0_isr:
    01BFF 922A      ST	-Y,R2
    01C00 938A      ST	-Y,R24
    01C01 939A      ST	-Y,R25
    01C02 93EA      ST	-Y,R30
    01C03 93FA      ST	-Y,R31
    01C04 B62F      IN	R2,0x3F
    01C05 922A      ST	-Y,R2
(1825) }
(1826) 
(1827) /*
(1828) #pragma interrupt_handler int0_isr:2
(1829) void int0_isr(void)//外部中断0，过流堵转
(1830) {
(1831)   CompCounter++; 
(1832)   if(CompCounter>1000)
(1833)   {
(1834)    MOTORSTOP  //关电机
(1835)   
(1836)    if(Motor1Status.s.ThisRun>0)//收放电机过流堵转
(1837)     {
(1838) 	 Motor1Status.s.ThisRun=0;
(1839) 	 Motor1Status.s.CommandStop=0;
(1840)  	 Motor1Status.s.OverCurrent=1;
(1841)  	 Motor1Status.s.UnderVoltage=0;
(1842) 	}
(1843)    if(Motor2Status.s.ThisRun>0)//调节电机过流堵转
(1844)     {
(1845) 	  Motor2Status.s.ThisRun=0;
(1846) 	  Motor2Status.s.CommandStop=0;
(1847)  	  Motor2Status.s.OverCurrent=1;
(1848)  	  Motor2Status.s.UnderVoltage=0;
(1849) 	}
(1850)   }
(1851) }
(1852) */
(1853) #pragma interrupt_handler usart0_isr:19
(1854) void usart0_isr(void) //串口接收中断
(1855) {
(1856)     if(Uart0RxCounter<74)
    01C06 9180 02E3 LDS	R24,Uart0RxCounter
    01C08 348A      CPI	R24,0x4A
    01C09 F470      BCC	0x1C18
(1857) 	{
(1858)     Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
    01C0A EE84      LDI	R24,0xE4
    01C0B E092      LDI	R25,2
    01C0C 91E0 02E3 LDS	R30,Uart0RxCounter
    01C0E 27FF      CLR	R31
    01C0F 0FE8      ADD	R30,R24
    01C10 1FF9      ADC	R31,R25
    01C11 B02C      IN	R2,0x0C
    01C12 8220      ST	Z,R2
(1859)  	Uart0RxCounter++;
    01C13 9180 02E3 LDS	R24,Uart0RxCounter
    01C15 5F8F      SUBI	R24,0xFF
    01C16 9380 02E3 STS	Uart0RxCounter,R24
(1860) 	}
    01C18 9029      LD	R2,Y+
    01C19 BE2F      OUT	0x3F,R2
    01C1A 91F9      LD	R31,Y+
    01C1B 91E9      LD	R30,Y+
    01C1C 9199      LD	R25,Y+
    01C1D 9189      LD	R24,Y+
    01C1E 9029      LD	R2,Y+
    01C1F 9518      RETI
_int3_isr:
    01C20 922A      ST	-Y,R2
    01C21 923A      ST	-Y,R3
    01C22 930A      ST	-Y,R16
    01C23 931A      ST	-Y,R17
    01C24 938A      ST	-Y,R24
    01C25 939A      ST	-Y,R25
    01C26 93AA      ST	-Y,R26
    01C27 93EA      ST	-Y,R30
    01C28 93FA      ST	-Y,R31
    01C29 B62F      IN	R2,0x3F
    01C2A 922A      ST	-Y,R2
(1861) }
(1862) 
(1863) /*
(1864) #pragma interrupt_handler ad_isr:22
(1865) void ad_isr(void)  //ad转换中断
(1866) {
(1867)   ADCData[ADCCn]=ADCH;
(1868)   ADCData[ADCCn]<<=8;
(1869)   ADCData[ADCCn]|=ADCL;//读AD转换结果
(1870)   ADCCn++;
(1871)   ADCData[ADCCn]&=0x03ff;//10位有效转换结果
(1872)   if(ADCCn==129)
(1873)    { 
(1874)    ADCSRA&=0xF7;//关AD中断
(1875)    ADCSRA|=0x10;//清AD中断标志
(1876)    ADCSRA=0;//关ADC
(1877)    }
(1878) }
(1879) */
(1880) 
(1881) #pragma interrupt_handler int3_isr:iv_INT3
(1882) void int3_isr(void)//外部中断3
(1883) { 
(1884)    SREG&=0x7f;//关总中断
    01C2B B78F      IN	R24,0x3F
    01C2C 778F      ANDI	R24,0x7F
    01C2D BF8F      OUT	0x3F,R24
(1885)    EIMSK&=0xF7;//关INT3  
    01C2E B789      IN	R24,0x39
    01C2F 7F87      ANDI	R24,0xF7
    01C30 BF89      OUT	0x39,R24
(1886)    TCCR2 = 0x00; //stop
    01C31 2422      CLR	R2
    01C32 BC25      OUT	0x25,R2
(1887)   
(1888)   DELAY10
    01C33 2433      CLR	R3
    01C34 9230 02B0 STS	Tt+1,R3
    01C36 9220 02AF STS	Tt,R2
    01C38 C009      RJMP	0x1C42
    01C39 9180 02AF LDS	R24,Tt
    01C3B 9190 02B0 LDS	R25,Tt+1
    01C3D 9601      ADIW	R24,1
    01C3E 9390 02B0 STS	Tt+1,R25
    01C40 9380 02AF STS	Tt,R24
    01C42 9180 02AF LDS	R24,Tt
    01C44 9190 02B0 LDS	R25,Tt+1
    01C46 3084      CPI	R24,4
    01C47 E0E0      LDI	R30,0
    01C48 079E      CPC	R25,R30
    01C49 F378      BCS	0x1C39
(1889)   EIFR|=0x08;//清INT3中断标志 
    01C4A B788      IN	R24,0x38
    01C4B 6088      ORI	R24,0x8
    01C4C BF88      OUT	0x38,R24
(1890)   if((PIND&0x08)==0x00)//高脉冲不足10us则直接跳出
    01C4D 9983      SBIC	0x10,3
    01C4E C001      RJMP	0x1C50
(1891)   {
(1892)    goto End;
    01C4F C1CD      RJMP	0x1E1D
(1893)   }
(1894)    
(1895)    TCNT2 = 0x00;  
    01C50 2422      CLR	R2
    01C51 BC24      OUT	0x24,R2
(1896)    TCCR2 = 0x03; //64分频,8M时钟，每个CLOCK耗时8us，最大定时2048us，每周期10个计数
    01C52 E083      LDI	R24,3
    01C53 BD85      OUT	0x25,R24
    01C54 C029      RJMP	0x1C7E
(1897)    
(1898)    while(1)
(1899)    {
(1900)      T2cn=TCNT2;
    01C55 B424      IN	R2,0x24
    01C56 2433      CLR	R3
    01C57 9230 02AC STS	T2cn+1,R3
    01C59 9220 02AB STS	T2cn,R2
(1901) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    01C5B E580      LDI	R24,0x50
    01C5C E090      LDI	R25,0
    01C5D 1582      CP	R24,R2
    01C5E 0593      CPC	R25,R3
    01C5F F408      BCC	0x1C61
(1902) 	  {
(1903) 	    goto End;
    01C60 C1BC      RJMP	0x1E1D
(1904) 	  }
(1905)      if((PIND&0x08)==0x00)
    01C61 9983      SBIC	0x10,3
    01C62 C01B      RJMP	0x1C7E
(1906) 	 {
(1907) 	   DELAY20
    01C63 2422      CLR	R2
    01C64 2433      CLR	R3
    01C65 9230 02B0 STS	Tt+1,R3
    01C67 9220 02AF STS	Tt,R2
    01C69 C009      RJMP	0x1C73
    01C6A 9180 02AF LDS	R24,Tt
    01C6C 9190 02B0 LDS	R25,Tt+1
    01C6E 9601      ADIW	R24,1
    01C6F 9390 02B0 STS	Tt+1,R25
    01C71 9380 02AF STS	Tt,R24
    01C73 9180 02AF LDS	R24,Tt
    01C75 9190 02B0 LDS	R25,Tt+1
    01C77 3084      CPI	R24,4
    01C78 E0E0      LDI	R30,0
    01C79 079E      CPC	R25,R30
    01C7A F378      BCS	0x1C6A
(1908) 	   if((PIND&0x08)==0x00)
    01C7B 9983      SBIC	0x10,3
    01C7C C001      RJMP	0x1C7E
(1909) 	    {
(1910) 	      break;
    01C7D C031      RJMP	0x1CAF
    01C7E CFD6      RJMP	0x1C55
(1911) 	    }
(1912) 	 }
(1913)    }
(1914)      		   
(1915)     //开始判断同步头	
(1916) 	while(1)//还没有上升沿到来,死等
(1917) 	{
(1918) 	  T2cn=TCNT2;
    01C7F B424      IN	R2,0x24
    01C80 2433      CLR	R3
    01C81 9230 02AC STS	T2cn+1,R3
    01C83 9220 02AB STS	T2cn,R2
(1919) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    01C85 E580      LDI	R24,0x50
    01C86 E090      LDI	R25,0
    01C87 1582      CP	R24,R2
    01C88 0593      CPC	R25,R3
    01C89 F408      BCC	0x1C8B
(1920) 	  {
(1921) 	    goto End;
    01C8A C192      RJMP	0x1E1D
(1922) 	  }
(1923) 	  if((EIFR&0x08)==0x08)
    01C8B B788      IN	R24,0x38
    01C8C 7088      ANDI	R24,0x8
    01C8D 3088      CPI	R24,0x8
    01C8E F501      BNE	0x1CAF
(1924) 	  {
(1925) 	   DELAY10
    01C8F 2422      CLR	R2
    01C90 2433      CLR	R3
    01C91 9230 02B0 STS	Tt+1,R3
    01C93 9220 02AF STS	Tt,R2
    01C95 C009      RJMP	0x1C9F
    01C96 9180 02AF LDS	R24,Tt
    01C98 9190 02B0 LDS	R25,Tt+1
    01C9A 9601      ADIW	R24,1
    01C9B 9390 02B0 STS	Tt+1,R25
    01C9D 9380 02AF STS	Tt,R24
    01C9F 9180 02AF LDS	R24,Tt
    01CA1 9190 02B0 LDS	R25,Tt+1
    01CA3 3084      CPI	R24,4
    01CA4 E0E0      LDI	R30,0
    01CA5 079E      CPC	R25,R30
    01CA6 F378      BCS	0x1C96
(1926) 	   EIFR|=0x08;//清INT3中断标志 
    01CA7 B788      IN	R24,0x38
    01CA8 6088      ORI	R24,0x8
    01CA9 BF88      OUT	0x38,R24
(1927) 	   if((PIND&0x08)==0x08)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    01CAA B380      IN	R24,0x10
    01CAB 7088      ANDI	R24,0x8
    01CAC 3088      CPI	R24,0x8
    01CAD F409      BNE	0x1CAF
(1928) 	     {
(1929)    	     break;
    01CAE C001      RJMP	0x1CB0
    01CAF CFCF      RJMP	0x1C7F
(1930) 		 }
(1931) 	  }  
(1932) 	}
(1933) 	T2cn=TCNT2;
    01CB0 B424      IN	R2,0x24
    01CB1 2433      CLR	R3
    01CB2 9230 02AC STS	T2cn+1,R3
    01CB4 9220 02AB STS	T2cn,R2
(1934) 	TCNT2=0;
    01CB6 2422      CLR	R2
    01CB7 BC24      OUT	0x24,R2
(1935) 	if((T2cn<60)||(T2cn>80))//同步头本应是7个周期，但收到的结果为6~8个周期内都认可
    01CB8 9020 02AB LDS	R2,T2cn
    01CBA 9030 02AC LDS	R3,T2cn+1
    01CBC 01C1      MOVW	R24,R2
    01CBD 338C      CPI	R24,0x3C
    01CBE E0E0      LDI	R30,0
    01CBF 079E      CPC	R25,R30
    01CC0 F028      BCS	0x1CC6
    01CC1 E580      LDI	R24,0x50
    01CC2 E090      LDI	R25,0
    01CC3 1582      CP	R24,R2
    01CC4 0593      CPC	R25,R3
    01CC5 F408      BCC	0x1CC7
(1936) 	{
(1937) 	 goto End;//没有收到正确的同步头，直接跳出
    01CC6 C156      RJMP	0x1E1D
(1938) 	}
(1939) 	
(1940) Start:	//同步头解码正确，下面开始接收9位数据位	//按位从高到低接收数据位，8位数据加1位校验共9位 		      	
(1941)   for(Int_count=9;Int_count>0;Int_count--)
    01CC7 E089      LDI	R24,0x9
    01CC8 9380 02B2 STS	Int_count,R24
    01CCA C0B3      RJMP	0x1D7E
(1942)   {	
(1943)    while(1)
(1944)    {
(1945)      T2cn=TCNT2;
    01CCB B424      IN	R2,0x24
    01CCC 2433      CLR	R3
    01CCD 9230 02AC STS	T2cn+1,R3
    01CCF 9220 02AB STS	T2cn,R2
(1946) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    01CD1 E580      LDI	R24,0x50
    01CD2 E090      LDI	R25,0
    01CD3 1582      CP	R24,R2
    01CD4 0593      CPC	R25,R3
    01CD5 F408      BCC	0x1CD7
(1947) 	  {
(1948) 	    goto End;
    01CD6 C146      RJMP	0x1E1D
(1949) 	  }
(1950)      if((PIND&0x08)==0x00)
    01CD7 9983      SBIC	0x10,3
    01CD8 C01B      RJMP	0x1CF4
(1951) 	 {
(1952) 	   DELAY20
    01CD9 2422      CLR	R2
    01CDA 2433      CLR	R3
    01CDB 9230 02B0 STS	Tt+1,R3
    01CDD 9220 02AF STS	Tt,R2
    01CDF C009      RJMP	0x1CE9
    01CE0 9180 02AF LDS	R24,Tt
    01CE2 9190 02B0 LDS	R25,Tt+1
    01CE4 9601      ADIW	R24,1
    01CE5 9390 02B0 STS	Tt+1,R25
    01CE7 9380 02AF STS	Tt,R24
    01CE9 9180 02AF LDS	R24,Tt
    01CEB 9190 02B0 LDS	R25,Tt+1
    01CED 3084      CPI	R24,4
    01CEE E0E0      LDI	R30,0
    01CEF 079E      CPC	R25,R30
    01CF0 F378      BCS	0x1CE0
(1953) 	   if((PIND&0x08)==0x00)
    01CF1 9983      SBIC	0x10,3
    01CF2 C001      RJMP	0x1CF4
(1954) 	    {
(1955) 	      break;
    01CF3 C031      RJMP	0x1D25
    01CF4 CFD6      RJMP	0x1CCB
(1956) 	    }
(1957) 	 }
(1958)    } 
(1959)    while(1)//还没有上升沿到来,死等
(1960) 	{
(1961) 	  T2cn=TCNT2;
    01CF5 B424      IN	R2,0x24
    01CF6 2433      CLR	R3
    01CF7 9230 02AC STS	T2cn+1,R3
    01CF9 9220 02AB STS	T2cn,R2
(1962) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    01CFB E580      LDI	R24,0x50
    01CFC E090      LDI	R25,0
    01CFD 1582      CP	R24,R2
    01CFE 0593      CPC	R25,R3
    01CFF F408      BCC	0x1D01
(1963) 	  {
(1964) 	    goto End;
    01D00 C11C      RJMP	0x1E1D
(1965) 	  }
(1966) 	  if((EIFR&0x08)==0x08)
    01D01 B788      IN	R24,0x38
    01D02 7088      ANDI	R24,0x8
    01D03 3088      CPI	R24,0x8
    01D04 F501      BNE	0x1D25
(1967) 	  {
(1968) 	   DELAY10
    01D05 2422      CLR	R2
    01D06 2433      CLR	R3
    01D07 9230 02B0 STS	Tt+1,R3
    01D09 9220 02AF STS	Tt,R2
    01D0B C009      RJMP	0x1D15
    01D0C 9180 02AF LDS	R24,Tt
    01D0E 9190 02B0 LDS	R25,Tt+1
    01D10 9601      ADIW	R24,1
    01D11 9390 02B0 STS	Tt+1,R25
    01D13 9380 02AF STS	Tt,R24
    01D15 9180 02AF LDS	R24,Tt
    01D17 9190 02B0 LDS	R25,Tt+1
    01D19 3084      CPI	R24,4
    01D1A E0E0      LDI	R30,0
    01D1B 079E      CPC	R25,R30
    01D1C F378      BCS	0x1D0C
(1969) 	   EIFR|=0x08;//清INT3中断标志 
    01D1D B788      IN	R24,0x38
    01D1E 6088      ORI	R24,0x8
    01D1F BF88      OUT	0x38,R24
(1970) 	   if((PIND&0x08)==0x08)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    01D20 B380      IN	R24,0x10
    01D21 7088      ANDI	R24,0x8
    01D22 3088      CPI	R24,0x8
    01D23 F409      BNE	0x1D25
(1971) 	     {
(1972)    	     break;
    01D24 C001      RJMP	0x1D26
    01D25 CFCF      RJMP	0x1CF5
(1973) 		 }
(1974) 	  }  
(1975) 	}
(1976) 	T2cn=TCNT2;
    01D26 B424      IN	R2,0x24
    01D27 2433      CLR	R3
    01D28 9230 02AC STS	T2cn+1,R3
    01D2A 9220 02AB STS	T2cn,R2
(1977) 	TCNT2=0;
    01D2C 2422      CLR	R2
    01D2D BC24      OUT	0x24,R2
(1978) 	if(T2cn<20)//数据位最小是3位，可放宽到2位
    01D2E 9180 02AB LDS	R24,T2cn
    01D30 9190 02AC LDS	R25,T2cn+1
    01D32 3184      CPI	R24,0x14
    01D33 E0E0      LDI	R30,0
    01D34 079E      CPC	R25,R30
    01D35 F420      BCC	0x1D3A
(1979) 	{
(1980) 	 IntFlag=3;//接收数据位不完整
    01D36 E083      LDI	R24,3
    01D37 9380 02B1 STS	IntFlag,R24
(1981) 	 goto End;//数据位来得太早，退出
    01D39 C0E3      RJMP	0x1E1D
(1982) 	}
(1983) 	else if((T2cn>=20)&&(T2cn<40))//数据位1本应是3个周期，在此我们认为2~4个周期都是可以的
    01D3A 9020 02AB LDS	R2,T2cn
    01D3C 9030 02AC LDS	R3,T2cn+1
    01D3E 01C1      MOVW	R24,R2
    01D3F 3184      CPI	R24,0x14
    01D40 E0E0      LDI	R30,0
    01D41 079E      CPC	R25,R30
    01D42 F070      BCS	0x1D51
    01D43 3288      CPI	R24,0x28
    01D44 E0E0      LDI	R30,0
    01D45 079E      CPC	R25,R30
    01D46 F450      BCC	0x1D51
(1984) 	{
(1985) 	 Rx[Int_count]=1;
    01D47 ED81      LDI	R24,0xD1
    01D48 E092      LDI	R25,2
    01D49 91E0 02B2 LDS	R30,Int_count
    01D4B 27FF      CLR	R31
    01D4C 0FE8      ADD	R30,R24
    01D4D 1FF9      ADC	R31,R25
    01D4E E081      LDI	R24,1
    01D4F 8380      ST	Z,R24
(1986) 	}
    01D50 C028      RJMP	0x1D79
(1987) 	else if((T2cn>=40)&&(T2cn<60))//数据位0本应是5个周期，在此我们认为4~6个周期都是可以的
    01D51 9100 02AB LDS	R16,T2cn
    01D53 9110 02AC LDS	R17,T2cn+1
    01D55 3208      CPI	R16,0x28
    01D56 E0E0      LDI	R30,0
    01D57 071E      CPC	R17,R30
    01D58 F070      BCS	0x1D67
    01D59 330C      CPI	R16,0x3C
    01D5A E0E0      LDI	R30,0
    01D5B 071E      CPC	R17,R30
    01D5C F450      BCC	0x1D67
(1988) 	{
(1989) 	 Rx[Int_count]=0;
    01D5D ED81      LDI	R24,0xD1
    01D5E E092      LDI	R25,2
    01D5F 91E0 02B2 LDS	R30,Int_count
    01D61 27FF      CLR	R31
    01D62 0FE8      ADD	R30,R24
    01D63 1FF9      ADC	R31,R25
    01D64 2422      CLR	R2
    01D65 8220      ST	Z,R2
(1990) 	}
    01D66 C012      RJMP	0x1D79
(1991) 	else if((T2cn>=60)&&(T2cn<=80))//同步位本应是7周期，在此我们认为6~8周期都是可以的
    01D67 9100 02AB LDS	R16,T2cn
    01D69 9110 02AC LDS	R17,T2cn+1
    01D6B 330C      CPI	R16,0x3C
    01D6C E0E0      LDI	R30,0
    01D6D 071E      CPC	R17,R30
    01D6E F030      BCS	0x1D75
    01D6F E580      LDI	R24,0x50
    01D70 E090      LDI	R25,0
    01D71 1780      CP	R24,R16
    01D72 0791      CPC	R25,R17
    01D73 F008      BCS	0x1D75
(1992) 	{
(1993) 	 goto Start;//在接收数据位时收到了同步位，跳到数据位解码起始位处
    01D74 CF52      RJMP	0x1CC7
(1994) 	}
(1995) 	else 
(1996) 	{
(1997) 	 IntFlag=3;//接收数据位不完整
    01D75 E083      LDI	R24,3
    01D76 9380 02B1 STS	IntFlag,R24
(1998) 	 goto End;//数据位来得太迟，退出
    01D78 C0A4      RJMP	0x1E1D
    01D79 9180 02B2 LDS	R24,Int_count
    01D7B 5081      SUBI	R24,1
    01D7C 9380 02B2 STS	Int_count,R24
    01D7E E080      LDI	R24,0
    01D7F 9020 02B2 LDS	R2,Int_count
    01D81 1582      CP	R24,R2
    01D82 F408      BCC	0x1D84
    01D83 CF70      RJMP	0x1CF4
(1999) 	}
(2000)   }   
(2001) 	
(2002)     R_dat=0;
    01D84 2422      CLR	R2
    01D85 2433      CLR	R3
    01D86 9230 02CE STS	R_dat+1,R3
    01D88 9220 02CD STS	R_dat,R2
(2003)     if(Rx[2])
    01D8A 9020 02D3 LDS	R2,Rx+2
    01D8C 2022      TST	R2
    01D8D F049      BEQ	0x1D97
(2004)           R_dat|=0x01;
    01D8E 9180 02CD LDS	R24,R_dat
    01D90 9190 02CE LDS	R25,R_dat+1
    01D92 6081      ORI	R24,1
    01D93 9390 02CE STS	R_dat+1,R25
    01D95 9380 02CD STS	R_dat,R24
(2005)     if(Rx[3])
    01D97 9020 02D4 LDS	R2,Rx+3
    01D99 2022      TST	R2
    01D9A F049      BEQ	0x1DA4
(2006)           R_dat|=0x02;
    01D9B 9180 02CD LDS	R24,R_dat
    01D9D 9190 02CE LDS	R25,R_dat+1
    01D9F 6082      ORI	R24,2
    01DA0 9390 02CE STS	R_dat+1,R25
    01DA2 9380 02CD STS	R_dat,R24
(2007)     if(Rx[4])
    01DA4 9020 02D5 LDS	R2,Rx+4
    01DA6 2022      TST	R2
    01DA7 F049      BEQ	0x1DB1
(2008)           R_dat|=0x04;
    01DA8 9180 02CD LDS	R24,R_dat
    01DAA 9190 02CE LDS	R25,R_dat+1
    01DAC 6084      ORI	R24,4
    01DAD 9390 02CE STS	R_dat+1,R25
    01DAF 9380 02CD STS	R_dat,R24
(2009)     if(Rx[5])
    01DB1 9020 02D6 LDS	R2,Rx+5
    01DB3 2022      TST	R2
    01DB4 F049      BEQ	0x1DBE
(2010)           R_dat|=0x08;
    01DB5 9180 02CD LDS	R24,R_dat
    01DB7 9190 02CE LDS	R25,R_dat+1
    01DB9 6088      ORI	R24,0x8
    01DBA 9390 02CE STS	R_dat+1,R25
    01DBC 9380 02CD STS	R_dat,R24
(2011)     if(Rx[6])
    01DBE 9020 02D7 LDS	R2,Rx+6
    01DC0 2022      TST	R2
    01DC1 F049      BEQ	0x1DCB
(2012)           R_dat|=0x10;
    01DC2 9180 02CD LDS	R24,R_dat
    01DC4 9190 02CE LDS	R25,R_dat+1
    01DC6 6180      ORI	R24,0x10
    01DC7 9390 02CE STS	R_dat+1,R25
    01DC9 9380 02CD STS	R_dat,R24
(2013)     if(Rx[7])
    01DCB 9020 02D8 LDS	R2,Rx+7
    01DCD 2022      TST	R2
    01DCE F049      BEQ	0x1DD8
(2014)           R_dat|=0x20;
    01DCF 9180 02CD LDS	R24,R_dat
    01DD1 9190 02CE LDS	R25,R_dat+1
    01DD3 6280      ORI	R24,0x20
    01DD4 9390 02CE STS	R_dat+1,R25
    01DD6 9380 02CD STS	R_dat,R24
(2015)     if(Rx[8])
    01DD8 9020 02D9 LDS	R2,Rx+8
    01DDA 2022      TST	R2
    01DDB F049      BEQ	0x1DE5
(2016)           R_dat|=0x40;
    01DDC 9180 02CD LDS	R24,R_dat
    01DDE 9190 02CE LDS	R25,R_dat+1
    01DE0 6480      ORI	R24,0x40
    01DE1 9390 02CE STS	R_dat+1,R25
    01DE3 9380 02CD STS	R_dat,R24
(2017)     if(Rx[9])
    01DE5 9020 02DA LDS	R2,Rx+9
    01DE7 2022      TST	R2
    01DE8 F049      BEQ	0x1DF2
(2018)           R_dat|=0x80;
    01DE9 9180 02CD LDS	R24,R_dat
    01DEB 9190 02CE LDS	R25,R_dat+1
    01DED 6880      ORI	R24,0x80
    01DEE 9390 02CE STS	R_dat+1,R25
    01DF0 9380 02CD STS	R_dat,R24
(2019) 	
(2020) 	Rx[0]=1;  
    01DF2 E081      LDI	R24,1
    01DF3 9380 02D1 STS	Rx,R24
(2021) 	for(Int_count=2;Int_count<10;Int_count++)  
    01DF5 E082      LDI	R24,2
    01DF6 9380 02B2 STS	Int_count,R24
    01DF8 C012      RJMP	0x1E0B
(2022)        Rx[0]^=Rx[Int_count];  
    01DF9 ED81      LDI	R24,0xD1
    01DFA E092      LDI	R25,2
    01DFB 91E0 02B2 LDS	R30,Int_count
    01DFD 27FF      CLR	R31
    01DFE 0FE8      ADD	R30,R24
    01DFF 1FF9      ADC	R31,R25
    01E00 8020      LD	R2,Z
    01E01 9030 02D1 LDS	R3,Rx
    01E03 2432      EOR	R3,R2
    01E04 9230 02D1 STS	Rx,R3
    01E06 9180 02B2 LDS	R24,Int_count
    01E08 5F8F      SUBI	R24,0xFF
    01E09 9380 02B2 STS	Int_count,R24
    01E0B 9180 02B2 LDS	R24,Int_count
    01E0D 308A      CPI	R24,0xA
    01E0E F350      BCS	0x1DF9
(2023) 	   
(2024) 	if(Rx[0]==Rx[1])
    01E0F 9020 02D2 LDS	R2,Rx+1
    01E11 9030 02D1 LDS	R3,Rx
    01E13 1432      CP	R3,R2
    01E14 F421      BNE	0x1E19
(2025) 	 {
(2026) 		 IntFlag=1;//接收帧正常	
    01E15 E081      LDI	R24,1
    01E16 9380 02B1 STS	IntFlag,R24
(2027) 	 }
    01E18 C00F      RJMP	0x1E28
(2028) 	else           
(2029) 	 {
(2030) 		 IntFlag=2;//接收帧校验错
    01E19 E082      LDI	R24,2
    01E1A 9380 02B1 STS	IntFlag,R24
(2031) 	 }
(2032) 	   
(2033)    goto End1;//只要接收到正常的同步头，不管校验位是对是错，都暂时不开放INT0中断
    01E1C C00B      RJMP	0x1E28
(2034)      
(2035) End:
(2036)  EIFR|=0x08;//清INT3中断标志 
    01E1D B788      IN	R24,0x38
    01E1E 6088      ORI	R24,0x8
    01E1F BF88      OUT	0x38,R24
(2037)  EICRA|=0xc0; //INT3上升沿触发 
    01E20 9180 006A LDS	R24,0x6A
    01E22 6C80      ORI	R24,0xC0
    01E23 9380 006A STS	0x6A,R24
(2038)  EIMSK|=0x08;//使能INT3中断 
    01E25 B789      IN	R24,0x39
    01E26 6088      ORI	R24,0x8
    01E27 BF89      OUT	0x39,R24
(2039) End1:
(2040)    TCCR2 = 0x00; //stop
    01E28 2422      CLR	R2
    01E29 BC25      OUT	0x25,R2
(2041)    SREG|=0x80;//总中断使能;  
    01E2A 9478      BSET	7
    01E2B 9029      LD	R2,Y+
    01E2C BE2F      OUT	0x3F,R2
    01E2D 91F9      LD	R31,Y+
    01E2E 91E9      LD	R30,Y+
    01E2F 91A9      LD	R26,Y+
    01E30 9199      LD	R25,Y+
    01E31 9189      LD	R24,Y+
    01E32 9119      LD	R17,Y+
    01E33 9109      LD	R16,Y+
    01E34 9039      LD	R3,Y+
    01E35 9029      LD	R2,Y+
    01E36 9518      RETI
_SendManchester:
  L                    --> R20
    01E37 934A      ST	-Y,R20
(2042) }
(2043) 
(2044) void SendManchester(void) //曼码发送程序,总耗时最大约120+560+8400+720=9800us，最小约120+560+5040+720=6440us
(2045) { //每位80us
(2046)  //同步：1高6低
(2047)  //1:    1高2低
(2048)  //0：   1高4低  
(2049)   unsigned char L;
(2050)   SREG&=0x7f;//关总中断 
    01E38 B78F      IN	R24,0x3F
    01E39 778F      ANDI	R24,0x7F
    01E3A BF8F      OUT	0x3F,R24
(2051)   
(2052)     M1_H //先给总线放电，耗时约120us
    01E3B 9A92      SBI	0x12,2
(2053) 	
(2054)   //模拟同步头数据
(2055) 	//4位命令
(2056) 	T_dat_buf[21]=(T_com&0x08)>>3;
    01E3C 9180 02CC LDS	R24,T_com
    01E3E 7088      ANDI	R24,0x8
    01E3F 9586      LSR	R24
    01E40 9586      LSR	R24
    01E41 9586      LSR	R24
    01E42 9380 02CA STS	T_dat_buf+21,R24
(2057) 	T_dat_buf[20]=(T_com&0x04)>>2;
    01E44 9180 02CC LDS	R24,T_com
    01E46 7084      ANDI	R24,4
    01E47 9586      LSR	R24
    01E48 9586      LSR	R24
    01E49 9380 02C9 STS	T_dat_buf+20,R24
(2058) 	T_dat_buf[19]=(T_com&0x02)>>1;
    01E4B 9180 02CC LDS	R24,T_com
    01E4D 7082      ANDI	R24,2
    01E4E 9586      LSR	R24
    01E4F 9380 02C8 STS	T_dat_buf+19,R24
(2059) 	T_dat_buf[18]=T_com&0x01;
    01E51 9180 02CC LDS	R24,T_com
    01E53 7081      ANDI	R24,1
    01E54 9380 02C7 STS	T_dat_buf+18,R24
(2060) 	//16位数据
(2061) 	T_dat_buf[17]=(T_dat&0x8000)>>15;
    01E56 E02F      LDI	R18,0xF
    01E57 E030      LDI	R19,0
    01E58 9100 02CF LDS	R16,T_dat
    01E5A 9110 02D0 LDS	R17,T_dat+1
    01E5C 7000      ANDI	R16,0
    01E5D 7810      ANDI	R17,0x80
    01E5E 940E 2343 CALL	lsr16
    01E60 9300 02C6 STS	T_dat_buf+17,R16
(2062) 	T_dat_buf[16]=(T_dat&0x4000)>>14;
    01E62 E02E      LDI	R18,0xE
    01E63 E030      LDI	R19,0
    01E64 9100 02CF LDS	R16,T_dat
    01E66 9110 02D0 LDS	R17,T_dat+1
    01E68 7000      ANDI	R16,0
    01E69 7410      ANDI	R17,0x40
    01E6A 940E 22A1 CALL	asr16
    01E6C 9300 02C5 STS	T_dat_buf+16,R16
(2063) 	T_dat_buf[15]=(T_dat&0x2000)>>13;
    01E6E E02D      LDI	R18,0xD
    01E6F E030      LDI	R19,0
    01E70 9100 02CF LDS	R16,T_dat
    01E72 9110 02D0 LDS	R17,T_dat+1
    01E74 7000      ANDI	R16,0
    01E75 7210      ANDI	R17,0x20
    01E76 940E 22A1 CALL	asr16
    01E78 9300 02C4 STS	T_dat_buf+15,R16
(2064) 	T_dat_buf[14]=(T_dat&0x1000)>>12;
    01E7A E02C      LDI	R18,0xC
    01E7B E030      LDI	R19,0
    01E7C 9100 02CF LDS	R16,T_dat
    01E7E 9110 02D0 LDS	R17,T_dat+1
    01E80 7000      ANDI	R16,0
    01E81 7110      ANDI	R17,0x10
    01E82 940E 22A1 CALL	asr16
    01E84 9300 02C3 STS	T_dat_buf+14,R16
(2065) 	T_dat_buf[13]=(T_dat&0x0800)>>11;
    01E86 E02B      LDI	R18,0xB
    01E87 E030      LDI	R19,0
    01E88 9100 02CF LDS	R16,T_dat
    01E8A 9110 02D0 LDS	R17,T_dat+1
    01E8C 7000      ANDI	R16,0
    01E8D 7018      ANDI	R17,0x8
    01E8E 940E 22A1 CALL	asr16
    01E90 9300 02C2 STS	T_dat_buf+13,R16
(2066)     T_dat_buf[12]=(T_dat&0x0400)>>10;
    01E92 E02A      LDI	R18,0xA
    01E93 E030      LDI	R19,0
    01E94 9100 02CF LDS	R16,T_dat
    01E96 9110 02D0 LDS	R17,T_dat+1
    01E98 7000      ANDI	R16,0
    01E99 7014      ANDI	R17,4
    01E9A 940E 22A1 CALL	asr16
    01E9C 9300 02C1 STS	T_dat_buf+12,R16
(2067)     T_dat_buf[11]=(T_dat&0x0200)>>9;
    01E9E E029      LDI	R18,0x9
    01E9F E030      LDI	R19,0
    01EA0 9100 02CF LDS	R16,T_dat
    01EA2 9110 02D0 LDS	R17,T_dat+1
    01EA4 7000      ANDI	R16,0
    01EA5 7012      ANDI	R17,2
    01EA6 940E 22A1 CALL	asr16
    01EA8 9300 02C0 STS	T_dat_buf+11,R16
(2068) 	T_dat_buf[10]=(T_dat&0x0100)>>8;
    01EAA 9180 02CF LDS	R24,T_dat
    01EAC 9190 02D0 LDS	R25,T_dat+1
    01EAE 7080      ANDI	R24,0
    01EAF 7091      ANDI	R25,1
    01EB0 011C      MOVW	R2,R24
    01EB1 2C23      MOV	R2,R3
    01EB2 2433      CLR	R3
    01EB3 FC27      SBRC	R2,7
    01EB4 9430      COM	R3
    01EB5 9220 02BF STS	T_dat_buf+10,R2
(2069) 	T_dat_buf[9]=(T_dat&0x0080)>>7;
    01EB7 E027      LDI	R18,7
    01EB8 E030      LDI	R19,0
    01EB9 9100 02CF LDS	R16,T_dat
    01EBB 9110 02D0 LDS	R17,T_dat+1
    01EBD 7800      ANDI	R16,0x80
    01EBE 7010      ANDI	R17,0
    01EBF 940E 22A1 CALL	asr16
    01EC1 9300 02BE STS	T_dat_buf+9,R16
(2070) 	T_dat_buf[8]=(T_dat&0x0040)>>6;
    01EC3 E026      LDI	R18,6
    01EC4 E030      LDI	R19,0
    01EC5 9100 02CF LDS	R16,T_dat
    01EC7 9110 02D0 LDS	R17,T_dat+1
    01EC9 7400      ANDI	R16,0x40
    01ECA 7010      ANDI	R17,0
    01ECB 940E 22A1 CALL	asr16
    01ECD 9300 02BD STS	T_dat_buf+8,R16
(2071) 	T_dat_buf[7]=(T_dat&0x0020)>>5;
    01ECF E025      LDI	R18,5
    01ED0 E030      LDI	R19,0
    01ED1 9100 02CF LDS	R16,T_dat
    01ED3 9110 02D0 LDS	R17,T_dat+1
    01ED5 7200      ANDI	R16,0x20
    01ED6 7010      ANDI	R17,0
    01ED7 940E 22A1 CALL	asr16
    01ED9 9300 02BC STS	T_dat_buf+7,R16
(2072) 	T_dat_buf[6]=(T_dat&0x0010)>>4;
    01EDB 9180 02CF LDS	R24,T_dat
    01EDD 9190 02D0 LDS	R25,T_dat+1
    01EDF 7180      ANDI	R24,0x10
    01EE0 7090      ANDI	R25,0
    01EE1 011C      MOVW	R2,R24
    01EE2 9435      ASR	R3
    01EE3 9427      ROR	R2
    01EE4 9435      ASR	R3
    01EE5 9427      ROR	R2
    01EE6 9435      ASR	R3
    01EE7 9427      ROR	R2
    01EE8 9435      ASR	R3
    01EE9 9427      ROR	R2
    01EEA 9220 02BB STS	T_dat_buf+6,R2
(2073) 	T_dat_buf[5]=(T_dat&0x0008)>>3;
    01EEC 9180 02CF LDS	R24,T_dat
    01EEE 9190 02D0 LDS	R25,T_dat+1
    01EF0 7088      ANDI	R24,0x8
    01EF1 7090      ANDI	R25,0
    01EF2 011C      MOVW	R2,R24
    01EF3 9435      ASR	R3
    01EF4 9427      ROR	R2
    01EF5 9435      ASR	R3
    01EF6 9427      ROR	R2
    01EF7 9435      ASR	R3
    01EF8 9427      ROR	R2
    01EF9 9220 02BA STS	T_dat_buf+5,R2
(2074) 	T_dat_buf[4]=(T_dat&0x0004)>>2;
    01EFB 9180 02CF LDS	R24,T_dat
    01EFD 9190 02D0 LDS	R25,T_dat+1
    01EFF 7084      ANDI	R24,4
    01F00 7090      ANDI	R25,0
    01F01 011C      MOVW	R2,R24
    01F02 9435      ASR	R3
    01F03 9427      ROR	R2
    01F04 9435      ASR	R3
    01F05 9427      ROR	R2
    01F06 9220 02B9 STS	T_dat_buf+4,R2
(2075) 	T_dat_buf[3]=(T_dat&0x0002)>>1;
    01F08 9180 02CF LDS	R24,T_dat
    01F0A 9190 02D0 LDS	R25,T_dat+1
    01F0C 7082      ANDI	R24,2
    01F0D 7090      ANDI	R25,0
    01F0E 011C      MOVW	R2,R24
    01F0F 9435      ASR	R3
    01F10 9427      ROR	R2
    01F11 9220 02B8 STS	T_dat_buf+3,R2
(2076) 	T_dat_buf[2]=T_dat&0x0001;
    01F13 9180 02CF LDS	R24,T_dat
    01F15 9190 02D0 LDS	R25,T_dat+1
    01F17 7081      ANDI	R24,1
    01F18 7090      ANDI	R25,0
    01F19 9380 02B7 STS	T_dat_buf+2,R24
(2077) 	//计算校验位，奇校验
(2078) 	T_dat_buf[1]=1;
    01F1B E081      LDI	R24,1
    01F1C 9380 02B6 STS	T_dat_buf+1,R24
(2079)   	for(L=2;L<22;L++)
    01F1E E042      LDI	R20,2
    01F1F C00D      RJMP	0x1F2D
(2080) 		{T_dat_buf[1]^=T_dat_buf[L];}
    01F20 EB85      LDI	R24,0xB5
    01F21 E092      LDI	R25,2
    01F22 2FE4      MOV	R30,R20
    01F23 27FF      CLR	R31
    01F24 0FE8      ADD	R30,R24
    01F25 1FF9      ADC	R31,R25
    01F26 8020      LD	R2,Z
    01F27 9030 02B6 LDS	R3,T_dat_buf+1
    01F29 2432      EOR	R3,R2
    01F2A 9230 02B6 STS	T_dat_buf+1,R3
    01F2C 9543      INC	R20
    01F2D 3146      CPI	R20,0x16
    01F2E F388      BCS	0x1F20
(2081)     DELAY80
    01F2F 2422      CLR	R2
    01F30 2433      CLR	R3
    01F31 9230 02B0 STS	Tt+1,R3
    01F33 9220 02AF STS	Tt,R2
    01F35 C009      RJMP	0x1F3F
    01F36 9180 02AF LDS	R24,Tt
    01F38 9190 02B0 LDS	R25,Tt+1
    01F3A 9601      ADIW	R24,1
    01F3B 9390 02B0 STS	Tt+1,R25
    01F3D 9380 02AF STS	Tt,R24
    01F3F 9180 02AF LDS	R24,Tt
    01F41 9190 02B0 LDS	R25,Tt+1
    01F43 3280      CPI	R24,0x20
    01F44 E0E0      LDI	R30,0
    01F45 079E      CPC	R25,R30
    01F46 F378      BCS	0x1F36
(2082)     M1_L
    01F47 B382      IN	R24,0x12
    01F48 7F8B      ANDI	R24,0xFB
    01F49 BB82      OUT	0x12,R24
(2083) 	DELAY40
    01F4A 2422      CLR	R2
    01F4B 2433      CLR	R3
    01F4C 9230 02B0 STS	Tt+1,R3
    01F4E 9220 02AF STS	Tt,R2
    01F50 C009      RJMP	0x1F5A
    01F51 9180 02AF LDS	R24,Tt
    01F53 9190 02B0 LDS	R25,Tt+1
    01F55 9601      ADIW	R24,1
    01F56 9390 02B0 STS	Tt+1,R25
    01F58 9380 02AF STS	Tt,R24
    01F5A 9180 02AF LDS	R24,Tt
    01F5C 9190 02B0 LDS	R25,Tt+1
    01F5E 3180      CPI	R24,0x10
    01F5F E0E0      LDI	R30,0
    01F60 079E      CPC	R25,R30
    01F61 F378      BCS	0x1F51
(2084)    
(2085)    
(2086) 	//同步头,560us
(2087) 	//充电开始，高80us	 
(2088) 	M2_H 	
    01F62 9A91      SBI	0x12,1
(2089) 	DELAY80
    01F63 2422      CLR	R2
    01F64 2433      CLR	R3
    01F65 9230 02B0 STS	Tt+1,R3
    01F67 9220 02AF STS	Tt,R2
    01F69 C009      RJMP	0x1F73
    01F6A 9180 02AF LDS	R24,Tt
    01F6C 9190 02B0 LDS	R25,Tt+1
    01F6E 9601      ADIW	R24,1
    01F6F 9390 02B0 STS	Tt+1,R25
    01F71 9380 02AF STS	Tt,R24
    01F73 9180 02AF LDS	R24,Tt
    01F75 9190 02B0 LDS	R25,Tt+1
    01F77 3280      CPI	R24,0x20
    01F78 E0E0      LDI	R30,0
    01F79 079E      CPC	R25,R30
    01F7A F378      BCS	0x1F6A
(2090) 	M2_L   //充电结束	
    01F7B B382      IN	R24,0x12
    01F7C 7F8D      ANDI	R24,0xFD
    01F7D BB82      OUT	0x12,R24
(2091) 	//放电开始，低80*6=480us
(2092) 	DELAY40
    01F7E 2422      CLR	R2
    01F7F 2433      CLR	R3
    01F80 9230 02B0 STS	Tt+1,R3
    01F82 9220 02AF STS	Tt,R2
    01F84 C009      RJMP	0x1F8E
    01F85 9180 02AF LDS	R24,Tt
    01F87 9190 02B0 LDS	R25,Tt+1
    01F89 9601      ADIW	R24,1
    01F8A 9390 02B0 STS	Tt+1,R25
    01F8C 9380 02AF STS	Tt,R24
    01F8E 9180 02AF LDS	R24,Tt
    01F90 9190 02B0 LDS	R25,Tt+1
    01F92 3180      CPI	R24,0x10
    01F93 E0E0      LDI	R30,0
    01F94 079E      CPC	R25,R30
    01F95 F378      BCS	0x1F85
(2093) 	M1_H    
    01F96 9A92      SBI	0x12,2
(2094)     DELAY80
    01F97 2422      CLR	R2
    01F98 2433      CLR	R3
    01F99 9230 02B0 STS	Tt+1,R3
    01F9B 9220 02AF STS	Tt,R2
    01F9D C009      RJMP	0x1FA7
    01F9E 9180 02AF LDS	R24,Tt
    01FA0 9190 02B0 LDS	R25,Tt+1
    01FA2 9601      ADIW	R24,1
    01FA3 9390 02B0 STS	Tt+1,R25
    01FA5 9380 02AF STS	Tt,R24
    01FA7 9180 02AF LDS	R24,Tt
    01FA9 9190 02B0 LDS	R25,Tt+1
    01FAB 3280      CPI	R24,0x20
    01FAC E0E0      LDI	R30,0
    01FAD 079E      CPC	R25,R30
    01FAE F378      BCS	0x1F9E
(2095) 	DELAY80
    01FAF 2422      CLR	R2
    01FB0 2433      CLR	R3
    01FB1 9230 02B0 STS	Tt+1,R3
    01FB3 9220 02AF STS	Tt,R2
    01FB5 C009      RJMP	0x1FBF
    01FB6 9180 02AF LDS	R24,Tt
    01FB8 9190 02B0 LDS	R25,Tt+1
    01FBA 9601      ADIW	R24,1
    01FBB 9390 02B0 STS	Tt+1,R25
    01FBD 9380 02AF STS	Tt,R24
    01FBF 9180 02AF LDS	R24,Tt
    01FC1 9190 02B0 LDS	R25,Tt+1
    01FC3 3280      CPI	R24,0x20
    01FC4 E0E0      LDI	R30,0
    01FC5 079E      CPC	R25,R30
    01FC6 F378      BCS	0x1FB6
(2096) 	DELAY80
    01FC7 2422      CLR	R2
    01FC8 2433      CLR	R3
    01FC9 9230 02B0 STS	Tt+1,R3
    01FCB 9220 02AF STS	Tt,R2
    01FCD C009      RJMP	0x1FD7
    01FCE 9180 02AF LDS	R24,Tt
    01FD0 9190 02B0 LDS	R25,Tt+1
    01FD2 9601      ADIW	R24,1
    01FD3 9390 02B0 STS	Tt+1,R25
    01FD5 9380 02AF STS	Tt,R24
    01FD7 9180 02AF LDS	R24,Tt
    01FD9 9190 02B0 LDS	R25,Tt+1
    01FDB 3280      CPI	R24,0x20
    01FDC E0E0      LDI	R30,0
    01FDD 079E      CPC	R25,R30
    01FDE F378      BCS	0x1FCE
(2097) 	DELAY80
    01FDF 2422      CLR	R2
    01FE0 2433      CLR	R3
    01FE1 9230 02B0 STS	Tt+1,R3
    01FE3 9220 02AF STS	Tt,R2
    01FE5 C009      RJMP	0x1FEF
    01FE6 9180 02AF LDS	R24,Tt
    01FE8 9190 02B0 LDS	R25,Tt+1
    01FEA 9601      ADIW	R24,1
    01FEB 9390 02B0 STS	Tt+1,R25
    01FED 9380 02AF STS	Tt,R24
    01FEF 9180 02AF LDS	R24,Tt
    01FF1 9190 02B0 LDS	R25,Tt+1
    01FF3 3280      CPI	R24,0x20
    01FF4 E0E0      LDI	R30,0
    01FF5 079E      CPC	R25,R30
    01FF6 F378      BCS	0x1FE6
(2098) 	DELAY80
    01FF7 2422      CLR	R2
    01FF8 2433      CLR	R3
    01FF9 9230 02B0 STS	Tt+1,R3
    01FFB 9220 02AF STS	Tt,R2
    01FFD C009      RJMP	0x2007
    01FFE 9180 02AF LDS	R24,Tt
    02000 9190 02B0 LDS	R25,Tt+1
    02002 9601      ADIW	R24,1
    02003 9390 02B0 STS	Tt+1,R25
    02005 9380 02AF STS	Tt,R24
    02007 9180 02AF LDS	R24,Tt
    02009 9190 02B0 LDS	R25,Tt+1
    0200B 3280      CPI	R24,0x20
    0200C E0E0      LDI	R30,0
    0200D 079E      CPC	R25,R30
    0200E F378      BCS	0x1FFE
(2099) 	M1_L    
    0200F B382      IN	R24,0x12
    02010 7F8B      ANDI	R24,0xFB
    02011 BB82      OUT	0x12,R24
(2100) 	DELAY40  //放电结束
    02012 2422      CLR	R2
    02013 2433      CLR	R3
    02014 9230 02B0 STS	Tt+1,R3
    02016 9220 02AF STS	Tt,R2
    02018 C009      RJMP	0x2022
    02019 9180 02AF LDS	R24,Tt
    0201B 9190 02B0 LDS	R25,Tt+1
    0201D 9601      ADIW	R24,1
    0201E 9390 02B0 STS	Tt+1,R25
    02020 9380 02AF STS	Tt,R24
    02022 9180 02AF LDS	R24,Tt
    02024 9190 02B0 LDS	R25,Tt+1
    02026 3180      CPI	R24,0x10
    02027 E0E0      LDI	R30,0
    02028 079E      CPC	R25,R30
    02029 F378      BCS	0x2019
(2101) 	
(2102)      //连续发送 ,全0时每位400us，共8400us，全1时每位240us，共5040us
(2103)  	for(L=21;L>0;L--)
    0202A E145      LDI	R20,0x15
    0202B C10C      RJMP	0x2138
(2104) 	{   
(2105) 	  if(T_dat_buf[L])//1，一高二低
    0202C EB85      LDI	R24,0xB5
    0202D E092      LDI	R25,2
    0202E 2FE4      MOV	R30,R20
    0202F 27FF      CLR	R31
    02030 0FE8      ADD	R30,R24
    02031 1FF9      ADC	R31,R25
    02032 8020      LD	R2,Z
    02033 2022      TST	R2
    02034 F409      BNE	0x2036
    02035 C069      RJMP	0x209F
(2106)         {         	 		
(2107) 	        M2_H 
    02036 9A91      SBI	0x12,1
(2108) 	        DELAY80
    02037 2422      CLR	R2
    02038 2433      CLR	R3
    02039 9230 02B0 STS	Tt+1,R3
    0203B 9220 02AF STS	Tt,R2
    0203D C009      RJMP	0x2047
    0203E 9180 02AF LDS	R24,Tt
    02040 9190 02B0 LDS	R25,Tt+1
    02042 9601      ADIW	R24,1
    02043 9390 02B0 STS	Tt+1,R25
    02045 9380 02AF STS	Tt,R24
    02047 9180 02AF LDS	R24,Tt
    02049 9190 02B0 LDS	R25,Tt+1
    0204B 3280      CPI	R24,0x20
    0204C E0E0      LDI	R30,0
    0204D 079E      CPC	R25,R30
    0204E F378      BCS	0x203E
(2109) 	        M2_L
    0204F B382      IN	R24,0x12
    02050 7F8D      ANDI	R24,0xFD
    02051 BB82      OUT	0x12,R24
(2110) 			DELAY40
    02052 2422      CLR	R2
    02053 2433      CLR	R3
    02054 9230 02B0 STS	Tt+1,R3
    02056 9220 02AF STS	Tt,R2
    02058 C009      RJMP	0x2062
    02059 9180 02AF LDS	R24,Tt
    0205B 9190 02B0 LDS	R25,Tt+1
    0205D 9601      ADIW	R24,1
    0205E 9390 02B0 STS	Tt+1,R25
    02060 9380 02AF STS	Tt,R24
    02062 9180 02AF LDS	R24,Tt
    02064 9190 02B0 LDS	R25,Tt+1
    02066 3180      CPI	R24,0x10
    02067 E0E0      LDI	R30,0
    02068 079E      CPC	R25,R30
    02069 F378      BCS	0x2059
(2111) 	        M1_H       
    0206A 9A92      SBI	0x12,2
(2112)          	DELAY80
    0206B 2422      CLR	R2
    0206C 2433      CLR	R3
    0206D 9230 02B0 STS	Tt+1,R3
    0206F 9220 02AF STS	Tt,R2
    02071 C009      RJMP	0x207B
    02072 9180 02AF LDS	R24,Tt
    02074 9190 02B0 LDS	R25,Tt+1
    02076 9601      ADIW	R24,1
    02077 9390 02B0 STS	Tt+1,R25
    02079 9380 02AF STS	Tt,R24
    0207B 9180 02AF LDS	R24,Tt
    0207D 9190 02B0 LDS	R25,Tt+1
    0207F 3280      CPI	R24,0x20
    02080 E0E0      LDI	R30,0
    02081 079E      CPC	R25,R30
    02082 F378      BCS	0x2072
(2113) 			M1_L
    02083 B382      IN	R24,0x12
    02084 7F8B      ANDI	R24,0xFB
    02085 BB82      OUT	0x12,R24
(2114) 			DELAY40
    02086 2422      CLR	R2
    02087 2433      CLR	R3
    02088 9230 02B0 STS	Tt+1,R3
    0208A 9220 02AF STS	Tt,R2
    0208C C009      RJMP	0x2096
    0208D 9180 02AF LDS	R24,Tt
    0208F 9190 02B0 LDS	R25,Tt+1
    02091 9601      ADIW	R24,1
    02092 9390 02B0 STS	Tt+1,R25
    02094 9380 02AF STS	Tt,R24
    02096 9180 02AF LDS	R24,Tt
    02098 9190 02B0 LDS	R25,Tt+1
    0209A 3180      CPI	R24,0x10
    0209B E0E0      LDI	R30,0
    0209C 079E      CPC	R25,R30
    0209D F378      BCS	0x208D
(2115) 		} 
    0209E C098      RJMP	0x2137
(2116)        else 		//0，一高四低 				                
(2117)         {
(2118) 		 	M2_H 
    0209F 9A91      SBI	0x12,1
(2119) 	        DELAY80
    020A0 2422      CLR	R2
    020A1 2433      CLR	R3
    020A2 9230 02B0 STS	Tt+1,R3
    020A4 9220 02AF STS	Tt,R2
    020A6 C009      RJMP	0x20B0
    020A7 9180 02AF LDS	R24,Tt
    020A9 9190 02B0 LDS	R25,Tt+1
    020AB 9601      ADIW	R24,1
    020AC 9390 02B0 STS	Tt+1,R25
    020AE 9380 02AF STS	Tt,R24
    020B0 9180 02AF LDS	R24,Tt
    020B2 9190 02B0 LDS	R25,Tt+1
    020B4 3280      CPI	R24,0x20
    020B5 E0E0      LDI	R30,0
    020B6 079E      CPC	R25,R30
    020B7 F378      BCS	0x20A7
(2120) 	        M2_L
    020B8 B382      IN	R24,0x12
    020B9 7F8D      ANDI	R24,0xFD
    020BA BB82      OUT	0x12,R24
(2121) 			DELAY40
    020BB 2422      CLR	R2
    020BC 2433      CLR	R3
    020BD 9230 02B0 STS	Tt+1,R3
    020BF 9220 02AF STS	Tt,R2
    020C1 C009      RJMP	0x20CB
    020C2 9180 02AF LDS	R24,Tt
    020C4 9190 02B0 LDS	R25,Tt+1
    020C6 9601      ADIW	R24,1
    020C7 9390 02B0 STS	Tt+1,R25
    020C9 9380 02AF STS	Tt,R24
    020CB 9180 02AF LDS	R24,Tt
    020CD 9190 02B0 LDS	R25,Tt+1
    020CF 3180      CPI	R24,0x10
    020D0 E0E0      LDI	R30,0
    020D1 079E      CPC	R25,R30
    020D2 F378      BCS	0x20C2
(2122) 	        M1_H       
    020D3 9A92      SBI	0x12,2
(2123)          	DELAY80
    020D4 2422      CLR	R2
    020D5 2433      CLR	R3
    020D6 9230 02B0 STS	Tt+1,R3
    020D8 9220 02AF STS	Tt,R2
    020DA C009      RJMP	0x20E4
    020DB 9180 02AF LDS	R24,Tt
    020DD 9190 02B0 LDS	R25,Tt+1
    020DF 9601      ADIW	R24,1
    020E0 9390 02B0 STS	Tt+1,R25
    020E2 9380 02AF STS	Tt,R24
    020E4 9180 02AF LDS	R24,Tt
    020E6 9190 02B0 LDS	R25,Tt+1
    020E8 3280      CPI	R24,0x20
    020E9 E0E0      LDI	R30,0
    020EA 079E      CPC	R25,R30
    020EB F378      BCS	0x20DB
(2124) 			DELAY80
    020EC 2422      CLR	R2
    020ED 2433      CLR	R3
    020EE 9230 02B0 STS	Tt+1,R3
    020F0 9220 02AF STS	Tt,R2
    020F2 C009      RJMP	0x20FC
    020F3 9180 02AF LDS	R24,Tt
    020F5 9190 02B0 LDS	R25,Tt+1
    020F7 9601      ADIW	R24,1
    020F8 9390 02B0 STS	Tt+1,R25
    020FA 9380 02AF STS	Tt,R24
    020FC 9180 02AF LDS	R24,Tt
    020FE 9190 02B0 LDS	R25,Tt+1
    02100 3280      CPI	R24,0x20
    02101 E0E0      LDI	R30,0
    02102 079E      CPC	R25,R30
    02103 F378      BCS	0x20F3
(2125) 			DELAY80
    02104 2422      CLR	R2
    02105 2433      CLR	R3
    02106 9230 02B0 STS	Tt+1,R3
    02108 9220 02AF STS	Tt,R2
    0210A C009      RJMP	0x2114
    0210B 9180 02AF LDS	R24,Tt
    0210D 9190 02B0 LDS	R25,Tt+1
    0210F 9601      ADIW	R24,1
    02110 9390 02B0 STS	Tt+1,R25
    02112 9380 02AF STS	Tt,R24
    02114 9180 02AF LDS	R24,Tt
    02116 9190 02B0 LDS	R25,Tt+1
    02118 3280      CPI	R24,0x20
    02119 E0E0      LDI	R30,0
    0211A 079E      CPC	R25,R30
    0211B F378      BCS	0x210B
(2126) 			M1_L
    0211C B382      IN	R24,0x12
    0211D 7F8B      ANDI	R24,0xFB
    0211E BB82      OUT	0x12,R24
(2127) 			DELAY40
    0211F 2422      CLR	R2
    02120 2433      CLR	R3
    02121 9230 02B0 STS	Tt+1,R3
    02123 9220 02AF STS	Tt,R2
    02125 C009      RJMP	0x212F
    02126 9180 02AF LDS	R24,Tt
    02128 9190 02B0 LDS	R25,Tt+1
    0212A 9601      ADIW	R24,1
    0212B 9390 02B0 STS	Tt+1,R25
    0212D 9380 02AF STS	Tt,R24
    0212F 9180 02AF LDS	R24,Tt
    02131 9190 02B0 LDS	R25,Tt+1
    02133 3180      CPI	R24,0x10
    02134 E0E0      LDI	R30,0
    02135 079E      CPC	R25,R30
    02136 F378      BCS	0x2126
    02137 954A      DEC	R20
    02138 E080      LDI	R24,0
    02139 1784      CP	R24,R20
    0213A F408      BCC	0x213C
    0213B CEF0      RJMP	0x202C
(2128) 		}
(2129)     }	       	   
(2130) 		   //结束位，一高八低，720us
(2131)  	 	    M2_H 
    0213C 9A91      SBI	0x12,1
(2132) 		    DELAY80
    0213D 2422      CLR	R2
    0213E 2433      CLR	R3
    0213F 9230 02B0 STS	Tt+1,R3
    02141 9220 02AF STS	Tt,R2
    02143 C009      RJMP	0x214D
    02144 9180 02AF LDS	R24,Tt
    02146 9190 02B0 LDS	R25,Tt+1
    02148 9601      ADIW	R24,1
    02149 9390 02B0 STS	Tt+1,R25
    0214B 9380 02AF STS	Tt,R24
    0214D 9180 02AF LDS	R24,Tt
    0214F 9190 02B0 LDS	R25,Tt+1
    02151 3280      CPI	R24,0x20
    02152 E0E0      LDI	R30,0
    02153 079E      CPC	R25,R30
    02154 F378      BCS	0x2144
(2133) 	        M2_L
    02155 B382      IN	R24,0x12
    02156 7F8D      ANDI	R24,0xFD
    02157 BB82      OUT	0x12,R24
(2134) 			DELAY40
    02158 2422      CLR	R2
    02159 2433      CLR	R3
    0215A 9230 02B0 STS	Tt+1,R3
    0215C 9220 02AF STS	Tt,R2
    0215E C009      RJMP	0x2168
    0215F 9180 02AF LDS	R24,Tt
    02161 9190 02B0 LDS	R25,Tt+1
    02163 9601      ADIW	R24,1
    02164 9390 02B0 STS	Tt+1,R25
    02166 9380 02AF STS	Tt,R24
    02168 9180 02AF LDS	R24,Tt
    0216A 9190 02B0 LDS	R25,Tt+1
    0216C 3180      CPI	R24,0x10
    0216D E0E0      LDI	R30,0
    0216E 079E      CPC	R25,R30
    0216F F378      BCS	0x215F
(2135) 	        M1_H       
    02170 9A92      SBI	0x12,2
(2136)          	DELAY80
    02171 2422      CLR	R2
    02172 2433      CLR	R3
    02173 9230 02B0 STS	Tt+1,R3
    02175 9220 02AF STS	Tt,R2
    02177 C009      RJMP	0x2181
    02178 9180 02AF LDS	R24,Tt
    0217A 9190 02B0 LDS	R25,Tt+1
    0217C 9601      ADIW	R24,1
    0217D 9390 02B0 STS	Tt+1,R25
    0217F 9380 02AF STS	Tt,R24
    02181 9180 02AF LDS	R24,Tt
    02183 9190 02B0 LDS	R25,Tt+1
    02185 3280      CPI	R24,0x20
    02186 E0E0      LDI	R30,0
    02187 079E      CPC	R25,R30
    02188 F378      BCS	0x2178
(2137) 			DELAY80
    02189 2422      CLR	R2
    0218A 2433      CLR	R3
    0218B 9230 02B0 STS	Tt+1,R3
    0218D 9220 02AF STS	Tt,R2
    0218F C009      RJMP	0x2199
    02190 9180 02AF LDS	R24,Tt
    02192 9190 02B0 LDS	R25,Tt+1
    02194 9601      ADIW	R24,1
    02195 9390 02B0 STS	Tt+1,R25
    02197 9380 02AF STS	Tt,R24
    02199 9180 02AF LDS	R24,Tt
    0219B 9190 02B0 LDS	R25,Tt+1
    0219D 3280      CPI	R24,0x20
    0219E E0E0      LDI	R30,0
    0219F 079E      CPC	R25,R30
    021A0 F378      BCS	0x2190
(2138) 			DELAY80
    021A1 2422      CLR	R2
    021A2 2433      CLR	R3
    021A3 9230 02B0 STS	Tt+1,R3
    021A5 9220 02AF STS	Tt,R2
    021A7 C009      RJMP	0x21B1
    021A8 9180 02AF LDS	R24,Tt
    021AA 9190 02B0 LDS	R25,Tt+1
    021AC 9601      ADIW	R24,1
    021AD 9390 02B0 STS	Tt+1,R25
    021AF 9380 02AF STS	Tt,R24
    021B1 9180 02AF LDS	R24,Tt
    021B3 9190 02B0 LDS	R25,Tt+1
    021B5 3280      CPI	R24,0x20
    021B6 E0E0      LDI	R30,0
    021B7 079E      CPC	R25,R30
    021B8 F378      BCS	0x21A8
(2139) 			DELAY80
    021B9 2422      CLR	R2
    021BA 2433      CLR	R3
    021BB 9230 02B0 STS	Tt+1,R3
    021BD 9220 02AF STS	Tt,R2
    021BF C009      RJMP	0x21C9
    021C0 9180 02AF LDS	R24,Tt
    021C2 9190 02B0 LDS	R25,Tt+1
    021C4 9601      ADIW	R24,1
    021C5 9390 02B0 STS	Tt+1,R25
    021C7 9380 02AF STS	Tt,R24
    021C9 9180 02AF LDS	R24,Tt
    021CB 9190 02B0 LDS	R25,Tt+1
    021CD 3280      CPI	R24,0x20
    021CE E0E0      LDI	R30,0
    021CF 079E      CPC	R25,R30
    021D0 F378      BCS	0x21C0
(2140) 			DELAY80
    021D1 2422      CLR	R2
    021D2 2433      CLR	R3
    021D3 9230 02B0 STS	Tt+1,R3
    021D5 9220 02AF STS	Tt,R2
    021D7 C009      RJMP	0x21E1
    021D8 9180 02AF LDS	R24,Tt
    021DA 9190 02B0 LDS	R25,Tt+1
    021DC 9601      ADIW	R24,1
    021DD 9390 02B0 STS	Tt+1,R25
    021DF 9380 02AF STS	Tt,R24
    021E1 9180 02AF LDS	R24,Tt
    021E3 9190 02B0 LDS	R25,Tt+1
    021E5 3280      CPI	R24,0x20
    021E6 E0E0      LDI	R30,0
    021E7 079E      CPC	R25,R30
    021E8 F378      BCS	0x21D8
(2141) 			DELAY80
    021E9 2422      CLR	R2
    021EA 2433      CLR	R3
    021EB 9230 02B0 STS	Tt+1,R3
    021ED 9220 02AF STS	Tt,R2
    021EF C009      RJMP	0x21F9
    021F0 9180 02AF LDS	R24,Tt
    021F2 9190 02B0 LDS	R25,Tt+1
    021F4 9601      ADIW	R24,1
    021F5 9390 02B0 STS	Tt+1,R25
    021F7 9380 02AF STS	Tt,R24
    021F9 9180 02AF LDS	R24,Tt
    021FB 9190 02B0 LDS	R25,Tt+1
    021FD 3280      CPI	R24,0x20
    021FE E0E0      LDI	R30,0
    021FF 079E      CPC	R25,R30
    02200 F378      BCS	0x21F0
(2142) 			DELAY80
    02201 2422      CLR	R2
    02202 2433      CLR	R3
    02203 9230 02B0 STS	Tt+1,R3
    02205 9220 02AF STS	Tt,R2
    02207 C009      RJMP	0x2211
    02208 9180 02AF LDS	R24,Tt
    0220A 9190 02B0 LDS	R25,Tt+1
    0220C 9601      ADIW	R24,1
    0220D 9390 02B0 STS	Tt+1,R25
    0220F 9380 02AF STS	Tt,R24
    02211 9180 02AF LDS	R24,Tt
    02213 9190 02B0 LDS	R25,Tt+1
    02215 3280      CPI	R24,0x20
    02216 E0E0      LDI	R30,0
    02217 079E      CPC	R25,R30
    02218 F378      BCS	0x2208
(2143) 			M1_L
    02219 B382      IN	R24,0x12
    0221A 7F8B      ANDI	R24,0xFB
    0221B BB82      OUT	0x12,R24
(2144) 			DELAY40
    0221C 2422      CLR	R2
    0221D 2433      CLR	R3
    0221E 9230 02B0 STS	Tt+1,R3
    02220 9220 02AF STS	Tt,R2
    02222 C009      RJMP	0x222C
    02223 9180 02AF LDS	R24,Tt
    02225 9190 02B0 LDS	R25,Tt+1
    02227 9601      ADIW	R24,1
    02228 9390 02B0 STS	Tt+1,R25
    0222A 9380 02AF STS	Tt,R24
    0222C 9180 02AF LDS	R24,Tt
    0222E 9190 02B0 LDS	R25,Tt+1
    02230 3180      CPI	R24,0x10
    02231 E0E0      LDI	R30,0
    02232 079E      CPC	R25,R30
    02233 F378      BCS	0x2223
(2145) 	
(2146)  	EIFR|=0x08;//清INT3中断标志 
    02234 B788      IN	R24,0x38
    02235 6088      ORI	R24,0x8
    02236 BF88      OUT	0x38,R24
(2147)  	SREG|=0x80; //开总中断
    02237 9478      BSET	7
    02238 9149      LD	R20,Y+
    02239 9508      RET
(2148) }
(2149) 
(2150) 
(2151) 
(2152) void EEPROM_write(unsigned int Address,unsigned char Data)  	//内部EEPROM写
(2153) {//时钟频率为1MHz，典型的EEPROM字节写耗时约8.5ms
(2154)     while(EECR&0x02);                   // 等待上一次写操作结束
_EEPROM_write:
  Data                 --> R18
  Address              --> R16
    0223A 99E1      SBIC	0x1C,1
    0223B CFFE      RJMP	_EEPROM_write
(2155)     EEAR=Address;
    0223C BB1F      OUT	0x1F,R17
    0223D BB0E      OUT	0x1E,R16
(2156)     EEDR=Data;                        	// 设置地址和数据寄存器
    0223E BB2D      OUT	0x1D,R18
(2157)     EECR|=0x04;                         //置位EEMWE
    0223F 9AE2      SBI	0x1C,2
(2158)     EECR|=0x02;                         //置位EEWE 以启动写操作
    02240 9AE1      SBI	0x1C,1
    02241 9508      RET
(2159) }
(2160) 
(2161) unsigned char EEPROM_read(unsigned int Address)  				//内部EEPROM读
(2162) {
(2163)     while(EECR&0x02);      				//等待上一次操作结束
_EEPROM_read:
  Address              --> R16
    02242 99E1      SBIC	0x1C,1
    02243 CFFE      RJMP	_EEPROM_read
(2164)     EEAR = Address;                     //设置地址寄存器						
    02244 BB1F      OUT	0x1F,R17
    02245 BB0E      OUT	0x1E,R16
(2165) 	EECR|=0x01;             			//设置EERE 以启动读操作
    02246 9AE0      SBI	0x1C,0
(2166)     return EEDR;                   		//自数据寄存器返回数据
    02247 B30D      IN	R16,0x1D
    02248 9508      RET
_crc16:
  ii                   --> R20
  ch                   --> R10
  cl                   --> R22
  savelo               --> R14
  savehi               --> Y,+0
  flag                 --> R12
  length               --> R18
  r_data               --> Y,+11
    02249 940E 229C CALL	push_arg4
    0224B 940E 2311 CALL	push_xgsetF0FC
    0224D 9721      SBIW	R28,1
(2167) }    
(2168) 
(2169) void crc16(unsigned char r_data[],unsigned int length)
(2170) {
(2171)         unsigned char cl,ch;
(2172)         unsigned char savehi,savelo;
(2173)         int ii,flag;
(2174)         crc16hi=0xFF;
    0224E EF8F      LDI	R24,0xFF
    0224F 9380 0113 STS	crc16hi,R24
(2175)         crc16lo=0xFF;
    02251 9380 0112 STS	crc16lo,R24
(2176)         cl=0x1;
    02253 E061      LDI	R22,1
(2177)         ch=0xA0;
    02254 EA80      LDI	R24,0xA0
    02255 2EA8      MOV	R10,R24
(2178)         for (ii=0;ii<length-2;ii++)
    02256 2744      CLR	R20
    02257 2755      CLR	R21
    02258 C038      RJMP	0x2291
(2179)         {
(2180)             crc16lo=(crc16lo ^ r_data[ii]);
    02259 01FA      MOVW	R30,R20
    0225A 840B      LDD	R0,Y+11
    0225B 841C      LDD	R1,Y+12
    0225C 0DE0      ADD	R30,R0
    0225D 1DF1      ADC	R31,R1
    0225E 8020      LD	R2,Z
    0225F 9030 0112 LDS	R3,crc16lo
    02261 2432      EOR	R3,R2
    02262 9230 0112 STS	crc16lo,R3
(2181)                 for (flag=0;flag<8;flag++)
    02264 24CC      CLR	R12
    02265 24DD      CLR	R13
(2182)                 {
(2183)                        savehi=crc16hi;
    02266 9020 0113 LDS	R2,crc16hi
    02268 8228      ST	Y,R2
(2184)                         savelo=crc16lo;
    02269 90E0 0112 LDS	R14,crc16lo
(2185)                        crc16hi=(crc16hi>>1);
    0226B 9426      LSR	R2
    0226C 9220 0113 STS	crc16hi,R2
(2186)                        crc16lo=(crc16lo>>1);
    0226E 2C2E      MOV	R2,R14
    0226F 9426      LSR	R2
    02270 9220 0112 STS	crc16lo,R2
(2187)                         if ((savehi & 0x01)==0x01)
    02272 8188      LD	R24,Y
    02273 7081      ANDI	R24,1
    02274 3081      CPI	R24,1
    02275 F421      BNE	0x227A
(2188)                                 crc16lo=(crc16lo | 0x80);
    02276 2D82      MOV	R24,R2
    02277 6880      ORI	R24,0x80
    02278 9380 0112 STS	crc16lo,R24
(2189)                         if        ((savelo & 0x01)==0x01)
    0227A 2D8E      MOV	R24,R14
    0227B 7081      ANDI	R24,1
    0227C 3081      CPI	R24,1
    0227D F451      BNE	0x2288
(2190)                         {
(2191)                                 crc16hi = (crc16hi ^ ch);
    0227E 9020 0113 LDS	R2,crc16hi
    02280 242A      EOR	R2,R10
    02281 9220 0113 STS	crc16hi,R2
(2192) 								crc16lo = (crc16lo ^ cl);
FILE: <library>
    02283 9020 0112 LDS	R2,crc16lo
    02285 2626      EOR	R2,R22
    02286 9220 0112 STS	crc16lo,R2
    02288 01C6      MOVW	R24,R12
    02289 9601      ADIW	R24,1
    0228A 016C      MOVW	R12,R24
    0228B 3088      CPI	R24,0x8
    0228C E0E0      LDI	R30,0
    0228D 079E      CPC	R25,R30
    0228E F2BC      BLT	0x2266
    0228F 5F4F      SUBI	R20,0xFF
    02290 4F5F      SBCI	R21,0xFF
    02291 01C9      MOVW	R24,R18
    02292 9702      SBIW	R24,2
    02293 1748      CP	R20,R24
    02294 0759      CPC	R21,R25
    02295 F408      BCC	0x2297
    02296 CFC2      RJMP	0x2259
    02297 9621      ADIW	R28,1
    02298 940E 2306 CALL	pop_xgsetF0FC
    0229A 9624      ADIW	R28,4
    0229B 9508      RET
push_arg4:
    0229C 933A      ST	-Y,R19
    0229D 932A      ST	-Y,R18
push_arg2:
    0229E 931A      ST	-Y,R17
    0229F 930A      ST	-Y,R16
    022A0 9508      RET
asr16:
    022A1 2322      TST	R18
    022A2 F021      BEQ	0x22A7
    022A3 9515      ASR	R17
    022A4 9507      ROR	R16
    022A5 952A      DEC	R18
    022A6 CFFA      RJMP	asr16
    022A7 9508      RET
mod16s:
    022A8 9468      BSET	6
    022A9 92DA      ST	-Y,R13
    022AA 2ED1      MOV	R13,R17
    022AB C004      RJMP	0x22B0
div16s:
    022AC 94E8      BCLR	6
    022AD 92DA      ST	-Y,R13
    022AE 2ED1      MOV	R13,R17
    022AF 26D3      EOR	R13,R19
    022B0 FF17      SBRS	R17,7
    022B1 C004      RJMP	0x22B6
    022B2 9510      COM	R17
    022B3 9500      COM	R16
    022B4 5F0F      SUBI	R16,0xFF
    022B5 4F1F      SBCI	R17,0xFF
    022B6 FF37      SBRS	R19,7
    022B7 C004      RJMP	0x22BC
    022B8 9530      COM	R19
    022B9 9520      COM	R18
    022BA 5F2F      SUBI	R18,0xFF
    022BB 4F3F      SBCI	R19,0xFF
    022BC 940E 22C9 CALL	xdiv16u
    022BE FED7      SBRS	R13,7
    022BF C004      RJMP	0x22C4
    022C0 9510      COM	R17
    022C1 9500      COM	R16
    022C2 5F0F      SUBI	R16,0xFF
    022C3 4F1F      SBCI	R17,0xFF
    022C4 90D9      LD	R13,Y+
    022C5 9508      RET
mod16u:
    022C6 9468      BSET	6
    022C7 C001      RJMP	xdiv16u
div16u:
    022C8 94E8      BCLR	6
xdiv16u:
    022C9 92EA      ST	-Y,R14
    022CA 92FA      ST	-Y,R15
    022CB 938A      ST	-Y,R24
    022CC 24EE      CLR	R14
    022CD 24FF      CLR	R15
    022CE E180      LDI	R24,0x10
    022CF 0F00      LSL	R16
    022D0 1F11      ROL	R17
    022D1 1CEE      ROL	R14
    022D2 1CFF      ROL	R15
    022D3 16E2      CP	R14,R18
    022D4 06F3      CPC	R15,R19
    022D5 F018      BCS	0x22D9
    022D6 1AE2      SUB	R14,R18
    022D7 0AF3      SBC	R15,R19
    022D8 9503      INC	R16
    022D9 958A      DEC	R24
    022DA F7A1      BNE	0x22CF
    022DB F416      BRTC	0x22DE
    022DC 2D0E      MOV	R16,R14
    022DD 2D1F      MOV	R17,R15
    022DE 9189      LD	R24,Y+
    022DF 90F9      LD	R15,Y+
    022E0 90E9      LD	R14,Y+
    022E1 9508      RET
elpm32:
    022E2 93EA      ST	-Y,R30
    022E3 93FA      ST	-Y,R31
    022E4 920A      ST	-Y,R0
    022E5 2FE0      MOV	R30,R16
    022E6 2FF1      MOV	R31,R17
    022E7 95D8      ELPM
    022E8 2D00      MOV	R16,R0
    022E9 9631      ADIW	R30,1
    022EA 95D8      ELPM
    022EB 2D10      MOV	R17,R0
    022EC 9631      ADIW	R30,1
    022ED 95D8      ELPM
    022EE 2D20      MOV	R18,R0
    022EF 9631      ADIW	R30,1
    022F0 95D8      ELPM
    022F1 2D30      MOV	R19,R0
    022F2 9009      LD	R0,Y+
    022F3 91F9      LD	R31,Y+
    022F4 91E9      LD	R30,Y+
    022F5 9508      RET
empy16s:
    022F6 920A      ST	-Y,R0
    022F7 921A      ST	-Y,R1
    022F8 938A      ST	-Y,R24
    022F9 939A      ST	-Y,R25
    022FA 9F02      MUL	R16,R18
    022FB 01C0      MOVW	R24,R0
    022FC 9F12      MUL	R17,R18
    022FD 0D90      ADD	R25,R0
    022FE 9F03      MUL	R16,R19
    022FF 0D90      ADD	R25,R0
    02300 018C      MOVW	R16,R24
    02301 9199      LD	R25,Y+
    02302 9189      LD	R24,Y+
    02303 9019      LD	R1,Y+
    02304 9009      LD	R0,Y+
    02305 9508      RET
pop_xgsetF0FC:
    02306 90A9      LD	R10,Y+
    02307 90B9      LD	R11,Y+
    02308 90C9      LD	R12,Y+
    02309 90D9      LD	R13,Y+
    0230A 90E9      LD	R14,Y+
    0230B 90F9      LD	R15,Y+
    0230C 9149      LD	R20,Y+
    0230D 9159      LD	R21,Y+
    0230E 9169      LD	R22,Y+
    0230F 9179      LD	R23,Y+
    02310 9508      RET
push_xgsetF0FC:
    02311 937A      ST	-Y,R23
    02312 936A      ST	-Y,R22
push_xgset30FC:
    02313 935A      ST	-Y,R21
    02314 934A      ST	-Y,R20
push_xgset00FC:
    02315 92FA      ST	-Y,R15
    02316 92EA      ST	-Y,R14
push_xgset003C:
    02317 92DA      ST	-Y,R13
    02318 92CA      ST	-Y,R12
    02319 92BA      ST	-Y,R11
    0231A 92AA      ST	-Y,R10
    0231B 9508      RET
push_xgsetF03C:
    0231C 937A      ST	-Y,R23
    0231D 936A      ST	-Y,R22
    0231E 935A      ST	-Y,R21
    0231F 934A      ST	-Y,R20
    02320 92DA      ST	-Y,R13
    02321 92CA      ST	-Y,R12
    02322 92BA      ST	-Y,R11
    02323 92AA      ST	-Y,R10
    02324 9508      RET
pop_xgsetF03C:
    02325 90A9      LD	R10,Y+
    02326 90B9      LD	R11,Y+
    02327 90C9      LD	R12,Y+
    02328 90D9      LD	R13,Y+
    02329 9149      LD	R20,Y+
    0232A 9159      LD	R21,Y+
    0232B 9169      LD	R22,Y+
    0232C 9179      LD	R23,Y+
    0232D 9508      RET
neg32:
    0232E 9500      COM	R16
    0232F 9510      COM	R17
    02330 9520      COM	R18
    02331 9530      COM	R19
    02332 5F0F      SUBI	R16,0xFF
    02333 4F1F      SBCI	R17,0xFF
    02334 4F2F      SBCI	R18,0xFF
    02335 4F3F      SBCI	R19,0xFF
    02336 9508      RET
lsl32:
    02337 920F      PUSH	R0
    02338 9009      LD	R0,Y+
    02339 2000      TST	R0
    0233A F031      BEQ	0x2341
    0233B 0F00      LSL	R16
    0233C 1F11      ROL	R17
    0233D 1F22      ROL	R18
    0233E 1F33      ROL	R19
    0233F 940A      DEC	R0
    02340 CFF8      RJMP	0x2339
    02341 900F      POP	R0
    02342 9508      RET
lsr16:
    02343 2322      TST	R18
    02344 F021      BEQ	0x2349
    02345 9516      LSR	R17
    02346 9507      ROR	R16
    02347 952A      DEC	R18
    02348 CFFA      RJMP	lsr16
    02349 9508      RET
lsr32:
    0234A 920F      PUSH	R0
    0234B 9009      LD	R0,Y+
    0234C 2000      TST	R0
    0234D F031      BEQ	0x2354
    0234E 9536      LSR	R19
    0234F 9527      ROR	R18
    02350 9517      ROR	R17
    02351 9507      ROR	R16
    02352 940A      DEC	R0
    02353 CFF8      RJMP	0x234C
    02354 900F      POP	R0
    02355 9508      RET
fpsub:
    02356 9468      BSET	6
    02357 C001      RJMP	fpadd_alt
fpadd:
    02358 94E8      BCLR	6
fpadd_alt:
    02359 940E 2529 CALL	saveFPRegs
    0235B 940E 24BB CALL	unpacks
    0235D F409      BNE	0x235F
    0235E C048      RJMP	0x23A7
    0235F 2CE6      MOV	R14,R6
    02360 2CD5      MOV	R13,R5
    02361 2CC4      MOV	R12,R4
    02362 2EB3      MOV	R11,R19
    02363 2EA2      MOV	R10,R18
    02364 2E91      MOV	R9,R17
    02365 2E80      MOV	R8,R16
    02366 8100      LD	R16,Z
    02367 8111      LDD	R17,Z+1
    02368 8122      LDD	R18,Z+2
    02369 8133      LDD	R19,Z+3
    0236A 940E 24BB CALL	unpacks
    0236C F409      BNE	0x236E
    0236D C044      RJMP	0x23B2
    0236E 2D84      MOV	R24,R4
    0236F 2D95      MOV	R25,R5
    02370 198C      SUB	R24,R12
    02371 099D      SBC	R25,R13
    02372 F0B9      BEQ	0x238A
    02373 F472      BPL	0x2382
    02374 9590      COM	R25
    02375 9580      COM	R24
    02376 9601      ADIW	R24,1
    02377 2C4C      MOV	R4,R12
    02378 2C5D      MOV	R5,R13
    02379 3188      CPI	R24,0x18
    0237A F5B8      BCC	0x23B2
    0237B 9535      ASR	R19
    0237C 9527      ROR	R18
    0237D 9517      ROR	R17
    0237E 9507      ROR	R16
    0237F 9701      SBIW	R24,1
    02380 F7D1      BNE	0x237B
    02381 C008      RJMP	0x238A
    02382 3188      CPI	R24,0x18
    02383 F518      BCC	0x23A7
    02384 94B5      ASR	R11
    02385 94A7      ROR	R10
    02386 9497      ROR	R9
    02387 9487      ROR	R8
    02388 9701      SBIW	R24,1
    02389 F7D1      BNE	0x2384
    0238A 2466      CLR	R6
    0238B F02E      BRTS	0x2391
    0238C 0D08      ADD	R16,R8
    0238D 1D19      ADC	R17,R9
    0238E 1D2A      ADC	R18,R10
    0238F 1D3B      ADC	R19,R11
    02390 C009      RJMP	0x239A
    02391 1A80      SUB	R8,R16
    02392 0A91      SBC	R9,R17
    02393 0AA2      SBC	R10,R18
    02394 0AB3      SBC	R11,R19
    02395 2D08      MOV	R16,R8
    02396 2D19      MOV	R17,R9
    02397 2D2A      MOV	R18,R10
    02398 2D3B      MOV	R19,R11
    02399 2333      TST	R19
    0239A F422      BPL	0x239F
    0239B 940E 232E CALL	neg32
    0239D E880      LDI	R24,0x80
    0239E 2E68      MOV	R6,R24
    0239F 940E 24E4 CALL	normalize_and_pack
    023A1 C002      RJMP	0x23A4
    023A2 940E 2519 CALL	pack
    023A4 940E 2538 CALL	restoreFPRegs
    023A6 9508      RET
    023A7 8100      LD	R16,Z
    023A8 8111      LDD	R17,Z+1
    023A9 8122      LDD	R18,Z+2
    023AA 8133      LDD	R19,Z+3
    023AB F7C6      BRTC	0x23A4
    023AC 940E 24C3 CALL	tstR16_R19
    023AE F3A9      BEQ	0x23A4
    023AF E880      LDI	R24,0x80
    023B0 2738      EOR	R19,R24
    023B1 CFF2      RJMP	0x23A4
    023B2 2D08      MOV	R16,R8
    023B3 2D19      MOV	R17,R9
    023B4 2D2A      MOV	R18,R10
    023B5 2D3B      MOV	R19,R11
    023B6 2C4C      MOV	R4,R12
    023B7 2C5D      MOV	R5,R13
    023B8 2C6E      MOV	R6,R14
    023B9 2333      TST	R19
    023BA F73A      BPL	0x23A2
    023BB 940E 232E CALL	neg32
    023BD E880      LDI	R24,0x80
    023BE 2E68      MOV	R6,R24
    023BF CFE2      RJMP	0x23A2
fpadd2:
    023C0 93FA      ST	-Y,R31
    023C1 93EA      ST	-Y,R30
    023C2 2FEC      MOV	R30,R28
    023C3 2FFD      MOV	R31,R29
    023C4 9632      ADIW	R30,2
    023C5 940E 2358 CALL	fpadd
    023C7 91E9      LD	R30,Y+
    023C8 91F9      LD	R31,Y+
    023C9 9624      ADIW	R28,4
    023CA 9508      RET
fpint:
    023CB 924A      ST	-Y,R4
    023CC 925A      ST	-Y,R5
    023CD 926A      ST	-Y,R6
    023CE 938A      ST	-Y,R24
    023CF 940E 24CB CALL	unpacku
    023D1 F111      BEQ	0x23F4
    023D2 2055      TST	R5
    023D3 F0E2      BMI	0x23F0
    023D4 E18F      LDI	R24,0x1F
    023D5 1648      CP	R4,R24
    023D6 F4C0      BCC	0x23EF
    023D7 E187      LDI	R24,0x17
    023D8 1648      CP	R4,R24
    023D9 F0D1      BEQ	0x23F4
    023DA F458      BCC	0x23E6
    023DB 9441      NEG	R4
    023DC EE89      LDI	R24,0xE9
    023DD 1A48      SUB	R4,R24
    023DE C005      RJMP	0x23E4
    023DF 9535      ASR	R19
    023E0 9527      ROR	R18
    023E1 9517      ROR	R17
    023E2 9507      ROR	R16
    023E3 944A      DEC	R4
    023E4 F7D1      BNE	0x23DF
    023E5 C00E      RJMP	0x23F4
    023E6 E187      LDI	R24,0x17
    023E7 1A48      SUB	R4,R24
    023E8 0F00      LSL	R16
    023E9 1F11      ROL	R17
    023EA 1F22      ROL	R18
    023EB 1F33      ROL	R19
    023EC 944A      DEC	R4
    023ED F7D1      BNE	0x23E8
    023EE C005      RJMP	0x23F4
    023EF E73F      LDI	R19,0x7F
    023F0 2F23      MOV	R18,R19
    023F1 2F13      MOV	R17,R19
    023F2 2F03      MOV	R16,R19
    023F3 C004      RJMP	0x23F8
    023F4 2066      TST	R6
    023F5 F011      BEQ	0x23F8
    023F6 940E 232E CALL	neg32
    023F8 9189      LD	R24,Y+
    023F9 9069      LD	R6,Y+
    023FA 9059      LD	R5,Y+
    023FB 9049      LD	R4,Y+
    023FC 9508      RET
uint2fp:
    023FD 9468      BSET	6
    023FE C001      RJMP	0x2400
int2fp:
    023FF 94E8      BCLR	6
    02400 2722      CLR	R18
    02401 2733      CLR	R19
    02402 F046      BRTS	0x240B
    02403 FD17      SBRC	R17,7
    02404 9520      COM	R18
    02405 FD17      SBRC	R17,7
    02406 9530      COM	R19
    02407 C003      RJMP	0x240B
ulong2fp:
    02408 9468      BSET	6
    02409 C001      RJMP	0x240B
long2fp:
    0240A 94E8      BCLR	6
    0240B 924A      ST	-Y,R4
    0240C 925A      ST	-Y,R5
    0240D 926A      ST	-Y,R6
    0240E 938A      ST	-Y,R24
    0240F E187      LDI	R24,0x17
    02410 2E48      MOV	R4,R24
    02411 2455      CLR	R5
    02412 2466      CLR	R6
    02413 F036      BRTS	0x241A
    02414 2333      TST	R19
    02415 F422      BPL	0x241A
    02416 940E 232E CALL	neg32
    02418 E880      LDI	R24,0x80
    02419 2E68      MOV	R6,R24
    0241A 940E 24E4 CALL	normalize_and_pack
    0241C 9189      LD	R24,Y+
    0241D 9069      LD	R6,Y+
    0241E 9059      LD	R5,Y+
    0241F 9049      LD	R4,Y+
    02420 9508      RET
fpdiv1:
    02421 93FA      ST	-Y,R31
    02422 93EA      ST	-Y,R30
    02423 81EA      LDD	R30,Y+2
    02424 81FB      LDD	R31,Y+3
    02425 D027      RCALL	0x244D
    02426 91E9      LD	R30,Y+
    02427 91F9      LD	R31,Y+
    02428 9622      ADIW	R28,2
    02429 9508      RET
fpdiv2:
    0242A 93FA      ST	-Y,R31
    0242B 93EA      ST	-Y,R30
    0242C 2FEC      MOV	R30,R28
    0242D 2FFD      MOV	R31,R29
    0242E 9632      ADIW	R30,2
    0242F D01D      RCALL	0x244D
    02430 91E9      LD	R30,Y+
    02431 91F9      LD	R31,Y+
    02432 9624      ADIW	R28,4
    02433 9508      RET
fpdiv1x:
    02434 93FA      ST	-Y,R31
    02435 93EA      ST	-Y,R30
    02436 81EA      LDD	R30,Y+2
    02437 81FB      LDD	R31,Y+3
    02438 D014      RCALL	0x244D
    02439 91E9      LD	R30,Y+
    0243A 91F9      LD	R31,Y+
    0243B 8339      STD	Y+1,R19
    0243C 8328      ST	Y,R18
    0243D 931A      ST	-Y,R17
    0243E 930A      ST	-Y,R16
    0243F 9508      RET
fpdiv2x:
    02440 93FA      ST	-Y,R31
    02441 93EA      ST	-Y,R30
    02442 2FEC      MOV	R30,R28
    02443 2FFD      MOV	R31,R29
    02444 9632      ADIW	R30,2
    02445 D007      RCALL	0x244D
    02446 91E9      LD	R30,Y+
    02447 91F9      LD	R31,Y+
    02448 833B      STD	Y+3,R19
    02449 832A      STD	Y+2,R18
    0244A 8319      STD	Y+1,R17
    0244B 8308      ST	Y,R16
    0244C 9508      RET
    0244D 920A      ST	-Y,R0
    0244E 921A      ST	-Y,R1
    0244F 922A      ST	-Y,R2
    02450 923A      ST	-Y,R3
    02451 940E 2529 CALL	saveFPRegs
    02453 933A      ST	-Y,R19
    02454 932A      ST	-Y,R18
    02455 931A      ST	-Y,R17
    02456 930A      ST	-Y,R16
    02457 8100      LD	R16,Z
    02458 8111      LDD	R17,Z+1
    02459 8122      LDD	R18,Z+2
    0245A 8133      LDD	R19,Z+3
    0245B 940E 24CB CALL	unpacku
    0245D F409      BNE	0x245F
    0245E C057      RJMP	0x24B6
    0245F 2CE6      MOV	R14,R6
    02460 2CD5      MOV	R13,R5
    02461 2CC4      MOV	R12,R4
    02462 2EB3      MOV	R11,R19
    02463 2EA2      MOV	R10,R18
    02464 2E91      MOV	R9,R17
    02465 2E80      MOV	R8,R16
    02466 9109      LD	R16,Y+
    02467 9119      LD	R17,Y+
    02468 9129      LD	R18,Y+
    02469 9139      LD	R19,Y+
    0246A 940E 24CB CALL	unpacku
    0246C F1A1      BEQ	0x24A1
    0246D 246E      EOR	R6,R14
    0246E 184C      SUB	R4,R12
    0246F 085D      SBC	R5,R13
    02470 E880      LDI	R24,0x80
    02471 1648      CP	R4,R24
    02472 0653      CPC	R5,R19
    02473 F00C      BLT	0x2475
    02474 C033      RJMP	0x24A8
    02475 E881      LDI	R24,0x81
    02476 1648      CP	R4,R24
    02477 EF8F      LDI	R24,0xFF
    02478 0658      CPC	R5,R24
    02479 F40C      BGE	0x247B
    0247A C036      RJMP	0x24B1
    0247B E280      LDI	R24,0x20
    0247C 2433      CLR	R3
    0247D 2E23      MOV	R2,R19
    0247E 2E12      MOV	R1,R18
    0247F 2E01      MOV	R0,R17
    02480 2F30      MOV	R19,R16
    02481 2722      CLR	R18
    02482 2711      CLR	R17
    02483 2700      CLR	R16
    02484 9426      LSR	R2
    02485 9417      ROR	R1
    02486 9407      ROR	R0
    02487 9537      ROR	R19
    02488 9527      ROR	R18
    02489 0F00      LSL	R16
    0248A 1F11      ROL	R17
    0248B 1F22      ROL	R18
    0248C 1F33      ROL	R19
    0248D 1C00      ROL	R0
    0248E 1C11      ROL	R1
    0248F 1C22      ROL	R2
    02490 1C33      ROL	R3
    02491 F028      BCS	0x2497
    02492 1808      SUB	R0,R8
    02493 0819      SBC	R1,R9
    02494 082A      SBC	R2,R10
    02495 083B      SBC	R3,R11
    02496 C004      RJMP	0x249B
    02497 0C08      ADD	R0,R8
    02498 1C19      ADC	R1,R9
    02499 1C2A      ADC	R2,R10
    0249A 1C3B      ADC	R3,R11
    0249B F00A      BMI	0x249D
    0249C 6001      ORI	R16,1
    0249D 958A      DEC	R24
    0249E F751      BNE	0x2489
    0249F 940E 24E4 CALL	normalize_and_pack
    024A1 940E 2538 CALL	restoreFPRegs
    024A3 9039      LD	R3,Y+
    024A4 9029      LD	R2,Y+
    024A5 9019      LD	R1,Y+
    024A6 9009      LD	R0,Y+
    024A7 9508      RET
    024A8 EF0F      LDI	R16,0xFF
    024A9 2F10      MOV	R17,R16
    024AA E72F      LDI	R18,0x7F
    024AB E73F      LDI	R19,0x7F
    024AC 2066      TST	R6
    024AD F399      BEQ	0x24A1
    024AE 940E 232E CALL	neg32
    024B0 CFF0      RJMP	0x24A1
    024B1 2700      CLR	R16
    024B2 2F10      MOV	R17,R16
    024B3 2F20      MOV	R18,R16
    024B4 2F30      MOV	R19,R16
    024B5 CFEB      RJMP	0x24A1
    024B6 9109      LD	R16,Y+
    024B7 9119      LD	R17,Y+
    024B8 9129      LD	R18,Y+
    024B9 9139      LD	R19,Y+
    024BA CFED      RJMP	0x24A8
unpacks:
    024BB D00F      RCALL	unpacku
    024BC F029      BEQ	0x24C2
    024BD 2066      TST	R6
    024BE F011      BEQ	0x24C1
    024BF 940E 232E CALL	neg32
    024C1 9498      BCLR	1
    024C2 9508      RET
tstR16_R19:
    024C3 2300      TST	R16
    024C4 F429      BNE	0x24CA
    024C5 2311      TST	R17
    024C6 F419      BNE	0x24CA
    024C7 2322      TST	R18
    024C8 F409      BNE	0x24CA
    024C9 2333      TST	R19
    024CA 9508      RET
unpacku:
    024CB DFF7      RCALL	tstR16_R19
    024CC F099      BEQ	0x24E0
    024CD 938A      ST	-Y,R24
    024CE 2E63      MOV	R6,R19
    024CF E880      LDI	R24,0x80
    024D0 2268      AND	R6,R24
    024D1 0F22      LSL	R18
    024D2 1F33      ROL	R19
    024D3 2E43      MOV	R4,R19
    024D4 E78F      LDI	R24,0x7F
    024D5 1A48      SUB	R4,R24
    024D6 2455      CLR	R5
    024D7 2788      CLR	R24
    024D8 0A58      SBC	R5,R24
    024D9 9526      LSR	R18
    024DA E830      LDI	R19,0x80
    024DB 2B23      OR	R18,R19
    024DC 2733      CLR	R19
    024DD 9189      LD	R24,Y+
    024DE 9498      BCLR	1
    024DF 9508      RET
    024E0 2444      CLR	R4
    024E1 2455      CLR	R5
    024E2 2466      CLR	R6
    024E3 9508      RET
normalize_and_pack:
    024E4 DFDE      RCALL	tstR16_R19
    024E5 F409      BNE	0x24E7
    024E6 9508      RET
    024E7 93AA      ST	-Y,R26
    024E8 93BA      ST	-Y,R27
    024E9 01D2      MOVW	R26,R4
    024EA 939A      ST	-Y,R25
    024EB 938A      ST	-Y,R24
    024EC E78E      LDI	R24,0x7E
    024ED E090      LDI	R25,0
    024EE 2333      TST	R19
    024EF F049      BEQ	0x24F9
    024F0 9536      LSR	R19
    024F1 9527      ROR	R18
    024F2 9517      ROR	R17
    024F3 9507      ROR	R16
    024F4 17A8      CP	R26,R24
    024F5 07B9      CPC	R27,R25
    024F6 F4CC      BGE	0x2510
    024F7 9611      ADIW	R26,1
    024F8 CFF5      RJMP	0x24EE
    024F9 9580      COM	R24
    024FA 9590      COM	R25
    024FB 9601      ADIW	R24,1
    024FC 2322      TST	R18
    024FD F0BA      BMI	0x2515
    024FE 0F00      LSL	R16
    024FF 1F11      ROL	R17
    02500 1F22      ROL	R18
    02501 17A8      CP	R26,R24
    02502 07B9      CPC	R27,R25
    02503 F014      BLT	0x2506
    02504 9711      SBIW	R26,1
    02505 CFF6      RJMP	0x24FC
    02506 2700      CLR	R16
    02507 2711      CLR	R17
    02508 2722      CLR	R18
    02509 2733      CLR	R19
    0250A 9189      LD	R24,Y+
    0250B 9199      LD	R25,Y+
    0250C 012D      MOVW	R4,R26
    0250D 91B9      LD	R27,Y+
    0250E 91A9      LD	R26,Y+
    0250F 9508      RET
    02510 2733      CLR	R19
    02511 EF0F      LDI	R16,0xFF
    02512 2F10      MOV	R17,R16
    02513 E72F      LDI	R18,0x7F
    02514 2F32      MOV	R19,R18
    02515 9189      LD	R24,Y+
    02516 9199      LD	R25,Y+
    02517 012D      MOVW	R4,R26
    02518 C002      RJMP	0x251B
pack:
    02519 93AA      ST	-Y,R26
    0251A 93BA      ST	-Y,R27
    0251B DFA7      RCALL	tstR16_R19
    0251C F049      BEQ	0x2526
    0251D 01D2      MOVW	R26,R4
    0251E 58A1      SUBI	R26,0x81
    0251F 4FBF      SBCI	R27,0xFF
    02520 012D      MOVW	R4,R26
    02521 2D34      MOV	R19,R4
    02522 0F22      LSL	R18
    02523 9536      LSR	R19
    02524 9527      ROR	R18
    02525 2936      OR	R19,R6
    02526 91B9      LD	R27,Y+
    02527 91A9      LD	R26,Y+
    02528 9508      RET
saveFPRegs:
    02529 924A      ST	-Y,R4
    0252A 925A      ST	-Y,R5
    0252B 926A      ST	-Y,R6
    0252C 927A      ST	-Y,R7
    0252D 928A      ST	-Y,R8
    0252E 929A      ST	-Y,R9
    0252F 92AA      ST	-Y,R10
    02530 92BA      ST	-Y,R11
    02531 92CA      ST	-Y,R12
    02532 92DA      ST	-Y,R13
    02533 92EA      ST	-Y,R14
    02534 92FA      ST	-Y,R15
    02535 938A      ST	-Y,R24
    02536 939A      ST	-Y,R25
    02537 9508      RET
restoreFPRegs:
    02538 9199      LD	R25,Y+
    02539 9189      LD	R24,Y+
    0253A 90F9      LD	R15,Y+
    0253B 90E9      LD	R14,Y+
    0253C 90D9      LD	R13,Y+
    0253D 90C9      LD	R12,Y+
    0253E 90B9      LD	R11,Y+
    0253F 90A9      LD	R10,Y+
    02540 9099      LD	R9,Y+
    02541 9089      LD	R8,Y+
    02542 9079      LD	R7,Y+
    02543 9069      LD	R6,Y+
    02544 9059      LD	R5,Y+
    02545 9049      LD	R4,Y+
    02546 9508      RET
fpmule:
    02547 940E 2529 CALL	saveFPRegs
    02549 93AA      ST	-Y,R26
    0254A 93BA      ST	-Y,R27
    0254B 940E 24CB CALL	unpacku
    0254D F1E1      BEQ	0x258A
    0254E 2CE6      MOV	R14,R6
    0254F 2CD5      MOV	R13,R5
    02550 2CC4      MOV	R12,R4
    02551 2EB3      MOV	R11,R19
    02552 2EA2      MOV	R10,R18
    02553 2E91      MOV	R9,R17
    02554 2E80      MOV	R8,R16
    02555 8100      LD	R16,Z
    02556 8111      LDD	R17,Z+1
    02557 8122      LDD	R18,Z+2
    02558 8133      LDD	R19,Z+3
    02559 940E 24CB CALL	unpacku
    0255B F171      BEQ	0x258A
    0255C 246E      EOR	R6,R14
    0255D 0C4C      ADD	R4,R12
    0255E 1C5D      ADC	R5,R13
    0255F E880      LDI	R24,0x80
    02560 1648      CP	R4,R24
    02561 0653      CPC	R5,R19
    02562 F564      BGE	0x258F
    02563 E881      LDI	R24,0x81
    02564 1648      CP	R4,R24
    02565 EF8F      LDI	R24,0xFF
    02566 0658      CPC	R5,R24
    02567 F16C      BLT	0x2595
    02568 9EA2      MUL	R10,R18
    02569 2DB1      MOV	R27,R1
    0256A 2DA0      MOV	R26,R0
    0256B 9E91      MUL	R9,R17
    0256C 2D91      MOV	R25,R1
    0256D 2D80      MOV	R24,R0
    0256E 9EA0      MUL	R10,R16
    0256F 0D80      ADD	R24,R0
    02570 1D91      ADC	R25,R1
    02571 1FA3      ADC	R26,R19
    02572 1FB3      ADC	R27,R19
    02573 9E82      MUL	R8,R18
    02574 0D80      ADD	R24,R0
    02575 1D91      ADC	R25,R1
    02576 1FA3      ADC	R26,R19
    02577 1FB3      ADC	R27,R19
    02578 9E92      MUL	R9,R18
    02579 0D90      ADD	R25,R0
    0257A 1DA1      ADC	R26,R1
    0257B 1FB3      ADC	R27,R19
    0257C 9EA1      MUL	R10,R17
    0257D 0D90      ADD	R25,R0
    0257E 1DA1      ADC	R26,R1
    0257F 1FB3      ADC	R27,R19
    02580 2F2B      MOV	R18,R27
    02581 2F1A      MOV	R17,R26
    02582 2F09      MOV	R16,R25
    02583 0F88      LSL	R24
    02584 1F00      ROL	R16
    02585 1F11      ROL	R17
    02586 1F22      ROL	R18
    02587 1F33      ROL	R19
    02588 940E 24E4 CALL	normalize_and_pack
    0258A 91B9      LD	R27,Y+
    0258B 91A9      LD	R26,Y+
    0258C 940E 2538 CALL	restoreFPRegs
    0258E 9508      RET
    0258F EF0F      LDI	R16,0xFF
    02590 2F10      MOV	R17,R16
    02591 E72F      LDI	R18,0x7F
    02592 E78F      LDI	R24,0x7F
    02593 2E48      MOV	R4,R24
    02594 CFF5      RJMP	0x258A
    02595 2700      CLR	R16
    02596 2F10      MOV	R17,R16
    02597 2F20      MOV	R18,R16
    02598 2F30      MOV	R19,R16
    02599 CFF0      RJMP	0x258A
fpmule1:
    0259A 93FA      ST	-Y,R31
    0259B 93EA      ST	-Y,R30
    0259C 81EA      LDD	R30,Y+2
    0259D 81FB      LDD	R31,Y+3
    0259E 940E 2547 CALL	fpmule
    025A0 91E9      LD	R30,Y+
    025A1 91F9      LD	R31,Y+
    025A2 9622      ADIW	R28,2
    025A3 9508      RET

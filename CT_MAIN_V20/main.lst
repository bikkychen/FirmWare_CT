Interrupt Vectors
    00000 940C 0050 JMP	__start|__text_start
    00002 940C 0073 JMP	_int0_isr
    00020 940C 0341 JMP	_timer0_ovf_isr
    00024 940C 0320 JMP	_uart0_rx_isr
    0002E 940C 20CA JMP	_E_comp
    0003A 940C 0366 JMP	_timer3_ovf_isr
    0003C 940C 029C JMP	_uart1_rx_isr

Program Code (text area)
__start|__text_start:
    00050 EFCF      LDI	R28,0xFF
    00051 E1D0      LDI	R29,0x10
    00052 BFCD      OUT	0x3D,R28
    00053 BFDE      OUT	0x3E,R29
    00054 50C0      SUBI	R28,0
    00055 40D1      SBCI	R29,1
    00056 EA0A      LDI	R16,0xAA
    00057 8308      ST	Y,R16
    00058 2400      CLR	R0
    00059 E0E0      LDI	R30,0
    0005A E0F1      LDI	R31,1
    0005B E013      LDI	R17,3
    0005C 34E4      CPI	R30,0x44
    0005D 07F1      CPC	R31,R17
    0005E F011      BEQ	0x0061
    0005F 9201      ST	Z+,R0
    00060 CFFB      RJMP	0x005C
    00061 8300      ST	Z,R16
    00062 EAE0      LDI	R30,0xA0
    00063 E0F0      LDI	R31,0
    00064 E0A0      LDI	R26,0
    00065 E0B1      LDI	R27,1
    00066 E010      LDI	R17,0
    00067 E000      LDI	R16,0
    00068 BF0B      OUT	0x3B,R16
    00069 3AE0      CPI	R30,0xA0
    0006A 07F1      CPC	R31,R17
    0006B F021      BEQ	0x0070
    0006C 95C8      LPM
    0006D 9631      ADIW	R30,1
    0006E 920D      ST	X+,R0
    0006F CFF9      RJMP	0x0069
    00070 940E 0B0C CALL	_main
_exit:
    00072 CFFF      RJMP	_exit
_int0_isr:
    00073 922A      ST	-Y,R2
    00074 923A      ST	-Y,R3
    00075 938A      ST	-Y,R24
    00076 939A      ST	-Y,R25
    00077 93AA      ST	-Y,R26
    00078 93EA      ST	-Y,R30
    00079 93FA      ST	-Y,R31
    0007A B62F      IN	R2,0x3F
    0007B 922A      ST	-Y,R2
FILE: D:\chen\Core\FirmWare_CT\CT_MAIN_new\main.c
(0001)  /**************************************************
(0002) CTZK
(0003) //20161110 增加了全部采样的CRC16校验
(0004) //20161113 改进了流量数据中时间和相位由无符号短整型转为浮点数时的转换方法，以防上位机软件出现相位超大值
(0005) //20161224 将电机断流判断值由26mA改为13mA，因为目前调节电机工作时空载电流值仅为23~28mA，升级版本为V4.0
(0006) //20161229 修改收张电机的本电机同向和反向判断，修改调节电机的电机方向控制（与原来相反）
(0007) //20170308 流量采样增加校验帧，升级版本为V4.2
(0008) //20170607 电机断路电流由原来的13mA改为26mA 升级版本为V4.3
(0009) //20170608 改动电机过流档位并把最大档位提升到250mA，升级版本为V4.4
(0010) //20170609 加入调节电机微调功能，升级版本为V4.5
(0011) //20170613 增加电机断路电流上位机可设定(共6档)，增加调节电机微调时间由电机命令中自带参数，改上传电流由数字量为工程量（单位mA），堵转电流上传改为档位，版本升为V4.6
(0012) //20170614 上传的电缆电压也改为工程量，全部采样增加电缆电压
(0013) //20170622  为适应新高压电机驱动的电路板而改进一些功能，版本回退到V1.0
(0014) **************************************************/
(0015) #include <iom128v.h>								   	
(0016) #include <macros.h>
(0017) #include <stdio.h>
(0018) 
(0019)  
(0020) #define Debug 1
(0021) #define  BB     0x10        //固件版本号
(0022) 
(0023) 
(0024) #define M1_L    PORTD&=0xef;
(0025) #define M1_H    PORTD|=0x10;
(0026) #define M2_L    PORTD&=0xdf;
(0027) #define M2_H    PORTD|=0x20;
(0028) 
(0029)  
(0030) //收放电机管脚定义和控制项
(0031) #define DIR1_PIN    ((PINA&0x04)>>2)
(0032) #define PWM1_PIN    ((PINA&0x02)>>1)
(0033) #define BREAKE1_PIN (PINA&0x01)
(0034) 
(0035) #define DIR1_H      {DDRA|=0x04;PORTA|=0x04;}
(0036) #define PWM1_H      {DDRA|=0x02;PORTA|=0x02;}
(0037) #define BREAKE1_H   {DDRA|=0x01;PORTA|=0x01;}
(0038) 
(0039) #define DIR1_L      {DDRA|=0x04;PORTA&=0xfb;}
(0040) #define PWM1_L      {DDRA|=0x02;PORTA&=0xFD;}
(0041) #define BREAKE1_L   {DDRA|=0x01;PORTA&=0xFE;}
(0042) 
(0043) //调节电机管脚定义和控制项
(0044) #define PWM2_PIN    ((PINF&0x04)>>2)
(0045) #define BREAKE2_PIN ((PINF&0x02)>>1)
(0046) #define DIR2_PIN    (PINF&0x01)
(0047) 
(0048) #define PWM2_H      {DDRF|=0x04;PORTF|=0x04;}
(0049) #define BREAKE2_H   {DDRF|=0x02;PORTF|=0x02;}
(0050) #define DIR2_H      {DDRF|=0x01;PORTF|=0x01;}
(0051) 
(0052) #define PWM2_L      {DDRF|=0x04;PORTF&=0xfb;}
(0053) #define BREAKE2_L   {DDRF|=0x02;PORTF&=0xFD;}
(0054) #define DIR2_L      {DDRF|=0x01;PORTF&=0xFE;}
(0055) 
(0056) //收放电机正在正转
(0057) #define Motor1Run_P ((PWM1_PIN==0) && (DIR1_PIN==1))
(0058) //收放电机正在反转
(0059) #define Motor1Run_N ((PWM1_PIN==1) && (DIR1_PIN==0))  
(0060) //调节电机正在正转 
(0061) #define Motor2Run_P ((PWM2_PIN==0) && (DIR2_PIN==1))
(0062) //调节电机正在反转
(0063) #define Motor2Run_N ((PWM2_PIN==1) && (DIR2_PIN==0)) 
(0064) 
(0065) #define PIN_MANINT    (PIND & 0x01)
(0066) 
(0067) #define MANINT_CLR	{ EIFR|=0x01; }
(0068) #define MANINT_EN		{ EIMSK |= 0x01; }
(0069) #define MANINT_DIS	{ EIMSK &= 0xFE; }
(0070) 
(0071) #define INT_EN			{ SEI(); }
(0072) #define INT_DIS		{ CLI(); }
(0073) 
(0074) 
(0075) //电机电源
(0076) #define VM_H        {BREAKE1_H}{BREAKE2_H}{DDRB|=0x80;PORTB|=0x80;}
(0077) 
(0078) //同时关二个电机
(0079) #define MOTORSTOP   {BREAKE1_H}{BREAKE2_H}{DDRB|=0x80;PORTB&=0x7f;}{DIR1_L}{PWM1_L}{DIR2_L}{PWM2_L}
(0080) 
(0081) #define DELAY10 for(Tt=0;Tt<4;Tt++);
(0082) #define DELAY20 for(Tt=0;Tt<4;Tt++);
(0083) #define DELAY40 for(Tt=0;Tt<16;Tt++); 
(0084) #define DELAY50 for(Tt=0;Tt<21;Tt++); 
(0085) #define DELAY80 for(Tt=0;Tt<32;Tt++); 
(0086) #define DELAY89 for(Tt=0;Tt<36;Tt++); 
(0087) #define DELAY100 for(Tt=0;Tt<42;Tt++); 
(0088) #define DELAY170 for(Tt=0;Tt<72;Tt++);
(0089) #define DELAY268 for(Tt=0;Tt<113;Tt++);
(0090) #define DELAY397 for(Tt=0;Tt<165;Tt++);
(0091) #define DELAY400 for(Tt=0;Tt<168;Tt++);
(0092) 
(0093) union FIB
(0094) {
(0095)  float f;
(0096)  unsigned int i[2];
(0097)  unsigned char b[4];
(0098) }myFIB;
(0099) 
(0100) union MotorStatus
(0101) {
(0102)  unsigned int i;
(0103)  struct 
(0104)  { 
(0105)    unsigned int RUN:1;//bit0,电机运行状态，0：停止，1：运行
(0106)    unsigned int DIR:1;//bit1,电机运行方向，0：反转,收臂-调大(DIR_L)，1：正转,张臂-调小(DIR_H)
(0107)    unsigned int BrokenStop:1;//bit2, 断路停
(0108)    unsigned int CommandStop:1;//bit3,手动停
(0109)    unsigned int OverCurrent:1;//bit4,过流停
(0110)    unsigned int UnderVoltage:1;//bit5,欠压停
(0111)    unsigned int StartResult:2;//bit6-bit7,电机最近一次启动结果(0：正常上电启动，1：本电机同向运行，2：本电机反向运行，3：另一个电机正在运行)
(0112)    
(0113)    unsigned int ThisCurrent:8;//bit8-bit15 ,  电机当前或停止前最近一次电流
(0114)  }s;
(0115) }Motor1Status,Motor2Status;//电机状态
(0116) 
(0117) unsigned char Motor1Gear,Motor2Gear;// 电机过流档位
(0118) unsigned char Motor1Thr,Motor2Thr;//电机堵转过流阈值
(0119) unsigned char MotorIdelGear;//电机断路档位
(0120) unsigned char MotorIdelCur;// 电机断路电流
(0121)  
(0122) unsigned char TPSCn,TPSBuf[4];
(0123) 
(0124) unsigned char T_Flag;
(0125) 
(0126) unsigned int Timer0Counter;//定时器0超过4ms时的计数
(0127) 
(0128) unsigned char Uart0RxData[74];//串口接收数据缓存
(0129) unsigned char Uart0RxCounter;
(0130) 
(0131) unsigned char Rx[18];//解码接收9位共18个半位
(0132) int  T_dat,R_dat;//曼码发送数据
(0133) unsigned char T_com;//曼码发送命令
(0134) 
(0135) unsigned char TimeOutFlag;//发送超时标志
(0136) 
(0137) unsigned char T_dat_buf[22];//曼码发送缓冲 
(0138) 
(0139) unsigned int DataFlag;//下发标定系数开始标志
(0140) unsigned char Int_count;
(0141) unsigned char IntFlag;//接收帧状态
(0142) 
(0143) unsigned int Tt,k;
(0144) unsigned int T2cn;
(0145) unsigned char coeffdata[320];
(0146) 
(0147) unsigned char Uart0TxData[74];//串口发送数据缓存
(0148) 
(0149) unsigned char EEPAdd;//接收系数存放地址索引
(0150) unsigned int coeff_len,coeff_count;//接收系数长度，接收系数计数
(0151) unsigned int CompCounter;
(0152) 
(0153) unsigned int bf;
(0154) 
(0155) unsigned long lfib;//短整型转浮点数时用的临时变量
(0156) unsigned char crc16hi,crc16lo,crc16array[18];
(0157) 
(0158) void InitialIO(void);
(0159) void init_USART0(void);
(0160) void SendUart0_2(unsigned char len,unsigned int s);
(0161) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn);
(0162) void Pwm_startup(unsigned char motor);
(0163) void Start(void);
(0164) void SendManchester(void); 
(0165) unsigned char SampleADC(unsigned char ch);
(0166) void EEPROM_write(unsigned int Address,unsigned char Data);
(0167) unsigned char EEPROM_read(unsigned int Address);
(0168) void CheckMotor(unsigned int t);
(0169) void crc16(unsigned char r_data[],unsigned int length);
(0170) void Gear2Thr(void);
(0171) void int0_isr(void);
(0172) 
(0173) #pragma interrupt_handler int0_isr:iv_INT0
(0174) void int0_isr(void)//外部中断0
(0175) { 
(0176)    //SREG&=0x7f;//关总中断
(0177)    //EIMSK&=0xFe;//关INT0  
(0178)    TCCR2 = 0x00; //stop
    0007C 2422      CLR	R2
    0007D BC25      OUT	0x25,R2
(0179)    
(0180) 	INT_DIS
    0007E 94F8      BCLR	7
(0181) 	MANINT_DIS
    0007F B789      IN	R24,0x39
    00080 7F8E      ANDI	R24,0xFE
    00081 BF89      OUT	0x39,R24
(0182)    
(0183)    #if Debug 
(0184)   // PORTD&=0xf7;
(0185)    //PORTD|=0x08;
(0186)   // PORTD&=0xf7;
(0187)    #endif
(0188)   
(0189)   DELAY10
    00082 2433      CLR	R3
    00083 9230 02B0 STS	Tt+1,R3
    00085 9220 02AF STS	Tt,R2
    00087 C009      RJMP	0x0091
    00088 9180 02AF LDS	R24,Tt
    0008A 9190 02B0 LDS	R25,Tt+1
    0008C 9601      ADIW	R24,1
    0008D 9390 02B0 STS	Tt+1,R25
    0008F 9380 02AF STS	Tt,R24
    00091 9180 02AF LDS	R24,Tt
    00093 9190 02B0 LDS	R25,Tt+1
    00095 3084      CPI	R24,4
    00096 E0E0      LDI	R30,0
    00097 079E      CPC	R25,R30
    00098 F378      BCS	0x0088
(0190)   EIFR|=0x01;//清INT0中断标志 
    00099 B788      IN	R24,0x38
    0009A 6081      ORI	R24,1
    0009B BF88      OUT	0x38,R24
(0191)   if((PIND&0x01)==0x00)//高脉冲不足10us则直接跳出
    0009C 9980      SBIC	0x10,0
    0009D C001      RJMP	0x009F
(0192)   {
(0193)    goto End;
    0009E C1C0      RJMP	0x025F
(0194)   }
(0195)    
(0196)    TCNT2 = 0x00;  
    0009F 2422      CLR	R2
    000A0 BC24      OUT	0x24,R2
(0197)    TCCR2 = 0x03; //64分频,8M时钟，每个CLOCK耗时8us，最大定时2048us，每周期10个计数
    000A1 E083      LDI	R24,3
    000A2 BD85      OUT	0x25,R24
    000A3 C029      RJMP	0x00CD
(0198)    
(0199)    while(1)
(0200)    {
(0201)      T2cn=TCNT2;
    000A4 B424      IN	R2,0x24
    000A5 2433      CLR	R3
    000A6 9230 02AC STS	T2cn+1,R3
    000A8 9220 02AB STS	T2cn,R2
(0202) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    000AA E580      LDI	R24,0x50
    000AB E090      LDI	R25,0
    000AC 1582      CP	R24,R2
    000AD 0593      CPC	R25,R3
    000AE F408      BCC	0x00B0
(0203) 	  {
(0204) 	    goto End;
    000AF C1AF      RJMP	0x025F
(0205) 	  }
(0206)      if((PIND&0x01)==0x00)
    000B0 9980      SBIC	0x10,0
    000B1 C01B      RJMP	0x00CD
(0207) 	 {
(0208) 	   DELAY20
    000B2 2422      CLR	R2
    000B3 2433      CLR	R3
    000B4 9230 02B0 STS	Tt+1,R3
    000B6 9220 02AF STS	Tt,R2
    000B8 C009      RJMP	0x00C2
    000B9 9180 02AF LDS	R24,Tt
    000BB 9190 02B0 LDS	R25,Tt+1
    000BD 9601      ADIW	R24,1
    000BE 9390 02B0 STS	Tt+1,R25
    000C0 9380 02AF STS	Tt,R24
    000C2 9180 02AF LDS	R24,Tt
    000C4 9190 02B0 LDS	R25,Tt+1
    000C6 3084      CPI	R24,4
    000C7 E0E0      LDI	R30,0
    000C8 079E      CPC	R25,R30
    000C9 F378      BCS	0x00B9
(0209) 	   if((PIND&0x01)==0x00)
    000CA 9980      SBIC	0x10,0
    000CB C001      RJMP	0x00CD
(0210) 	    {
(0211) 	      break;
    000CC C031      RJMP	0x00FE
    000CD CFD6      RJMP	0x00A4
(0212) 	    }
(0213) 	 }
(0214)    }
(0215)    
(0216)    #if Debug 
(0217)    //PORTD&=0xf7;
(0218)    #endif  		   
(0219)     //开始判断同步头	
(0220) 	while(1)//还没有上升沿到来,死等
(0221) 	{
(0222) 	  T2cn=TCNT2;
    000CE B424      IN	R2,0x24
    000CF 2433      CLR	R3
    000D0 9230 02AC STS	T2cn+1,R3
    000D2 9220 02AB STS	T2cn,R2
(0223) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    000D4 E580      LDI	R24,0x50
    000D5 E090      LDI	R25,0
    000D6 1582      CP	R24,R2
    000D7 0593      CPC	R25,R3
    000D8 F408      BCC	0x00DA
(0224) 	  {
(0225) 	    goto End;
    000D9 C185      RJMP	0x025F
(0226) 	  }
(0227) 	  if((EIFR&0x01)==0x01)
    000DA B788      IN	R24,0x38
    000DB 7081      ANDI	R24,1
    000DC 3081      CPI	R24,1
    000DD F501      BNE	0x00FE
(0228) 	  {
(0229) 	   DELAY10
    000DE 2422      CLR	R2
    000DF 2433      CLR	R3
    000E0 9230 02B0 STS	Tt+1,R3
    000E2 9220 02AF STS	Tt,R2
    000E4 C009      RJMP	0x00EE
    000E5 9180 02AF LDS	R24,Tt
    000E7 9190 02B0 LDS	R25,Tt+1
    000E9 9601      ADIW	R24,1
    000EA 9390 02B0 STS	Tt+1,R25
    000EC 9380 02AF STS	Tt,R24
    000EE 9180 02AF LDS	R24,Tt
    000F0 9190 02B0 LDS	R25,Tt+1
    000F2 3084      CPI	R24,4
    000F3 E0E0      LDI	R30,0
    000F4 079E      CPC	R25,R30
    000F5 F378      BCS	0x00E5
(0230) 	   EIFR|=0x01;//清INT0中断标志 
    000F6 B788      IN	R24,0x38
    000F7 6081      ORI	R24,1
    000F8 BF88      OUT	0x38,R24
(0231) 	   if((PIND&0x01)==0x01)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    000F9 B380      IN	R24,0x10
    000FA 7081      ANDI	R24,1
    000FB 3081      CPI	R24,1
    000FC F409      BNE	0x00FE
(0232) 	     {
(0233)    	     break;
    000FD C001      RJMP	0x00FF
    000FE CFCF      RJMP	0x00CE
(0234) 		 }
(0235) 	  }  
(0236) 	}
(0237) 	T2cn=TCNT2;
    000FF B424      IN	R2,0x24
    00100 2433      CLR	R3
    00101 9230 02AC STS	T2cn+1,R3
    00103 9220 02AB STS	T2cn,R2
(0238) 	TCNT2=0;
    00105 2422      CLR	R2
    00106 BC24      OUT	0x24,R2
(0239) 	if((T2cn<60)||(T2cn>80))//同步头本应是7个周期，但收到的结果为6~8个周期内都认可
    00107 9020 02AB LDS	R2,T2cn
    00109 9030 02AC LDS	R3,T2cn+1
    0010B 01C1      MOVW	R24,R2
    0010C 338C      CPI	R24,0x3C
    0010D E0E0      LDI	R30,0
    0010E 079E      CPC	R25,R30
    0010F F028      BCS	0x0115
    00110 E580      LDI	R24,0x50
    00111 E090      LDI	R25,0
    00112 1582      CP	R24,R2
    00113 0593      CPC	R25,R3
    00114 F408      BCC	0x0116
(0240) 	{
(0241) 	 goto End;//没有收到正确的同步头，直接跳出
    00115 C149      RJMP	0x025F
(0242) 	}
(0243) #if Debug 
(0244)  //  PORTD|=0x08;
(0245)    #endif
(0246) Start:	//同步头解码正确，下面开始接收9位数据位	//按位从高到低接收数据位，8位数据加1位校验共9位 		      	
(0247)   for(Int_count=9;Int_count>0;Int_count--)
    00116 E089      LDI	R24,0x9
    00117 9380 02B2 STS	Int_count,R24
    00119 C0A6      RJMP	0x01C0
(0248)   {	
(0249)    while(1)
(0250)    {
(0251)      T2cn=TCNT2;
    0011A B424      IN	R2,0x24
    0011B 2433      CLR	R3
    0011C 9230 02AC STS	T2cn+1,R3
    0011E 9220 02AB STS	T2cn,R2
(0252) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    00120 E580      LDI	R24,0x50
    00121 E090      LDI	R25,0
    00122 1582      CP	R24,R2
    00123 0593      CPC	R25,R3
    00124 F408      BCC	0x0126
(0253) 	  {
(0254) 	    goto End;
    00125 C139      RJMP	0x025F
(0255) 	  }
(0256)      if((PIND&0x01)==0x00)
    00126 9980      SBIC	0x10,0
    00127 C01B      RJMP	0x0143
(0257) 	 {
(0258) 	   DELAY20
    00128 2422      CLR	R2
    00129 2433      CLR	R3
    0012A 9230 02B0 STS	Tt+1,R3
    0012C 9220 02AF STS	Tt,R2
    0012E C009      RJMP	0x0138
    0012F 9180 02AF LDS	R24,Tt
    00131 9190 02B0 LDS	R25,Tt+1
    00133 9601      ADIW	R24,1
    00134 9390 02B0 STS	Tt+1,R25
    00136 9380 02AF STS	Tt,R24
    00138 9180 02AF LDS	R24,Tt
    0013A 9190 02B0 LDS	R25,Tt+1
    0013C 3084      CPI	R24,4
    0013D E0E0      LDI	R30,0
    0013E 079E      CPC	R25,R30
    0013F F378      BCS	0x012F
(0259) 	   if((PIND&0x01)==0x00)
    00140 9980      SBIC	0x10,0
    00141 C001      RJMP	0x0143
(0260) 	    {
(0261) 	      break;
    00142 C031      RJMP	0x0174
    00143 CFD6      RJMP	0x011A
(0262) 	    }
(0263) 	 }
(0264)    } 
(0265)    while(1)//还没有上升沿到来,死等
(0266) 	{
(0267) 	  T2cn=TCNT2;
    00144 B424      IN	R2,0x24
    00145 2433      CLR	R3
    00146 9230 02AC STS	T2cn+1,R3
    00148 9220 02AB STS	T2cn,R2
(0268) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    0014A E580      LDI	R24,0x50
    0014B E090      LDI	R25,0
    0014C 1582      CP	R24,R2
    0014D 0593      CPC	R25,R3
    0014E F408      BCC	0x0150
(0269) 	  {
(0270) 	    goto End;
    0014F C10F      RJMP	0x025F
(0271) 	  }
(0272) 	  if((EIFR&0x01)==0x01)
    00150 B788      IN	R24,0x38
    00151 7081      ANDI	R24,1
    00152 3081      CPI	R24,1
    00153 F501      BNE	0x0174
(0273) 	  {
(0274) 	   DELAY10
    00154 2422      CLR	R2
    00155 2433      CLR	R3
    00156 9230 02B0 STS	Tt+1,R3
    00158 9220 02AF STS	Tt,R2
    0015A C009      RJMP	0x0164
    0015B 9180 02AF LDS	R24,Tt
    0015D 9190 02B0 LDS	R25,Tt+1
    0015F 9601      ADIW	R24,1
    00160 9390 02B0 STS	Tt+1,R25
    00162 9380 02AF STS	Tt,R24
    00164 9180 02AF LDS	R24,Tt
    00166 9190 02B0 LDS	R25,Tt+1
    00168 3084      CPI	R24,4
    00169 E0E0      LDI	R30,0
    0016A 079E      CPC	R25,R30
    0016B F378      BCS	0x015B
(0275) 	   EIFR|=0x01;//清INT0中断标志 
    0016C B788      IN	R24,0x38
    0016D 6081      ORI	R24,1
    0016E BF88      OUT	0x38,R24
(0276) 	   if((PIND&0x01)==0x01)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    0016F B380      IN	R24,0x10
    00170 7081      ANDI	R24,1
    00171 3081      CPI	R24,1
    00172 F409      BNE	0x0174
(0277) 	     {
(0278)    	     break;
    00173 C001      RJMP	0x0175
    00174 CFCF      RJMP	0x0144
(0279) 		 }
(0280) 	  }  
(0281) 	}
(0282) 	T2cn=TCNT2;
    00175 B424      IN	R2,0x24
    00176 2433      CLR	R3
    00177 9230 02AC STS	T2cn+1,R3
    00179 9220 02AB STS	T2cn,R2
(0283) 	TCNT2=0;
    0017B 2422      CLR	R2
    0017C BC24      OUT	0x24,R2
(0284) 	if(T2cn<20)//数据位最小是3位，可放宽到2位
    0017D 9180 02AB LDS	R24,T2cn
    0017F 9190 02AC LDS	R25,T2cn+1
    00181 3184      CPI	R24,0x14
    00182 E0E0      LDI	R30,0
    00183 079E      CPC	R25,R30
    00184 F420      BCC	0x0189
(0285) 	{
(0286) 	 IntFlag=3;//接收数据位不完整
    00185 E083      LDI	R24,3
    00186 9380 02B1 STS	IntFlag,R24
(0287) 	 goto End;//数据位来得太早，退出
    00188 C0D6      RJMP	0x025F
(0288) 	}
(0289) 	else if(T2cn<40)//数据位1本应是3个周期，在此我们认为2~4个周期都是可以的
    00189 9180 02AB LDS	R24,T2cn
    0018B 9190 02AC LDS	R25,T2cn+1
    0018D 3288      CPI	R24,0x28
    0018E E0E0      LDI	R30,0
    0018F 079E      CPC	R25,R30
    00190 F450      BCC	0x019B
(0290) 	{
(0291) 	 Rx[Int_count]=1;
    00191 ED81      LDI	R24,0xD1
    00192 E092      LDI	R25,2
    00193 91E0 02B2 LDS	R30,Int_count
    00195 27FF      CLR	R31
    00196 0FE8      ADD	R30,R24
    00197 1FF9      ADC	R31,R25
    00198 E081      LDI	R24,1
    00199 8380      ST	Z,R24
(0292) 	}
    0019A C020      RJMP	0x01BB
(0293) 	else if(T2cn<60)//数据位0本应是5个周期，在此我们认为4~6个周期都是可以的
    0019B 9180 02AB LDS	R24,T2cn
    0019D 9190 02AC LDS	R25,T2cn+1
    0019F 338C      CPI	R24,0x3C
    001A0 E0E0      LDI	R30,0
    001A1 079E      CPC	R25,R30
    001A2 F450      BCC	0x01AD
(0294) 	{
(0295) 	 Rx[Int_count]=0;
    001A3 ED81      LDI	R24,0xD1
    001A4 E092      LDI	R25,2
    001A5 91E0 02B2 LDS	R30,Int_count
    001A7 27FF      CLR	R31
    001A8 0FE8      ADD	R30,R24
    001A9 1FF9      ADC	R31,R25
    001AA 2422      CLR	R2
    001AB 8220      ST	Z,R2
(0296) 	}
    001AC C00E      RJMP	0x01BB
(0297) 	else if(T2cn<=80)//同步位本应是7周期，在此我们认为6~8周期都是可以的
    001AD E580      LDI	R24,0x50
    001AE E090      LDI	R25,0
    001AF 9020 02AB LDS	R2,T2cn
    001B1 9030 02AC LDS	R3,T2cn+1
    001B3 1582      CP	R24,R2
    001B4 0593      CPC	R25,R3
    001B5 F008      BCS	0x01B7
(0298) 	{
(0299) 	 goto Start;//在接收数据位时收到了同步位，跳到数据位解码起始位处
    001B6 CF5F      RJMP	0x0116
(0300) 	}
(0301) 	else 
(0302) 	{
(0303) 	 IntFlag=3;//接收数据位不完整
    001B7 E083      LDI	R24,3
    001B8 9380 02B1 STS	IntFlag,R24
(0304) 	 goto End;//数据位来得太迟，退出
    001BA C0A4      RJMP	0x025F
    001BB 9180 02B2 LDS	R24,Int_count
    001BD 5081      SUBI	R24,1
    001BE 9380 02B2 STS	Int_count,R24
    001C0 E080      LDI	R24,0
    001C1 9020 02B2 LDS	R2,Int_count
    001C3 1582      CP	R24,R2
    001C4 F408      BCC	0x01C6
    001C5 CF7D      RJMP	0x0143
(0305) 	}
(0306)   }   
(0307) 	
(0308)     R_dat=0;
    001C6 2422      CLR	R2
    001C7 2433      CLR	R3
    001C8 9230 02CE STS	R_dat+1,R3
    001CA 9220 02CD STS	R_dat,R2
(0309)     if(Rx[2])
    001CC 9020 02D3 LDS	R2,Rx+2
    001CE 2022      TST	R2
    001CF F049      BEQ	0x01D9
(0310)           R_dat|=0x01;
    001D0 9180 02CD LDS	R24,R_dat
    001D2 9190 02CE LDS	R25,R_dat+1
    001D4 6081      ORI	R24,1
    001D5 9390 02CE STS	R_dat+1,R25
    001D7 9380 02CD STS	R_dat,R24
(0311)     if(Rx[3])
    001D9 9020 02D4 LDS	R2,Rx+3
    001DB 2022      TST	R2
    001DC F049      BEQ	0x01E6
(0312)           R_dat|=0x02;
    001DD 9180 02CD LDS	R24,R_dat
    001DF 9190 02CE LDS	R25,R_dat+1
    001E1 6082      ORI	R24,2
    001E2 9390 02CE STS	R_dat+1,R25
    001E4 9380 02CD STS	R_dat,R24
(0313)     if(Rx[4])
    001E6 9020 02D5 LDS	R2,Rx+4
    001E8 2022      TST	R2
    001E9 F049      BEQ	0x01F3
(0314)           R_dat|=0x04;
    001EA 9180 02CD LDS	R24,R_dat
    001EC 9190 02CE LDS	R25,R_dat+1
    001EE 6084      ORI	R24,4
    001EF 9390 02CE STS	R_dat+1,R25
    001F1 9380 02CD STS	R_dat,R24
(0315)     if(Rx[5])
    001F3 9020 02D6 LDS	R2,Rx+5
    001F5 2022      TST	R2
    001F6 F049      BEQ	0x0200
(0316)           R_dat|=0x08;
    001F7 9180 02CD LDS	R24,R_dat
    001F9 9190 02CE LDS	R25,R_dat+1
    001FB 6088      ORI	R24,0x8
    001FC 9390 02CE STS	R_dat+1,R25
    001FE 9380 02CD STS	R_dat,R24
(0317)     if(Rx[6])
    00200 9020 02D7 LDS	R2,Rx+6
    00202 2022      TST	R2
    00203 F049      BEQ	0x020D
(0318)           R_dat|=0x10;
    00204 9180 02CD LDS	R24,R_dat
    00206 9190 02CE LDS	R25,R_dat+1
    00208 6180      ORI	R24,0x10
    00209 9390 02CE STS	R_dat+1,R25
    0020B 9380 02CD STS	R_dat,R24
(0319)     if(Rx[7])
    0020D 9020 02D8 LDS	R2,Rx+7
    0020F 2022      TST	R2
    00210 F049      BEQ	0x021A
(0320)           R_dat|=0x20;
    00211 9180 02CD LDS	R24,R_dat
    00213 9190 02CE LDS	R25,R_dat+1
    00215 6280      ORI	R24,0x20
    00216 9390 02CE STS	R_dat+1,R25
    00218 9380 02CD STS	R_dat,R24
(0321)     if(Rx[8])
    0021A 9020 02D9 LDS	R2,Rx+8
    0021C 2022      TST	R2
    0021D F049      BEQ	0x0227
(0322)           R_dat|=0x40;
    0021E 9180 02CD LDS	R24,R_dat
    00220 9190 02CE LDS	R25,R_dat+1
    00222 6480      ORI	R24,0x40
    00223 9390 02CE STS	R_dat+1,R25
    00225 9380 02CD STS	R_dat,R24
(0323)     if(Rx[9])
    00227 9020 02DA LDS	R2,Rx+9
    00229 2022      TST	R2
    0022A F049      BEQ	0x0234
(0324)           R_dat|=0x80;
    0022B 9180 02CD LDS	R24,R_dat
    0022D 9190 02CE LDS	R25,R_dat+1
    0022F 6880      ORI	R24,0x80
    00230 9390 02CE STS	R_dat+1,R25
    00232 9380 02CD STS	R_dat,R24
(0325) 	
(0326) 	Rx[0]=1;  
    00234 E081      LDI	R24,1
    00235 9380 02D1 STS	Rx,R24
(0327) 	for(Int_count=2;Int_count<10;Int_count++)  
    00237 E082      LDI	R24,2
    00238 9380 02B2 STS	Int_count,R24
    0023A C012      RJMP	0x024D
(0328)        Rx[0]^=Rx[Int_count];  
    0023B ED81      LDI	R24,0xD1
    0023C E092      LDI	R25,2
    0023D 91E0 02B2 LDS	R30,Int_count
    0023F 27FF      CLR	R31
    00240 0FE8      ADD	R30,R24
    00241 1FF9      ADC	R31,R25
    00242 8020      LD	R2,Z
    00243 9030 02D1 LDS	R3,Rx
    00245 2432      EOR	R3,R2
    00246 9230 02D1 STS	Rx,R3
    00248 9180 02B2 LDS	R24,Int_count
    0024A 5F8F      SUBI	R24,0xFF
    0024B 9380 02B2 STS	Int_count,R24
    0024D 9180 02B2 LDS	R24,Int_count
    0024F 308A      CPI	R24,0xA
    00250 F350      BCS	0x023B
(0329) 	   
(0330) 	if(Rx[0]==Rx[1])
    00251 9020 02D2 LDS	R2,Rx+1
    00253 9030 02D1 LDS	R3,Rx
    00255 1432      CP	R3,R2
    00256 F421      BNE	0x025B
(0331) 	 {
(0332) 		 IntFlag=1;//接收帧正常	
    00257 E081      LDI	R24,1
    00258 9380 02B1 STS	IntFlag,R24
(0333) 	 }
    0025A C00A      RJMP	0x0265
(0334) 	else           
(0335) 	 {
(0336) 		 IntFlag=2;//接收帧校验错
    0025B E082      LDI	R24,2
    0025C 9380 02B1 STS	IntFlag,R24
(0337) 	 }
(0338)    #if Debug 
(0339)    //PORTD&=0xf7;
(0340)    #endif  
(0341)    goto End1;//只要接收到正常的同步头，不管校验位是对是错，都暂时不开放INT0中断
    0025E C006      RJMP	0x0265
(0342)      
(0343) End:
(0344)  	 	//EIFR|=0x01;//清INT0中断标志 
(0345)  		//EICRA|=0x0c; //INT0上升沿触发 
(0346)  		//EIMSK|=0x01;//使能INT0中断 
(0347) 	
(0348) 		MANINT_CLR
    0025F B788      IN	R24,0x38
    00260 6081      ORI	R24,1
    00261 BF88      OUT	0x38,R24
(0349) 		MANINT_EN
    00262 B789      IN	R24,0x39
    00263 6081      ORI	R24,1
    00264 BF89      OUT	0x39,R24
(0350) End1:
(0351)    TCCR2 = 0x00; //stop
    00265 2422      CLR	R2
    00266 BC25      OUT	0x25,R2
(0352)     //SREG|=0x80;//总中断使能;  
(0353)    INT_EN
    00267 9478      BSET	7
    00268 9029      LD	R2,Y+
    00269 BE2F      OUT	0x3F,R2
    0026A 91F9      LD	R31,Y+
    0026B 91E9      LD	R30,Y+
    0026C 91A9      LD	R26,Y+
    0026D 9199      LD	R25,Y+
    0026E 9189      LD	R24,Y+
    0026F 9039      LD	R3,Y+
    00270 9029      LD	R2,Y+
    00271 9518      RETI
(0354) }
(0355) 
(0356) void InitialIO(void)
(0357) {//1输出，0输入
(0358)  PORTA=0x00;
_InitialIO:
    00272 2422      CLR	R2
    00273 BA2B      OUT	0x1B,R2
(0359)  DDRA=0x07; //PA0=BREAKE1 PA1=PWM1 PA2=DIR1
    00274 E087      LDI	R24,7
    00275 BB8A      OUT	0x1A,R24
(0360) 
(0361)  PORTB=0x00; 
    00276 BA28      OUT	0x18,R2
(0362)  DDRB=0x80; //PB7=VM_CTRL
    00277 E880      LDI	R24,0x80
    00278 BB87      OUT	0x17,R24
(0363)  
(0364)  PORTC=0x00;
    00279 BA25      OUT	0x15,R2
(0365)  DDRC=0x00; 
    0027A BA24      OUT	0x14,R2
(0366)  
(0367)  PORTD=0x00; 
    0027B BA22      OUT	0x12,R2
(0368)  DDRD=0x38;//PD4=M2 PD5=M1 TX1=0
    0027C E388      LDI	R24,0x38
    0027D BB81      OUT	0x11,R24
(0369)  
(0370)  PORTE=0x00; 
    0027E B823      OUT	0x03,R2
(0371)  DDRE=0x00;
    0027F B822      OUT	0x02,R2
(0372)  
(0373)  PORTF=0x00; 
    00280 9220 0062 STS	0x62,R2
(0374)  DDRF=0x07;//PF0=DIR2 PF1=BREAKE2 PF2=PWM2
    00282 E087      LDI	R24,7
    00283 9380 0061 STS	0x61,R24
(0375)  
(0376)  PORTG=0x00; 
    00285 9220 0065 STS	0x65,R2
(0377)  DDRG=0x00; 
    00287 9220 0064 STS	0x64,R2
    00289 9508      RET
(0378) }
(0379) 
(0380) 
(0381) //UART1 initialize
(0382) // desired baud rate: 57600
(0383) // actual: baud rate:58824 (2.1%)
(0384) // char size: 8 bit
(0385) // parity: Disabled
(0386) void uart1_init(void)
(0387) {
(0388)  UCSR1B = 0x00; //disable while setting baud rate
_uart1_init:
    0028A 2422      CLR	R2
    0028B 9220 009A STS	0x9A,R2
(0389)  UCSR1A = 0x02;
    0028D E082      LDI	R24,2
    0028E 9380 009B STS	0x9B,R24
(0390)  UCSR1C = 0x06;
    00290 E086      LDI	R24,6
    00291 9380 009D STS	0x9D,R24
(0391)  UBRR1L = 0x10; //set baud rate lo 57600
    00293 E180      LDI	R24,0x10
    00294 9380 0099 STS	0x99,R24
(0392)  UBRR1H = 0x00; //set baud rate hi
    00296 9220 0098 STS	0x98,R2
(0393)  UCSR1B = 0x90;//使能接收和接收中断，不使能发送
    00298 E980      LDI	R24,0x90
    00299 9380 009A STS	0x9A,R24
    0029B 9508      RET
_uart1_rx_isr:
    0029C 922A      ST	-Y,R2
    0029D 938A      ST	-Y,R24
    0029E 939A      ST	-Y,R25
    0029F 93EA      ST	-Y,R30
    002A0 93FA      ST	-Y,R31
    002A1 B62F      IN	R2,0x3F
    002A2 922A      ST	-Y,R2
(0394) }
(0395) 
(0396) #pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
(0397) void uart1_rx_isr(void)//串口1接收中断
(0398) {
(0399)  if(TPSCn<4)
    002A3 9180 0335 LDS	R24,TPSCn
    002A5 3084      CPI	R24,4
    002A6 F480      BCC	0x02B7
(0400)  {
(0401)   TPSBuf[TPSCn]=UDR1;
    002A7 E381      LDI	R24,0x31
    002A8 E093      LDI	R25,3
    002A9 91E0 0335 LDS	R30,TPSCn
    002AB 27FF      CLR	R31
    002AC 0FE8      ADD	R30,R24
    002AD 1FF9      ADC	R31,R25
    002AE 9020 009C LDS	R2,0x9C
    002B0 8220      ST	Z,R2
(0402)   TPSCn++;
    002B1 9180 0335 LDS	R24,TPSCn
    002B3 5F8F      SUBI	R24,0xFF
    002B4 9380 0335 STS	TPSCn,R24
(0403)  }
    002B6 C005      RJMP	0x02BC
(0404)  else
(0405)  {
(0406)   UCSR1B&=0x7f;//关串口1接收中断
    002B7 9180 009A LDS	R24,0x9A
    002B9 778F      ANDI	R24,0x7F
    002BA 9380 009A STS	0x9A,R24
(0407)  }
    002BC 9029      LD	R2,Y+
    002BD BE2F      OUT	0x3F,R2
    002BE 91F9      LD	R31,Y+
    002BF 91E9      LD	R30,Y+
    002C0 9199      LD	R25,Y+
    002C1 9189      LD	R24,Y+
    002C2 9029      LD	R2,Y+
    002C3 9518      RETI
_SendTPS:
  t                    --> R20
  PD                   --> Y,+0
  i                    --> R22
  b                    --> R10
    002C4 940E 2629 CALL	push_xgsetF00C
    002C6 2EA0      MOV	R10,R16
    002C7 972A      SBIW	R28,0xA
(0408) }
(0409) 
(0410) void SendTPS(unsigned char b)
(0411) {
(0412)  unsigned char t,i;
(0413)  unsigned char PD[10];
(0414)  
(0415)  TPSCn=0;
    002C8 2422      CLR	R2
    002C9 9220 0335 STS	TPSCn,R2
(0416)  
(0417)  //while(!(UCSR1A&(1<<UDRE1)));   // 等待发送缓冲器为空
(0418)  //UDR1=b; 
(0419)  
(0420)  DDRD|=0x08;//TX1设为IO输出
    002CB 9A8B      SBI	0x11,3
(0421)  t=PIND;
    002CC B340      IN	R20,0x10
(0422)  for(i=0;i<8;i++)
    002CD 2766      CLR	R22
    002CE C01B      RJMP	0x02EA
(0423)  {
(0424)   if(((b>>i)&0x01)==0x00)//反相发送
    002CF 2D0A      MOV	R16,R10
    002D0 2F16      MOV	R17,R22
    002D1 940E 2671 CALL	lsr8
    002D3 2F80      MOV	R24,R16
    002D4 7081      ANDI	R24,1
    002D5 F451      BNE	0x02E0
(0425)   {
(0426)    PD[i+1]=(t|0x08);
    002D6 01CE      MOVW	R24,R28
    002D7 9601      ADIW	R24,1
    002D8 2FE6      MOV	R30,R22
    002D9 27FF      CLR	R31
    002DA 0FE8      ADD	R30,R24
    002DB 1FF9      ADC	R31,R25
    002DC 2F84      MOV	R24,R20
    002DD 6088      ORI	R24,0x8
    002DE 8380      ST	Z,R24
(0427)   }
    002DF C009      RJMP	0x02E9
(0428)   else
(0429)   {
(0430)    PD[i+1]=(t&0xf7);
    002E0 01CE      MOVW	R24,R28
    002E1 9601      ADIW	R24,1
    002E2 2FE6      MOV	R30,R22
    002E3 27FF      CLR	R31
    002E4 0FE8      ADD	R30,R24
    002E5 1FF9      ADC	R31,R25
    002E6 2F84      MOV	R24,R20
    002E7 7F87      ANDI	R24,0xF7
    002E8 8380      ST	Z,R24
    002E9 9563      INC	R22
    002EA 3068      CPI	R22,0x8
    002EB F318      BCS	0x02CF
(0431)   }
(0432)  }
(0433)  PD[0]=1;//起始位
    002EC E081      LDI	R24,1
    002ED 8388      ST	Y,R24
(0434)  PD[9]=0;//结束位
    002EE 2422      CLR	R2
    002EF 8629      STD	Y+9,R2
(0435)  PORTD&=0xf7;// 先拉低
    002F0 B382      IN	R24,0x12
    002F1 7F87      ANDI	R24,0xF7
    002F2 BB82      OUT	0x12,R24
(0436)  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
    002F3 0000      NOP
    002F4 0000      NOP
    002F5 0000      NOP
    002F6 0000      NOP
    002F7 0000      NOP
(0437)  for(i=0;i<10;i++)//再模拟发送10位
    002F8 2766      CLR	R22
    002F9 C009      RJMP	0x0303
(0438)  {
(0439)  PORTD=PD[i];
    002FA 01CE      MOVW	R24,R28
    002FB 2FE6      MOV	R30,R22
    002FC 27FF      CLR	R31
    002FD 0FE8      ADD	R30,R24
    002FE 1FF9      ADC	R31,R25
    002FF 8020      LD	R2,Z
    00300 BA22      OUT	0x12,R2
(0440)  asm("nop");
    00301 0000      NOP
    00302 9563      INC	R22
    00303 306A      CPI	R22,0xA
    00304 F3A8      BCS	0x02FA
(0441)  }
(0442)  PORTD&=0xf7;//最后保持低
    00305 B382      IN	R24,0x12
    00306 7F87      ANDI	R24,0xF7
    00307 BB82      OUT	0x12,R24
(0443)  
(0444)  
(0445)  t=UDR1;//开串口接收中断前读空缓存
    00308 9140 009C LDS	R20,0x9C
(0446)  UCSR1B|=0x80;//开串口1接收中断
    0030A 9180 009A LDS	R24,0x9A
    0030C 6880      ORI	R24,0x80
    0030D 9380 009A STS	0x9A,R24
    0030F 962A      ADIW	R28,0xA
    00310 940C 2630 JMP	pop_xgsetF00C
(0447) }
(0448) 
(0449) 
(0450) //UART0 initialize
(0451) // desired baud rate: 57600
(0452) // actual: baud rate:58824 (2.1%)
(0453) // char size: 8 bit
(0454) // parity: Disabled
(0455) void uart0_init(void)
(0456) {
(0457)  UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    00312 2422      CLR	R2
    00313 B82A      OUT	0x0A,R2
(0458)  UCSR0A = 0x02;
    00314 E082      LDI	R24,2
    00315 B98B      OUT	0x0B,R24
(0459)  UCSR0C = 0x06;
    00316 E086      LDI	R24,6
    00317 9380 0095 STS	0x95,R24
(0460)  UBRR0L = 0x10; //set baud rate lo 57600
    00319 E180      LDI	R24,0x10
    0031A B989      OUT	0x09,R24
(0461)  UBRR0H = 0x00; //set baud rate hi
    0031B 9220 0090 STS	0x90,R2
(0462)  UCSR0B = 0x98;
    0031D E988      LDI	R24,0x98
    0031E B98A      OUT	0x0A,R24
    0031F 9508      RET
_uart0_rx_isr:
    00320 922A      ST	-Y,R2
    00321 938A      ST	-Y,R24
    00322 939A      ST	-Y,R25
    00323 93EA      ST	-Y,R30
    00324 93FA      ST	-Y,R31
    00325 B62F      IN	R2,0x3F
    00326 922A      ST	-Y,R2
(0463) }
(0464) 
(0465) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0466) void uart0_rx_isr(void)//串口0接收中断
(0467) {
(0468)     if(Uart0RxCounter<74)
    00327 9180 02E3 LDS	R24,Uart0RxCounter
    00329 348A      CPI	R24,0x4A
    0032A F470      BCC	0x0339
(0469) 	{
(0470)     Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
    0032B EE84      LDI	R24,0xE4
    0032C E092      LDI	R25,2
    0032D 91E0 02E3 LDS	R30,Uart0RxCounter
    0032F 27FF      CLR	R31
    00330 0FE8      ADD	R30,R24
    00331 1FF9      ADC	R31,R25
    00332 B02C      IN	R2,0x0C
    00333 8220      ST	Z,R2
(0471)  	Uart0RxCounter++;
    00334 9180 02E3 LDS	R24,Uart0RxCounter
    00336 5F8F      SUBI	R24,0xFF
    00337 9380 02E3 STS	Uart0RxCounter,R24
(0472) 	}
    00339 9029      LD	R2,Y+
    0033A BE2F      OUT	0x3F,R2
    0033B 91F9      LD	R31,Y+
    0033C 91E9      LD	R30,Y+
    0033D 9199      LD	R25,Y+
    0033E 9189      LD	R24,Y+
    0033F 9029      LD	R2,Y+
    00340 9518      RETI
_timer0_ovf_isr:
    00341 922A      ST	-Y,R2
    00342 938A      ST	-Y,R24
    00343 939A      ST	-Y,R25
    00344 B62F      IN	R2,0x3F
    00345 922A      ST	-Y,R2
(0473) }
(0474) 
(0475) #pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
(0476) void timer0_ovf_isr(void)
(0477) {
(0478) Timer0Counter--;
    00346 9180 032E LDS	R24,Timer0Counter
    00348 9190 032F LDS	R25,Timer0Counter+1
    0034A 9701      SBIW	R24,1
    0034B 9390 032F STS	Timer0Counter+1,R25
    0034D 9380 032E STS	Timer0Counter,R24
(0479) if(Timer0Counter==0)
    0034F 3080      CPI	R24,0
    00350 0789      CPC	R24,R25
    00351 F461      BNE	0x035E
(0480) {
(0481)  TCNT0=0;
    00352 2422      CLR	R2
    00353 BE22      OUT	0x32,R2
(0482)  TimeOutFlag=1;
    00354 E081      LDI	R24,1
    00355 9380 02CB STS	TimeOutFlag,R24
(0483)  TIMSK&=0xFE;//关定时器0中断
    00357 B787      IN	R24,0x37
    00358 7F8E      ANDI	R24,0xFE
    00359 BF87      OUT	0x37,R24
(0484)  UCSR0B&=0x7f;//关串口接收中断
    0035A B18A      IN	R24,0x0A
    0035B 778F      ANDI	R24,0x7F
    0035C B98A      OUT	0x0A,R24
(0485)  }
    0035D C002      RJMP	0x0360
(0486)  else
(0487)  {
(0488)  TCNT0=0x06;//定时8ms
    0035E E086      LDI	R24,6
    0035F BF82      OUT	0x32,R24
(0489)  }
    00360 9029      LD	R2,Y+
    00361 BE2F      OUT	0x3F,R2
    00362 9199      LD	R25,Y+
    00363 9189      LD	R24,Y+
    00364 9029      LD	R2,Y+
    00365 9518      RETI
_timer3_ovf_isr:
    00366 921A      ST	-Y,R1
    00367 922A      ST	-Y,R2
    00368 938A      ST	-Y,R24
    00369 939A      ST	-Y,R25
    0036A B61F      IN	R1,0x3F
    0036B 921A      ST	-Y,R1
(0490) }
(0491) 
(0492) #pragma interrupt_handler timer3_ovf_isr:iv_TIM3_OVF
(0493) void timer3_ovf_isr(void)
(0494) {
(0495)  	 ETIMSK = 0x00; //Timer3中断关闭
    0036C 2422      CLR	R2
    0036D 9220 007D STS	0x7D,R2
(0496) 	 TCCR3B = 0x00; //stop
    0036F 9220 008A STS	0x8A,R2
(0497) 		
(0498)   		   if(PWM1_PIN==1)//收放电机正在运行
    00371 B389      IN	R24,0x19
    00372 7082      ANDI	R24,2
    00373 9586      LSR	R24
    00374 3081      CPI	R24,1
    00375 F449      BNE	0x037F
(0499)    		   {
(0500)  		   Motor1Status.s.CommandStop=1;
    00376 9180 033E LDS	R24,Motor1Status
    00378 9190 033F LDS	R25,Motor1Status+1
    0037A 6088      ORI	R24,0x8
    0037B 9390 033F STS	Motor1Status+1,R25
    0037D 9380 033E STS	Motor1Status,R24
(0501)    		   }
(0502)  		   if(PWM2_PIN==1)//调节电机正在运行
    0037F B180      IN	R24,0x00
    00380 7084      ANDI	R24,4
    00381 9586      LSR	R24
    00382 9586      LSR	R24
    00383 3081      CPI	R24,1
    00384 F449      BNE	0x038E
(0503)    		   { 
(0504)  		   Motor2Status.s.CommandStop=1;
    00385 9180 033C LDS	R24,Motor2Status
    00387 9190 033D LDS	R25,Motor2Status+1
    00389 6088      ORI	R24,0x8
    0038A 9390 033D STS	Motor2Status+1,R25
    0038C 9380 033C STS	Motor2Status,R24
(0505)    		   }
(0506)  	 	   MOTORSTOP  //关电机
    0038E 9AD0      SBI	0x1A,0
    0038F 9AD8      SBI	0x1B,0
    00390 9180 0061 LDS	R24,0x61
    00392 6082      ORI	R24,2
    00393 9380 0061 STS	0x61,R24
    00395 9180 0062 LDS	R24,0x62
    00397 6082      ORI	R24,2
    00398 9380 0062 STS	0x62,R24
    0039A 9ABF      SBI	0x17,7
    0039B B388      IN	R24,0x18
    0039C 778F      ANDI	R24,0x7F
    0039D BB88      OUT	0x18,R24
    0039E 9AD2      SBI	0x1A,2
    0039F B38B      IN	R24,0x1B
    003A0 7F8B      ANDI	R24,0xFB
    003A1 BB8B      OUT	0x1B,R24
    003A2 9AD1      SBI	0x1A,1
    003A3 B38B      IN	R24,0x1B
    003A4 7F8D      ANDI	R24,0xFD
    003A5 BB8B      OUT	0x1B,R24
    003A6 9180 0061 LDS	R24,0x61
    003A8 6081      ORI	R24,1
    003A9 9380 0061 STS	0x61,R24
    003AB 9180 0062 LDS	R24,0x62
    003AD 7F8E      ANDI	R24,0xFE
    003AE 9380 0062 STS	0x62,R24
    003B0 9180 0061 LDS	R24,0x61
    003B2 6084      ORI	R24,4
    003B3 9380 0061 STS	0x61,R24
    003B5 9180 0062 LDS	R24,0x62
    003B7 7F8B      ANDI	R24,0xFB
    003B8 9380 0062 STS	0x62,R24
    003BA 9019      LD	R1,Y+
    003BB BE1F      OUT	0x3F,R1
    003BC 9199      LD	R25,Y+
    003BD 9189      LD	R24,Y+
    003BE 9029      LD	R2,Y+
    003BF 9019      LD	R1,Y+
    003C0 9518      RETI
_SendUart0_2:
  t                    --> R20
  i                    --> R22
  s                    --> R10
  len                  --> R12
    003C1 940E 2637 CALL	push_xgsetF03C
    003C3 0159      MOVW	R10,R18
    003C4 2EC0      MOV	R12,R16
(0507) }
(0508) 
(0509) void SendUart0_2(unsigned char len,unsigned int s)   //串口发送数据
(0510) {//要求流量板在s个8ms内通过串口返回数据
(0511) unsigned char t,i; 	
(0512) 
(0513) for(t=0;t<74;t++)
    003C5 2744      CLR	R20
    003C6 C009      RJMP	0x03D0
(0514)   Uart0RxData[t]=0xff;
    003C7 EE84      LDI	R24,0xE4
    003C8 E092      LDI	R25,2
    003C9 2FE4      MOV	R30,R20
    003CA 27FF      CLR	R31
    003CB 0FE8      ADD	R30,R24
    003CC 1FF9      ADC	R31,R25
    003CD EF8F      LDI	R24,0xFF
    003CE 8380      ST	Z,R24
    003CF 9543      INC	R20
    003D0 344A      CPI	R20,0x4A
    003D1 F3A8      BCS	0x03C7
(0515)   
(0516) Uart0RxCounter=0; //清串口接受计数  
    003D2 2422      CLR	R2
    003D3 9220 02E3 STS	Uart0RxCounter,R2
(0517) 
(0518) for(t=0;t<len;t++)
    003D5 2744      CLR	R20
    003D6 C010      RJMP	0x03E7
(0519) {
(0520) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    003D7 9B5D      SBIS	0x0B,5
    003D8 CFFE      RJMP	0x03D7
(0521) for(i=0;i<200;i++);
    003D9 2766      CLR	R22
    003DA C001      RJMP	0x03DC
    003DB 9563      INC	R22
    003DC 3C68      CPI	R22,0xC8
    003DD F3E8      BCS	0x03DB
(0522) UDR0=Uart0TxData[t];  
    003DE E281      LDI	R24,0x21
    003DF E091      LDI	R25,1
    003E0 2FE4      MOV	R30,R20
    003E1 27FF      CLR	R31
    003E2 0FE8      ADD	R30,R24
    003E3 1FF9      ADC	R31,R25
    003E4 8020      LD	R2,Z
    003E5 B82C      OUT	0x0C,R2
    003E6 9543      INC	R20
    003E7 154C      CP	R20,R12
    003E8 F370      BCS	0x03D7
(0523) }
(0524)                   
(0525) if(s>0)
    003E9 20AA      TST	R10
    003EA F411      BNE	0x03ED
    003EB 20BB      TST	R11
    003EC F111      BEQ	0x040F
(0526) {
(0527)  //超时设定
(0528) TimeOutFlag=0; //超时标志置0
    003ED 2422      CLR	R2
    003EE 9220 02CB STS	TimeOutFlag,R2
(0529) Timer0Counter=s; //8ms定时循环次数
    003F0 92B0 032F STS	Timer0Counter+1,R11
    003F2 92A0 032E STS	Timer0Counter,R10
(0530) TCNT0=0x06;//定时8ms
    003F4 E086      LDI	R24,6
    003F5 BF82      OUT	0x32,R24
(0531) TCCR0|=0x06;//256分频
    003F6 B783      IN	R24,0x33
    003F7 6086      ORI	R24,6
    003F8 BF83      OUT	0x33,R24
(0532) TIFR|=0x01; //清定时器0中断标志
    003F9 B786      IN	R24,0x36
    003FA 6081      ORI	R24,1
    003FB BF86      OUT	0x36,R24
(0533) TIMSK|=0x01;//使能定时器0中断
    003FC B787      IN	R24,0x37
    003FD 6081      ORI	R24,1
    003FE BF87      OUT	0x37,R24
(0534) t=UDR0;//开串口接收中断前读空缓存
    003FF B14C      IN	R20,0x0C
(0535) UCSR0B|=0x80;//开串口接收中断
    00400 9A57      SBI	0x0A,7
    00401 C003      RJMP	0x0405
(0536) while(TimeOutFlag==0)
(0537) {
(0538) CheckMotor(0);
    00402 2700      CLR	R16
    00403 2711      CLR	R17
    00404 D3B9      RCALL	_CheckMotor
    00405 9020 02CB LDS	R2,TimeOutFlag
    00407 2022      TST	R2
    00408 F3C9      BEQ	0x0402
(0539) }
(0540) TIMSK&=0xFE;//关定时器0中断
    00409 B787      IN	R24,0x37
    0040A 7F8E      ANDI	R24,0xFE
    0040B BF87      OUT	0x37,R24
(0541) UCSR0B&=0x7f;//关串口接收中断
    0040C B18A      IN	R24,0x0A
    0040D 778F      ANDI	R24,0x7F
    0040E B98A      OUT	0x0A,R24
(0542) }
    0040F 940C 2640 JMP	pop_xgsetF03C
_SendUart0_3:
  t                    --> R20
  i                    --> R22
  cn                   --> R10
  s                    --> R12
  len                  --> R14
    00411 940E 261E CALL	push_xgsetF0FC
    00413 0169      MOVW	R12,R18
    00414 2EE0      MOV	R14,R16
    00415 84AA      LDD	R10,Y+10
(0543) }
(0544) 
(0545) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn)   //串口发送数据，不死等，收到采集板返回的cn个字节后即退出，如一直没收到cn个字节，则超时时间s*8ms到后也退出
(0546) {//要求流量板在s个8ms内通过串口返回数据
(0547) unsigned char t,i; 	
(0548) 
(0549) for(t=0;t<74;t++)
    00416 2744      CLR	R20
    00417 C009      RJMP	0x0421
(0550)   Uart0RxData[t]=0xff;
    00418 EE84      LDI	R24,0xE4
    00419 E092      LDI	R25,2
    0041A 2FE4      MOV	R30,R20
    0041B 27FF      CLR	R31
    0041C 0FE8      ADD	R30,R24
    0041D 1FF9      ADC	R31,R25
    0041E EF8F      LDI	R24,0xFF
    0041F 8380      ST	Z,R24
    00420 9543      INC	R20
    00421 344A      CPI	R20,0x4A
    00422 F3A8      BCS	0x0418
(0551)   
(0552) Uart0RxCounter=0; //清串口接受计数  
    00423 2422      CLR	R2
    00424 9220 02E3 STS	Uart0RxCounter,R2
(0553) 
(0554) for(t=0;t<len;t++)
    00426 2744      CLR	R20
    00427 C010      RJMP	0x0438
(0555) {
(0556) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    00428 9B5D      SBIS	0x0B,5
    00429 CFFE      RJMP	0x0428
(0557) for(i=0;i<200;i++);
    0042A 2766      CLR	R22
    0042B C001      RJMP	0x042D
    0042C 9563      INC	R22
    0042D 3C68      CPI	R22,0xC8
    0042E F3E8      BCS	0x042C
(0558) UDR0=Uart0TxData[t];  
    0042F E281      LDI	R24,0x21
    00430 E091      LDI	R25,1
    00431 2FE4      MOV	R30,R20
    00432 27FF      CLR	R31
    00433 0FE8      ADD	R30,R24
    00434 1FF9      ADC	R31,R25
    00435 8020      LD	R2,Z
    00436 B82C      OUT	0x0C,R2
    00437 9543      INC	R20
    00438 154E      CP	R20,R14
    00439 F370      BCS	0x0428
(0559) }
(0560)                   
(0561) if(s>0)
    0043A 20CC      TST	R12
    0043B F411      BNE	0x043E
    0043C 20DD      TST	R13
    0043D F139      BEQ	0x0465
(0562) {
(0563)  //超时设定
(0564) TimeOutFlag=0; //超时标志置0
    0043E 2422      CLR	R2
    0043F 9220 02CB STS	TimeOutFlag,R2
(0565) Timer0Counter=s; //8ms定时循环次数
    00441 92D0 032F STS	Timer0Counter+1,R13
    00443 92C0 032E STS	Timer0Counter,R12
(0566) TCNT0=0x06;//定时8ms
    00445 E086      LDI	R24,6
    00446 BF82      OUT	0x32,R24
(0567) TCCR0|=0x06;//256分频
    00447 B783      IN	R24,0x33
    00448 6086      ORI	R24,6
    00449 BF83      OUT	0x33,R24
(0568) TIFR|=0x01; //清定时器0中断标志
    0044A B786      IN	R24,0x36
    0044B 6081      ORI	R24,1
    0044C BF86      OUT	0x36,R24
(0569) TIMSK|=0x01;//使能定时器0中断
    0044D B787      IN	R24,0x37
    0044E 6081      ORI	R24,1
    0044F BF87      OUT	0x37,R24
(0570) t=UDR0;//开串口接收中断前读空缓存
    00450 B14C      IN	R20,0x0C
(0571) UCSR0B|=0x80;//开串口接收中断
    00451 9A57      SBI	0x0A,7
    00452 C008      RJMP	0x045B
(0572) while(TimeOutFlag==0)
(0573) {
(0574) CheckMotor(0);
    00453 2700      CLR	R16
    00454 2711      CLR	R17
    00455 D368      RCALL	_CheckMotor
(0575)  if(Uart0RxCounter>=cn)
    00456 9020 02E3 LDS	R2,Uart0RxCounter
    00458 142A      CP	R2,R10
    00459 F008      BCS	0x045B
(0576)    break;
    0045A C004      RJMP	0x045F
    0045B 9020 02CB LDS	R2,TimeOutFlag
    0045D 2022      TST	R2
    0045E F3A1      BEQ	0x0453
(0577) }
(0578) TIMSK&=0xFE;//关定时器0中断
    0045F B787      IN	R24,0x37
    00460 7F8E      ANDI	R24,0xFE
    00461 BF87      OUT	0x37,R24
(0579) UCSR0B&=0x7f;//关串口接收中断
    00462 B18A      IN	R24,0x0A
    00463 778F      ANDI	R24,0x7F
    00464 B98A      OUT	0x0A,R24
(0580) }
    00465 940C 2613 JMP	pop_xgsetF0FC
_Pwm_startup:
  c                    --> R20
  b                    --> R22
  motor                --> R16
    00467 934A      ST	-Y,R20
    00468 936A      ST	-Y,R22
(0581) }
(0582) 
(0583) 
(0584) void Pwm_startup(unsigned char motor)//电机软启动
(0585) {	unsigned char c,b;
(0586) 
(0587) 	if(motor==1)
    00469 3001      CPI	R16,1
    0046A F009      BEQ	0x046C
    0046B C140      RJMP	0x05AC
(0588) 	{  if(DIR1_PIN==0)
    0046C B389      IN	R24,0x19
    0046D 7084      ANDI	R24,4
    0046E 9586      LSR	R24
    0046F 9586      LSR	R24
    00470 F009      BEQ	0x0472
    00471 C09F      RJMP	0x0511
(0589) 	   {  PWM1_L	   
    00472 9AD1      SBI	0x1A,1
    00473 B38B      IN	R24,0x1B
    00474 7F8D      ANDI	R24,0xFD
    00475 BB8B      OUT	0x1B,R24
(0590) 		  BREAKE1_L 
    00476 9AD0      SBI	0x1A,0
    00477 B38B      IN	R24,0x1B
    00478 7F8E      ANDI	R24,0xFE
    00479 BB8B      OUT	0x1B,R24
(0591) 		  DELAY100
    0047A 2422      CLR	R2
    0047B 2433      CLR	R3
    0047C 9230 02B0 STS	Tt+1,R3
    0047E 9220 02AF STS	Tt,R2
    00480 C009      RJMP	0x048A
    00481 9180 02AF LDS	R24,Tt
    00483 9190 02B0 LDS	R25,Tt+1
    00485 9601      ADIW	R24,1
    00486 9390 02B0 STS	Tt+1,R25
    00488 9380 02AF STS	Tt,R24
    0048A 9180 02AF LDS	R24,Tt
    0048C 9190 02B0 LDS	R25,Tt+1
    0048E 328A      CPI	R24,0x2A
    0048F E0E0      LDI	R30,0
    00490 079E      CPC	R25,R30
    00491 F378      BCS	0x0481
(0592) 	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    00492 2766      CLR	R22
    00493 C037      RJMP	0x04CB
(0593) 		 {
(0594) 		  PWM1_H
    00494 9AD1      SBI	0x1A,1
    00495 9AD9      SBI	0x1B,1
(0595) 		  DELAY100
    00496 2422      CLR	R2
    00497 2433      CLR	R3
    00498 9230 02B0 STS	Tt+1,R3
    0049A 9220 02AF STS	Tt,R2
    0049C C009      RJMP	0x04A6
    0049D 9180 02AF LDS	R24,Tt
    0049F 9190 02B0 LDS	R25,Tt+1
    004A1 9601      ADIW	R24,1
    004A2 9390 02B0 STS	Tt+1,R25
    004A4 9380 02AF STS	Tt,R24
    004A6 9180 02AF LDS	R24,Tt
    004A8 9190 02B0 LDS	R25,Tt+1
    004AA 328A      CPI	R24,0x2A
    004AB E0E0      LDI	R30,0
    004AC 079E      CPC	R25,R30
    004AD F378      BCS	0x049D
(0596) 		  PWM1_L
    004AE 9AD1      SBI	0x1A,1
    004AF B38B      IN	R24,0x1B
    004B0 7F8D      ANDI	R24,0xFD
    004B1 BB8B      OUT	0x1B,R24
(0597) 		  DELAY100
    004B2 2422      CLR	R2
    004B3 2433      CLR	R3
    004B4 9230 02B0 STS	Tt+1,R3
    004B6 9220 02AF STS	Tt,R2
    004B8 C009      RJMP	0x04C2
    004B9 9180 02AF LDS	R24,Tt
    004BB 9190 02B0 LDS	R25,Tt+1
    004BD 9601      ADIW	R24,1
    004BE 9390 02B0 STS	Tt+1,R25
    004C0 9380 02AF STS	Tt,R24
    004C2 9180 02AF LDS	R24,Tt
    004C4 9190 02B0 LDS	R25,Tt+1
    004C6 328A      CPI	R24,0x2A
    004C7 E0E0      LDI	R30,0
    004C8 079E      CPC	R25,R30
    004C9 F378      BCS	0x04B9
    004CA 9563      INC	R22
    004CB 316E      CPI	R22,0x1E
    004CC F238      BCS	0x0494
(0598) 		 }
(0599)  
(0600)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    004CD 2744      CLR	R20
    004CE C03E      RJMP	0x050D
(0601) 		 {
(0602) 	       PWM1_L
    004CF 9AD1      SBI	0x1A,1
    004D0 B38B      IN	R24,0x1B
    004D1 7F8D      ANDI	R24,0xFD
    004D2 BB8B      OUT	0x1B,R24
(0603) 		   for(b=0;b<(200-c);b++)
    004D3 2766      CLR	R22
    004D4 C00C      RJMP	0x04E1
(0604) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    004D5 0000      NOP
    004D6 0000      NOP
    004D7 0000      NOP
    004D8 0000      NOP
    004D9 0000      NOP
    004DA 0000      NOP
    004DB 0000      NOP
    004DC 0000      NOP
    004DD 0000      NOP
    004DE 0000      NOP
    004DF 0000      NOP
    004E0 9563      INC	R22
    004E1 2E24      MOV	R2,R20
    004E2 2433      CLR	R3
    004E3 EC88      LDI	R24,0xC8
    004E4 E090      LDI	R25,0
    004E5 012C      MOVW	R4,R24
    004E6 1842      SUB	R4,R2
    004E7 0853      SBC	R5,R3
    004E8 2E26      MOV	R2,R22
    004E9 2433      CLR	R3
    004EA 1424      CP	R2,R4
    004EB 0435      CPC	R3,R5
    004EC F344      BLT	0x04D5
(0605) 			
(0606) 	       if(Motor1Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    004ED 9020 033E LDS	R2,Motor1Status
    004EF 9030 033F LDS	R3,Motor1Status+1
    004F1 FC25      SBRC	R2,5
    004F2 C003      RJMP	0x04F6
(0607) 		   {PWM1_H}
    004F3 9AD1      SBI	0x1A,1
    004F4 9AD9      SBI	0x1B,1
    004F5 C004      RJMP	0x04FA
(0608) 		   else 
(0609) 		   {PWM1_L}
    004F6 9AD1      SBI	0x1A,1
    004F7 B38B      IN	R24,0x1B
    004F8 7F8D      ANDI	R24,0xFD
    004F9 BB8B      OUT	0x1B,R24
(0610) 		   
(0611) 	       for(b=0;b<(c+50);b++)
    004FA 2766      CLR	R22
    004FB C00C      RJMP	0x0508
(0612) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    004FC 0000      NOP
    004FD 0000      NOP
    004FE 0000      NOP
    004FF 0000      NOP
    00500 0000      NOP
    00501 0000      NOP
    00502 0000      NOP
    00503 0000      NOP
    00504 0000      NOP
    00505 0000      NOP
    00506 0000      NOP
    00507 9563      INC	R22
    00508 2F84      MOV	R24,R20
    00509 5C8E      SUBI	R24,0xCE
    0050A 1768      CP	R22,R24
    0050B F380      BCS	0x04FC
    0050C 9543      INC	R20
    0050D 3C48      CPI	R20,0xC8
    0050E F408      BCC	0x0510
    0050F CFBF      RJMP	0x04CF
(0613) 		 }	
(0614) 	   }
    00510 C23B      RJMP	0x074C
(0615) 	   else
(0616) 	   {
(0617) 	      PWM1_H	   
    00511 9AD1      SBI	0x1A,1
    00512 9AD9      SBI	0x1B,1
(0618) 		  BREAKE1_L 
    00513 9AD0      SBI	0x1A,0
    00514 B38B      IN	R24,0x1B
    00515 7F8E      ANDI	R24,0xFE
    00516 BB8B      OUT	0x1B,R24
(0619) 		  DELAY100
    00517 2422      CLR	R2
    00518 2433      CLR	R3
    00519 9230 02B0 STS	Tt+1,R3
    0051B 9220 02AF STS	Tt,R2
    0051D C009      RJMP	0x0527
    0051E 9180 02AF LDS	R24,Tt
    00520 9190 02B0 LDS	R25,Tt+1
    00522 9601      ADIW	R24,1
    00523 9390 02B0 STS	Tt+1,R25
    00525 9380 02AF STS	Tt,R24
    00527 9180 02AF LDS	R24,Tt
    00529 9190 02B0 LDS	R25,Tt+1
    0052B 328A      CPI	R24,0x2A
    0052C E0E0      LDI	R30,0
    0052D 079E      CPC	R25,R30
    0052E F378      BCS	0x051E
(0620) 	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    0052F 2766      CLR	R22
    00530 C037      RJMP	0x0568
(0621) 		 {
(0622) 		  PWM1_L
    00531 9AD1      SBI	0x1A,1
    00532 B38B      IN	R24,0x1B
    00533 7F8D      ANDI	R24,0xFD
    00534 BB8B      OUT	0x1B,R24
(0623) 		  DELAY100
    00535 2422      CLR	R2
    00536 2433      CLR	R3
    00537 9230 02B0 STS	Tt+1,R3
    00539 9220 02AF STS	Tt,R2
    0053B C009      RJMP	0x0545
    0053C 9180 02AF LDS	R24,Tt
    0053E 9190 02B0 LDS	R25,Tt+1
    00540 9601      ADIW	R24,1
    00541 9390 02B0 STS	Tt+1,R25
    00543 9380 02AF STS	Tt,R24
    00545 9180 02AF LDS	R24,Tt
    00547 9190 02B0 LDS	R25,Tt+1
    00549 328A      CPI	R24,0x2A
    0054A E0E0      LDI	R30,0
    0054B 079E      CPC	R25,R30
    0054C F378      BCS	0x053C
(0624) 		  PWM1_H
    0054D 9AD1      SBI	0x1A,1
    0054E 9AD9      SBI	0x1B,1
(0625) 		  DELAY100
    0054F 2422      CLR	R2
    00550 2433      CLR	R3
    00551 9230 02B0 STS	Tt+1,R3
    00553 9220 02AF STS	Tt,R2
    00555 C009      RJMP	0x055F
    00556 9180 02AF LDS	R24,Tt
    00558 9190 02B0 LDS	R25,Tt+1
    0055A 9601      ADIW	R24,1
    0055B 9390 02B0 STS	Tt+1,R25
    0055D 9380 02AF STS	Tt,R24
    0055F 9180 02AF LDS	R24,Tt
    00561 9190 02B0 LDS	R25,Tt+1
    00563 328A      CPI	R24,0x2A
    00564 E0E0      LDI	R30,0
    00565 079E      CPC	R25,R30
    00566 F378      BCS	0x0556
    00567 9563      INC	R22
    00568 316E      CPI	R22,0x1E
    00569 F238      BCS	0x0531
(0626) 		 }
(0627)  
(0628)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    0056A 2744      CLR	R20
    0056B C03C      RJMP	0x05A8
(0629) 		 {
(0630) 	       PWM1_H
    0056C 9AD1      SBI	0x1A,1
    0056D 9AD9      SBI	0x1B,1
(0631) 		   for(b=0;b<(200-c);b++)
    0056E 2766      CLR	R22
    0056F C00C      RJMP	0x057C
(0632) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00570 0000      NOP
    00571 0000      NOP
    00572 0000      NOP
    00573 0000      NOP
    00574 0000      NOP
    00575 0000      NOP
    00576 0000      NOP
    00577 0000      NOP
    00578 0000      NOP
    00579 0000      NOP
    0057A 0000      NOP
    0057B 9563      INC	R22
    0057C 2E24      MOV	R2,R20
    0057D 2433      CLR	R3
    0057E EC88      LDI	R24,0xC8
    0057F E090      LDI	R25,0
    00580 012C      MOVW	R4,R24
    00581 1842      SUB	R4,R2
    00582 0853      SBC	R5,R3
    00583 2E26      MOV	R2,R22
    00584 2433      CLR	R3
    00585 1424      CP	R2,R4
    00586 0435      CPC	R3,R5
    00587 F344      BLT	0x0570
(0633) 			
(0634) 	       if(Motor1Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    00588 9020 033E LDS	R2,Motor1Status
    0058A 9030 033F LDS	R3,Motor1Status+1
    0058C FC25      SBRC	R2,5
    0058D C005      RJMP	0x0593
(0635) 		   {PWM1_L}
    0058E 9AD1      SBI	0x1A,1
    0058F B38B      IN	R24,0x1B
    00590 7F8D      ANDI	R24,0xFD
    00591 BB8B      OUT	0x1B,R24
    00592 C002      RJMP	0x0595
(0636) 		   else 
(0637) 		   {PWM1_H}
    00593 9AD1      SBI	0x1A,1
    00594 9AD9      SBI	0x1B,1
(0638) 		   
(0639) 	       for(b=0;b<(c+50);b++)
    00595 2766      CLR	R22
    00596 C00C      RJMP	0x05A3
(0640) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00597 0000      NOP
    00598 0000      NOP
    00599 0000      NOP
    0059A 0000      NOP
    0059B 0000      NOP
    0059C 0000      NOP
    0059D 0000      NOP
    0059E 0000      NOP
    0059F 0000      NOP
    005A0 0000      NOP
    005A1 0000      NOP
    005A2 9563      INC	R22
    005A3 2F84      MOV	R24,R20
    005A4 5C8E      SUBI	R24,0xCE
    005A5 1768      CP	R22,R24
    005A6 F380      BCS	0x0597
    005A7 9543      INC	R20
    005A8 3C48      CPI	R20,0xC8
    005A9 F408      BCC	0x05AB
    005AA CFC1      RJMP	0x056C
(0641) 		 }	
(0642) 	   }
(0643) 	} 
    005AB C1A0      RJMP	0x074C
(0644) 	else if(motor==2)
    005AC 3002      CPI	R16,2
    005AD F009      BEQ	0x05AF
    005AE C19D      RJMP	0x074C
(0645) 	{  
(0646) 	  if(DIR2_PIN==0)
    005AF 9900      SBIC	0x00,0
    005B0 C0CE      RJMP	0x067F
(0647) 	   { 
(0648) 	      PWM2_L	   
    005B1 9180 0061 LDS	R24,0x61
    005B3 6084      ORI	R24,4
    005B4 9380 0061 STS	0x61,R24
    005B6 9180 0062 LDS	R24,0x62
    005B8 7F8B      ANDI	R24,0xFB
    005B9 9380 0062 STS	0x62,R24
(0649) 		  BREAKE2_L 
    005BB 9180 0061 LDS	R24,0x61
    005BD 6082      ORI	R24,2
    005BE 9380 0061 STS	0x61,R24
    005C0 9180 0062 LDS	R24,0x62
    005C2 7F8D      ANDI	R24,0xFD
    005C3 9380 0062 STS	0x62,R24
(0650) 		  DELAY100
    005C5 2422      CLR	R2
    005C6 2433      CLR	R3
    005C7 9230 02B0 STS	Tt+1,R3
    005C9 9220 02AF STS	Tt,R2
    005CB C009      RJMP	0x05D5
    005CC 9180 02AF LDS	R24,Tt
    005CE 9190 02B0 LDS	R25,Tt+1
    005D0 9601      ADIW	R24,1
    005D1 9390 02B0 STS	Tt+1,R25
    005D3 9380 02AF STS	Tt,R24
    005D5 9180 02AF LDS	R24,Tt
    005D7 9190 02B0 LDS	R25,Tt+1
    005D9 328A      CPI	R24,0x2A
    005DA E0E0      LDI	R30,0
    005DB 079E      CPC	R25,R30
    005DC F378      BCS	0x05CC
(0651) 	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    005DD 2766      CLR	R22
    005DE C045      RJMP	0x0624
(0652) 		 {
(0653) 		  PWM2_H
    005DF 9180 0061 LDS	R24,0x61
    005E1 6084      ORI	R24,4
    005E2 9380 0061 STS	0x61,R24
    005E4 9180 0062 LDS	R24,0x62
    005E6 6084      ORI	R24,4
    005E7 9380 0062 STS	0x62,R24
(0654) 		  DELAY100
    005E9 2422      CLR	R2
    005EA 2433      CLR	R3
    005EB 9230 02B0 STS	Tt+1,R3
    005ED 9220 02AF STS	Tt,R2
    005EF C009      RJMP	0x05F9
    005F0 9180 02AF LDS	R24,Tt
    005F2 9190 02B0 LDS	R25,Tt+1
    005F4 9601      ADIW	R24,1
    005F5 9390 02B0 STS	Tt+1,R25
    005F7 9380 02AF STS	Tt,R24
    005F9 9180 02AF LDS	R24,Tt
    005FB 9190 02B0 LDS	R25,Tt+1
    005FD 328A      CPI	R24,0x2A
    005FE E0E0      LDI	R30,0
    005FF 079E      CPC	R25,R30
    00600 F378      BCS	0x05F0
(0655) 		  PWM2_L
    00601 9180 0061 LDS	R24,0x61
    00603 6084      ORI	R24,4
    00604 9380 0061 STS	0x61,R24
    00606 9180 0062 LDS	R24,0x62
    00608 7F8B      ANDI	R24,0xFB
    00609 9380 0062 STS	0x62,R24
(0656) 		  DELAY100
    0060B 2422      CLR	R2
    0060C 2433      CLR	R3
    0060D 9230 02B0 STS	Tt+1,R3
    0060F 9220 02AF STS	Tt,R2
    00611 C009      RJMP	0x061B
    00612 9180 02AF LDS	R24,Tt
    00614 9190 02B0 LDS	R25,Tt+1
    00616 9601      ADIW	R24,1
    00617 9390 02B0 STS	Tt+1,R25
    00619 9380 02AF STS	Tt,R24
    0061B 9180 02AF LDS	R24,Tt
    0061D 9190 02B0 LDS	R25,Tt+1
    0061F 328A      CPI	R24,0x2A
    00620 E0E0      LDI	R30,0
    00621 079E      CPC	R25,R30
    00622 F378      BCS	0x0612
    00623 9563      INC	R22
    00624 316E      CPI	R22,0x1E
    00625 F408      BCC	0x0627
    00626 CFB8      RJMP	0x05DF
(0657) 		 }
(0658)  
(0659)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    00627 2744      CLR	R20
    00628 C052      RJMP	0x067B
(0660) 		 {
(0661) 	       PWM2_L
    00629 9180 0061 LDS	R24,0x61
    0062B 6084      ORI	R24,4
    0062C 9380 0061 STS	0x61,R24
    0062E 9180 0062 LDS	R24,0x62
    00630 7F8B      ANDI	R24,0xFB
    00631 9380 0062 STS	0x62,R24
(0662) 		   for(b=0;b<(200-c);b++)
    00633 2766      CLR	R22
    00634 C00C      RJMP	0x0641
(0663) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00635 0000      NOP
    00636 0000      NOP
    00637 0000      NOP
    00638 0000      NOP
    00639 0000      NOP
    0063A 0000      NOP
    0063B 0000      NOP
    0063C 0000      NOP
    0063D 0000      NOP
    0063E 0000      NOP
    0063F 0000      NOP
    00640 9563      INC	R22
    00641 2E24      MOV	R2,R20
    00642 2433      CLR	R3
    00643 EC88      LDI	R24,0xC8
    00644 E090      LDI	R25,0
    00645 012C      MOVW	R4,R24
    00646 1842      SUB	R4,R2
    00647 0853      SBC	R5,R3
    00648 2E26      MOV	R2,R22
    00649 2433      CLR	R3
    0064A 1424      CP	R2,R4
    0064B 0435      CPC	R3,R5
    0064C F344      BLT	0x0635
(0664) 			
(0665) 	       if(Motor2Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    0064D 9020 033C LDS	R2,Motor2Status
    0064F 9030 033D LDS	R3,Motor2Status+1
    00651 FC25      SBRC	R2,5
    00652 C00B      RJMP	0x065E
(0666) 		   {PWM2_H}
    00653 9180 0061 LDS	R24,0x61
    00655 6084      ORI	R24,4
    00656 9380 0061 STS	0x61,R24
    00658 9180 0062 LDS	R24,0x62
    0065A 6084      ORI	R24,4
    0065B 9380 0062 STS	0x62,R24
    0065D C00A      RJMP	0x0668
(0667) 		   else 
(0668) 		   {PWM2_L}
    0065E 9180 0061 LDS	R24,0x61
    00660 6084      ORI	R24,4
    00661 9380 0061 STS	0x61,R24
    00663 9180 0062 LDS	R24,0x62
    00665 7F8B      ANDI	R24,0xFB
    00666 9380 0062 STS	0x62,R24
(0669) 		   
(0670) 	       for(b=0;b<(c+50);b++)
    00668 2766      CLR	R22
    00669 C00C      RJMP	0x0676
(0671) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    0066A 0000      NOP
    0066B 0000      NOP
    0066C 0000      NOP
    0066D 0000      NOP
    0066E 0000      NOP
    0066F 0000      NOP
    00670 0000      NOP
    00671 0000      NOP
    00672 0000      NOP
    00673 0000      NOP
    00674 0000      NOP
    00675 9563      INC	R22
    00676 2F84      MOV	R24,R20
    00677 5C8E      SUBI	R24,0xCE
    00678 1768      CP	R22,R24
    00679 F380      BCS	0x066A
    0067A 9543      INC	R20
    0067B 3C48      CPI	R20,0xC8
    0067C F408      BCC	0x067E
    0067D CFAB      RJMP	0x0629
(0672) 		 }	
(0673) 	   }
    0067E C0CD      RJMP	0x074C
(0674) 	   else
(0675) 	   {
(0676) 	      PWM2_H	   
    0067F 9180 0061 LDS	R24,0x61
    00681 6084      ORI	R24,4
    00682 9380 0061 STS	0x61,R24
    00684 9180 0062 LDS	R24,0x62
    00686 6084      ORI	R24,4
    00687 9380 0062 STS	0x62,R24
(0677) 		  BREAKE2_L 
    00689 9180 0061 LDS	R24,0x61
    0068B 6082      ORI	R24,2
    0068C 9380 0061 STS	0x61,R24
    0068E 9180 0062 LDS	R24,0x62
    00690 7F8D      ANDI	R24,0xFD
    00691 9380 0062 STS	0x62,R24
(0678) 		  DELAY100
    00693 2422      CLR	R2
    00694 2433      CLR	R3
    00695 9230 02B0 STS	Tt+1,R3
    00697 9220 02AF STS	Tt,R2
    00699 C009      RJMP	0x06A3
    0069A 9180 02AF LDS	R24,Tt
    0069C 9190 02B0 LDS	R25,Tt+1
    0069E 9601      ADIW	R24,1
    0069F 9390 02B0 STS	Tt+1,R25
    006A1 9380 02AF STS	Tt,R24
    006A3 9180 02AF LDS	R24,Tt
    006A5 9190 02B0 LDS	R25,Tt+1
    006A7 328A      CPI	R24,0x2A
    006A8 E0E0      LDI	R30,0
    006A9 079E      CPC	R25,R30
    006AA F378      BCS	0x069A
(0679) 	      for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    006AB 2766      CLR	R22
    006AC C045      RJMP	0x06F2
(0680) 		 {
(0681) 		  PWM2_L
    006AD 9180 0061 LDS	R24,0x61
    006AF 6084      ORI	R24,4
    006B0 9380 0061 STS	0x61,R24
    006B2 9180 0062 LDS	R24,0x62
    006B4 7F8B      ANDI	R24,0xFB
    006B5 9380 0062 STS	0x62,R24
(0682) 		  DELAY100
    006B7 2422      CLR	R2
    006B8 2433      CLR	R3
    006B9 9230 02B0 STS	Tt+1,R3
    006BB 9220 02AF STS	Tt,R2
    006BD C009      RJMP	0x06C7
    006BE 9180 02AF LDS	R24,Tt
    006C0 9190 02B0 LDS	R25,Tt+1
    006C2 9601      ADIW	R24,1
    006C3 9390 02B0 STS	Tt+1,R25
    006C5 9380 02AF STS	Tt,R24
    006C7 9180 02AF LDS	R24,Tt
    006C9 9190 02B0 LDS	R25,Tt+1
    006CB 328A      CPI	R24,0x2A
    006CC E0E0      LDI	R30,0
    006CD 079E      CPC	R25,R30
    006CE F378      BCS	0x06BE
(0683) 		  PWM2_H
    006CF 9180 0061 LDS	R24,0x61
    006D1 6084      ORI	R24,4
    006D2 9380 0061 STS	0x61,R24
    006D4 9180 0062 LDS	R24,0x62
    006D6 6084      ORI	R24,4
    006D7 9380 0062 STS	0x62,R24
(0684) 		  DELAY100
    006D9 2422      CLR	R2
    006DA 2433      CLR	R3
    006DB 9230 02B0 STS	Tt+1,R3
    006DD 9220 02AF STS	Tt,R2
    006DF C009      RJMP	0x06E9
    006E0 9180 02AF LDS	R24,Tt
    006E2 9190 02B0 LDS	R25,Tt+1
    006E4 9601      ADIW	R24,1
    006E5 9390 02B0 STS	Tt+1,R25
    006E7 9380 02AF STS	Tt,R24
    006E9 9180 02AF LDS	R24,Tt
    006EB 9190 02B0 LDS	R25,Tt+1
    006ED 328A      CPI	R24,0x2A
    006EE E0E0      LDI	R30,0
    006EF 079E      CPC	R25,R30
    006F0 F378      BCS	0x06E0
    006F1 9563      INC	R22
    006F2 316E      CPI	R22,0x1E
    006F3 F408      BCC	0x06F5
    006F4 CFB8      RJMP	0x06AD
(0685) 		 }
(0686)  
(0687)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    006F5 2744      CLR	R20
    006F6 C052      RJMP	0x0749
(0688) 		 {
(0689) 	       PWM2_H
    006F7 9180 0061 LDS	R24,0x61
    006F9 6084      ORI	R24,4
    006FA 9380 0061 STS	0x61,R24
    006FC 9180 0062 LDS	R24,0x62
    006FE 6084      ORI	R24,4
    006FF 9380 0062 STS	0x62,R24
(0690) 		   for(b=0;b<(200-c);b++)
    00701 2766      CLR	R22
    00702 C00C      RJMP	0x070F
(0691) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00703 0000      NOP
    00704 0000      NOP
    00705 0000      NOP
    00706 0000      NOP
    00707 0000      NOP
    00708 0000      NOP
    00709 0000      NOP
    0070A 0000      NOP
    0070B 0000      NOP
    0070C 0000      NOP
    0070D 0000      NOP
    0070E 9563      INC	R22
    0070F 2E24      MOV	R2,R20
    00710 2433      CLR	R3
    00711 EC88      LDI	R24,0xC8
    00712 E090      LDI	R25,0
    00713 012C      MOVW	R4,R24
    00714 1842      SUB	R4,R2
    00715 0853      SBC	R5,R3
    00716 2E26      MOV	R2,R22
    00717 2433      CLR	R3
    00718 1424      CP	R2,R4
    00719 0435      CPC	R3,R5
    0071A F344      BLT	0x0703
(0692) 			
(0693) 	       if(Motor2Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    0071B 9020 033C LDS	R2,Motor2Status
    0071D 9030 033D LDS	R3,Motor2Status+1
    0071F FC25      SBRC	R2,5
    00720 C00B      RJMP	0x072C
(0694) 		   {PWM2_L}
    00721 9180 0061 LDS	R24,0x61
    00723 6084      ORI	R24,4
    00724 9380 0061 STS	0x61,R24
    00726 9180 0062 LDS	R24,0x62
    00728 7F8B      ANDI	R24,0xFB
    00729 9380 0062 STS	0x62,R24
    0072B C00A      RJMP	0x0736
(0695) 		   else 
(0696) 		   {PWM2_H}
    0072C 9180 0061 LDS	R24,0x61
    0072E 6084      ORI	R24,4
    0072F 9380 0061 STS	0x61,R24
    00731 9180 0062 LDS	R24,0x62
    00733 6084      ORI	R24,4
    00734 9380 0062 STS	0x62,R24
(0697) 		   
(0698) 	       for(b=0;b<(c+50);b++)
    00736 2766      CLR	R22
    00737 C00C      RJMP	0x0744
(0699) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00738 0000      NOP
    00739 0000      NOP
    0073A 0000      NOP
    0073B 0000      NOP
    0073C 0000      NOP
    0073D 0000      NOP
    0073E 0000      NOP
    0073F 0000      NOP
    00740 0000      NOP
    00741 0000      NOP
    00742 0000      NOP
    00743 9563      INC	R22
    00744 2F84      MOV	R24,R20
    00745 5C8E      SUBI	R24,0xCE
    00746 1768      CP	R22,R24
    00747 F380      BCS	0x0738
    00748 9543      INC	R20
    00749 3C48      CPI	R20,0xC8
    0074A F408      BCC	0x074C
    0074B CFAB      RJMP	0x06F7
(0700) 		 }	
(0701) 	   }
(0702) 	}
    0074C 9169      LD	R22,Y+
    0074D 9149      LD	R20,Y+
    0074E 9508      RET
_SampleADC:
  adcl                 --> Y,+0
  c                    --> R10
  ADdata               --> R12
  ch                   --> R10
    0074F 940E 2637 CALL	push_xgsetF03C
    00751 2EA0      MOV	R10,R16
    00752 9724      SBIW	R28,4
(0703) }
(0704) 
(0705)    
(0706) unsigned char SampleADC(unsigned char ch)//耗时约5ms
(0707) {     unsigned char c;
(0708)       unsigned long adcl;
(0709) 	  unsigned int ADdata;
(0710) 
(0711) 	  ADMUX  = (0xc0+ch);//片内2.56V基准，选择单端输入通道 
    00753 2D8A      MOV	R24,R10
    00754 5480      SUBI	R24,0x40
    00755 B987      OUT	0x07,R24
(0712) 	  ADCSRA =0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    00756 EC83      LDI	R24,0xC3
    00757 B986      OUT	0x06,R24
(0713)    
(0714) 	  //第一次采样值不要
(0715) 	  for(ADdata=0;ADdata<100;ADdata++);
    00758 24CC      CLR	R12
    00759 24DD      CLR	R13
    0075A C003      RJMP	0x075E
    0075B 01C6      MOVW	R24,R12
    0075C 9601      ADIW	R24,1
    0075D 016C      MOVW	R12,R24
    0075E 01C6      MOVW	R24,R12
    0075F 3684      CPI	R24,0x64
    00760 E0E0      LDI	R30,0
    00761 079E      CPC	R25,R30
    00762 F3C0      BCS	0x075B
(0716) 	  while((ADCSRA&0x40)==0x40);//等待转换完成
    00763 B186      IN	R24,0x06
    00764 7480      ANDI	R24,0x40
    00765 3480      CPI	R24,0x40
    00766 F3E1      BEQ	0x0763
(0717) 	  ADdata=ADCL;
    00767 B0C4      IN	R12,0x04
    00768 24DD      CLR	R13
(0718) 	  ADdata=ADCH;  
    00769 B0C5      IN	R12,0x05
    0076A 24DD      CLR	R13
(0719)   
(0720) 	  adcl=0;
    0076B E080      LDI	R24,0
    0076C 8388      ST	Y,R24
    0076D 8389      STD	Y+1,R24
    0076E 838A      STD	Y+2,R24
    0076F 838B      STD	Y+3,R24
(0721) 	  for(c=0;c<32;c++)//32次值取平均
    00770 24AA      CLR	R10
    00771 C02C      RJMP	0x079E
(0722) 	  {
(0723) 	   ADCSRA = 0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    00772 EC83      LDI	R24,0xC3
    00773 B986      OUT	0x06,R24
(0724) 	   for(ADdata=0;ADdata<100;ADdata++);
    00774 24CC      CLR	R12
    00775 24DD      CLR	R13
    00776 C003      RJMP	0x077A
    00777 01C6      MOVW	R24,R12
    00778 9601      ADIW	R24,1
    00779 016C      MOVW	R12,R24
    0077A 01C6      MOVW	R24,R12
    0077B 3684      CPI	R24,0x64
    0077C E0E0      LDI	R30,0
    0077D 079E      CPC	R25,R30
    0077E F3C0      BCS	0x0777
(0725) 	   while((ADCSRA&0x40)==0x40);//等待转换完成	
    0077F B186      IN	R24,0x06
    00780 7480      ANDI	R24,0x40
    00781 3480      CPI	R24,0x40
    00782 F3E1      BEQ	0x077F
(0726) 	   ADdata=ADCL;   
    00783 B0C4      IN	R12,0x04
    00784 24DD      CLR	R13
(0727) 	   ADdata|=(ADCH<<8);
    00785 B025      IN	R2,0x05
    00786 2433      CLR	R3
    00787 2C32      MOV	R3,R2
    00788 2422      CLR	R2
    00789 28C2      OR	R12,R2
    0078A 28D3      OR	R13,R3
(0728) 	   ADdata&=0x03ff;//10位有效转换结果
    0078B 01C6      MOVW	R24,R12
    0078C 7093      ANDI	R25,3
    0078D 016C      MOVW	R12,R24
(0729) 	   adcl+=ADdata;
    0078E 011C      MOVW	R2,R24
    0078F 2444      CLR	R4
    00790 2455      CLR	R5
    00791 8068      LD	R6,Y
    00792 8079      LDD	R7,Y+1
    00793 808A      LDD	R8,Y+2
    00794 809B      LDD	R9,Y+3
    00795 0C62      ADD	R6,R2
    00796 1C73      ADC	R7,R3
    00797 1C84      ADC	R8,R4
    00798 1C95      ADC	R9,R5
    00799 8268      ST	Y,R6
    0079A 8279      STD	Y+1,R7
    0079B 828A      STD	Y+2,R8
    0079C 829B      STD	Y+3,R9
    0079D 94A3      INC	R10
    0079E 2D8A      MOV	R24,R10
    0079F 3280      CPI	R24,0x20
    007A0 F288      BCS	0x0772
(0730) 	  }
(0731) 
(0732) 	  adcl>>=7;//除以32，再除以4，相当于8位AD
    007A1 E087      LDI	R24,7
    007A2 E090      LDI	R25,0
    007A3 8108      LD	R16,Y
    007A4 8119      LDD	R17,Y+1
    007A5 812A      LDD	R18,Y+2
    007A6 813B      LDD	R19,Y+3
    007A7 938A      ST	-Y,R24
    007A8 940E 2665 CALL	lsr32
    007AA 8308      ST	Y,R16
    007AB 8319      STD	Y+1,R17
    007AC 832A      STD	Y+2,R18
    007AD 833B      STD	Y+3,R19
(0733) 	  return (adcl&0x000000ff);//取8位有效位
    007AE EF4F      LDI	R20,0xFF
    007AF E050      LDI	R21,0
    007B0 E060      LDI	R22,0
    007B1 E070      LDI	R23,0
    007B2 8028      LD	R2,Y
    007B3 8039      LDD	R3,Y+1
    007B4 804A      LDD	R4,Y+2
    007B5 805B      LDD	R5,Y+3
    007B6 2224      AND	R2,R20
    007B7 2235      AND	R3,R21
    007B8 2246      AND	R4,R22
    007B9 2257      AND	R5,R23
    007BA 2D02      MOV	R16,R2
    007BB 9624      ADIW	R28,4
    007BC 940C 2640 JMP	pop_xgsetF03C
_CheckMotor:
  n                    --> R12
  f                    --> Y,+0
  a                    --> R12
  t                    --> R10
    007BE 940E 2637 CALL	push_xgsetF03C
    007C0 0158      MOVW	R10,R16
    007C1 9724      SBIW	R28,4
(0734) }
(0735) 
(0736) void CheckMotor(unsigned int t)//电机不转时耗时5us，最大定时8388ms
(0737) {   
(0738)     float f;
(0739) 	unsigned char a;
(0740)     unsigned int n;
(0741)     TCCR1B = 0x00; //stop
    007C2 2422      CLR	R2
    007C3 BC2E      OUT	0x2E,R2
(0742) 	if(t>8388)
    007C4 EC84      LDI	R24,0xC4
    007C5 E290      LDI	R25,0x20
    007C6 158A      CP	R24,R10
    007C7 059B      CPC	R25,R11
    007C8 F408      BCC	0x07CA
(0743) 	   t=8388;
    007C9 015C      MOVW	R10,R24
(0744) 	f=t;
    007CA 0185      MOVW	R16,R10
    007CB 940E 26A9 CALL	uint2fp
    007CD 8308      ST	Y,R16
    007CE 8319      STD	Y+1,R17
    007CF 832A      STD	Y+2,R18
    007D0 833B      STD	Y+3,R19
(0745) 	f*=7.8125;
    007D1 E90C      LDI	R16,0x9C
    007D2 E010      LDI	R17,0
    007D3 940E 25EF CALL	elpm32
    007D5 01CE      MOVW	R24,R28
    007D6 939A      ST	-Y,R25
    007D7 938A      ST	-Y,R24
    007D8 940E 2846 CALL	fpmule1
    007DA 8308      ST	Y,R16
    007DB 8319      STD	Y+1,R17
    007DC 832A      STD	Y+2,R18
    007DD 833B      STD	Y+3,R19
(0746) 	n=f;
    007DE 8108      LD	R16,Y
    007DF 8119      LDD	R17,Y+1
    007E0 812A      LDD	R18,Y+2
    007E1 813B      LDD	R19,Y+3
    007E2 940E 2677 CALL	fpint
    007E4 0168      MOVW	R12,R16
(0747)     TCNT1 = 65535-n;  
    007E5 0116      MOVW	R2,R12
    007E6 2444      CLR	R4
    007E7 2455      CLR	R5
    007E8 EF4F      LDI	R20,0xFF
    007E9 EF5F      LDI	R21,0xFF
    007EA E060      LDI	R22,0
    007EB E070      LDI	R23,0
    007EC 1942      SUB	R20,R2
    007ED 0953      SBC	R21,R3
    007EE 0964      SBC	R22,R4
    007EF 0975      SBC	R23,R5
    007F0 BD5D      OUT	0x2D,R21
    007F1 BD4C      OUT	0x2C,R20
(0748) 	TIFR|=0x04; //清定时器1中断标志 
    007F2 B786      IN	R24,0x36
    007F3 6084      ORI	R24,4
    007F4 BF86      OUT	0x36,R24
(0749)  	TCCR1B = 0x05; //1024分频
    007F5 E085      LDI	R24,5
    007F6 BD8E      OUT	0x2E,R24
    007F7 C1DF      RJMP	0x09D7
(0750) 	
(0751)     while((TIFR&0x04)==0x00)//定时中断到来前一直采样监测电流
(0752)    {   
(0753)     if( (Motor1Run_P) || (Motor1Run_N) )//收放电机运行时才实时检测电流，否则电流保存最后一次的测试值
    007F8 B389      IN	R24,0x19
    007F9 7082      ANDI	R24,2
    007FA 9586      LSR	R24
    007FB F431      BNE	0x0802
    007FC B389      IN	R24,0x19
    007FD 7084      ANDI	R24,4
    007FE 9586      LSR	R24
    007FF 9586      LSR	R24
    00800 3081      CPI	R24,1
    00801 F061      BEQ	0x080E
    00802 B389      IN	R24,0x19
    00803 7082      ANDI	R24,2
    00804 9586      LSR	R24
    00805 3081      CPI	R24,1
    00806 F009      BEQ	0x0808
    00807 C0BF      RJMP	0x08C7
    00808 B389      IN	R24,0x19
    00809 7084      ANDI	R24,4
    0080A 9586      LSR	R24
    0080B 9586      LSR	R24
    0080C F009      BEQ	0x080E
    0080D C0B9      RJMP	0x08C7
(0754)     {
(0755) 	  a=SampleADC(7);
    0080E E007      LDI	R16,7
    0080F DF3F      RCALL	_SampleADC
    00810 2EC0      MOV	R12,R16
(0756) 	  
(0757)       if(a>Motor1Thr)//过流关电机
    00811 9020 0339 LDS	R2,Motor1Thr
    00813 2433      CLR	R3
    00814 2C4C      MOV	R4,R12
    00815 2455      CLR	R5
    00816 1424      CP	R2,R4
    00817 0435      CPC	R3,R5
    00818 F5DC      BGE	0x0854
(0758)       {
(0759) 	   MOTORSTOP//关电机   
    00819 9AD0      SBI	0x1A,0
    0081A 9AD8      SBI	0x1B,0
    0081B 9180 0061 LDS	R24,0x61
    0081D 6082      ORI	R24,2
    0081E 9380 0061 STS	0x61,R24
    00820 9180 0062 LDS	R24,0x62
    00822 6082      ORI	R24,2
    00823 9380 0062 STS	0x62,R24
    00825 9ABF      SBI	0x17,7
    00826 B388      IN	R24,0x18
    00827 778F      ANDI	R24,0x7F
    00828 BB88      OUT	0x18,R24
    00829 9AD2      SBI	0x1A,2
    0082A B38B      IN	R24,0x1B
    0082B 7F8B      ANDI	R24,0xFB
    0082C BB8B      OUT	0x1B,R24
    0082D 9AD1      SBI	0x1A,1
    0082E B38B      IN	R24,0x1B
    0082F 7F8D      ANDI	R24,0xFD
    00830 BB8B      OUT	0x1B,R24
    00831 9180 0061 LDS	R24,0x61
    00833 6081      ORI	R24,1
    00834 9380 0061 STS	0x61,R24
    00836 9180 0062 LDS	R24,0x62
    00838 7F8E      ANDI	R24,0xFE
    00839 9380 0062 STS	0x62,R24
    0083B 9180 0061 LDS	R24,0x61
    0083D 6084      ORI	R24,4
    0083E 9380 0061 STS	0x61,R24
    00840 9180 0062 LDS	R24,0x62
    00842 7F8B      ANDI	R24,0xFB
    00843 9380 0062 STS	0x62,R24
(0760)        Motor1Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
    00845 9180 033E LDS	R24,Motor1Status
    00847 9190 033F LDS	R25,Motor1Status+1
    00849 6180      ORI	R24,0x10
    0084A 9390 033F STS	Motor1Status+1,R25
    0084C 9380 033E STS	Motor1Status,R24
(0761) 	   Motor1Status.s.RUN=0;//停止状态
    0084E 7F8E      ANDI	R24,0xFE
    0084F 9390 033F STS	Motor1Status+1,R25
    00851 9380 033E STS	Motor1Status,R24
(0762) 	  }
    00853 C03E      RJMP	0x0892
(0763) 	  else if(a<MotorIdelCur)//断路关电机 
    00854 9020 0336 LDS	R2,MotorIdelCur
    00856 14C2      CP	R12,R2
    00857 F5D0      BCC	0x0892
(0764) 	  {   
(0765) 	   MOTORSTOP//关电机
    00858 9AD0      SBI	0x1A,0
    00859 9AD8      SBI	0x1B,0
    0085A 9180 0061 LDS	R24,0x61
    0085C 6082      ORI	R24,2
    0085D 9380 0061 STS	0x61,R24
    0085F 9180 0062 LDS	R24,0x62
    00861 6082      ORI	R24,2
    00862 9380 0062 STS	0x62,R24
    00864 9ABF      SBI	0x17,7
    00865 B388      IN	R24,0x18
    00866 778F      ANDI	R24,0x7F
    00867 BB88      OUT	0x18,R24
    00868 9AD2      SBI	0x1A,2
    00869 B38B      IN	R24,0x1B
    0086A 7F8B      ANDI	R24,0xFB
    0086B BB8B      OUT	0x1B,R24
    0086C 9AD1      SBI	0x1A,1
    0086D B38B      IN	R24,0x1B
    0086E 7F8D      ANDI	R24,0xFD
    0086F BB8B      OUT	0x1B,R24
    00870 9180 0061 LDS	R24,0x61
    00872 6081      ORI	R24,1
    00873 9380 0061 STS	0x61,R24
    00875 9180 0062 LDS	R24,0x62
    00877 7F8E      ANDI	R24,0xFE
    00878 9380 0062 STS	0x62,R24
    0087A 9180 0061 LDS	R24,0x61
    0087C 6084      ORI	R24,4
    0087D 9380 0061 STS	0x61,R24
    0087F 9180 0062 LDS	R24,0x62
    00881 7F8B      ANDI	R24,0xFB
    00882 9380 0062 STS	0x62,R24
(0766)        Motor1Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
    00884 9180 033E LDS	R24,Motor1Status
    00886 9190 033F LDS	R25,Motor1Status+1
    00888 6084      ORI	R24,4
    00889 9390 033F STS	Motor1Status+1,R25
    0088B 9380 033E STS	Motor1Status,R24
(0767) 	   Motor1Status.s.RUN=0;//停止状态
    0088D 7F8E      ANDI	R24,0xFE
    0088E 9390 033F STS	Motor1Status+1,R25
    00890 9380 033E STS	Motor1Status,R24
(0768) 	  }
(0769) 	
(0770) 	 Motor1Status.s.RUN=1;//运行状态
    00892 9180 033E LDS	R24,Motor1Status
    00894 9190 033F LDS	R25,Motor1Status+1
    00896 6081      ORI	R24,1
    00897 9390 033F STS	Motor1Status+1,R25
    00899 9380 033E STS	Motor1Status,R24
(0771) 	 
(0772) 	 f=a;
    0089B 2D0C      MOV	R16,R12
    0089C 2711      CLR	R17
    0089D 940E 26AB CALL	int2fp
    0089F 8308      ST	Y,R16
    008A0 8319      STD	Y+1,R17
    008A1 832A      STD	Y+2,R18
    008A2 833B      STD	Y+3,R19
(0773) 	 f*=1.042;
    008A3 E908      LDI	R16,0x98
    008A4 E010      LDI	R17,0
    008A5 940E 25EF CALL	elpm32
    008A7 01CE      MOVW	R24,R28
    008A8 939A      ST	-Y,R25
    008A9 938A      ST	-Y,R24
    008AA 940E 2846 CALL	fpmule1
    008AC 8308      ST	Y,R16
    008AD 8319      STD	Y+1,R17
    008AE 832A      STD	Y+2,R18
    008AF 833B      STD	Y+3,R19
(0774) 	 Motor1Status.s.ThisCurrent=f;
    008B0 8108      LD	R16,Y
    008B1 8119      LDD	R17,Y+1
    008B2 812A      LDD	R18,Y+2
    008B3 813B      LDD	R19,Y+3
    008B4 940E 2677 CALL	fpint
    008B6 01C8      MOVW	R24,R16
    008B7 7090      ANDI	R25,0
    008B8 2F98      MOV	R25,R24
    008B9 2788      CLR	R24
    008BA 7080      ANDI	R24,0
    008BB 91E0 033E LDS	R30,Motor1Status
    008BD 91F0 033F LDS	R31,Motor1Status+1
    008BF 70F0      ANDI	R31,0
    008C0 2BE8      OR	R30,R24
    008C1 2BF9      OR	R31,R25
    008C2 93F0 033F STS	Motor1Status+1,R31
    008C4 93E0 033E STS	Motor1Status,R30
(0775)     }
    008C6 C009      RJMP	0x08D0
(0776)     else
(0777) 	{
(0778) 	 Motor1Status.s.RUN=0;//停止状态
    008C7 9180 033E LDS	R24,Motor1Status
    008C9 9190 033F LDS	R25,Motor1Status+1
    008CB 7F8E      ANDI	R24,0xFE
    008CC 9390 033F STS	Motor1Status+1,R25
    008CE 9380 033E STS	Motor1Status,R24
(0779) 	}
(0780) 	 Motor1Status.s.DIR=DIR1_PIN;
    008D0 B389      IN	R24,0x19
    008D1 2799      CLR	R25
    008D2 7084      ANDI	R24,4
    008D3 7090      ANDI	R25,0
    008D4 9595      ASR	R25
    008D5 9587      ROR	R24
    008D6 9595      ASR	R25
    008D7 9587      ROR	R24
    008D8 7081      ANDI	R24,1
    008D9 7090      ANDI	R25,0
    008DA 0F88      LSL	R24
    008DB 1F99      ROL	R25
    008DC 7082      ANDI	R24,2
    008DD 7090      ANDI	R25,0
    008DE 91E0 033E LDS	R30,Motor1Status
    008E0 91F0 033F LDS	R31,Motor1Status+1
    008E2 7FED      ANDI	R30,0xFD
    008E3 2BE8      OR	R30,R24
    008E4 2BF9      OR	R31,R25
    008E5 93F0 033F STS	Motor1Status+1,R31
    008E7 93E0 033E STS	Motor1Status,R30
(0781) 	 
(0782) 	  	   
(0783)     if( (Motor2Run_P) || (Motor2Run_N) )//调节电机运行时才实时检测电流，否则电流保存最后一次的测试值
    008E9 B180      IN	R24,0x00
    008EA 7084      ANDI	R24,4
    008EB 9586      LSR	R24
    008EC 9586      LSR	R24
    008ED F421      BNE	0x08F2
    008EE B180      IN	R24,0x00
    008EF 7081      ANDI	R24,1
    008F0 3081      CPI	R24,1
    008F1 F049      BEQ	0x08FB
    008F2 B180      IN	R24,0x00
    008F3 7084      ANDI	R24,4
    008F4 9586      LSR	R24
    008F5 9586      LSR	R24
    008F6 3081      CPI	R24,1
    008F7 F009      BEQ	0x08F9
    008F8 C0BB      RJMP	0x09B4
    008F9 9900      SBIC	0x00,0
    008FA C0B9      RJMP	0x09B4
(0784)     {
(0785) 	 a=SampleADC(6);	
    008FB E006      LDI	R16,6
    008FC DE52      RCALL	_SampleADC
    008FD 2EC0      MOV	R12,R16
(0786) 	
(0787)      if(a>Motor2Thr)//过流关电机
    008FE 9020 0338 LDS	R2,Motor2Thr
    00900 2433      CLR	R3
    00901 2C4C      MOV	R4,R12
    00902 2455      CLR	R5
    00903 1424      CP	R2,R4
    00904 0435      CPC	R3,R5
    00905 F5DC      BGE	0x0941
(0788)      {
(0789) 	   MOTORSTOP//关电机
    00906 9AD0      SBI	0x1A,0
    00907 9AD8      SBI	0x1B,0
    00908 9180 0061 LDS	R24,0x61
    0090A 6082      ORI	R24,2
    0090B 9380 0061 STS	0x61,R24
    0090D 9180 0062 LDS	R24,0x62
    0090F 6082      ORI	R24,2
    00910 9380 0062 STS	0x62,R24
    00912 9ABF      SBI	0x17,7
    00913 B388      IN	R24,0x18
    00914 778F      ANDI	R24,0x7F
    00915 BB88      OUT	0x18,R24
    00916 9AD2      SBI	0x1A,2
    00917 B38B      IN	R24,0x1B
    00918 7F8B      ANDI	R24,0xFB
    00919 BB8B      OUT	0x1B,R24
    0091A 9AD1      SBI	0x1A,1
    0091B B38B      IN	R24,0x1B
    0091C 7F8D      ANDI	R24,0xFD
    0091D BB8B      OUT	0x1B,R24
    0091E 9180 0061 LDS	R24,0x61
    00920 6081      ORI	R24,1
    00921 9380 0061 STS	0x61,R24
    00923 9180 0062 LDS	R24,0x62
    00925 7F8E      ANDI	R24,0xFE
    00926 9380 0062 STS	0x62,R24
    00928 9180 0061 LDS	R24,0x61
    0092A 6084      ORI	R24,4
    0092B 9380 0061 STS	0x61,R24
    0092D 9180 0062 LDS	R24,0x62
    0092F 7F8B      ANDI	R24,0xFB
    00930 9380 0062 STS	0x62,R24
(0790)        Motor2Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
    00932 9180 033C LDS	R24,Motor2Status
    00934 9190 033D LDS	R25,Motor2Status+1
    00936 6180      ORI	R24,0x10
    00937 9390 033D STS	Motor2Status+1,R25
    00939 9380 033C STS	Motor2Status,R24
(0791) 	   Motor2Status.s.RUN=0;//停止状态
    0093B 7F8E      ANDI	R24,0xFE
    0093C 9390 033D STS	Motor2Status+1,R25
    0093E 9380 033C STS	Motor2Status,R24
(0792) 	 } 
    00940 C03E      RJMP	0x097F
(0793) 	 else if(a<MotorIdelCur) //断路关电机，电流小于26mA认为是断路
    00941 9020 0336 LDS	R2,MotorIdelCur
    00943 14C2      CP	R12,R2
    00944 F5D0      BCC	0x097F
(0794) 	 {
(0795) 	   MOTORSTOP//关电机
    00945 9AD0      SBI	0x1A,0
    00946 9AD8      SBI	0x1B,0
    00947 9180 0061 LDS	R24,0x61
    00949 6082      ORI	R24,2
    0094A 9380 0061 STS	0x61,R24
    0094C 9180 0062 LDS	R24,0x62
    0094E 6082      ORI	R24,2
    0094F 9380 0062 STS	0x62,R24
    00951 9ABF      SBI	0x17,7
    00952 B388      IN	R24,0x18
    00953 778F      ANDI	R24,0x7F
    00954 BB88      OUT	0x18,R24
    00955 9AD2      SBI	0x1A,2
    00956 B38B      IN	R24,0x1B
    00957 7F8B      ANDI	R24,0xFB
    00958 BB8B      OUT	0x1B,R24
    00959 9AD1      SBI	0x1A,1
    0095A B38B      IN	R24,0x1B
    0095B 7F8D      ANDI	R24,0xFD
    0095C BB8B      OUT	0x1B,R24
    0095D 9180 0061 LDS	R24,0x61
    0095F 6081      ORI	R24,1
    00960 9380 0061 STS	0x61,R24
    00962 9180 0062 LDS	R24,0x62
    00964 7F8E      ANDI	R24,0xFE
    00965 9380 0062 STS	0x62,R24
    00967 9180 0061 LDS	R24,0x61
    00969 6084      ORI	R24,4
    0096A 9380 0061 STS	0x61,R24
    0096C 9180 0062 LDS	R24,0x62
    0096E 7F8B      ANDI	R24,0xFB
    0096F 9380 0062 STS	0x62,R24
(0796)        Motor2Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
    00971 9180 033C LDS	R24,Motor2Status
    00973 9190 033D LDS	R25,Motor2Status+1
    00975 6084      ORI	R24,4
    00976 9390 033D STS	Motor2Status+1,R25
    00978 9380 033C STS	Motor2Status,R24
(0797) 	   Motor2Status.s.RUN=0;//停止状态
    0097A 7F8E      ANDI	R24,0xFE
    0097B 9390 033D STS	Motor2Status+1,R25
    0097D 9380 033C STS	Motor2Status,R24
(0798) 	 }
(0799) 	 
(0800) 	 Motor2Status.s.RUN=1;//运行状态
    0097F 9180 033C LDS	R24,Motor2Status
    00981 9190 033D LDS	R25,Motor2Status+1
    00983 6081      ORI	R24,1
    00984 9390 033D STS	Motor2Status+1,R25
    00986 9380 033C STS	Motor2Status,R24
(0801) 	 
(0802) 	 f=a;
    00988 2D0C      MOV	R16,R12
    00989 2711      CLR	R17
    0098A 940E 26AB CALL	int2fp
    0098C 8308      ST	Y,R16
    0098D 8319      STD	Y+1,R17
    0098E 832A      STD	Y+2,R18
    0098F 833B      STD	Y+3,R19
(0803) 	 f*=1.042;
    00990 E908      LDI	R16,0x98
    00991 E010      LDI	R17,0
    00992 940E 25EF CALL	elpm32
    00994 01CE      MOVW	R24,R28
    00995 939A      ST	-Y,R25
    00996 938A      ST	-Y,R24
    00997 940E 2846 CALL	fpmule1
    00999 8308      ST	Y,R16
    0099A 8319      STD	Y+1,R17
    0099B 832A      STD	Y+2,R18
    0099C 833B      STD	Y+3,R19
(0804) 	 Motor2Status.s.ThisCurrent=f;
    0099D 8108      LD	R16,Y
    0099E 8119      LDD	R17,Y+1
    0099F 812A      LDD	R18,Y+2
    009A0 813B      LDD	R19,Y+3
    009A1 940E 2677 CALL	fpint
    009A3 01C8      MOVW	R24,R16
    009A4 7090      ANDI	R25,0
    009A5 2F98      MOV	R25,R24
    009A6 2788      CLR	R24
    009A7 7080      ANDI	R24,0
    009A8 91E0 033C LDS	R30,Motor2Status
    009AA 91F0 033D LDS	R31,Motor2Status+1
    009AC 70F0      ANDI	R31,0
    009AD 2BE8      OR	R30,R24
    009AE 2BF9      OR	R31,R25
    009AF 93F0 033D STS	Motor2Status+1,R31
    009B1 93E0 033C STS	Motor2Status,R30
(0805)     }
    009B3 C009      RJMP	0x09BD
(0806) 	else
(0807) 	{
(0808) 	 Motor2Status.s.RUN=0;//停止状态
    009B4 9180 033C LDS	R24,Motor2Status
    009B6 9190 033D LDS	R25,Motor2Status+1
    009B8 7F8E      ANDI	R24,0xFE
    009B9 9390 033D STS	Motor2Status+1,R25
    009BB 9380 033C STS	Motor2Status,R24
(0809) 	}
(0810)      Motor2Status.s.DIR=DIR2_PIN;  
    009BD B180      IN	R24,0x00
    009BE 2799      CLR	R25
    009BF 7081      ANDI	R24,1
    009C0 7090      ANDI	R25,0
    009C1 7081      ANDI	R24,1
    009C2 7090      ANDI	R25,0
    009C3 0F88      LSL	R24
    009C4 1F99      ROL	R25
    009C5 7082      ANDI	R24,2
    009C6 7090      ANDI	R25,0
    009C7 91E0 033C LDS	R30,Motor2Status
    009C9 91F0 033D LDS	R31,Motor2Status+1
    009CB 7FED      ANDI	R30,0xFD
    009CC 2BE8      OR	R30,R24
    009CD 2BF9      OR	R31,R25
    009CE 93F0 033D STS	Motor2Status+1,R31
    009D0 93E0 033C STS	Motor2Status,R30
(0811) 	
(0812)     if(t==0){break;}//不定时则检测一次电机状态后直接跳出
    009D2 20AA      TST	R10
    009D3 F419      BNE	0x09D7
    009D4 20BB      TST	R11
    009D5 F409      BNE	0x09D7
    009D6 C003      RJMP	0x09DA
    009D7 B626      IN	R2,0x36
    009D8 FE22      SBRS	R2,2
    009D9 CE1E      RJMP	0x07F8
(0813)    } 
(0814)    
(0815)    TCCR1B = 0x00; //stop
    009DA 2422      CLR	R2
    009DB BC2E      OUT	0x2E,R2
    009DC 9624      ADIW	R28,4
    009DD 940C 2640 JMP	pop_xgsetF03C
(0816) }
(0817) 
(0818) 
(0819) void Start(void)
(0820) {
(0821)  InitialIO();
_Start:
    009DF D892      RCALL	_InitialIO
(0822)  uart0_init();
    009E0 D931      RCALL	_uart0_init
(0823)  
(0824)  MOTORSTOP//关电机
    009E1 9AD0      SBI	0x1A,0
    009E2 9AD8      SBI	0x1B,0
    009E3 9180 0061 LDS	R24,0x61
    009E5 6082      ORI	R24,2
    009E6 9380 0061 STS	0x61,R24
    009E8 9180 0062 LDS	R24,0x62
    009EA 6082      ORI	R24,2
    009EB 9380 0062 STS	0x62,R24
    009ED 9ABF      SBI	0x17,7
    009EE B388      IN	R24,0x18
    009EF 778F      ANDI	R24,0x7F
    009F0 BB88      OUT	0x18,R24
    009F1 9AD2      SBI	0x1A,2
    009F2 B38B      IN	R24,0x1B
    009F3 7F8B      ANDI	R24,0xFB
    009F4 BB8B      OUT	0x1B,R24
    009F5 9AD1      SBI	0x1A,1
    009F6 B38B      IN	R24,0x1B
    009F7 7F8D      ANDI	R24,0xFD
    009F8 BB8B      OUT	0x1B,R24
    009F9 9180 0061 LDS	R24,0x61
    009FB 6081      ORI	R24,1
    009FC 9380 0061 STS	0x61,R24
    009FE 9180 0062 LDS	R24,0x62
    00A00 7F8E      ANDI	R24,0xFE
    00A01 9380 0062 STS	0x62,R24
    00A03 9180 0061 LDS	R24,0x61
    00A05 6084      ORI	R24,4
    00A06 9380 0061 STS	0x61,R24
    00A08 9180 0062 LDS	R24,0x62
    00A0A 7F8B      ANDI	R24,0xFB
    00A0B 9380 0062 STS	0x62,R24
(0825)  BREAKE1_L//放开刹车
    00A0D 9AD0      SBI	0x1A,0
    00A0E B38B      IN	R24,0x1B
    00A0F 7F8E      ANDI	R24,0xFE
    00A10 BB8B      OUT	0x1B,R24
(0826)  BREAKE2_L//放开刹车
    00A11 9180 0061 LDS	R24,0x61
    00A13 6082      ORI	R24,2
    00A14 9380 0061 STS	0x61,R24
    00A16 9180 0062 LDS	R24,0x62
    00A18 7F8D      ANDI	R24,0xFD
    00A19 9380 0062 STS	0x62,R24
(0827)  
(0828)  Motor1Status.s.RUN=0; 
    00A1B 9180 033E LDS	R24,Motor1Status
    00A1D 9190 033F LDS	R25,Motor1Status+1
    00A1F 7F8E      ANDI	R24,0xFE
    00A20 9390 033F STS	Motor1Status+1,R25
    00A22 9380 033E STS	Motor1Status,R24
(0829)  Motor1Status.s.DIR=DIR1_PIN;
    00A24 B389      IN	R24,0x19
    00A25 2799      CLR	R25
    00A26 7084      ANDI	R24,4
    00A27 7090      ANDI	R25,0
    00A28 9595      ASR	R25
    00A29 9587      ROR	R24
    00A2A 9595      ASR	R25
    00A2B 9587      ROR	R24
    00A2C 7081      ANDI	R24,1
    00A2D 7090      ANDI	R25,0
    00A2E 0F88      LSL	R24
    00A2F 1F99      ROL	R25
    00A30 7082      ANDI	R24,2
    00A31 7090      ANDI	R25,0
    00A32 91E0 033E LDS	R30,Motor1Status
    00A34 91F0 033F LDS	R31,Motor1Status+1
    00A36 7FED      ANDI	R30,0xFD
    00A37 2BE8      OR	R30,R24
    00A38 2BF9      OR	R31,R25
    00A39 93F0 033F STS	Motor1Status+1,R31
    00A3B 93E0 033E STS	Motor1Status,R30
(0830)  Motor1Status.s.BrokenStop=0;
    00A3D 01CF      MOVW	R24,R30
    00A3E 7F8B      ANDI	R24,0xFB
    00A3F 9390 033F STS	Motor1Status+1,R25
    00A41 9380 033E STS	Motor1Status,R24
(0831)  Motor1Status.s.CommandStop=0;
    00A43 7F87      ANDI	R24,0xF7
    00A44 9390 033F STS	Motor1Status+1,R25
    00A46 9380 033E STS	Motor1Status,R24
(0832)  Motor1Status.s.OverCurrent=0;
    00A48 7E8F      ANDI	R24,0xEF
    00A49 9390 033F STS	Motor1Status+1,R25
    00A4B 9380 033E STS	Motor1Status,R24
(0833)  Motor1Status.s.UnderVoltage=0;
    00A4D 7D8F      ANDI	R24,0xDF
    00A4E 9390 033F STS	Motor1Status+1,R25
    00A50 9380 033E STS	Motor1Status,R24
(0834)  Motor1Status.s.StartResult=0;
    00A52 738F      ANDI	R24,0x3F
    00A53 9390 033F STS	Motor1Status+1,R25
    00A55 9380 033E STS	Motor1Status,R24
(0835)  Motor1Status.s.ThisCurrent=0;
    00A57 7090      ANDI	R25,0
    00A58 9390 033F STS	Motor1Status+1,R25
    00A5A 9380 033E STS	Motor1Status,R24
(0836)  
(0837)  Motor2Status.s.RUN=0; 
    00A5C 9180 033C LDS	R24,Motor2Status
    00A5E 9190 033D LDS	R25,Motor2Status+1
    00A60 7F8E      ANDI	R24,0xFE
    00A61 9390 033D STS	Motor2Status+1,R25
    00A63 9380 033C STS	Motor2Status,R24
(0838)  Motor2Status.s.DIR=DIR2_PIN;
    00A65 B180      IN	R24,0x00
    00A66 2799      CLR	R25
    00A67 7081      ANDI	R24,1
    00A68 7090      ANDI	R25,0
    00A69 7081      ANDI	R24,1
    00A6A 7090      ANDI	R25,0
    00A6B 0F88      LSL	R24
    00A6C 1F99      ROL	R25
    00A6D 7082      ANDI	R24,2
    00A6E 7090      ANDI	R25,0
    00A6F 91E0 033C LDS	R30,Motor2Status
    00A71 91F0 033D LDS	R31,Motor2Status+1
    00A73 7FED      ANDI	R30,0xFD
    00A74 2BE8      OR	R30,R24
    00A75 2BF9      OR	R31,R25
    00A76 93F0 033D STS	Motor2Status+1,R31
    00A78 93E0 033C STS	Motor2Status,R30
(0839)  Motor2Status.s.BrokenStop=0;
    00A7A 01CF      MOVW	R24,R30
    00A7B 7F8B      ANDI	R24,0xFB
    00A7C 9390 033D STS	Motor2Status+1,R25
    00A7E 9380 033C STS	Motor2Status,R24
(0840)  Motor2Status.s.CommandStop=0;
    00A80 7F87      ANDI	R24,0xF7
    00A81 9390 033D STS	Motor2Status+1,R25
    00A83 9380 033C STS	Motor2Status,R24
(0841)  Motor2Status.s.OverCurrent=0;
    00A85 7E8F      ANDI	R24,0xEF
    00A86 9390 033D STS	Motor2Status+1,R25
    00A88 9380 033C STS	Motor2Status,R24
(0842)  Motor2Status.s.UnderVoltage=0;
    00A8A 7D8F      ANDI	R24,0xDF
    00A8B 9390 033D STS	Motor2Status+1,R25
    00A8D 9380 033C STS	Motor2Status,R24
(0843)  Motor2Status.s.StartResult=0;
    00A8F 738F      ANDI	R24,0x3F
    00A90 9390 033D STS	Motor2Status+1,R25
    00A92 9380 033C STS	Motor2Status,R24
(0844)  Motor2Status.s.ThisCurrent=0;
    00A94 7090      ANDI	R25,0
    00A95 9390 033D STS	Motor2Status+1,R25
    00A97 9380 033C STS	Motor2Status,R24
(0845)  
(0846)  IntFlag=0;//无接收帧中断
    00A99 2422      CLR	R2
    00A9A 9220 02B1 STS	IntFlag,R2
(0847)  DataFlag=0;//无标定系数下发 
    00A9C 2433      CLR	R3
    00A9D 9230 02B4 STS	DataFlag+1,R3
    00A9F 9220 02B3 STS	DataFlag,R2
(0848)  coeff_len=0;
    00AA1 9230 011F STS	coeff_len+1,R3
    00AA3 9220 011E STS	coeff_len,R2
(0849)  coeff_count=0;//标定系数计数
    00AA5 9230 011D STS	coeff_count+1,R3
    00AA7 9220 011C STS	coeff_count,R2
(0850)  
(0851)  ACSR|=0x10;//清模拟比较器中断标志
    00AA9 9A44      SBI	0x08,4
(0852)  ACSR&=0xf7;//关模拟比较器中断
    00AAA B188      IN	R24,0x08
    00AAB 7F87      ANDI	R24,0xF7
    00AAC B988      OUT	0x08,R24
(0853)  ACSR|=0x40;//ACBG置位，模拟比较器正级接内部能隙基准1.23V
    00AAD 9A46      SBI	0x08,6
(0854)  ACSR|=0x03;//开模拟比较器,AIN1连到比较器负极，0:比较器输出变化即中断，1：保留，2：下降沿中断，3:上升沿中断   
    00AAE B188      IN	R24,0x08
    00AAF 6083      ORI	R24,3
    00AB0 B988      OUT	0x08,R24
(0855)  ACSR|=0x08;//开模拟比较器中断，任何时候都要进行欠压监测	
    00AB1 9A43      SBI	0x08,3
(0856)  ACSR|=0x10;//清模拟比较器中断标志	
    00AB2 9A44      SBI	0x08,4
(0857) 	
(0858) 
(0859) //EIFR|=0x01;//清INT0中断标志,每位控制一个中断，可控制8个中断
(0860)  //EICRA|=0x0c; //INT0上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发
(0861)  //EIMSK|=0x01;//使能INT0中断 ,每位控制一个中断，可控制8个中断
(0862)  
(0863)  //SREG=0x80;//总中断使能
(0864)  
(0865) 	EICRA|=0x03; //INT0上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发
    00AB3 9180 006A LDS	R24,0x6A
    00AB5 6083      ORI	R24,3
    00AB6 9380 006A STS	0x6A,R24
(0866) 	 
(0867) 	MANINT_CLR
    00AB8 B788      IN	R24,0x38
    00AB9 6081      ORI	R24,1
    00ABA BF88      OUT	0x38,R24
(0868) 	MANINT_EN
    00ABB B789      IN	R24,0x39
    00ABC 6081      ORI	R24,1
    00ABD BF89      OUT	0x39,R24
(0869) 	
(0870) 	INT_EN
    00ABE 9478      BSET	7
(0871)  
(0872)  M1_H
    00ABF 9A94      SBI	0x12,4
(0873)  CheckMotor(50);
    00AC0 E302      LDI	R16,0x32
    00AC1 E010      LDI	R17,0
    00AC2 DCFB      RCALL	_CheckMotor
(0874)  M1_L
    00AC3 B382      IN	R24,0x12
    00AC4 7E8F      ANDI	R24,0xEF
    00AC5 BB82      OUT	0x12,R24
    00AC6 9508      RET
(0875)  
(0876) }
(0877) 
(0878) void Gear2Thr(void)
(0879) {
(0880) //将电机过流档位换算为数字量，方便中断函数中进行比较运算
(0881)   if(Motor1Gear<1) {Motor1Gear=1;}//堵转电流最小为1档
_Gear2Thr:
    00AC7 9180 033B LDS	R24,Motor1Gear
    00AC9 3081      CPI	R24,1
    00ACA F418      BCC	0x0ACE
    00ACB E081      LDI	R24,1
    00ACC 9380 033B STS	Motor1Gear,R24
(0882)   if(Motor1Gear>6) {Motor1Gear=6;}//堵转电流最大为6档
    00ACE E086      LDI	R24,6
    00ACF 9020 033B LDS	R2,Motor1Gear
    00AD1 1582      CP	R24,R2
    00AD2 F410      BCC	0x0AD5
    00AD3 9380 033B STS	Motor1Gear,R24
(0883)   if(Motor2Gear<1) {Motor2Gear=6;}//堵转电流最小为1档
    00AD5 9180 033A LDS	R24,Motor2Gear
    00AD7 3081      CPI	R24,1
    00AD8 F418      BCC	0x0ADC
    00AD9 E086      LDI	R24,6
    00ADA 9380 033A STS	Motor2Gear,R24
(0884)   if(Motor2Gear>6) {Motor2Gear=6;}//堵转电流最大为6档
    00ADC E086      LDI	R24,6
    00ADD 9020 033A LDS	R2,Motor2Gear
    00ADF 1582      CP	R24,R2
    00AE0 F410      BCC	0x0AE3
    00AE1 9380 033A STS	Motor2Gear,R24
(0885)   //第1档从100mA起步，每档差值30mA,0.96个字/1mA，第6档约250mA
(0886)   Motor1Thr= 96+ (Motor1Gear-1)*29;
    00AE3 9110 033B LDS	R17,Motor1Gear
    00AE5 E10D      LDI	R16,0x1D
    00AE6 0301      MULSU	R16,R17
    00AE7 2D80      MOV	R24,R0
    00AE8 518D      SUBI	R24,0x1D
    00AE9 5A80      SUBI	R24,0xA0
    00AEA 9380 0339 STS	Motor1Thr,R24
(0887)   Motor2Thr= 96+ (Motor2Gear-1)*29;
    00AEC 9110 033A LDS	R17,Motor2Gear
    00AEE 0301      MULSU	R16,R17
    00AEF 2D80      MOV	R24,R0
    00AF0 518D      SUBI	R24,0x1D
    00AF1 5A80      SUBI	R24,0xA0
    00AF2 9380 0338 STS	Motor2Thr,R24
(0888)   
(0889)   if(MotorIdelGear<1){MotorIdelGear=1;}//电机断路电流最小1档
    00AF4 9180 0337 LDS	R24,MotorIdelGear
    00AF6 3081      CPI	R24,1
    00AF7 F418      BCC	0x0AFB
    00AF8 E081      LDI	R24,1
    00AF9 9380 0337 STS	MotorIdelGear,R24
(0890)   if(MotorIdelGear>6){MotorIdelGear=6;}//电机断路电流最大6档
    00AFB E086      LDI	R24,6
    00AFC 9020 0337 LDS	R2,MotorIdelGear
    00AFE 1582      CP	R24,R2
    00AFF F410      BCC	0x0B02
    00B00 9380 0337 STS	MotorIdelGear,R24
(0891)   //从5mA起步，最大30mA
(0892)   MotorIdelCur=(MotorIdelGear-1)*5+5;
    00B02 9110 0337 LDS	R17,MotorIdelGear
    00B04 E005      LDI	R16,5
    00B05 0301      MULSU	R16,R17
    00B06 2D80      MOV	R24,R0
    00B07 5085      SUBI	R24,5
    00B08 5F8B      SUBI	R24,0xFB
    00B09 9380 0336 STS	MotorIdelCur,R24
    00B0B 9508      RET
_main:
  pt                   --> Y,+2
  mk                   --> Y,+2
  at                   --> Y,+2
  add                  --> Y,+2
  f                    --> Y,+5
  TestDataBlockCount   --> R14
  TestDataBlockIndex   --> R10
  i                    --> R10
  l                    --> Y,+1
  j                    --> R12
    00B0C 9729      SBIW	R28,0x9
(0893)   
(0894) }
(0895) 
(0896) void main(void)
(0897) { 
(0898)   unsigned char i;
(0899)   unsigned int add,at,mk,pt,j;
(0900)   unsigned long l;
(0901)   unsigned int TestDataBlockIndex,TestDataBlockCount;
(0902)   float f;
(0903)  
(0904) 	for(l=0;l<1000;l++)
    00B0D E080      LDI	R24,0
    00B0E 8389      STD	Y+1,R24
    00B0F 838A      STD	Y+2,R24
    00B10 838B      STD	Y+3,R24
    00B11 838C      STD	Y+4,R24
    00B12 C01B      RJMP	0x0B2E
(0905) 	{
(0906) 		for(j=0;j<1000;j++);
    00B13 24CC      CLR	R12
    00B14 24DD      CLR	R13
    00B15 C003      RJMP	0x0B19
    00B16 01C6      MOVW	R24,R12
    00B17 9601      ADIW	R24,1
    00B18 016C      MOVW	R12,R24
    00B19 01C6      MOVW	R24,R12
    00B1A 3E88      CPI	R24,0xE8
    00B1B E0E3      LDI	R30,3
    00B1C 079E      CPC	R25,R30
    00B1D F3C0      BCS	0x0B16
    00B1E E041      LDI	R20,1
    00B1F E050      LDI	R21,0
    00B20 E060      LDI	R22,0
    00B21 E070      LDI	R23,0
    00B22 8029      LDD	R2,Y+1
    00B23 803A      LDD	R3,Y+2
    00B24 804B      LDD	R4,Y+3
    00B25 805C      LDD	R5,Y+4
    00B26 0E24      ADD	R2,R20
    00B27 1E35      ADC	R3,R21
    00B28 1E46      ADC	R4,R22
    00B29 1E57      ADC	R5,R23
    00B2A 8229      STD	Y+1,R2
    00B2B 823A      STD	Y+2,R3
    00B2C 824B      STD	Y+3,R4
    00B2D 825C      STD	Y+4,R5
    00B2E EE48      LDI	R20,0xE8
    00B2F E053      LDI	R21,3
    00B30 E060      LDI	R22,0
    00B31 E070      LDI	R23,0
    00B32 8029      LDD	R2,Y+1
    00B33 803A      LDD	R3,Y+2
    00B34 804B      LDD	R4,Y+3
    00B35 805C      LDD	R5,Y+4
    00B36 1624      CP	R2,R20
    00B37 0635      CPC	R3,R21
    00B38 0646      CPC	R4,R22
    00B39 0657      CPC	R5,R23
    00B3A F2C0      BCS	0x0B13
(0907) 	}
(0908) 
(0909) 	Start();
    00B3B DEA3      RCALL	_Start
(0910) 
(0911) 	CheckMotor(50); 
    00B3C E302      LDI	R16,0x32
    00B3D E010      LDI	R17,0
    00B3E DC7F      RCALL	_CheckMotor
(0912) 
(0913) 	Motor1Gear=EEPROM_read(0);
    00B3F 2700      CLR	R16
    00B40 2711      CLR	R17
    00B41 940E 254F CALL	_EEPROM_read
    00B43 9300 033B STS	Motor1Gear,R16
(0914) 	Motor2Gear=EEPROM_read(1);
    00B45 E001      LDI	R16,1
    00B46 E010      LDI	R17,0
    00B47 940E 254F CALL	_EEPROM_read
    00B49 9300 033A STS	Motor2Gear,R16
(0915) 	MotorIdelCur=EEPROM_read(2);
    00B4B E002      LDI	R16,2
    00B4C E010      LDI	R17,0
    00B4D 940E 254F CALL	_EEPROM_read
    00B4F 2EA0      MOV	R10,R16
    00B50 92A0 0336 STS	MotorIdelCur,R10
(0916) 	Gear2Thr();
    00B52 DF74      RCALL	_Gear2Thr
(0917)   
(0918) 	//采集总线电压，判断是否进入存储状态  
(0919) 	if(SampleADC(4)<30)//Cable端的电压低于30V 
    00B53 E004      LDI	R16,4
    00B54 DBFA      RCALL	_SampleADC
    00B55 2EA0      MOV	R10,R16
    00B56 2D8A      MOV	R24,R10
    00B57 310E      CPI	R16,0x1E
    00B58 F010      BCS	0x0B5B
    00B59 940C 20C6 JMP	0x20C6
(0920) 	{	  
(0921) 		UCSR0B = 0x00;
    00B5B 2422      CLR	R2
    00B5C B82A      OUT	0x0A,R2
(0922) 		PORTE&=0xFD;
    00B5D B183      IN	R24,0x03
    00B5E 7F8D      ANDI	R24,0xFD
    00B5F B983      OUT	0x03,R24
(0923) 		DDRE|=0x02;
    00B60 9A11      SBI	0x02,1
(0924) 		PORTE&=0xFD;	 
    00B61 B183      IN	R24,0x03
    00B62 7F8D      ANDI	R24,0xFD
    00B63 B983      OUT	0x03,R24
(0925) 		while(1); 
    00B64 CFFF      RJMP	0x0B64
(0926) 	}
(0927) 	     
(0928) 	while(1)//若Cable端为高电压，则进入正常的通讯状态
(0929) 	{ 
(0930) 		CheckMotor(0);//实时进行电机过流检测
    00B65 2700      CLR	R16
    00B66 2711      CLR	R17
    00B67 DC56      RCALL	_CheckMotor
(0931) 
(0932) 		if(IntFlag==2)//校验位错误，不上传任何响应，上位机按超时处理
    00B68 9180 02B1 LDS	R24,IntFlag
    00B6A 3082      CPI	R24,2
    00B6B F459      BNE	0x0B77
(0933) 		{ 
(0934) 			IntFlag=0;//无命令帧
    00B6C 2422      CLR	R2
    00B6D 9220 02B1 STS	IntFlag,R2
(0935) 			EIFR|=0x01;//清INT0中断标志
    00B6F B788      IN	R24,0x38
    00B70 6081      ORI	R24,1
    00B71 BF88      OUT	0x38,R24
(0936) 			EIMSK|=0x01;//使能INT0中断	 
    00B72 B789      IN	R24,0x39
    00B73 6081      ORI	R24,1
    00B74 BF89      OUT	0x39,R24
(0937) 		}
    00B75 940C 20C6 JMP	0x20C6
(0938) 		else if(IntFlag==1)//接收到了正常命令帧
    00B77 9180 02B1 LDS	R24,IntFlag
    00B79 3081      CPI	R24,1
    00B7A F011      BEQ	0x0B7D
    00B7B 940C 20C6 JMP	0x20C6
(0939) 		{
(0940) 			if(DataFlag)
    00B7D 9020 02B3 LDS	R2,DataFlag
    00B7F 9030 02B4 LDS	R3,DataFlag+1
    00B81 2022      TST	R2
    00B82 F419      BNE	0x0B86
    00B83 2033      TST	R3
    00B84 F409      BNE	0x0B86
    00B85 C4BE      RJMP	0x1044
(0941) 			{ 		  
(0942) 				coeffdata[coeff_count]=R_dat;
    00B86 E68B      LDI	R24,0x6B
    00B87 E091      LDI	R25,1
    00B88 91E0 011C LDS	R30,coeff_count
    00B8A 91F0 011D LDS	R31,coeff_count+1
    00B8C 0FE8      ADD	R30,R24
    00B8D 1FF9      ADC	R31,R25
    00B8E 9020 02CD LDS	R2,R_dat
    00B90 9030 02CE LDS	R3,R_dat+1
    00B92 8220      ST	Z,R2
(0943) 				coeff_count++;	  
    00B93 9180 011C LDS	R24,coeff_count
    00B95 9190 011D LDS	R25,coeff_count+1
    00B97 9601      ADIW	R24,1
    00B98 9390 011D STS	coeff_count+1,R25
    00B9A 9380 011C STS	coeff_count,R24
(0944) 
(0945) 				if(coeff_count==coeff_len)
    00B9C 9020 011E LDS	R2,coeff_len
    00B9E 9030 011F LDS	R3,coeff_len+1
    00BA0 1582      CP	R24,R2
    00BA1 0593      CPC	R25,R3
    00BA2 F011      BEQ	0x0BA5
    00BA3 940C 20BD JMP	0x20BD
(0946) 				{
(0947) 					if(DataFlag==1)//下发压力温度系数
    00BA5 9180 02B3 LDS	R24,DataFlag
    00BA7 9190 02B4 LDS	R25,DataFlag+1
    00BA9 3081      CPI	R24,1
    00BAA E0E0      LDI	R30,0
    00BAB 079E      CPC	R25,R30
    00BAC F009      BEQ	0x0BAE
    00BAD C0E7      RJMP	0x0C95
(0948) 					{
(0949) 						Uart0TxData[0]=0xE8;
    00BAE EE88      LDI	R24,0xE8
    00BAF 9380 0121 STS	Uart0TxData,R24
(0950) 						Uart0TxData[1]=0x40;
    00BB1 E480      LDI	R24,0x40
    00BB2 9380 0122 STS	Uart0TxData+1,R24
(0951) 						Uart0TxData[2]=0x88;
    00BB4 E888      LDI	R24,0x88
    00BB5 9380 0123 STS	Uart0TxData+2,R24
(0952) 						Uart0TxData[3]=0;//压力温度系数包0
    00BB7 2422      CLR	R2
    00BB8 9220 0124 STS	Uart0TxData+3,R2
(0953) 						Uart0TxData[4]=0x21;
    00BBA E281      LDI	R24,0x21
    00BBB 9380 0125 STS	Uart0TxData+4,R24
(0954) 						Uart0TxData[5]=0x22;
    00BBD E282      LDI	R24,0x22
    00BBE 9380 0126 STS	Uart0TxData+5,R24
(0955) 						Uart0TxData[6]=0x23;
    00BC0 E283      LDI	R24,0x23
    00BC1 9380 0127 STS	Uart0TxData+6,R24
(0956) 						Uart0TxData[7]=0x24;
    00BC3 E284      LDI	R24,0x24
    00BC4 9380 0128 STS	Uart0TxData+7,R24
(0957) 						Uart0TxData[8]=0x32;	 
    00BC6 E382      LDI	R24,0x32
    00BC7 9380 0129 STS	Uart0TxData+8,R24
(0958) 						for(k=0;k<64;k++)
    00BC9 2433      CLR	R3
    00BCA 9230 02AE STS	k+1,R3
    00BCC 9220 02AD STS	k,R2
    00BCE C01A      RJMP	0x0BE9
(0959) 						{
(0960) 							Uart0TxData[9+k]=coeffdata[k];  
    00BCF 90A0 02AD LDS	R10,k
    00BD1 90B0 02AE LDS	R11,k+1
    00BD3 E68B      LDI	R24,0x6B
    00BD4 E091      LDI	R25,1
    00BD5 01F5      MOVW	R30,R10
    00BD6 0FE8      ADD	R30,R24
    00BD7 1FF9      ADC	R31,R25
    00BD8 8020      LD	R2,Z
    00BD9 E281      LDI	R24,0x21
    00BDA E091      LDI	R25,1
    00BDB 01F5      MOVW	R30,R10
    00BDC 9639      ADIW	R30,0x9
    00BDD 0FE8      ADD	R30,R24
    00BDE 1FF9      ADC	R31,R25
    00BDF 8220      ST	Z,R2
    00BE0 9180 02AD LDS	R24,k
    00BE2 9190 02AE LDS	R25,k+1
    00BE4 9601      ADIW	R24,1
    00BE5 9390 02AE STS	k+1,R25
    00BE7 9380 02AD STS	k,R24
    00BE9 9180 02AD LDS	R24,k
    00BEB 9190 02AE LDS	R25,k+1
    00BED 3480      CPI	R24,0x40
    00BEE E0E0      LDI	R30,0
    00BEF 079E      CPC	R25,R30
    00BF0 F2F0      BCS	0x0BCF
(0961) 						}		 
(0962) 						SendUart0_2(74,20);//超时160ms
    00BF1 E124      LDI	R18,0x14
    00BF2 E030      LDI	R19,0
    00BF3 E40A      LDI	R16,0x4A
    00BF4 940E 03C1 CALL	_SendUart0_2
(0963) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00BF6 9180 02E3 LDS	R24,Uart0RxCounter
    00BF8 3089      CPI	R24,0x9
    00BF9 F4B1      BNE	0x0C10
    00BFA 9180 02E4 LDS	R24,Uart0RxData
    00BFC 3585      CPI	R24,0x55
    00BFD F491      BNE	0x0C10
    00BFE 9180 02E5 LDS	R24,Uart0RxData+1
    00C00 3480      CPI	R24,0x40
    00C01 F471      BNE	0x0C10
    00C02 9180 02E6 LDS	R24,Uart0RxData+2
    00C04 3888      CPI	R24,0x88
    00C05 F451      BNE	0x0C10
(0964) 						{T_dat&=0xff00; }
    00C06 9180 02CF LDS	R24,T_dat
    00C08 9190 02D0 LDS	R25,T_dat+1
    00C0A 7080      ANDI	R24,0
    00C0B 9390 02D0 STS	T_dat+1,R25
    00C0D 9380 02CF STS	T_dat,R24
    00C0F C006      RJMP	0x0C16
(0965) 						else
(0966) 						{T_dat=0x00aa; }
    00C10 EA8A      LDI	R24,0xAA
    00C11 E090      LDI	R25,0
    00C12 9390 02D0 STS	T_dat+1,R25
    00C14 9380 02CF STS	T_dat,R24
(0967) 
(0968) 						Uart0TxData[0]=0xE8;
    00C16 EE88      LDI	R24,0xE8
    00C17 9380 0121 STS	Uart0TxData,R24
(0969) 						Uart0TxData[1]=0x40;
    00C19 E480      LDI	R24,0x40
    00C1A 9380 0122 STS	Uart0TxData+1,R24
(0970) 						Uart0TxData[2]=0x88;
    00C1C E888      LDI	R24,0x88
    00C1D 9380 0123 STS	Uart0TxData+2,R24
(0971) 						Uart0TxData[3]=1;//压力温度系数包1
    00C1F E081      LDI	R24,1
    00C20 9380 0124 STS	Uart0TxData+3,R24
(0972) 						Uart0TxData[4]=0x21;
    00C22 E281      LDI	R24,0x21
    00C23 9380 0125 STS	Uart0TxData+4,R24
(0973) 						Uart0TxData[5]=0x22;
    00C25 E282      LDI	R24,0x22
    00C26 9380 0126 STS	Uart0TxData+5,R24
(0974) 						Uart0TxData[6]=0x23;
    00C28 E283      LDI	R24,0x23
    00C29 9380 0127 STS	Uart0TxData+6,R24
(0975) 						Uart0TxData[7]=0x24;
    00C2B E284      LDI	R24,0x24
    00C2C 9380 0128 STS	Uart0TxData+7,R24
(0976) 						Uart0TxData[8]=0x32;	 
    00C2E E382      LDI	R24,0x32
    00C2F 9380 0129 STS	Uart0TxData+8,R24
(0977) 						for(k=0;k<64;k++)
    00C31 2422      CLR	R2
    00C32 2433      CLR	R3
    00C33 9230 02AE STS	k+1,R3
    00C35 9220 02AD STS	k,R2
    00C37 C01C      RJMP	0x0C54
(0978) 						{
(0979) 							Uart0TxData[9+k]=coeffdata[k+64];  
    00C38 90A0 02AD LDS	R10,k
    00C3A 90B0 02AE LDS	R11,k+1
    00C3C E68B      LDI	R24,0x6B
    00C3D E091      LDI	R25,1
    00C3E 01F5      MOVW	R30,R10
    00C3F 5CE0      SUBI	R30,0xC0
    00C40 4FFF      SBCI	R31,0xFF
    00C41 0FE8      ADD	R30,R24
    00C42 1FF9      ADC	R31,R25
    00C43 8020      LD	R2,Z
    00C44 E281      LDI	R24,0x21
    00C45 E091      LDI	R25,1
    00C46 01F5      MOVW	R30,R10
    00C47 9639      ADIW	R30,0x9
    00C48 0FE8      ADD	R30,R24
    00C49 1FF9      ADC	R31,R25
    00C4A 8220      ST	Z,R2
    00C4B 9180 02AD LDS	R24,k
    00C4D 9190 02AE LDS	R25,k+1
    00C4F 9601      ADIW	R24,1
    00C50 9390 02AE STS	k+1,R25
    00C52 9380 02AD STS	k,R24
    00C54 9180 02AD LDS	R24,k
    00C56 9190 02AE LDS	R25,k+1
    00C58 3480      CPI	R24,0x40
    00C59 E0E0      LDI	R30,0
    00C5A 079E      CPC	R25,R30
    00C5B F2E0      BCS	0x0C38
(0980) 						}		 
(0981) 						SendUart0_2(74,20);//超时160ms
    00C5C E124      LDI	R18,0x14
    00C5D E030      LDI	R19,0
    00C5E E40A      LDI	R16,0x4A
    00C5F 940E 03C1 CALL	_SendUart0_2
(0982) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00C61 9180 02E3 LDS	R24,Uart0RxCounter
    00C63 3089      CPI	R24,0x9
    00C64 F4B1      BNE	0x0C7B
    00C65 9180 02E4 LDS	R24,Uart0RxData
    00C67 3585      CPI	R24,0x55
    00C68 F491      BNE	0x0C7B
    00C69 9180 02E5 LDS	R24,Uart0RxData+1
    00C6B 3480      CPI	R24,0x40
    00C6C F471      BNE	0x0C7B
    00C6D 9180 02E6 LDS	R24,Uart0RxData+2
    00C6F 3888      CPI	R24,0x88
    00C70 F451      BNE	0x0C7B
(0983) 						{T_dat&=0x00ff; }
    00C71 9180 02CF LDS	R24,T_dat
    00C73 9190 02D0 LDS	R25,T_dat+1
    00C75 7090      ANDI	R25,0
    00C76 9390 02D0 STS	T_dat+1,R25
    00C78 9380 02CF STS	T_dat,R24
    00C7A C009      RJMP	0x0C84
(0984) 						else
(0985) 						{T_dat|=0x5500; }
    00C7B 9180 02CF LDS	R24,T_dat
    00C7D 9190 02D0 LDS	R25,T_dat+1
    00C7F 6595      ORI	R25,0x55
    00C80 9390 02D0 STS	T_dat+1,R25
    00C82 9380 02CF STS	T_dat,R24
(0986) 
(0987) 						DataFlag=0;
    00C84 2422      CLR	R2
    00C85 2433      CLR	R3
    00C86 9230 02B4 STS	DataFlag+1,R3
    00C88 9220 02B3 STS	DataFlag,R2
(0988) 						coeff_len=0;	
    00C8A 9230 011F STS	coeff_len+1,R3
    00C8C 9220 011E STS	coeff_len,R2
(0989) 						T_com=0x0A;
    00C8E E08A      LDI	R24,0xA
    00C8F 9380 02CC STS	T_com,R24
(0990) 						SendManchester();		
    00C91 940E 2144 CALL	_SendManchester
(0991) 					}
    00C93 940C 20BD JMP	0x20BD
(0992) 					else if(DataFlag==2)//下发流量系数
    00C95 9180 02B3 LDS	R24,DataFlag
    00C97 9190 02B4 LDS	R25,DataFlag+1
    00C99 3082      CPI	R24,2
    00C9A E0E0      LDI	R30,0
    00C9B 079E      CPC	R25,R30
    00C9C F009      BEQ	0x0C9E
    00C9D C0E8      RJMP	0x0D86
(0993) 					{
(0994) 						Uart0TxData[0]=0xE8;
    00C9E EE88      LDI	R24,0xE8
    00C9F 9380 0121 STS	Uart0TxData,R24
(0995) 						Uart0TxData[1]=0x40;
    00CA1 E480      LDI	R24,0x40
    00CA2 9380 0122 STS	Uart0TxData+1,R24
(0996) 						Uart0TxData[2]=0x88;
    00CA4 E888      LDI	R24,0x88
    00CA5 9380 0123 STS	Uart0TxData+2,R24
(0997) 						Uart0TxData[3]=2;//流量系数包2
    00CA7 E082      LDI	R24,2
    00CA8 9380 0124 STS	Uart0TxData+3,R24
(0998) 						Uart0TxData[4]=0x21;
    00CAA E281      LDI	R24,0x21
    00CAB 9380 0125 STS	Uart0TxData+4,R24
(0999) 						Uart0TxData[5]=0x22;
    00CAD E282      LDI	R24,0x22
    00CAE 9380 0126 STS	Uart0TxData+5,R24
(1000) 						Uart0TxData[6]=0x23;
    00CB0 E283      LDI	R24,0x23
    00CB1 9380 0127 STS	Uart0TxData+6,R24
(1001) 						Uart0TxData[7]=0x24;
    00CB3 E284      LDI	R24,0x24
    00CB4 9380 0128 STS	Uart0TxData+7,R24
(1002) 						Uart0TxData[8]=0x32;	 
    00CB6 E382      LDI	R24,0x32
    00CB7 9380 0129 STS	Uart0TxData+8,R24
(1003) 						for(k=0;k<64;k++)
    00CB9 2422      CLR	R2
    00CBA 2433      CLR	R3
    00CBB 9230 02AE STS	k+1,R3
    00CBD 9220 02AD STS	k,R2
    00CBF C01A      RJMP	0x0CDA
(1004) 						{
(1005) 							Uart0TxData[9+k]=coeffdata[k];  
    00CC0 90A0 02AD LDS	R10,k
    00CC2 90B0 02AE LDS	R11,k+1
    00CC4 E68B      LDI	R24,0x6B
    00CC5 E091      LDI	R25,1
    00CC6 01F5      MOVW	R30,R10
    00CC7 0FE8      ADD	R30,R24
    00CC8 1FF9      ADC	R31,R25
    00CC9 8020      LD	R2,Z
    00CCA E281      LDI	R24,0x21
    00CCB E091      LDI	R25,1
    00CCC 01F5      MOVW	R30,R10
    00CCD 9639      ADIW	R30,0x9
    00CCE 0FE8      ADD	R30,R24
    00CCF 1FF9      ADC	R31,R25
    00CD0 8220      ST	Z,R2
    00CD1 9180 02AD LDS	R24,k
    00CD3 9190 02AE LDS	R25,k+1
    00CD5 9601      ADIW	R24,1
    00CD6 9390 02AE STS	k+1,R25
    00CD8 9380 02AD STS	k,R24
    00CDA 9180 02AD LDS	R24,k
    00CDC 9190 02AE LDS	R25,k+1
    00CDE 3480      CPI	R24,0x40
    00CDF E0E0      LDI	R30,0
    00CE0 079E      CPC	R25,R30
    00CE1 F2F0      BCS	0x0CC0
(1006) 						}		 
(1007) 						SendUart0_2(74,20);//超时160ms
    00CE2 E124      LDI	R18,0x14
    00CE3 E030      LDI	R19,0
    00CE4 E40A      LDI	R16,0x4A
    00CE5 940E 03C1 CALL	_SendUart0_2
(1008) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00CE7 9180 02E3 LDS	R24,Uart0RxCounter
    00CE9 3089      CPI	R24,0x9
    00CEA F4B1      BNE	0x0D01
    00CEB 9180 02E4 LDS	R24,Uart0RxData
    00CED 3585      CPI	R24,0x55
    00CEE F491      BNE	0x0D01
    00CEF 9180 02E5 LDS	R24,Uart0RxData+1
    00CF1 3480      CPI	R24,0x40
    00CF2 F471      BNE	0x0D01
    00CF3 9180 02E6 LDS	R24,Uart0RxData+2
    00CF5 3888      CPI	R24,0x88
    00CF6 F451      BNE	0x0D01
(1009) 						{T_dat&=0xff00; }
    00CF7 9180 02CF LDS	R24,T_dat
    00CF9 9190 02D0 LDS	R25,T_dat+1
    00CFB 7080      ANDI	R24,0
    00CFC 9390 02D0 STS	T_dat+1,R25
    00CFE 9380 02CF STS	T_dat,R24
    00D00 C006      RJMP	0x0D07
(1010) 						else
(1011) 						{T_dat=0x00aa; }
    00D01 EA8A      LDI	R24,0xAA
    00D02 E090      LDI	R25,0
    00D03 9390 02D0 STS	T_dat+1,R25
    00D05 9380 02CF STS	T_dat,R24
(1012) 
(1013) 						Uart0TxData[0]=0xE8;
    00D07 EE88      LDI	R24,0xE8
    00D08 9380 0121 STS	Uart0TxData,R24
(1014) 						Uart0TxData[1]=0x40;
    00D0A E480      LDI	R24,0x40
    00D0B 9380 0122 STS	Uart0TxData+1,R24
(1015) 						Uart0TxData[2]=0x88;
    00D0D E888      LDI	R24,0x88
    00D0E 9380 0123 STS	Uart0TxData+2,R24
(1016) 						Uart0TxData[3]=3;//流量系数包3
    00D10 E083      LDI	R24,3
    00D11 9380 0124 STS	Uart0TxData+3,R24
(1017) 						Uart0TxData[4]=0x21;
    00D13 E281      LDI	R24,0x21
    00D14 9380 0125 STS	Uart0TxData+4,R24
(1018) 						Uart0TxData[5]=0x22;
    00D16 E282      LDI	R24,0x22
    00D17 9380 0126 STS	Uart0TxData+5,R24
(1019) 						Uart0TxData[6]=0x23;
    00D19 E283      LDI	R24,0x23
    00D1A 9380 0127 STS	Uart0TxData+6,R24
(1020) 						Uart0TxData[7]=0x24;
    00D1C E284      LDI	R24,0x24
    00D1D 9380 0128 STS	Uart0TxData+7,R24
(1021) 						Uart0TxData[8]=0x32;	 
    00D1F E382      LDI	R24,0x32
    00D20 9380 0129 STS	Uart0TxData+8,R24
(1022) 						for(k=0;k<64;k++)
    00D22 2422      CLR	R2
    00D23 2433      CLR	R3
    00D24 9230 02AE STS	k+1,R3
    00D26 9220 02AD STS	k,R2
    00D28 C01C      RJMP	0x0D45
(1023) 						{
(1024) 							Uart0TxData[9+k]=coeffdata[k+64];  
    00D29 90A0 02AD LDS	R10,k
    00D2B 90B0 02AE LDS	R11,k+1
    00D2D E68B      LDI	R24,0x6B
    00D2E E091      LDI	R25,1
    00D2F 01F5      MOVW	R30,R10
    00D30 5CE0      SUBI	R30,0xC0
    00D31 4FFF      SBCI	R31,0xFF
    00D32 0FE8      ADD	R30,R24
    00D33 1FF9      ADC	R31,R25
    00D34 8020      LD	R2,Z
    00D35 E281      LDI	R24,0x21
    00D36 E091      LDI	R25,1
    00D37 01F5      MOVW	R30,R10
    00D38 9639      ADIW	R30,0x9
    00D39 0FE8      ADD	R30,R24
    00D3A 1FF9      ADC	R31,R25
    00D3B 8220      ST	Z,R2
    00D3C 9180 02AD LDS	R24,k
    00D3E 9190 02AE LDS	R25,k+1
    00D40 9601      ADIW	R24,1
    00D41 9390 02AE STS	k+1,R25
    00D43 9380 02AD STS	k,R24
    00D45 9180 02AD LDS	R24,k
    00D47 9190 02AE LDS	R25,k+1
    00D49 3480      CPI	R24,0x40
    00D4A E0E0      LDI	R30,0
    00D4B 079E      CPC	R25,R30
    00D4C F2E0      BCS	0x0D29
(1025) 						}		 
(1026) 						SendUart0_2(74,20);//超时160ms
    00D4D E124      LDI	R18,0x14
    00D4E E030      LDI	R19,0
    00D4F E40A      LDI	R16,0x4A
    00D50 940E 03C1 CALL	_SendUart0_2
(1027) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00D52 9180 02E3 LDS	R24,Uart0RxCounter
    00D54 3089      CPI	R24,0x9
    00D55 F4B1      BNE	0x0D6C
    00D56 9180 02E4 LDS	R24,Uart0RxData
    00D58 3585      CPI	R24,0x55
    00D59 F491      BNE	0x0D6C
    00D5A 9180 02E5 LDS	R24,Uart0RxData+1
    00D5C 3480      CPI	R24,0x40
    00D5D F471      BNE	0x0D6C
    00D5E 9180 02E6 LDS	R24,Uart0RxData+2
    00D60 3888      CPI	R24,0x88
    00D61 F451      BNE	0x0D6C
(1028) 						{T_dat&=0x00ff; }
    00D62 9180 02CF LDS	R24,T_dat
    00D64 9190 02D0 LDS	R25,T_dat+1
    00D66 7090      ANDI	R25,0
    00D67 9390 02D0 STS	T_dat+1,R25
    00D69 9380 02CF STS	T_dat,R24
    00D6B C009      RJMP	0x0D75
(1029) 						else
(1030) 						{T_dat|=0x5500; }
    00D6C 9180 02CF LDS	R24,T_dat
    00D6E 9190 02D0 LDS	R25,T_dat+1
    00D70 6595      ORI	R25,0x55
    00D71 9390 02D0 STS	T_dat+1,R25
    00D73 9380 02CF STS	T_dat,R24
(1031) 
(1032) 						DataFlag=0;
    00D75 2422      CLR	R2
    00D76 2433      CLR	R3
    00D77 9230 02B4 STS	DataFlag+1,R3
    00D79 9220 02B3 STS	DataFlag,R2
(1033) 						coeff_len=0;	
    00D7B 9230 011F STS	coeff_len+1,R3
    00D7D 9220 011E STS	coeff_len,R2
(1034) 						T_com=0x0B;
    00D7F E08B      LDI	R24,0xB
    00D80 9380 02CC STS	T_com,R24
(1035) 						SendManchester();		
    00D82 940E 2144 CALL	_SendManchester
(1036) 					}	
    00D84 940C 20BD JMP	0x20BD
(1037) 					else if(DataFlag==3)//提取测试数据
    00D86 9180 02B3 LDS	R24,DataFlag
    00D88 9190 02B4 LDS	R25,DataFlag+1
    00D8A 3083      CPI	R24,3
    00D8B E0E0      LDI	R30,0
    00D8C 079E      CPC	R25,R30
    00D8D F009      BEQ	0x0D8F
    00D8E C0A5      RJMP	0x0E34
(1038) 					{
(1039) 						DataFlag=0;
    00D8F 2422      CLR	R2
    00D90 2433      CLR	R3
    00D91 9230 02B4 STS	DataFlag+1,R3
    00D93 9220 02B3 STS	DataFlag,R2
(1040) 						coeff_len=0;	
    00D95 9230 011F STS	coeff_len+1,R3
    00D97 9220 011E STS	coeff_len,R2
(1041) 						T_com=0x09;
    00D99 E089      LDI	R24,0x9
    00D9A 9380 02CC STS	T_com,R24
(1042) 						TestDataBlockIndex=coeffdata[1];
    00D9C 90A0 016C LDS	R10,coeffdata+1
    00D9E 24BB      CLR	R11
(1043) 						TestDataBlockIndex<<=8;
    00D9F 2CBA      MOV	R11,R10
    00DA0 24AA      CLR	R10
(1044) 						TestDataBlockIndex|=coeffdata[0];//首块地址/索引
    00DA1 9020 016B LDS	R2,coeffdata
    00DA3 2433      CLR	R3
    00DA4 28A2      OR	R10,R2
    00DA5 28B3      OR	R11,R3
(1045) 						TestDataBlockCount=coeffdata[3];
    00DA6 90E0 016E LDS	R14,coeffdata+3
    00DA8 24FF      CLR	R15
(1046) 						TestDataBlockCount<<=8;
    00DA9 2CFE      MOV	R15,R14
    00DAA 24EE      CLR	R14
(1047) 						TestDataBlockCount|=coeffdata[2];//需提取的总包数，每包64字节，每块4096字节共64包
    00DAB 9020 016D LDS	R2,coeffdata+2
    00DAD 2433      CLR	R3
    00DAE 28E2      OR	R14,R2
    00DAF 28F3      OR	R15,R3
(1048) 
(1049) 						for(k=0;k<TestDataBlockCount;k++)//按用户要求分包进行上传，每包64字节传32帧
    00DB0 2422      CLR	R2
    00DB1 9230 02AE STS	k+1,R3
    00DB3 9220 02AD STS	k,R2
    00DB5 C074      RJMP	0x0E2A
(1050) 						{
(1051) 							Uart0TxData[0]=0xE8;
    00DB6 EE88      LDI	R24,0xE8
    00DB7 9380 0121 STS	Uart0TxData,R24
(1052) 							Uart0TxData[1]=0x40;
    00DB9 E480      LDI	R24,0x40
    00DBA 9380 0122 STS	Uart0TxData+1,R24
(1053) 							Uart0TxData[2]=0x9A;//读测试数据
    00DBC E98A      LDI	R24,0x9A
    00DBD 9380 0123 STS	Uart0TxData+2,R24
(1054) 							Uart0TxData[3]=8;
    00DBF E088      LDI	R24,0x8
    00DC0 9380 0124 STS	Uart0TxData+3,R24
(1055) 
(1056) 							//统一块索引
(1057) 							Uart0TxData[4]=(k); 	
    00DC2 9020 02AD LDS	R2,k
    00DC4 9030 02AE LDS	R3,k+1
    00DC6 9220 0125 STS	Uart0TxData+4,R2
(1058) 							Uart0TxData[5]=(k>>8); 	//包索引	
    00DC8 2C23      MOV	R2,R3
    00DC9 2433      CLR	R3
    00DCA 9220 0126 STS	Uart0TxData+5,R2
(1059) 							Uart0TxData[6]=(TestDataBlockIndex);
    00DCC 92A0 0127 STS	Uart0TxData+6,R10
(1060) 							Uart0TxData[7]=(TestDataBlockIndex>>8);//首块索引
    00DCE 0115      MOVW	R2,R10
    00DCF 2C23      MOV	R2,R3
    00DD0 2433      CLR	R3
    00DD1 9220 0128 STS	Uart0TxData+7,R2
(1061) 
(1062) 							/*
(1063) 							// 单独块索引
(1064) 							Uart0TxData[4]=(k%8); 	
(1065) 							Uart0TxData[5]=0; 	//包索引	
(1066) 							Uart0TxData[6]=(TestDataBlockIndex+k/8);
(1067) 							Uart0TxData[7]=((TestDataBlockIndex+k/8)>>8);//首块索引
(1068) 							*/
(1069) 
(1070) 							SendUart0_2(9,6);//超时48ms
    00DD3 E026      LDI	R18,6
    00DD4 E030      LDI	R19,0
    00DD5 E009      LDI	R16,0x9
    00DD6 940E 03C1 CALL	_SendUart0_2
(1071) 							for(bf=0;bf<32;bf++)
    00DD8 2422      CLR	R2
    00DD9 2433      CLR	R3
    00DDA 9230 0119 STS	bf+1,R3
    00DDC 9220 0118 STS	bf,R2
    00DDE C039      RJMP	0x0E18
(1072) 							{	   	
(1073) 								T_dat=Uart0RxData[bf*2+1];//高字节
    00DDF EE84      LDI	R24,0xE4
    00DE0 E092      LDI	R25,2
    00DE1 91E0 0118 LDS	R30,bf
    00DE3 91F0 0119 LDS	R31,bf+1
    00DE5 0FEE      LSL	R30
    00DE6 1FFF      ROL	R31
    00DE7 9631      ADIW	R30,1
    00DE8 0FE8      ADD	R30,R24
    00DE9 1FF9      ADC	R31,R25
    00DEA 8020      LD	R2,Z
    00DEB 2433      CLR	R3
    00DEC 9230 02D0 STS	T_dat+1,R3
    00DEE 9220 02CF STS	T_dat,R2
(1074) 								T_dat<<=8;
    00DF0 2C32      MOV	R3,R2
    00DF1 2422      CLR	R2
    00DF2 9230 02D0 STS	T_dat+1,R3
    00DF4 9220 02CF STS	T_dat,R2
(1075) 								T_dat|=Uart0RxData[bf*2+0];//低字节
    00DF6 91E0 0118 LDS	R30,bf
    00DF8 91F0 0119 LDS	R31,bf+1
    00DFA 0FEE      LSL	R30
    00DFB 1FFF      ROL	R31
    00DFC 0FE8      ADD	R30,R24
    00DFD 1FF9      ADC	R31,R25
    00DFE 8020      LD	R2,Z
    00DFF 2433      CLR	R3
    00E00 9040 02CF LDS	R4,T_dat
    00E02 9050 02D0 LDS	R5,T_dat+1
    00E04 2842      OR	R4,R2
    00E05 2853      OR	R5,R3
    00E06 9250 02D0 STS	T_dat+1,R5
    00E08 9240 02CF STS	T_dat,R4
(1076) 								SendManchester();	
    00E0A 940E 2144 CALL	_SendManchester
(1077) 								CheckMotor(10);	 
    00E0C E00A      LDI	R16,0xA
    00E0D E010      LDI	R17,0
    00E0E D9AF      RCALL	_CheckMotor
    00E0F 9180 0118 LDS	R24,bf
    00E11 9190 0119 LDS	R25,bf+1
    00E13 9601      ADIW	R24,1
    00E14 9390 0119 STS	bf+1,R25
    00E16 9380 0118 STS	bf,R24
    00E18 9180 0118 LDS	R24,bf
    00E1A 9190 0119 LDS	R25,bf+1
    00E1C 3280      CPI	R24,0x20
    00E1D E0E0      LDI	R30,0
    00E1E 079E      CPC	R25,R30
    00E1F F408      BCC	0x0E21
    00E20 CFBE      RJMP	0x0DDF
    00E21 9180 02AD LDS	R24,k
    00E23 9190 02AE LDS	R25,k+1
    00E25 9601      ADIW	R24,1
    00E26 9390 02AE STS	k+1,R25
    00E28 9380 02AD STS	k,R24
    00E2A 9020 02AD LDS	R2,k
    00E2C 9030 02AE LDS	R3,k+1
    00E2E 142E      CP	R2,R14
    00E2F 043F      CPC	R3,R15
    00E30 F408      BCC	0x0E32
    00E31 CF84      RJMP	0x0DB6
(1078) 							}		
(1079) 						}
(1080) 					} 
    00E32 940C 20BD JMP	0x20BD
(1081) 					else if(DataFlag==4)//下发仪器信息
    00E34 9180 02B3 LDS	R24,DataFlag
    00E36 9190 02B4 LDS	R25,DataFlag+1
    00E38 3084      CPI	R24,4
    00E39 E0E0      LDI	R30,0
    00E3A 079E      CPC	R25,R30
    00E3B F011      BEQ	0x0E3E
    00E3C 940C 20BD JMP	0x20BD
(1082) 					{
(1083) 						T_dat=0x0000;
    00E3E 2422      CLR	R2
    00E3F 2433      CLR	R3
    00E40 9230 02D0 STS	T_dat+1,R3
    00E42 9220 02CF STS	T_dat,R2
(1084) 
(1085) 						Uart0TxData[0]=0xE8;
    00E44 EE88      LDI	R24,0xE8
    00E45 9380 0121 STS	Uart0TxData,R24
(1086) 						Uart0TxData[1]=0x40;
    00E47 E480      LDI	R24,0x40
    00E48 9380 0122 STS	Uart0TxData+1,R24
(1087) 						Uart0TxData[2]=0x84;
    00E4A E884      LDI	R24,0x84
    00E4B 9380 0123 STS	Uart0TxData+2,R24
(1088) 						Uart0TxData[3]=0;//包0
    00E4D 9220 0124 STS	Uart0TxData+3,R2
(1089) 						Uart0TxData[4]=0x21;
    00E4F E281      LDI	R24,0x21
    00E50 9380 0125 STS	Uart0TxData+4,R24
(1090) 						Uart0TxData[5]=0x22;
    00E52 E282      LDI	R24,0x22
    00E53 9380 0126 STS	Uart0TxData+5,R24
(1091) 						Uart0TxData[6]=0x23;
    00E55 E283      LDI	R24,0x23
    00E56 9380 0127 STS	Uart0TxData+6,R24
(1092) 						Uart0TxData[7]=0x24;
    00E58 E284      LDI	R24,0x24
    00E59 9380 0128 STS	Uart0TxData+7,R24
(1093) 						Uart0TxData[8]=0x32;	 
    00E5B E382      LDI	R24,0x32
    00E5C 9380 0129 STS	Uart0TxData+8,R24
(1094) 						for(k=0;k<64;k++)
    00E5E 9230 02AE STS	k+1,R3
    00E60 9220 02AD STS	k,R2
    00E62 C01A      RJMP	0x0E7D
(1095) 						{
(1096) 							Uart0TxData[9+k]=coeffdata[k];  
    00E63 90A0 02AD LDS	R10,k
    00E65 90B0 02AE LDS	R11,k+1
    00E67 E68B      LDI	R24,0x6B
    00E68 E091      LDI	R25,1
    00E69 01F5      MOVW	R30,R10
    00E6A 0FE8      ADD	R30,R24
    00E6B 1FF9      ADC	R31,R25
    00E6C 8020      LD	R2,Z
    00E6D E281      LDI	R24,0x21
    00E6E E091      LDI	R25,1
    00E6F 01F5      MOVW	R30,R10
    00E70 9639      ADIW	R30,0x9
    00E71 0FE8      ADD	R30,R24
    00E72 1FF9      ADC	R31,R25
    00E73 8220      ST	Z,R2
    00E74 9180 02AD LDS	R24,k
    00E76 9190 02AE LDS	R25,k+1
    00E78 9601      ADIW	R24,1
    00E79 9390 02AE STS	k+1,R25
    00E7B 9380 02AD STS	k,R24
    00E7D 9180 02AD LDS	R24,k
    00E7F 9190 02AE LDS	R25,k+1
    00E81 3480      CPI	R24,0x40
    00E82 E0E0      LDI	R30,0
    00E83 079E      CPC	R25,R30
    00E84 F2F0      BCS	0x0E63
(1097) 						}		 
(1098) 						SendUart0_2(74,20);//超时160ms
    00E85 E124      LDI	R18,0x14
    00E86 E030      LDI	R19,0
    00E87 E40A      LDI	R16,0x4A
    00E88 940E 03C1 CALL	_SendUart0_2
(1099) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00E8A 9180 02E3 LDS	R24,Uart0RxCounter
    00E8C 3089      CPI	R24,0x9
    00E8D F461      BNE	0x0E9A
    00E8E 9180 02E4 LDS	R24,Uart0RxData
    00E90 3585      CPI	R24,0x55
    00E91 F441      BNE	0x0E9A
    00E92 9180 02E5 LDS	R24,Uart0RxData+1
    00E94 3480      CPI	R24,0x40
    00E95 F421      BNE	0x0E9A
    00E96 9180 02E6 LDS	R24,Uart0RxData+2
    00E98 3884      CPI	R24,0x84
    00E99 F049      BEQ	0x0EA3
(1100) 						{T_dat|=0x0001; }
    00E9A 9180 02CF LDS	R24,T_dat
    00E9C 9190 02D0 LDS	R25,T_dat+1
    00E9E 6081      ORI	R24,1
    00E9F 9390 02D0 STS	T_dat+1,R25
    00EA1 9380 02CF STS	T_dat,R24
(1101) 
(1102) 						Uart0TxData[0]=0xE8;
    00EA3 EE88      LDI	R24,0xE8
    00EA4 9380 0121 STS	Uart0TxData,R24
(1103) 						Uart0TxData[1]=0x40;
    00EA6 E480      LDI	R24,0x40
    00EA7 9380 0122 STS	Uart0TxData+1,R24
(1104) 						Uart0TxData[2]=0x84;
    00EA9 E884      LDI	R24,0x84
    00EAA 9380 0123 STS	Uart0TxData+2,R24
(1105) 						Uart0TxData[3]=1;//包1
    00EAC E081      LDI	R24,1
    00EAD 9380 0124 STS	Uart0TxData+3,R24
(1106) 						Uart0TxData[4]=0x21;
    00EAF E281      LDI	R24,0x21
    00EB0 9380 0125 STS	Uart0TxData+4,R24
(1107) 						Uart0TxData[5]=0x22;
    00EB2 E282      LDI	R24,0x22
    00EB3 9380 0126 STS	Uart0TxData+5,R24
(1108) 						Uart0TxData[6]=0x23;
    00EB5 E283      LDI	R24,0x23
    00EB6 9380 0127 STS	Uart0TxData+6,R24
(1109) 						Uart0TxData[7]=0x24;
    00EB8 E284      LDI	R24,0x24
    00EB9 9380 0128 STS	Uart0TxData+7,R24
(1110) 						Uart0TxData[8]=0x32;	 
    00EBB E382      LDI	R24,0x32
    00EBC 9380 0129 STS	Uart0TxData+8,R24
(1111) 						for(k=0;k<64;k++)
    00EBE 2422      CLR	R2
    00EBF 2433      CLR	R3
    00EC0 9230 02AE STS	k+1,R3
    00EC2 9220 02AD STS	k,R2
    00EC4 C01C      RJMP	0x0EE1
(1112) 						{
(1113) 							Uart0TxData[9+k]=coeffdata[k+64];  
    00EC5 90A0 02AD LDS	R10,k
    00EC7 90B0 02AE LDS	R11,k+1
    00EC9 E68B      LDI	R24,0x6B
    00ECA E091      LDI	R25,1
    00ECB 01F5      MOVW	R30,R10
    00ECC 5CE0      SUBI	R30,0xC0
    00ECD 4FFF      SBCI	R31,0xFF
    00ECE 0FE8      ADD	R30,R24
    00ECF 1FF9      ADC	R31,R25
    00ED0 8020      LD	R2,Z
    00ED1 E281      LDI	R24,0x21
    00ED2 E091      LDI	R25,1
    00ED3 01F5      MOVW	R30,R10
    00ED4 9639      ADIW	R30,0x9
    00ED5 0FE8      ADD	R30,R24
    00ED6 1FF9      ADC	R31,R25
    00ED7 8220      ST	Z,R2
    00ED8 9180 02AD LDS	R24,k
    00EDA 9190 02AE LDS	R25,k+1
    00EDC 9601      ADIW	R24,1
    00EDD 9390 02AE STS	k+1,R25
    00EDF 9380 02AD STS	k,R24
    00EE1 9180 02AD LDS	R24,k
    00EE3 9190 02AE LDS	R25,k+1
    00EE5 3480      CPI	R24,0x40
    00EE6 E0E0      LDI	R30,0
    00EE7 079E      CPC	R25,R30
    00EE8 F2E0      BCS	0x0EC5
(1114) 						}		 
(1115) 						SendUart0_2(74,20);//超时160ms
    00EE9 E124      LDI	R18,0x14
    00EEA E030      LDI	R19,0
    00EEB E40A      LDI	R16,0x4A
    00EEC 940E 03C1 CALL	_SendUart0_2
(1116) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00EEE 9180 02E3 LDS	R24,Uart0RxCounter
    00EF0 3089      CPI	R24,0x9
    00EF1 F461      BNE	0x0EFE
    00EF2 9180 02E4 LDS	R24,Uart0RxData
    00EF4 3585      CPI	R24,0x55
    00EF5 F441      BNE	0x0EFE
    00EF6 9180 02E5 LDS	R24,Uart0RxData+1
    00EF8 3480      CPI	R24,0x40
    00EF9 F421      BNE	0x0EFE
    00EFA 9180 02E6 LDS	R24,Uart0RxData+2
    00EFC 3884      CPI	R24,0x84
    00EFD F049      BEQ	0x0F07
(1117) 						{T_dat|=0x0002; }
    00EFE 9180 02CF LDS	R24,T_dat
    00F00 9190 02D0 LDS	R25,T_dat+1
    00F02 6082      ORI	R24,2
    00F03 9390 02D0 STS	T_dat+1,R25
    00F05 9380 02CF STS	T_dat,R24
(1118) 
(1119) 						Uart0TxData[0]=0xE8;
    00F07 EE88      LDI	R24,0xE8
    00F08 9380 0121 STS	Uart0TxData,R24
(1120) 						Uart0TxData[1]=0x40;
    00F0A E480      LDI	R24,0x40
    00F0B 9380 0122 STS	Uart0TxData+1,R24
(1121) 						Uart0TxData[2]=0x84;
    00F0D E884      LDI	R24,0x84
    00F0E 9380 0123 STS	Uart0TxData+2,R24
(1122) 						Uart0TxData[3]=2;//包2
    00F10 E082      LDI	R24,2
    00F11 9380 0124 STS	Uart0TxData+3,R24
(1123) 						Uart0TxData[4]=0x21;
    00F13 E281      LDI	R24,0x21
    00F14 9380 0125 STS	Uart0TxData+4,R24
(1124) 						Uart0TxData[5]=0x22;
    00F16 E282      LDI	R24,0x22
    00F17 9380 0126 STS	Uart0TxData+5,R24
(1125) 						Uart0TxData[6]=0x23;
    00F19 E283      LDI	R24,0x23
    00F1A 9380 0127 STS	Uart0TxData+6,R24
(1126) 						Uart0TxData[7]=0x24;
    00F1C E284      LDI	R24,0x24
    00F1D 9380 0128 STS	Uart0TxData+7,R24
(1127) 						Uart0TxData[8]=0x32;	 
    00F1F E382      LDI	R24,0x32
    00F20 9380 0129 STS	Uart0TxData+8,R24
(1128) 						for(k=0;k<64;k++)
    00F22 2422      CLR	R2
    00F23 2433      CLR	R3
    00F24 9230 02AE STS	k+1,R3
    00F26 9220 02AD STS	k,R2
    00F28 C01C      RJMP	0x0F45
(1129) 						{
(1130) 							Uart0TxData[9+k]=coeffdata[k+128];  
    00F29 90A0 02AD LDS	R10,k
    00F2B 90B0 02AE LDS	R11,k+1
    00F2D E68B      LDI	R24,0x6B
    00F2E E091      LDI	R25,1
    00F2F 01F5      MOVW	R30,R10
    00F30 58E0      SUBI	R30,0x80
    00F31 4FFF      SBCI	R31,0xFF
    00F32 0FE8      ADD	R30,R24
    00F33 1FF9      ADC	R31,R25
    00F34 8020      LD	R2,Z
    00F35 E281      LDI	R24,0x21
    00F36 E091      LDI	R25,1
    00F37 01F5      MOVW	R30,R10
    00F38 9639      ADIW	R30,0x9
    00F39 0FE8      ADD	R30,R24
    00F3A 1FF9      ADC	R31,R25
    00F3B 8220      ST	Z,R2
    00F3C 9180 02AD LDS	R24,k
    00F3E 9190 02AE LDS	R25,k+1
    00F40 9601      ADIW	R24,1
    00F41 9390 02AE STS	k+1,R25
    00F43 9380 02AD STS	k,R24
    00F45 9180 02AD LDS	R24,k
    00F47 9190 02AE LDS	R25,k+1
    00F49 3480      CPI	R24,0x40
    00F4A E0E0      LDI	R30,0
    00F4B 079E      CPC	R25,R30
    00F4C F2E0      BCS	0x0F29
(1131) 						}		 
(1132) 						SendUart0_2(74,20);//超时160ms
    00F4D E124      LDI	R18,0x14
    00F4E E030      LDI	R19,0
    00F4F E40A      LDI	R16,0x4A
    00F50 940E 03C1 CALL	_SendUart0_2
(1133) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00F52 9180 02E3 LDS	R24,Uart0RxCounter
    00F54 3089      CPI	R24,0x9
    00F55 F461      BNE	0x0F62
    00F56 9180 02E4 LDS	R24,Uart0RxData
    00F58 3585      CPI	R24,0x55
    00F59 F441      BNE	0x0F62
    00F5A 9180 02E5 LDS	R24,Uart0RxData+1
    00F5C 3480      CPI	R24,0x40
    00F5D F421      BNE	0x0F62
    00F5E 9180 02E6 LDS	R24,Uart0RxData+2
    00F60 3884      CPI	R24,0x84
    00F61 F049      BEQ	0x0F6B
(1134) 						{T_dat|=0x0004; }
    00F62 9180 02CF LDS	R24,T_dat
    00F64 9190 02D0 LDS	R25,T_dat+1
    00F66 6084      ORI	R24,4
    00F67 9390 02D0 STS	T_dat+1,R25
    00F69 9380 02CF STS	T_dat,R24
(1135) 
(1136) 						Uart0TxData[0]=0xE8;
    00F6B EE88      LDI	R24,0xE8
    00F6C 9380 0121 STS	Uart0TxData,R24
(1137) 						Uart0TxData[1]=0x40;
    00F6E E480      LDI	R24,0x40
    00F6F 9380 0122 STS	Uart0TxData+1,R24
(1138) 						Uart0TxData[2]=0x84;
    00F71 E884      LDI	R24,0x84
    00F72 9380 0123 STS	Uart0TxData+2,R24
(1139) 						Uart0TxData[3]=3;//包3
    00F74 E083      LDI	R24,3
    00F75 9380 0124 STS	Uart0TxData+3,R24
(1140) 						Uart0TxData[4]=0x21;
    00F77 E281      LDI	R24,0x21
    00F78 9380 0125 STS	Uart0TxData+4,R24
(1141) 						Uart0TxData[5]=0x22;
    00F7A E282      LDI	R24,0x22
    00F7B 9380 0126 STS	Uart0TxData+5,R24
(1142) 						Uart0TxData[6]=0x23;
    00F7D E283      LDI	R24,0x23
    00F7E 9380 0127 STS	Uart0TxData+6,R24
(1143) 						Uart0TxData[7]=0x24;
    00F80 E284      LDI	R24,0x24
    00F81 9380 0128 STS	Uart0TxData+7,R24
(1144) 						Uart0TxData[8]=0x32;	 
    00F83 E382      LDI	R24,0x32
    00F84 9380 0129 STS	Uart0TxData+8,R24
(1145) 						for(k=0;k<64;k++)
    00F86 2422      CLR	R2
    00F87 2433      CLR	R3
    00F88 9230 02AE STS	k+1,R3
    00F8A 9220 02AD STS	k,R2
    00F8C C01C      RJMP	0x0FA9
(1146) 						{
(1147) 							Uart0TxData[9+k]=coeffdata[k+192];  
    00F8D 90A0 02AD LDS	R10,k
    00F8F 90B0 02AE LDS	R11,k+1
    00F91 E68B      LDI	R24,0x6B
    00F92 E091      LDI	R25,1
    00F93 01F5      MOVW	R30,R10
    00F94 54E0      SUBI	R30,0x40
    00F95 4FFF      SBCI	R31,0xFF
    00F96 0FE8      ADD	R30,R24
    00F97 1FF9      ADC	R31,R25
    00F98 8020      LD	R2,Z
    00F99 E281      LDI	R24,0x21
    00F9A E091      LDI	R25,1
    00F9B 01F5      MOVW	R30,R10
    00F9C 9639      ADIW	R30,0x9
    00F9D 0FE8      ADD	R30,R24
    00F9E 1FF9      ADC	R31,R25
    00F9F 8220      ST	Z,R2
    00FA0 9180 02AD LDS	R24,k
    00FA2 9190 02AE LDS	R25,k+1
    00FA4 9601      ADIW	R24,1
    00FA5 9390 02AE STS	k+1,R25
    00FA7 9380 02AD STS	k,R24
    00FA9 9180 02AD LDS	R24,k
    00FAB 9190 02AE LDS	R25,k+1
    00FAD 3480      CPI	R24,0x40
    00FAE E0E0      LDI	R30,0
    00FAF 079E      CPC	R25,R30
    00FB0 F2E0      BCS	0x0F8D
(1148) 						}		 
(1149) 						SendUart0_2(74,20);//超时160ms
    00FB1 E124      LDI	R18,0x14
    00FB2 E030      LDI	R19,0
    00FB3 E40A      LDI	R16,0x4A
    00FB4 940E 03C1 CALL	_SendUart0_2
(1150) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00FB6 9180 02E3 LDS	R24,Uart0RxCounter
    00FB8 3089      CPI	R24,0x9
    00FB9 F461      BNE	0x0FC6
    00FBA 9180 02E4 LDS	R24,Uart0RxData
    00FBC 3585      CPI	R24,0x55
    00FBD F441      BNE	0x0FC6
    00FBE 9180 02E5 LDS	R24,Uart0RxData+1
    00FC0 3480      CPI	R24,0x40
    00FC1 F421      BNE	0x0FC6
    00FC2 9180 02E6 LDS	R24,Uart0RxData+2
    00FC4 3884      CPI	R24,0x84
    00FC5 F049      BEQ	0x0FCF
(1151) 						{T_dat|=0x0008; }
    00FC6 9180 02CF LDS	R24,T_dat
    00FC8 9190 02D0 LDS	R25,T_dat+1
    00FCA 6088      ORI	R24,0x8
    00FCB 9390 02D0 STS	T_dat+1,R25
    00FCD 9380 02CF STS	T_dat,R24
(1152) 
(1153) 						Uart0TxData[0]=0xE8;
    00FCF EE88      LDI	R24,0xE8
    00FD0 9380 0121 STS	Uart0TxData,R24
(1154) 						Uart0TxData[1]=0x40;
    00FD2 E480      LDI	R24,0x40
    00FD3 9380 0122 STS	Uart0TxData+1,R24
(1155) 						Uart0TxData[2]=0x84;
    00FD5 E884      LDI	R24,0x84
    00FD6 9380 0123 STS	Uart0TxData+2,R24
(1156) 						Uart0TxData[3]=4;//包4
    00FD8 E084      LDI	R24,4
    00FD9 9380 0124 STS	Uart0TxData+3,R24
(1157) 						Uart0TxData[4]=0x21;
    00FDB E281      LDI	R24,0x21
    00FDC 9380 0125 STS	Uart0TxData+4,R24
(1158) 						Uart0TxData[5]=0x22;
    00FDE E282      LDI	R24,0x22
    00FDF 9380 0126 STS	Uart0TxData+5,R24
(1159) 						Uart0TxData[6]=0x23;
    00FE1 E283      LDI	R24,0x23
    00FE2 9380 0127 STS	Uart0TxData+6,R24
(1160) 						Uart0TxData[7]=0x24;
    00FE4 E284      LDI	R24,0x24
    00FE5 9380 0128 STS	Uart0TxData+7,R24
(1161) 						Uart0TxData[8]=0x32;	 
    00FE7 E382      LDI	R24,0x32
    00FE8 9380 0129 STS	Uart0TxData+8,R24
(1162) 						for(k=0;k<64;k++)
    00FEA 2422      CLR	R2
    00FEB 2433      CLR	R3
    00FEC 9230 02AE STS	k+1,R3
    00FEE 9220 02AD STS	k,R2
    00FF0 C01C      RJMP	0x100D
(1163) 						{
(1164) 							Uart0TxData[9+k]=coeffdata[k+256];  
    00FF1 90A0 02AD LDS	R10,k
    00FF3 90B0 02AE LDS	R11,k+1
    00FF5 E68B      LDI	R24,0x6B
    00FF6 E091      LDI	R25,1
    00FF7 01F5      MOVW	R30,R10
    00FF8 50E0      SUBI	R30,0
    00FF9 4FFF      SBCI	R31,0xFF
    00FFA 0FE8      ADD	R30,R24
    00FFB 1FF9      ADC	R31,R25
    00FFC 8020      LD	R2,Z
    00FFD E281      LDI	R24,0x21
    00FFE E091      LDI	R25,1
    00FFF 01F5      MOVW	R30,R10
    01000 9639      ADIW	R30,0x9
    01001 0FE8      ADD	R30,R24
    01002 1FF9      ADC	R31,R25
    01003 8220      ST	Z,R2
    01004 9180 02AD LDS	R24,k
    01006 9190 02AE LDS	R25,k+1
    01008 9601      ADIW	R24,1
    01009 9390 02AE STS	k+1,R25
    0100B 9380 02AD STS	k,R24
    0100D 9180 02AD LDS	R24,k
    0100F 9190 02AE LDS	R25,k+1
    01011 3480      CPI	R24,0x40
    01012 E0E0      LDI	R30,0
    01013 079E      CPC	R25,R30
    01014 F2E0      BCS	0x0FF1
(1165) 						}		 
(1166) 						SendUart0_2(74,20);//超时160ms
    01015 E124      LDI	R18,0x14
    01016 E030      LDI	R19,0
    01017 E40A      LDI	R16,0x4A
    01018 940E 03C1 CALL	_SendUart0_2
(1167) 						if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    0101A 9180 02E3 LDS	R24,Uart0RxCounter
    0101C 3089      CPI	R24,0x9
    0101D F461      BNE	0x102A
    0101E 9180 02E4 LDS	R24,Uart0RxData
    01020 3585      CPI	R24,0x55
    01021 F441      BNE	0x102A
    01022 9180 02E5 LDS	R24,Uart0RxData+1
    01024 3480      CPI	R24,0x40
    01025 F421      BNE	0x102A
    01026 9180 02E6 LDS	R24,Uart0RxData+2
    01028 3884      CPI	R24,0x84
    01029 F049      BEQ	0x1033
(1168) 						{T_dat|=0x0010; }
    0102A 9180 02CF LDS	R24,T_dat
    0102C 9190 02D0 LDS	R25,T_dat+1
    0102E 6180      ORI	R24,0x10
    0102F 9390 02D0 STS	T_dat+1,R25
    01031 9380 02CF STS	T_dat,R24
(1169) 
(1170) 						DataFlag=0;
    01033 2422      CLR	R2
    01034 2433      CLR	R3
    01035 9230 02B4 STS	DataFlag+1,R3
    01037 9220 02B3 STS	DataFlag,R2
(1171) 						coeff_len=0;	
    01039 9230 011F STS	coeff_len+1,R3
    0103B 9220 011E STS	coeff_len,R2
(1172) 						T_com=0x0C;
    0103D E08C      LDI	R24,0xC
    0103E 9380 02CC STS	T_com,R24
(1173) 						SendManchester();		
    01040 940E 2144 CALL	_SendManchester
(1174) 					}     
(1175) 				}	 
(1176) 			}
    01042 940C 20BD JMP	0x20BD
(1177) 
(1178) 			else//若不是下发标定系数，则进入以下各个命令的子语句
(1179) 			{ 
(1180) 				T_com=(R_dat>>4);
    01044 9020 02CD LDS	R2,R_dat
    01046 9030 02CE LDS	R3,R_dat+1
    01048 9435      ASR	R3
    01049 9427      ROR	R2
    0104A 9435      ASR	R3
    0104B 9427      ROR	R2
    0104C 9435      ASR	R3
    0104D 9427      ROR	R2
    0104E 9435      ASR	R3
    0104F 9427      ROR	R2
    01050 9220 02CC STS	T_com,R2
(1181) 				switch(R_dat&0xf0)
    01052 9180 02CD LDS	R24,R_dat
    01054 9190 02CE LDS	R25,R_dat+1
    01056 7F80      ANDI	R24,0xF0
    01057 7090      ANDI	R25,0
    01058 015C      MOVW	R10,R24
    01059 3680      CPI	R24,0x60
    0105A E0E0      LDI	R30,0
    0105B 079E      CPC	R25,R30
    0105C F409      BNE	0x105E
    0105D C2E2      RJMP	0x1340
    0105E E680      LDI	R24,0x60
    0105F E090      LDI	R25,0
    01060 158A      CP	R24,R10
    01061 059B      CPC	R25,R11
    01062 F40C      BGE	0x1064
    01063 C033      RJMP	0x1097
    01064 01C5      MOVW	R24,R10
    01065 3380      CPI	R24,0x30
    01066 E0E0      LDI	R30,0
    01067 079E      CPC	R25,R30
    01068 F409      BNE	0x106A
    01069 C0ED      RJMP	0x1157
    0106A E380      LDI	R24,0x30
    0106B E090      LDI	R25,0
    0106C 158A      CP	R24,R10
    0106D 059B      CPC	R25,R11
    0106E F0A4      BLT	0x1083
    0106F 01C5      MOVW	R24,R10
    01070 3180      CPI	R24,0x10
    01071 E0E0      LDI	R30,0
    01072 079E      CPC	R25,R30
    01073 F409      BNE	0x1075
    01074 C05F      RJMP	0x10D4
    01075 3180      CPI	R24,0x10
    01076 E0E0      LDI	R30,0
    01077 079E      CPC	R25,R30
    01078 F414      BGE	0x107B
    01079 940C 20BD JMP	0x20BD
    0107B 01C5      MOVW	R24,R10
    0107C 3280      CPI	R24,0x20
    0107D E0E0      LDI	R30,0
    0107E 079E      CPC	R25,R30
    0107F F409      BNE	0x1081
    01080 C093      RJMP	0x1114
    01081 940C 20BD JMP	0x20BD
    01083 01C5      MOVW	R24,R10
    01084 3480      CPI	R24,0x40
    01085 E0E0      LDI	R30,0
    01086 079E      CPC	R25,R30
    01087 F409      BNE	0x1089
    01088 C119      RJMP	0x11A2
    01089 3480      CPI	R24,0x40
    0108A E0E0      LDI	R30,0
    0108B 079E      CPC	R25,R30
    0108C F414      BGE	0x108F
    0108D 940C 20BD JMP	0x20BD
    0108F 01C5      MOVW	R24,R10
    01090 3580      CPI	R24,0x50
    01091 E0E0      LDI	R30,0
    01092 079E      CPC	R25,R30
    01093 F409      BNE	0x1095
    01094 C164      RJMP	0x11F9
    01095 940C 20BD JMP	0x20BD
    01097 01C5      MOVW	R24,R10
    01098 3980      CPI	R24,0x90
    01099 E0E0      LDI	R30,0
    0109A 079E      CPC	R25,R30
    0109B F409      BNE	0x109D
    0109C C6F1      RJMP	0x178E
    0109D E980      LDI	R24,0x90
    0109E E090      LDI	R25,0
    0109F 158A      CP	R24,R10
    010A0 059B      CPC	R25,R11
    010A1 F0A4      BLT	0x10B6
    010A2 01C5      MOVW	R24,R10
    010A3 3780      CPI	R24,0x70
    010A4 E0E0      LDI	R30,0
    010A5 079E      CPC	R25,R30
    010A6 F409      BNE	0x10A8
    010A7 C39C      RJMP	0x1444
    010A8 3780      CPI	R24,0x70
    010A9 E0E0      LDI	R30,0
    010AA 079E      CPC	R25,R30
    010AB F414      BGE	0x10AE
    010AC 940C 20BD JMP	0x20BD
    010AE 01C5      MOVW	R24,R10
    010AF 3880      CPI	R24,0x80
    010B0 E0E0      LDI	R30,0
    010B1 079E      CPC	R25,R30
    010B2 F409      BNE	0x10B4
    010B3 C4C9      RJMP	0x157D
    010B4 940C 20BD JMP	0x20BD
    010B6 01C5      MOVW	R24,R10
    010B7 3B80      CPI	R24,0xB0
    010B8 E0E0      LDI	R30,0
    010B9 079E      CPC	R25,R30
    010BA F411      BNE	0x10BD
    010BB 940C 1BC6 JMP	0x1BC6
    010BD EB80      LDI	R24,0xB0
    010BE E090      LDI	R25,0
    010BF 158A      CP	R24,R10
    010C0 059B      CPC	R25,R11
    010C1 F04C      BLT	0x10CB
    010C2 01C5      MOVW	R24,R10
    010C3 3A80      CPI	R24,0xA0
    010C4 E0E0      LDI	R30,0
    010C5 079E      CPC	R25,R30
    010C6 F411      BNE	0x10C9
    010C7 940C 1AFE JMP	0x1AFE
    010C9 940C 20BD JMP	0x20BD
    010CB 01C5      MOVW	R24,R10
    010CC 3C80      CPI	R24,0xC0
    010CD E0E0      LDI	R30,0
    010CE 079E      CPC	R25,R30
    010CF F411      BNE	0x10D2
    010D0 940C 1C8E JMP	0x1C8E
    010D2 940C 20BD JMP	0x20BD
(1182) 				{ 
(1183) 					case 0x10://复位 	
(1184) 						Uart0TxData[0]=0xE8;
    010D4 EE88      LDI	R24,0xE8
    010D5 9380 0121 STS	Uart0TxData,R24
(1185) 						Uart0TxData[1]=0x40;
    010D7 E480      LDI	R24,0x40
    010D8 9380 0122 STS	Uart0TxData+1,R24
(1186) 						Uart0TxData[2]=0x8D;//流量板握手，超时40ms
    010DA E88D      LDI	R24,0x8D
    010DB 9380 0123 STS	Uart0TxData+2,R24
(1187) 						Uart0TxData[3]=31;
    010DD E18F      LDI	R24,0x1F
    010DE 9380 0124 STS	Uart0TxData+3,R24
(1188) 						SendUart0_2(9,5); 
    010E0 E025      LDI	R18,5
    010E1 E030      LDI	R19,0
    010E2 E009      LDI	R16,0x9
    010E3 940E 03C1 CALL	_SendUart0_2
(1189) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    010E5 9180 02E3 LDS	R24,Uart0RxCounter
    010E7 3089      CPI	R24,0x9
    010E8 F499      BNE	0x10FC
    010E9 9180 02E4 LDS	R24,Uart0RxData
    010EB 3585      CPI	R24,0x55
    010EC F479      BNE	0x10FC
    010ED 9180 02E5 LDS	R24,Uart0RxData+1
    010EF 3480      CPI	R24,0x40
    010F0 F459      BNE	0x10FC
    010F1 9180 02E6 LDS	R24,Uart0RxData+2
    010F3 388D      CPI	R24,0x8D
    010F4 F439      BNE	0x10FC
(1190) 						{T_dat=0x00;}
    010F5 2422      CLR	R2
    010F6 2433      CLR	R3
    010F7 9230 02D0 STS	T_dat+1,R3
    010F9 9220 02CF STS	T_dat,R2
    010FB C006      RJMP	0x1102
(1191) 						else
(1192) 						{T_dat=0xff;}
    010FC EF8F      LDI	R24,0xFF
    010FD E090      LDI	R25,0
    010FE 9390 02D0 STS	T_dat+1,R25
    01100 9380 02CF STS	T_dat,R24
(1193) 						T_dat<<=8;
    01102 9020 02CF LDS	R2,T_dat
    01104 9030 02D0 LDS	R3,T_dat+1
    01106 2C32      MOV	R3,R2
    01107 2422      CLR	R2
    01108 9230 02D0 STS	T_dat+1,R3
    0110A 9220 02CF STS	T_dat,R2
(1194) 						T_dat|=0x00;
    0110C 9230 02D0 STS	T_dat+1,R3
    0110E 9220 02CF STS	T_dat,R2
(1195) 						SendManchester();	
    01110 940E 2144 CALL	_SendManchester
(1196) 						break;
    01112 940C 20BD JMP	0x20BD
(1197) 
(1198) 					case 0x20://读版本号
(1199) 						Uart0TxData[0]=0xE8;
    01114 EE88      LDI	R24,0xE8
    01115 9380 0121 STS	Uart0TxData,R24
(1200) 						Uart0TxData[1]=0x40;
    01117 E480      LDI	R24,0x40
    01118 9380 0122 STS	Uart0TxData+1,R24
(1201) 						Uart0TxData[2]=0x8D;//流量板握手，超时40ms
    0111A E88D      LDI	R24,0x8D
    0111B 9380 0123 STS	Uart0TxData+2,R24
(1202) 						Uart0TxData[3]=31;
    0111D E18F      LDI	R24,0x1F
    0111E 9380 0124 STS	Uart0TxData+3,R24
(1203) 						SendUart0_2(9,5); 
    01120 E025      LDI	R18,5
    01121 E030      LDI	R19,0
    01122 E009      LDI	R16,0x9
    01123 940E 03C1 CALL	_SendUart0_2
(1204) 						if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    01125 9180 02E3 LDS	R24,Uart0RxCounter
    01127 3089      CPI	R24,0x9
    01128 F4A1      BNE	0x113D
    01129 9180 02E4 LDS	R24,Uart0RxData
    0112B 3585      CPI	R24,0x55
    0112C F481      BNE	0x113D
    0112D 9180 02E5 LDS	R24,Uart0RxData+1
    0112F 3480      CPI	R24,0x40
    01130 F461      BNE	0x113D
    01131 9180 02E6 LDS	R24,Uart0RxData+2
    01133 388D      CPI	R24,0x8D
    01134 F441      BNE	0x113D
(1205) 							{T_dat=Uart0RxData[3];}
    01135 9020 02E7 LDS	R2,Uart0RxData+3
    01137 2433      CLR	R3
    01138 9230 02D0 STS	T_dat+1,R3
    0113A 9220 02CF STS	T_dat,R2
    0113C C006      RJMP	0x1143
(1206) 						else
(1207) 							{T_dat=0xff;}    
    0113D EF8F      LDI	R24,0xFF
    0113E E090      LDI	R25,0
    0113F 9390 02D0 STS	T_dat+1,R25
    01141 9380 02CF STS	T_dat,R24
(1208) 						T_dat<<=8;
    01143 9020 02CF LDS	R2,T_dat
    01145 9030 02D0 LDS	R3,T_dat+1
    01147 2C32      MOV	R3,R2
    01148 2422      CLR	R2
    01149 9230 02D0 STS	T_dat+1,R3
    0114B 9220 02CF STS	T_dat,R2
(1209) 						T_dat|=BB;
    0114D 01C1      MOVW	R24,R2
    0114E 6180      ORI	R24,0x10
    0114F 9390 02D0 STS	T_dat+1,R25
    01151 9380 02CF STS	T_dat,R24
(1210) 						SendManchester();	
    01153 940E 2144 CALL	_SendManchester
(1211) 						break;
    01155 940C 20BD JMP	0x20BD
(1212) 
(1213) 					case 0x30://Cable电压,VIN/VR电压
(1214) 						CheckMotor(30);   
    01157 E10E      LDI	R16,0x1E
    01158 E010      LDI	R17,0
    01159 940E 07BE CALL	_CheckMotor
(1215) 						f=SampleADC(5);//Cable CAB-R1
    0115B E005      LDI	R16,5
    0115C 940E 074F CALL	_SampleADC
    0115E 2711      CLR	R17
    0115F 940E 26AB CALL	int2fp
    01161 830D      STD	Y+5,R16
    01162 831E      STD	Y+6,R17
    01163 832F      STD	Y+7,R18
    01164 8738      STD	Y+8,R19
(1216) 						//f=f*2.56;
(1217) 						//f=f*101;
(1218) 						//f=f/256;
(1219) 						T_dat=f;
    01165 810D      LDD	R16,Y+5
    01166 811E      LDD	R17,Y+6
    01167 812F      LDD	R18,Y+7
    01168 8538      LDD	R19,Y+8
    01169 940E 2677 CALL	fpint
    0116B 9310 02D0 STS	T_dat+1,R17
    0116D 9300 02CF STS	T_dat,R16
(1220) 						CheckMotor(30);
    0116F E10E      LDI	R16,0x1E
    01170 E010      LDI	R17,0
    01171 940E 07BE CALL	_CheckMotor
(1221) 						T_dat<<=8;   
    01173 9020 02CF LDS	R2,T_dat
    01175 9030 02D0 LDS	R3,T_dat+1
    01177 2C32      MOV	R3,R2
    01178 2422      CLR	R2
    01179 9230 02D0 STS	T_dat+1,R3
    0117B 9220 02CF STS	T_dat,R2
(1222) 						f=SampleADC(4);//VIN / VR  CAB-R2
    0117D E004      LDI	R16,4
    0117E 940E 074F CALL	_SampleADC
    01180 2711      CLR	R17
    01181 940E 26AB CALL	int2fp
    01183 830D      STD	Y+5,R16
    01184 831E      STD	Y+6,R17
    01185 832F      STD	Y+7,R18
    01186 8738      STD	Y+8,R19
(1223) 						//f=f*2.56;
(1224) 						//f=f*101;
(1225) 						//f=f/256;
(1226) 						i=f;
    01187 810D      LDD	R16,Y+5
    01188 811E      LDD	R17,Y+6
    01189 812F      LDD	R18,Y+7
    0118A 8538      LDD	R19,Y+8
    0118B 940E 2677 CALL	fpint
    0118D 2EA0      MOV	R10,R16
(1227) 						T_dat|=i; 
    0118E 2C2A      MOV	R2,R10
    0118F 2433      CLR	R3
    01190 9040 02CF LDS	R4,T_dat
    01192 9050 02D0 LDS	R5,T_dat+1
    01194 2842      OR	R4,R2
    01195 2853      OR	R5,R3
    01196 9250 02D0 STS	T_dat+1,R5
    01198 9240 02CF STS	T_dat,R4
(1228) 						CheckMotor(30);
    0119A E10E      LDI	R16,0x1E
    0119B E010      LDI	R17,0
    0119C 940E 07BE CALL	_CheckMotor
(1229) 						SendManchester();   
    0119E 940E 2144 CALL	_SendManchester
(1230) 						break;
    011A0 940C 20BD JMP	0x20BD
(1231) 
(1232) 					case 0x40: //采集板压力和温度
(1233) 						/*
(1234) 						CheckMotor(40); //40ms定时		
(1235) 						T_dat=1234;//没有流量板时暂用一固定数值表示压力
(1236) 						SendManchester();
(1237) 						CheckMotor(40); //40ms定时		 
(1238) 						T_dat=5678;//没有流量板时暂用一固定数值表示温度
(1239) 						SendManchester();
(1240) 						*/
(1241) 						Uart0TxData[0]=0xE8;
    011A2 EE88      LDI	R24,0xE8
    011A3 9380 0121 STS	Uart0TxData,R24
(1242) 						Uart0TxData[1]=0x40;
    011A5 E480      LDI	R24,0x40
    011A6 9380 0122 STS	Uart0TxData+1,R24
(1243) 						Uart0TxData[2]=0x89;
    011A8 E889      LDI	R24,0x89
    011A9 9380 0123 STS	Uart0TxData+2,R24
(1244) 						Uart0TxData[3]=9;
    011AB E089      LDI	R24,0x9
    011AC 9380 0124 STS	Uart0TxData+3,R24
(1245) 						SendUart0_2(9,50);//流量板直读检测，超时400ms
    011AE E322      LDI	R18,0x32
    011AF E030      LDI	R19,0
    011B0 E009      LDI	R16,0x9
    011B1 940E 03C1 CALL	_SendUart0_2
(1246) 
(1247) 						T_dat=Uart0RxData[1];
    011B3 9020 02E5 LDS	R2,Uart0RxData+1
    011B5 2433      CLR	R3
    011B6 9230 02D0 STS	T_dat+1,R3
    011B8 9220 02CF STS	T_dat,R2
(1248) 						T_dat<<=8;
    011BA 9020 02CF LDS	R2,T_dat
    011BC 9030 02D0 LDS	R3,T_dat+1
    011BE 2C32      MOV	R3,R2
    011BF 2422      CLR	R2
    011C0 9230 02D0 STS	T_dat+1,R3
    011C2 9220 02CF STS	T_dat,R2
(1249) 						T_dat|=Uart0RxData[0];
    011C4 9020 02E4 LDS	R2,Uart0RxData
    011C6 2433      CLR	R3
    011C7 9040 02CF LDS	R4,T_dat
    011C9 9050 02D0 LDS	R5,T_dat+1
    011CB 2842      OR	R4,R2
    011CC 2853      OR	R5,R3
    011CD 9250 02D0 STS	T_dat+1,R5
    011CF 9240 02CF STS	T_dat,R4
(1250) 						SendManchester();//压力
    011D1 940E 2144 CALL	_SendManchester
(1251) 
(1252) 						CheckMotor(30);	
    011D3 E10E      LDI	R16,0x1E
    011D4 E010      LDI	R17,0
    011D5 940E 07BE CALL	_CheckMotor
(1253) 						T_dat=Uart0RxData[3];
    011D7 9020 02E7 LDS	R2,Uart0RxData+3
    011D9 2433      CLR	R3
    011DA 9230 02D0 STS	T_dat+1,R3
    011DC 9220 02CF STS	T_dat,R2
(1254) 						T_dat<<=8;
    011DE 9020 02CF LDS	R2,T_dat
    011E0 9030 02D0 LDS	R3,T_dat+1
    011E2 2C32      MOV	R3,R2
    011E3 2422      CLR	R2
    011E4 9230 02D0 STS	T_dat+1,R3
    011E6 9220 02CF STS	T_dat,R2
(1255) 						T_dat|=Uart0RxData[2];
    011E8 9020 02E6 LDS	R2,Uart0RxData+2
    011EA 2433      CLR	R3
    011EB 9040 02CF LDS	R4,T_dat
    011ED 9050 02D0 LDS	R5,T_dat+1
    011EF 2842      OR	R4,R2
    011F0 2853      OR	R5,R3
    011F1 9250 02D0 STS	T_dat+1,R5
    011F3 9240 02CF STS	T_dat,R4
(1256) 						SendManchester();//温度
    011F5 940E 2144 CALL	_SendManchester
(1257) 						break;
    011F7 940C 20BD JMP	0x20BD
(1258) 
(1259) 					case 0x50://流量采样	    	          	  	   	  	 
(1260) 						/*	
(1261) 						CheckMotor(40); //40ms定时		
(1262) 						myFIB.f=123.456; 
(1263) 						T_dat=myFIB.i[1];
(1264) 						SendManchester();
(1265) 						CheckMotor(40);
(1266) 						T_dat=myFIB.i[0];
(1267) 						SendManchester();
(1268) 						CheckMotor(40);
(1269) 						myFIB.f=789.012; 
(1270) 						T_dat=myFIB.i[1];
(1271) 						SendManchester();
(1272) 						CheckMotor(40);
(1273) 						T_dat=myFIB.i[0];
(1274) 						SendManchester();
(1275) 						CheckMotor(40);
(1276) 						*/
(1277) 						Uart0TxData[0]=0xE8;
    011F9 EE88      LDI	R24,0xE8
    011FA 9380 0121 STS	Uart0TxData,R24
(1278) 						Uart0TxData[1]=0x40;
    011FC E480      LDI	R24,0x40
    011FD 9380 0122 STS	Uart0TxData+1,R24
(1279) 						Uart0TxData[2]=0x89;
    011FF E889      LDI	R24,0x89
    01200 9380 0123 STS	Uart0TxData+2,R24
(1280) 						Uart0TxData[3]=9;
    01202 E089      LDI	R24,0x9
    01203 9380 0124 STS	Uart0TxData+3,R24
(1281) 						SendUart0_2(9,50);//流量板直读检测，超时400ms
    01205 E322      LDI	R18,0x32
    01206 E030      LDI	R19,0
    01207 E009      LDI	R16,0x9
    01208 940E 03C1 CALL	_SendUart0_2
(1282) 
(1283) 						lfib=Uart0RxData[5];
    0120A 9020 02E9 LDS	R2,Uart0RxData+5
    0120C 2433      CLR	R3
    0120D 2444      CLR	R4
    0120E 2455      CLR	R5
    0120F 9230 0115 STS	lfib+1,R3
    01211 9220 0114 STS	lfib,R2
    01213 9250 0117 STS	lfib+3,R5
    01215 9240 0116 STS	lfib+2,R4
(1284) 						lfib<<=8;
    01217 E088      LDI	R24,0x8
    01218 E090      LDI	R25,0
    01219 9120 0116 LDS	R18,lfib+2
    0121B 9130 0117 LDS	R19,lfib+3
    0121D 9100 0114 LDS	R16,lfib
    0121F 9110 0115 LDS	R17,lfib+1
    01221 938A      ST	-Y,R24
    01222 940E 2652 CALL	lsl32
    01224 9310 0115 STS	lfib+1,R17
    01226 9300 0114 STS	lfib,R16
    01228 9330 0117 STS	lfib+3,R19
    0122A 9320 0116 STS	lfib+2,R18
(1285) 						lfib|=Uart0RxData[4];
    0122C 9020 02E8 LDS	R2,Uart0RxData+4
    0122E 2433      CLR	R3
    0122F 2444      CLR	R4
    01230 2455      CLR	R5
    01231 0138      MOVW	R6,R16
    01232 0149      MOVW	R8,R18
    01233 2862      OR	R6,R2
    01234 2873      OR	R7,R3
    01235 2884      OR	R8,R4
    01236 2895      OR	R9,R5
    01237 9270 0115 STS	lfib+1,R7
    01239 9260 0114 STS	lfib,R6
    0123B 9290 0117 STS	lfib+3,R9
    0123D 9280 0116 STS	lfib+2,R8
(1286) 						lfib&=0x0000ffff;
    0123F EF4F      LDI	R20,0xFF
    01240 EF5F      LDI	R21,0xFF
    01241 E060      LDI	R22,0
    01242 E070      LDI	R23,0
    01243 0113      MOVW	R2,R6
    01244 0124      MOVW	R4,R8
    01245 2224      AND	R2,R20
    01246 2235      AND	R3,R21
    01247 2246      AND	R4,R22
    01248 2257      AND	R5,R23
    01249 9230 0115 STS	lfib+1,R3
    0124B 9220 0114 STS	lfib,R2
    0124D 9250 0117 STS	lfib+3,R5
    0124F 9240 0116 STS	lfib+2,R4
(1287) 						myFIB.f=(unsigned long)lfib; 
    01251 0181      MOVW	R16,R2
    01252 0192      MOVW	R18,R4
    01253 940E 26B4 CALL	ulong2fp
    01255 9310 0341 STS	myFIB+1,R17
    01257 9300 0340 STS	myFIB,R16
    01259 9330 0343 STS	myFIB+3,R19
    0125B 9320 0342 STS	myFIB+2,R18
(1288) 
(1289) 						T_dat=myFIB.i[1];
    0125D 9020 0342 LDS	R2,myFIB+2
    0125F 9030 0343 LDS	R3,myFIB+3
    01261 9230 02D0 STS	T_dat+1,R3
    01263 9220 02CF STS	T_dat,R2
(1290) 						SendManchester();//流量-时间
    01265 940E 2144 CALL	_SendManchester
(1291) 						crc16array[0]=(unsigned char)(T_dat);
    01267 9020 02CF LDS	R2,T_dat
    01269 9030 02D0 LDS	R3,T_dat+1
    0126B 9220 0100 STS	crc16array,R2
(1292) 						crc16array[1]=(unsigned char)(T_dat>>8);
    0126D 2C23      MOV	R2,R3
    0126E 2433      CLR	R3
    0126F FC27      SBRC	R2,7
    01270 9430      COM	R3
    01271 9220 0101 STS	crc16array+1,R2
(1293) 
(1294) 						CheckMotor(30);	
    01273 E10E      LDI	R16,0x1E
    01274 E010      LDI	R17,0
    01275 940E 07BE CALL	_CheckMotor
(1295) 						T_dat=myFIB.i[0];
    01277 9020 0340 LDS	R2,myFIB
    01279 9030 0341 LDS	R3,myFIB+1
    0127B 9230 02D0 STS	T_dat+1,R3
    0127D 9220 02CF STS	T_dat,R2
(1296) 						SendManchester();//流量-时间
    0127F 940E 2144 CALL	_SendManchester
(1297) 						crc16array[2]=(unsigned char)(T_dat);
    01281 9020 02CF LDS	R2,T_dat
    01283 9030 02D0 LDS	R3,T_dat+1
    01285 9220 0102 STS	crc16array+2,R2
(1298) 						crc16array[3]=(unsigned char)(T_dat>>8);
    01287 2C23      MOV	R2,R3
    01288 2433      CLR	R3
    01289 FC27      SBRC	R2,7
    0128A 9430      COM	R3
    0128B 9220 0103 STS	crc16array+3,R2
(1299) 
(1300) 						CheckMotor(30);	
    0128D E10E      LDI	R16,0x1E
    0128E E010      LDI	R17,0
    0128F 940E 07BE CALL	_CheckMotor
(1301) 
(1302) 						lfib=Uart0RxData[7];
    01291 9020 02EB LDS	R2,Uart0RxData+7
    01293 2433      CLR	R3
    01294 2444      CLR	R4
    01295 2455      CLR	R5
    01296 9230 0115 STS	lfib+1,R3
    01298 9220 0114 STS	lfib,R2
    0129A 9250 0117 STS	lfib+3,R5
    0129C 9240 0116 STS	lfib+2,R4
(1303) 						lfib<<=8;
    0129E E088      LDI	R24,0x8
    0129F E090      LDI	R25,0
    012A0 9120 0116 LDS	R18,lfib+2
    012A2 9130 0117 LDS	R19,lfib+3
    012A4 9100 0114 LDS	R16,lfib
    012A6 9110 0115 LDS	R17,lfib+1
    012A8 938A      ST	-Y,R24
    012A9 940E 2652 CALL	lsl32
    012AB 9310 0115 STS	lfib+1,R17
    012AD 9300 0114 STS	lfib,R16
    012AF 9330 0117 STS	lfib+3,R19
    012B1 9320 0116 STS	lfib+2,R18
(1304) 						lfib|=Uart0RxData[6];
    012B3 9020 02EA LDS	R2,Uart0RxData+6
    012B5 2433      CLR	R3
    012B6 2444      CLR	R4
    012B7 2455      CLR	R5
    012B8 0138      MOVW	R6,R16
    012B9 0149      MOVW	R8,R18
    012BA 2862      OR	R6,R2
    012BB 2873      OR	R7,R3
    012BC 2884      OR	R8,R4
    012BD 2895      OR	R9,R5
    012BE 9270 0115 STS	lfib+1,R7
    012C0 9260 0114 STS	lfib,R6
    012C2 9290 0117 STS	lfib+3,R9
    012C4 9280 0116 STS	lfib+2,R8
(1305) 						lfib&=0x0000ffff;
    012C6 EF4F      LDI	R20,0xFF
    012C7 EF5F      LDI	R21,0xFF
    012C8 E060      LDI	R22,0
    012C9 E070      LDI	R23,0
    012CA 0113      MOVW	R2,R6
    012CB 0124      MOVW	R4,R8
    012CC 2224      AND	R2,R20
    012CD 2235      AND	R3,R21
    012CE 2246      AND	R4,R22
    012CF 2257      AND	R5,R23
    012D0 9230 0115 STS	lfib+1,R3
    012D2 9220 0114 STS	lfib,R2
    012D4 9250 0117 STS	lfib+3,R5
    012D6 9240 0116 STS	lfib+2,R4
(1306) 						myFIB.f=(unsigned long)lfib; 
    012D8 0181      MOVW	R16,R2
    012D9 0192      MOVW	R18,R4
    012DA 940E 26B4 CALL	ulong2fp
    012DC 9310 0341 STS	myFIB+1,R17
    012DE 9300 0340 STS	myFIB,R16
    012E0 9330 0343 STS	myFIB+3,R19
    012E2 9320 0342 STS	myFIB+2,R18
(1307) 
(1308) 						T_dat=myFIB.i[1];
    012E4 9020 0342 LDS	R2,myFIB+2
    012E6 9030 0343 LDS	R3,myFIB+3
    012E8 9230 02D0 STS	T_dat+1,R3
    012EA 9220 02CF STS	T_dat,R2
(1309) 						SendManchester();//流量-相位1
    012EC 940E 2144 CALL	_SendManchester
(1310) 						crc16array[4]=(unsigned char)(T_dat);
    012EE 9020 02CF LDS	R2,T_dat
    012F0 9030 02D0 LDS	R3,T_dat+1
    012F2 9220 0104 STS	crc16array+4,R2
(1311) 						crc16array[5]=(unsigned char)(T_dat>>8);
    012F4 2C23      MOV	R2,R3
    012F5 2433      CLR	R3
    012F6 FC27      SBRC	R2,7
    012F7 9430      COM	R3
    012F8 9220 0105 STS	crc16array+5,R2
(1312) 
(1313) 
(1314) 						CheckMotor(30);	
    012FA E10E      LDI	R16,0x1E
    012FB E010      LDI	R17,0
    012FC 940E 07BE CALL	_CheckMotor
(1315) 						T_dat=myFIB.i[0];
    012FE 9020 0340 LDS	R2,myFIB
    01300 9030 0341 LDS	R3,myFIB+1
    01302 9230 02D0 STS	T_dat+1,R3
    01304 9220 02CF STS	T_dat,R2
(1316) 						SendManchester();//流量-相位2
    01306 940E 2144 CALL	_SendManchester
(1317) 						crc16array[6]=(unsigned char)(T_dat);
    01308 9020 02CF LDS	R2,T_dat
    0130A 9030 02D0 LDS	R3,T_dat+1
    0130C 9220 0106 STS	crc16array+6,R2
(1318) 						crc16array[7]=(unsigned char)(T_dat>>8);
    0130E 2C23      MOV	R2,R3
    0130F 2433      CLR	R3
    01310 FC27      SBRC	R2,7
    01311 9430      COM	R3
    01312 9220 0107 STS	crc16array+7,R2
(1319) 
(1320) 						CheckMotor(30);	
    01314 E10E      LDI	R16,0x1E
    01315 E010      LDI	R17,0
    01316 940E 07BE CALL	_CheckMotor
(1321) 						crc16(crc16array,8);//0.75ms
    01318 E028      LDI	R18,0x8
    01319 E030      LDI	R19,0
    0131A E000      LDI	R16,0
    0131B E011      LDI	R17,1
    0131C 940E 2556 CALL	_crc16
(1322) 						T_dat=crc16hi;
    0131E 9020 0113 LDS	R2,crc16hi
    01320 2433      CLR	R3
    01321 9230 02D0 STS	T_dat+1,R3
    01323 9220 02CF STS	T_dat,R2
(1323) 						T_dat<<=8;
    01325 9020 02CF LDS	R2,T_dat
    01327 9030 02D0 LDS	R3,T_dat+1
    01329 2C32      MOV	R3,R2
    0132A 2422      CLR	R2
    0132B 9230 02D0 STS	T_dat+1,R3
    0132D 9220 02CF STS	T_dat,R2
(1324) 						T_dat|=crc16lo;	  
    0132F 9020 0112 LDS	R2,crc16lo
    01331 2433      CLR	R3
    01332 9040 02CF LDS	R4,T_dat
    01334 9050 02D0 LDS	R5,T_dat+1
    01336 2842      OR	R4,R2
    01337 2853      OR	R5,R3
    01338 9250 02D0 STS	T_dat+1,R5
    0133A 9240 02CF STS	T_dat,R4
(1325) 						SendManchester();//上传CRC校验共2字节
    0133C 940E 2144 CALL	_SendManchester
(1326) 						break;
    0133E 940C 20BD JMP	0x20BD
(1327) 					
(1328) 					//收放电机 
(1329) 					case 0x60:  
(1330) 						if( !(((R_dat)==0x61)  || ((R_dat)==0x62) ) )//既不是正转，也不是反转，则立即返回且不响应上位机
    01340 90E0 02CD LDS	R14,R_dat
    01342 90F0 02CE LDS	R15,R_dat+1
    01344 01C7      MOVW	R24,R14
    01345 3681      CPI	R24,0x61
    01346 E0E0      LDI	R30,0
    01347 079E      CPC	R25,R30
    01348 F031      BEQ	0x134F
    01349 3682      CPI	R24,0x62
    0134A E0E0      LDI	R30,0
    0134B 079E      CPC	R25,R30
    0134C F011      BEQ	0x134F
(1331) 							break;
    0134D 940C 20BD JMP	0x20BD
(1332) 
(1333) 						if( (Motor2Run_P) || (Motor2Run_N) )//调节电机正在运行
    0134F B180      IN	R24,0x00
    01350 7084      ANDI	R24,4
    01351 9586      LSR	R24
    01352 9586      LSR	R24
    01353 F421      BNE	0x1358
    01354 B180      IN	R24,0x00
    01355 7081      ANDI	R24,1
    01356 3081      CPI	R24,1
    01357 F041      BEQ	0x1360
    01358 B180      IN	R24,0x00
    01359 7084      ANDI	R24,4
    0135A 9586      LSR	R24
    0135B 9586      LSR	R24
    0135C 3081      CPI	R24,1
    0135D F481      BNE	0x136E
    0135E 9900      SBIC	0x00,0
    0135F C00E      RJMP	0x136E
(1334) 						{
(1335) 							Motor1Status.s.StartResult=3;//另一电机正在运行
    01360 9180 033E LDS	R24,Motor1Status
    01362 9190 033F LDS	R25,Motor1Status+1
    01364 6C80      ORI	R24,0xC0
    01365 9390 033F STS	Motor1Status+1,R25
    01367 9380 033E STS	Motor1Status,R24
(1336) 							CheckMotor(100);//很快响应上位机
    01369 E604      LDI	R16,0x64
    0136A E010      LDI	R17,0
    0136B 940E 07BE CALL	_CheckMotor
(1337) 						}
    0136D C0CA      RJMP	0x1438
(1338) 						else if(Motor1Run_P)//收放电机正在正转
    0136E B389      IN	R24,0x19
    0136F 7082      ANDI	R24,2
    01370 9586      LSR	R24
    01371 F581      BNE	0x13A2
    01372 B389      IN	R24,0x19
    01373 7084      ANDI	R24,4
    01374 9586      LSR	R24
    01375 9586      LSR	R24
    01376 3081      CPI	R24,1
    01377 F551      BNE	0x13A2
(1339) 						{
(1340) 						  if(R_dat==0x61)
    01378 9180 02CD LDS	R24,R_dat
    0137A 9190 02CE LDS	R25,R_dat+1
    0137C 3681      CPI	R24,0x61
    0137D E0E0      LDI	R30,0
    0137E 079E      CPC	R25,R30
    0137F F459      BNE	0x138B
(1341) 						  {
(1342) 						    Motor1Status.s.StartResult=1;//本电机正在同向运行
    01380 9180 033E LDS	R24,Motor1Status
    01382 9190 033F LDS	R25,Motor1Status+1
    01384 738F      ANDI	R24,0x3F
    01385 6480      ORI	R24,0x40
    01386 9390 033F STS	Motor1Status+1,R25
    01388 9380 033E STS	Motor1Status,R24
(1343) 						  }
    0138A C012      RJMP	0x139D
(1344) 						  else if(R_dat==0x62)
    0138B 9180 02CD LDS	R24,R_dat
    0138D 9190 02CE LDS	R25,R_dat+1
    0138F 3682      CPI	R24,0x62
    01390 E0E0      LDI	R30,0
    01391 079E      CPC	R25,R30
    01392 F451      BNE	0x139D
(1345) 						  {
(1346) 						   Motor1Status.s.StartResult=2;//本电机正在反向运行
    01393 9180 033E LDS	R24,Motor1Status
    01395 9190 033F LDS	R25,Motor1Status+1
    01397 738F      ANDI	R24,0x3F
    01398 6880      ORI	R24,0x80
    01399 9390 033F STS	Motor1Status+1,R25
    0139B 9380 033E STS	Motor1Status,R24
(1347) 						  }
(1348) 						  CheckMotor(100); //很快响应上位机
    0139D E604      LDI	R16,0x64
    0139E E010      LDI	R17,0
    0139F 940E 07BE CALL	_CheckMotor
(1349) 						}
    013A1 C096      RJMP	0x1438
(1350) 						else if(Motor1Run_N)//收放电机正在反转
    013A2 B389      IN	R24,0x19
    013A3 7082      ANDI	R24,2
    013A4 9586      LSR	R24
    013A5 3081      CPI	R24,1
    013A6 F579      BNE	0x13D6
    013A7 B389      IN	R24,0x19
    013A8 7084      ANDI	R24,4
    013A9 9586      LSR	R24
    013AA 9586      LSR	R24
    013AB F551      BNE	0x13D6
(1351) 						{
(1352) 						  if(R_dat==0x61)
    013AC 9180 02CD LDS	R24,R_dat
    013AE 9190 02CE LDS	R25,R_dat+1
    013B0 3681      CPI	R24,0x61
    013B1 E0E0      LDI	R30,0
    013B2 079E      CPC	R25,R30
    013B3 F459      BNE	0x13BF
(1353) 						  {
(1354) 						   Motor1Status.s.StartResult=2;//本电机正在反向运行 
    013B4 9180 033E LDS	R24,Motor1Status
    013B6 9190 033F LDS	R25,Motor1Status+1
    013B8 738F      ANDI	R24,0x3F
    013B9 6880      ORI	R24,0x80
    013BA 9390 033F STS	Motor1Status+1,R25
    013BC 9380 033E STS	Motor1Status,R24
(1355) 						  }
    013BE C012      RJMP	0x13D1
(1356) 						  else if(R_dat==0x62)
    013BF 9180 02CD LDS	R24,R_dat
    013C1 9190 02CE LDS	R25,R_dat+1
    013C3 3682      CPI	R24,0x62
    013C4 E0E0      LDI	R30,0
    013C5 079E      CPC	R25,R30
    013C6 F451      BNE	0x13D1
(1357) 						  {
(1358) 						   Motor1Status.s.StartResult=1;//本电机正在同向运行
    013C7 9180 033E LDS	R24,Motor1Status
    013C9 9190 033F LDS	R25,Motor1Status+1
    013CB 738F      ANDI	R24,0x3F
    013CC 6480      ORI	R24,0x40
    013CD 9390 033F STS	Motor1Status+1,R25
    013CF 9380 033E STS	Motor1Status,R24
(1359) 						  }
(1360) 						  CheckMotor(100); //很快响应上位机
    013D1 E604      LDI	R16,0x64
    013D2 E010      LDI	R17,0
    013D3 940E 07BE CALL	_CheckMotor
(1361) 						}
    013D5 C062      RJMP	0x1438
(1362) 						else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
(1363) 						{  
(1364) 							//全部电机状态置初值，上一次停止原因全部清除
(1365) 							Motor1Status.s.BrokenStop=0;
    013D6 9180 033E LDS	R24,Motor1Status
    013D8 9190 033F LDS	R25,Motor1Status+1
    013DA 7F8B      ANDI	R24,0xFB
    013DB 9390 033F STS	Motor1Status+1,R25
    013DD 9380 033E STS	Motor1Status,R24
(1366) 							Motor1Status.s.CommandStop=0;
    013DF 7F87      ANDI	R24,0xF7
    013E0 9390 033F STS	Motor1Status+1,R25
    013E2 9380 033E STS	Motor1Status,R24
(1367) 							Motor1Status.s.OverCurrent=0;
    013E4 7E8F      ANDI	R24,0xEF
    013E5 9390 033F STS	Motor1Status+1,R25
    013E7 9380 033E STS	Motor1Status,R24
(1368) 							Motor1Status.s.UnderVoltage=0;
    013E9 7D8F      ANDI	R24,0xDF
    013EA 9390 033F STS	Motor1Status+1,R25
    013EC 9380 033E STS	Motor1Status,R24
(1369) 							Motor1Status.s.StartResult=0;//正常启动
    013EE 738F      ANDI	R24,0x3F
    013EF 9390 033F STS	Motor1Status+1,R25
    013F1 9380 033E STS	Motor1Status,R24
(1370) 
(1371) 							if((R_dat)==0x61)//张开命令
    013F3 9180 02CD LDS	R24,R_dat
    013F5 9190 02CE LDS	R25,R_dat+1
    013F7 3681      CPI	R24,0x61
    013F8 E0E0      LDI	R30,0
    013F9 079E      CPC	R25,R30
    013FA F419      BNE	0x13FE
(1372) 							{ 
(1373) 								DIR1_H       //张臂，正转
    013FB 9AD2      SBI	0x1A,2
    013FC 9ADA      SBI	0x1B,2
(1374) 							}
    013FD C00E      RJMP	0x140C
(1375) 							else if((R_dat)==0x62)          
    013FE 9180 02CD LDS	R24,R_dat
    01400 9190 02CE LDS	R25,R_dat+1
    01402 3682      CPI	R24,0x62
    01403 E0E0      LDI	R30,0
    01404 079E      CPC	R25,R30
    01405 F011      BEQ	0x1408
    01406 940C 20C8 JMP	0x20C8
(1376) 							{ 
(1377) 								DIR1_L      //收臂，反转
    01408 9AD2      SBI	0x1A,2
    01409 B38B      IN	R24,0x1B
    0140A 7F8B      ANDI	R24,0xFB
    0140B BB8B      OUT	0x1B,R24
(1378) 							}
(1379) 							else
(1380) 							{
(1381) 								return;//20170609
(1382) 							}
(1383) 
(1384) 							VM_H//开电机电源
    0140C 9AD0      SBI	0x1A,0
    0140D 9AD8      SBI	0x1B,0
    0140E 9180 0061 LDS	R24,0x61
    01410 6082      ORI	R24,2
    01411 9380 0061 STS	0x61,R24
    01413 9180 0062 LDS	R24,0x62
    01415 6082      ORI	R24,2
    01416 9380 0062 STS	0x62,R24
    01418 9ABF      SBI	0x17,7
    01419 9AC7      SBI	0x18,7
(1385) 
(1386) 							CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定
    0141A EF04      LDI	R16,0xF4
    0141B E011      LDI	R17,1
    0141C 940E 07BE CALL	_CheckMotor
(1387) 
(1388) 							//CompCounter=0; //电流监测计数器清0
(1389) 							//EIFR|=0x01;//清INT0中断标志
(1390) 							//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
(1391) 
(1392) 							TCCR1B = 0x00; //stop
    0141E 2422      CLR	R2
    0141F BC2E      OUT	0x2E,R2
(1393) 							TCNT1 = 61629;   //定时500ms
    01420 EB8D      LDI	R24,0xBD
    01421 EF90      LDI	R25,0xF0
    01422 BD9D      OUT	0x2D,R25
    01423 BD8C      OUT	0x2C,R24
(1394) 							TIFR|=0x04; //清定时器1中断标志
    01424 B786      IN	R24,0x36
    01425 6084      ORI	R24,4
    01426 BF86      OUT	0x36,R24
(1395) 							TCCR1B = 0x05; //1024分频
    01427 E085      LDI	R24,5
    01428 BD8E      OUT	0x2E,R24
(1396) 							TIFR|=0x04; //清定时器1中断标志
    01429 B786      IN	R24,0x36
    0142A 6084      ORI	R24,4
    0142B BF86      OUT	0x36,R24
(1397) 
(1398) 							Pwm_startup(1);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测		
    0142C E001      LDI	R16,1
    0142D 940E 0467 CALL	_Pwm_startup
(1399) 
(1400) 							while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
    0142F B626      IN	R2,0x36
    01430 FE22      SBRS	R2,2
    01431 CFFD      RJMP	0x142F
(1401) 							TCCR1B = 0x00; //stop
    01432 2422      CLR	R2
    01433 BC2E      OUT	0x2E,R2
(1402) 
(1403) 							//EIFR|=0x01;//清INT0中断标志
(1404) 							//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
(1405) 
(1406) 							CheckMotor(500);//延时保证总线电压稳定		
    01434 EF04      LDI	R16,0xF4
    01435 E011      LDI	R17,1
    01436 940E 07BE CALL	_CheckMotor
(1407) 						}
(1408) 						T_dat=Motor1Status.i;
    01438 9020 033E LDS	R2,Motor1Status
    0143A 9030 033F LDS	R3,Motor1Status+1
    0143C 9230 02D0 STS	T_dat+1,R3
    0143E 9220 02CF STS	T_dat,R2
(1409) 						SendManchester();	 
    01440 940E 2144 CALL	_SendManchester
(1410) 
(1411) 						break;
    01442 940C 20BD JMP	0x20BD
(1412) 
(1413) 					case 0x70://调节电机   
(1414) 						if( ((R_dat)<0x71)  || ((R_dat)>0x7c)  )//既不是调大，也不是调小，也不微调大，也不是微调小，则立即返回且不响应上位机
    01444 90E0 02CD LDS	R14,R_dat
    01446 90F0 02CE LDS	R15,R_dat+1
    01448 01C7      MOVW	R24,R14
    01449 3781      CPI	R24,0x71
    0144A E0E0      LDI	R30,0
    0144B 079E      CPC	R25,R30
    0144C F02C      BLT	0x1452
    0144D E78C      LDI	R24,0x7C
    0144E E090      LDI	R25,0
    0144F 158E      CP	R24,R14
    01450 059F      CPC	R25,R15
    01451 F414      BGE	0x1454
(1415) 						break;
    01452 940C 20BD JMP	0x20BD
(1416) 
(1417) 						i=R_dat%2;
    01454 E022      LDI	R18,2
    01455 E030      LDI	R19,0
    01456 9100 02CD LDS	R16,R_dat
    01458 9110 02CE LDS	R17,R_dat+1
    0145A 940E 25B5 CALL	mod16s
    0145C 2EA0      MOV	R10,R16
(1418) 						
(1419) 						if( (Motor1Run_P) || (Motor1Run_N) )//收放电机正在运行
    0145D B389      IN	R24,0x19
    0145E 7082      ANDI	R24,2
    0145F 9586      LSR	R24
    01460 F431      BNE	0x1467
    01461 B389      IN	R24,0x19
    01462 7084      ANDI	R24,4
    01463 9586      LSR	R24
    01464 9586      LSR	R24
    01465 3081      CPI	R24,1
    01466 F051      BEQ	0x1471
    01467 B389      IN	R24,0x19
    01468 7082      ANDI	R24,2
    01469 9586      LSR	R24
    0146A 3081      CPI	R24,1
    0146B F499      BNE	0x147F
    0146C B389      IN	R24,0x19
    0146D 7084      ANDI	R24,4
    0146E 9586      LSR	R24
    0146F 9586      LSR	R24
    01470 F471      BNE	0x147F
(1420) 						{
(1421) 							Motor2Status.s.StartResult=3;//另一电机正在运行
    01471 9180 033C LDS	R24,Motor2Status
    01473 9190 033D LDS	R25,Motor2Status+1
    01475 6C80      ORI	R24,0xC0
    01476 9390 033D STS	Motor2Status+1,R25
    01478 9380 033C STS	Motor2Status,R24
(1422) 							CheckMotor(100);//很快响应上位机
    0147A E604      LDI	R16,0x64
    0147B E010      LDI	R17,0
    0147C 940E 07BE CALL	_CheckMotor
(1423) 						}
    0147E C0AE      RJMP	0x152D
(1424) 						else if(Motor2Run_P)//调节电机正在正转
    0147F B180      IN	R24,0x00
    01480 7084      ANDI	R24,4
    01481 9586      LSR	R24
    01482 9586      LSR	R24
    01483 F501      BNE	0x14A4
    01484 B180      IN	R24,0x00
    01485 7081      ANDI	R24,1
    01486 3081      CPI	R24,1
    01487 F4E1      BNE	0x14A4
(1425) 						{
(1426) 						  if(i==0)//偶数命令，正转
    01488 20AA      TST	R10
    01489 F459      BNE	0x1495
(1427) 						  {
(1428) 						   Motor2Status.s.StartResult=1;//本电机正在同向运行
    0148A 9180 033C LDS	R24,Motor2Status
    0148C 9190 033D LDS	R25,Motor2Status+1
    0148E 738F      ANDI	R24,0x3F
    0148F 6480      ORI	R24,0x40
    01490 9390 033D STS	Motor2Status+1,R25
    01492 9380 033C STS	Motor2Status,R24
(1429) 						  }
    01494 C00A      RJMP	0x149F
(1430) 						  else//奇数命令，反转
(1431) 						  {
(1432) 						   Motor2Status.s.StartResult=2;//本电机正在反向运行
    01495 9180 033C LDS	R24,Motor2Status
    01497 9190 033D LDS	R25,Motor2Status+1
    01499 738F      ANDI	R24,0x3F
    0149A 6880      ORI	R24,0x80
    0149B 9390 033D STS	Motor2Status+1,R25
    0149D 9380 033C STS	Motor2Status,R24
(1433) 						  }
(1434) 						  CheckMotor(100); //很快响应上位机
    0149F E604      LDI	R16,0x64
    014A0 E010      LDI	R17,0
    014A1 940E 07BE CALL	_CheckMotor
(1435) 						}
    014A3 C089      RJMP	0x152D
(1436) 						else if(Motor2Run_N)//调节电机正在反转
    014A4 B180      IN	R24,0x00
    014A5 7084      ANDI	R24,4
    014A6 9586      LSR	R24
    014A7 9586      LSR	R24
    014A8 3081      CPI	R24,1
    014A9 F4F1      BNE	0x14C8
    014AA 9900      SBIC	0x00,0
    014AB C01C      RJMP	0x14C8
(1437) 						{
(1438) 						  if(i==0)//偶数命令，正转
    014AC 20AA      TST	R10
    014AD F459      BNE	0x14B9
(1439) 						  {
(1440) 						   Motor2Status.s.StartResult=2;//本电机正在反向运行
    014AE 9180 033C LDS	R24,Motor2Status
    014B0 9190 033D LDS	R25,Motor2Status+1
    014B2 738F      ANDI	R24,0x3F
    014B3 6880      ORI	R24,0x80
    014B4 9390 033D STS	Motor2Status+1,R25
    014B6 9380 033C STS	Motor2Status,R24
(1441) 						  }
    014B8 C00A      RJMP	0x14C3
(1442) 						  else//奇数命令，反转
(1443) 						  {
(1444) 						   Motor2Status.s.StartResult=1;//本电机正在同向运行
    014B9 9180 033C LDS	R24,Motor2Status
    014BB 9190 033D LDS	R25,Motor2Status+1
    014BD 738F      ANDI	R24,0x3F
    014BE 6480      ORI	R24,0x40
    014BF 9390 033D STS	Motor2Status+1,R25
    014C1 9380 033C STS	Motor2Status,R24
(1445) 						  }
(1446) 						  CheckMotor(100); //很快响应上位机
    014C3 E604      LDI	R16,0x64
    014C4 E010      LDI	R17,0
    014C5 940E 07BE CALL	_CheckMotor
(1447) 						}					
    014C7 C065      RJMP	0x152D
(1448) 						else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
(1449) 						{  
(1450) 							//全部电机状态置初值，上一次停止原因全部清除
(1451) 							Motor2Status.s.BrokenStop=0;
    014C8 9180 033C LDS	R24,Motor2Status
    014CA 9190 033D LDS	R25,Motor2Status+1
    014CC 7F8B      ANDI	R24,0xFB
    014CD 9390 033D STS	Motor2Status+1,R25
    014CF 9380 033C STS	Motor2Status,R24
(1452) 							Motor2Status.s.CommandStop=0;
    014D1 7F87      ANDI	R24,0xF7
    014D2 9390 033D STS	Motor2Status+1,R25
    014D4 9380 033C STS	Motor2Status,R24
(1453) 							Motor2Status.s.OverCurrent=0;
    014D6 7E8F      ANDI	R24,0xEF
    014D7 9390 033D STS	Motor2Status+1,R25
    014D9 9380 033C STS	Motor2Status,R24
(1454) 							Motor2Status.s.UnderVoltage=0;
    014DB 7D8F      ANDI	R24,0xDF
    014DC 9390 033D STS	Motor2Status+1,R25
    014DE 9380 033C STS	Motor2Status,R24
(1455) 							Motor2Status.s.StartResult=0;//正常启动
    014E0 738F      ANDI	R24,0x3F
    014E1 9390 033D STS	Motor2Status+1,R25
    014E3 9380 033C STS	Motor2Status,R24
(1456) 
(1457) 							if( i==1 )//奇数命令，调大
    014E5 2D8A      MOV	R24,R10
    014E6 3081      CPI	R24,1
    014E7 F459      BNE	0x14F3
(1458) 							{ 
(1459) 								DIR2_L      //反转
    014E8 9180 0061 LDS	R24,0x61
    014EA 6081      ORI	R24,1
    014EB 9380 0061 STS	0x61,R24
    014ED 9180 0062 LDS	R24,0x62
    014EF 7F8E      ANDI	R24,0xFE
    014F0 9380 0062 STS	0x62,R24
(1460) 							}
    014F2 C00E      RJMP	0x1501
(1461) 							else if( i==0 )    //偶数命令，调小
    014F3 20AA      TST	R10
    014F4 F011      BEQ	0x14F7
    014F5 940C 20C8 JMP	0x20C8
(1462) 							{ 
(1463) 								DIR2_H      //正转
    014F7 9180 0061 LDS	R24,0x61
    014F9 6081      ORI	R24,1
    014FA 9380 0061 STS	0x61,R24
    014FC 9180 0062 LDS	R24,0x62
    014FE 6081      ORI	R24,1
    014FF 9380 0062 STS	0x62,R24
(1464) 							}
(1465) 							else
(1466) 							{
(1467) 								return;//20170609
(1468) 							}
(1469) 
(1470) 							VM_H//开电机电源
    01501 9AD0      SBI	0x1A,0
    01502 9AD8      SBI	0x1B,0
    01503 9180 0061 LDS	R24,0x61
    01505 6082      ORI	R24,2
    01506 9380 0061 STS	0x61,R24
    01508 9180 0062 LDS	R24,0x62
    0150A 6082      ORI	R24,2
    0150B 9380 0062 STS	0x62,R24
    0150D 9ABF      SBI	0x17,7
    0150E 9AC7      SBI	0x18,7
(1471) 
(1472) 							CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定
    0150F EF04      LDI	R16,0xF4
    01510 E011      LDI	R17,1
    01511 940E 07BE CALL	_CheckMotor
(1473) 
(1474) 							//CompCounter=0; //电流监测计数器清0
(1475) 							//EIFR|=0x01;//清INT0中断标志
(1476) 							//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
(1477) 
(1478) 							TCCR1B = 0x00; //stop
    01513 2422      CLR	R2
    01514 BC2E      OUT	0x2E,R2
(1479) 							TCNT1 = 61629;   //定时500ms
    01515 EB8D      LDI	R24,0xBD
    01516 EF90      LDI	R25,0xF0
    01517 BD9D      OUT	0x2D,R25
    01518 BD8C      OUT	0x2C,R24
(1480) 							TIFR|=0x04; //清定时器1中断标志
    01519 B786      IN	R24,0x36
    0151A 6084      ORI	R24,4
    0151B BF86      OUT	0x36,R24
(1481) 							TCCR1B = 0x05; //1024分频
    0151C E085      LDI	R24,5
    0151D BD8E      OUT	0x2E,R24
(1482) 							TIFR|=0x04; //清定时器1中断标志
    0151E B786      IN	R24,0x36
    0151F 6084      ORI	R24,4
    01520 BF86      OUT	0x36,R24
(1483) 
(1484) 							Pwm_startup(2);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测					
    01521 E002      LDI	R16,2
    01522 940E 0467 CALL	_Pwm_startup
(1485) 
(1486) 							while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
    01524 B626      IN	R2,0x36
    01525 FE22      SBRS	R2,2
    01526 CFFD      RJMP	0x1524
(1487) 							TCCR1B = 0x00; //stop
    01527 2422      CLR	R2
    01528 BC2E      OUT	0x2E,R2
(1488) 
(1489) 							//EIFR|=0x01;//清INT0中断标志
(1490) 							//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
(1491) 
(1492) 							CheckMotor(500);//延时保证总线电压稳定		 	 
    01529 EF04      LDI	R16,0xF4
    0152A E011      LDI	R17,1
    0152B 940E 07BE CALL	_CheckMotor
(1493) 						}
(1494) 						T_dat=Motor2Status.i;
    0152D 9020 033C LDS	R2,Motor2Status
    0152F 9030 033D LDS	R3,Motor2Status+1
    01531 9230 02D0 STS	T_dat+1,R3
    01533 9220 02CF STS	T_dat,R2
(1495) 						SendManchester();		
    01535 940E 2144 CALL	_SendManchester
(1496) 						if(R_dat>0x72)//微调，需要定时，定时到后自动停止
    01537 E782      LDI	R24,0x72
    01538 E090      LDI	R25,0
    01539 9020 02CD LDS	R2,R_dat
    0153B 9030 02CE LDS	R3,R_dat+1
    0153D 1582      CP	R24,R2
    0153E 0593      CPC	R25,R3
    0153F F014      BLT	0x1542
    01540 940C 20BD JMP	0x20BD
(1497) 						{
(1498) 							ETIFR=0x04;//清Timer3溢出中断标志
    01542 E084      LDI	R24,4
    01543 9380 007C STS	0x7C,R24
(1499) 							ETIMSK = 0x04; //Timer3溢出中断使能，其它中断关闭
    01545 9380 007D STS	0x7D,R24
(1500) 							TCCR3B = 0x00;
    01547 2422      CLR	R2
    01548 9220 008A STS	0x8A,R2
(1501) 
(1502) 							j=(R_dat-0x72+1)/2;
    0154A E022      LDI	R18,2
    0154B E030      LDI	R19,0
    0154C 9100 02CD LDS	R16,R_dat
    0154E 9110 02CE LDS	R17,R_dat+1
    01550 5702      SUBI	R16,0x72
    01551 4010      SBCI	R17,0
    01552 5F0F      SUBI	R16,0xFF
    01553 4F1F      SBCI	R17,0xFF
    01554 940E 25B9 CALL	div16s
    01556 0168      MOVW	R12,R16
(1503) 							j=j*7812;
    01557 E804      LDI	R16,0x84
    01558 E11E      LDI	R17,0x1E
    01559 0196      MOVW	R18,R12
    0155A 940E 2603 CALL	empy16s
    0155C 0168      MOVW	R12,R16
(1504) 							j=65536-j;
    0155D 0116      MOVW	R2,R12
    0155E 2444      CLR	R4
    0155F 2455      CLR	R5
    01560 E040      LDI	R20,0
    01561 E050      LDI	R21,0
    01562 E061      LDI	R22,1
    01563 E070      LDI	R23,0
    01564 1942      SUB	R20,R2
    01565 0953      SBC	R21,R3
    01566 0964      SBC	R22,R4
    01567 0975      SBC	R23,R5
(1505) 							j+=1;
    01568 01CA      MOVW	R24,R20
    01569 9601      ADIW	R24,1
    0156A 016C      MOVW	R12,R24
(1506) 
(1507) 							TCNT3H = j>>8;  //最小1秒，最多5秒
    0156B 011C      MOVW	R2,R24
    0156C 2C23      MOV	R2,R3
    0156D 2433      CLR	R3
    0156E 9220 0089 STS	0x89,R2
(1508) 							TCNT3L = j;
    01570 92C0 0088 STS	0x88,R12
(1509) 
(1510) 							//TCNT3H = 0xE1;  //1秒
(1511) 							//TCNT3L = 0x7C;
(1512) 
(1513) 							//TCNT3H = 0xC2; //2秒
(1514) 							//TCNT3L = 0xF7;
(1515) 
(1516) 							// TCNT3H = 0xA4; //3秒
(1517) 							// TCNT3L = 0x73;
(1518) 
(1519) 							TCCR3A = 0x00;
    01572 2422      CLR	R2
    01573 9220 008B STS	0x8B,R2
(1520) 							TCCR3B = 0x05; //8M时钟，1024分频，定时1秒
    01575 E085      LDI	R24,5
    01576 9380 008A STS	0x8A,R24
(1521) 							ETIFR=0x04;//清Timer3溢出中断标志
    01578 E084      LDI	R24,4
    01579 9380 007C STS	0x7C,R24
(1522) 						} 
(1523) 						break;
    0157B 940C 20BD JMP	0x20BD
(1524) 
(1525) 					case 0x80://电机相关
(1526) 						if(R_dat==0x80)//只开电机电源，不开电机
    0157D 9180 02CD LDS	R24,R_dat
    0157F 9190 02CE LDS	R25,R_dat+1
    01581 3880      CPI	R24,0x80
    01582 E0E0      LDI	R30,0
    01583 079E      CPC	R25,R30
    01584 F501      BNE	0x15A5
(1527) 						{        	  
(1528) 							CheckMotor(30);//延迟10ms  
    01585 E10E      LDI	R16,0x1E
    01586 E010      LDI	R17,0
    01587 940E 07BE CALL	_CheckMotor
(1529) 							VM_H//开电机电源
    01589 9AD0      SBI	0x1A,0
    0158A 9AD8      SBI	0x1B,0
    0158B 9180 0061 LDS	R24,0x61
    0158D 6082      ORI	R24,2
    0158E 9380 0061 STS	0x61,R24
    01590 9180 0062 LDS	R24,0x62
    01592 6082      ORI	R24,2
    01593 9380 0062 STS	0x62,R24
    01595 9ABF      SBI	0x17,7
    01596 9AC7      SBI	0x18,7
(1530) 							CheckMotor(30);//延迟10ms  
    01597 E10E      LDI	R16,0x1E
    01598 E010      LDI	R17,0
    01599 940E 07BE CALL	_CheckMotor
(1531) 							T_dat=0x0000;   
    0159B 2422      CLR	R2
    0159C 2433      CLR	R3
    0159D 9230 02D0 STS	T_dat+1,R3
    0159F 9220 02CF STS	T_dat,R2
(1532) 							SendManchester();
    015A1 940E 2144 CALL	_SendManchester
(1533) 						}	  
    015A3 940C 20BD JMP	0x20BD
(1534) 						else if(R_dat==0x81)//获取电机状态	
    015A5 9180 02CD LDS	R24,R_dat
    015A7 9190 02CE LDS	R25,R_dat+1
    015A9 3881      CPI	R24,0x81
    015AA E0E0      LDI	R30,0
    015AB 079E      CPC	R25,R30
    015AC F4F1      BNE	0x15CB
(1535) 						{ 
(1536) 							//先处理收放电机
(1537) 							CheckMotor(30);//延迟10ms  
    015AD E10E      LDI	R16,0x1E
    015AE E010      LDI	R17,0
    015AF 940E 07BE CALL	_CheckMotor
(1538) 							T_dat=Motor1Status.i;	   
    015B1 9020 033E LDS	R2,Motor1Status
    015B3 9030 033F LDS	R3,Motor1Status+1
    015B5 9230 02D0 STS	T_dat+1,R3
    015B7 9220 02CF STS	T_dat,R2
(1539) 							SendManchester();
    015B9 940E 2144 CALL	_SendManchester
(1540) 
(1541) 							//再处理调节电机 
(1542) 							CheckMotor(30);//延迟10ms  
    015BB E10E      LDI	R16,0x1E
    015BC E010      LDI	R17,0
    015BD 940E 07BE CALL	_CheckMotor
(1543) 							T_dat=Motor2Status.i;	    
    015BF 9020 033C LDS	R2,Motor2Status
    015C1 9030 033D LDS	R3,Motor2Status+1
    015C3 9230 02D0 STS	T_dat+1,R3
    015C5 9220 02CF STS	T_dat,R2
(1544) 							SendManchester();
    015C7 940E 2144 CALL	_SendManchester
(1545) 						}	  
    015C9 940C 20BD JMP	0x20BD
(1546) 						else if(R_dat==0x82)//电机停止，同时停止二个电机
    015CB 9180 02CD LDS	R24,R_dat
    015CD 9190 02CE LDS	R25,R_dat+1
    015CF 3882      CPI	R24,0x82
    015D0 E0E0      LDI	R30,0
    015D1 079E      CPC	R25,R30
    015D2 F009      BEQ	0x15D4
    015D3 C071      RJMP	0x1645
(1547) 						{	 
(1548) 							if( (Motor1Run_P) || (Motor1Run_N) )//收放电机正在运行
    015D4 B389      IN	R24,0x19
    015D5 7082      ANDI	R24,2
    015D6 9586      LSR	R24
    015D7 F431      BNE	0x15DE
    015D8 B389      IN	R24,0x19
    015D9 7084      ANDI	R24,4
    015DA 9586      LSR	R24
    015DB 9586      LSR	R24
    015DC 3081      CPI	R24,1
    015DD F051      BEQ	0x15E8
    015DE B389      IN	R24,0x19
    015DF 7082      ANDI	R24,2
    015E0 9586      LSR	R24
    015E1 3081      CPI	R24,1
    015E2 F471      BNE	0x15F1
    015E3 B389      IN	R24,0x19
    015E4 7084      ANDI	R24,4
    015E5 9586      LSR	R24
    015E6 9586      LSR	R24
    015E7 F449      BNE	0x15F1
(1549) 							{
(1550) 								Motor1Status.s.CommandStop=1;
    015E8 9180 033E LDS	R24,Motor1Status
    015EA 9190 033F LDS	R25,Motor1Status+1
    015EC 6088      ORI	R24,0x8
    015ED 9390 033F STS	Motor1Status+1,R25
    015EF 9380 033E STS	Motor1Status,R24
(1551) 							}
(1552) 							if( (Motor2Run_P) || (Motor2Run_N) )//调节电机正在运行
    015F1 B180      IN	R24,0x00
    015F2 7084      ANDI	R24,4
    015F3 9586      LSR	R24
    015F4 9586      LSR	R24
    015F5 F421      BNE	0x15FA
    015F6 B180      IN	R24,0x00
    015F7 7081      ANDI	R24,1
    015F8 3081      CPI	R24,1
    015F9 F041      BEQ	0x1602
    015FA B180      IN	R24,0x00
    015FB 7084      ANDI	R24,4
    015FC 9586      LSR	R24
    015FD 9586      LSR	R24
    015FE 3081      CPI	R24,1
    015FF F459      BNE	0x160B
    01600 9900      SBIC	0x00,0
    01601 C009      RJMP	0x160B
(1553) 							{ 
(1554) 								Motor2Status.s.CommandStop=1;
    01602 9180 033C LDS	R24,Motor2Status
    01604 9190 033D LDS	R25,Motor2Status+1
    01606 6088      ORI	R24,0x8
    01607 9390 033D STS	Motor2Status+1,R25
    01609 9380 033C STS	Motor2Status,R24
(1555) 							}
(1556) 							MOTORSTOP  //关电机
    0160B 9AD0      SBI	0x1A,0
    0160C 9AD8      SBI	0x1B,0
    0160D 9180 0061 LDS	R24,0x61
    0160F 6082      ORI	R24,2
    01610 9380 0061 STS	0x61,R24
    01612 9180 0062 LDS	R24,0x62
    01614 6082      ORI	R24,2
    01615 9380 0062 STS	0x62,R24
    01617 9ABF      SBI	0x17,7
    01618 B388      IN	R24,0x18
    01619 778F      ANDI	R24,0x7F
    0161A BB88      OUT	0x18,R24
    0161B 9AD2      SBI	0x1A,2
    0161C B38B      IN	R24,0x1B
    0161D 7F8B      ANDI	R24,0xFB
    0161E BB8B      OUT	0x1B,R24
    0161F 9AD1      SBI	0x1A,1
    01620 B38B      IN	R24,0x1B
    01621 7F8D      ANDI	R24,0xFD
    01622 BB8B      OUT	0x1B,R24
    01623 9180 0061 LDS	R24,0x61
    01625 6081      ORI	R24,1
    01626 9380 0061 STS	0x61,R24
    01628 9180 0062 LDS	R24,0x62
    0162A 7F8E      ANDI	R24,0xFE
    0162B 9380 0062 STS	0x62,R24
    0162D 9180 0061 LDS	R24,0x61
    0162F 6084      ORI	R24,4
    01630 9380 0061 STS	0x61,R24
    01632 9180 0062 LDS	R24,0x62
    01634 7F8B      ANDI	R24,0xFB
    01635 9380 0062 STS	0x62,R24
(1557) 							CheckMotor(200);
    01637 EC08      LDI	R16,0xC8
    01638 E010      LDI	R17,0
    01639 940E 07BE CALL	_CheckMotor
(1558) 							T_dat=0x0000;	
    0163B 2422      CLR	R2
    0163C 2433      CLR	R3
    0163D 9230 02D0 STS	T_dat+1,R3
    0163F 9220 02CF STS	T_dat,R2
(1559) 							SendManchester();	 
    01641 940E 2144 CALL	_SendManchester
(1560) 						}
    01643 940C 20BD JMP	0x20BD
(1561) 						else if(R_dat==0x83)//读取电机堵转电流档位和断路档位
    01645 9180 02CD LDS	R24,R_dat
    01647 9190 02CE LDS	R25,R_dat+1
    01649 3883      CPI	R24,0x83
    0164A E0E0      LDI	R30,0
    0164B 079E      CPC	R25,R30
    0164C F009      BEQ	0x164E
    0164D C05D      RJMP	0x16AB
(1562) 						{
(1563) 							Motor1Gear=EEPROM_read(0);//收放电机
    0164E 2700      CLR	R16
    0164F 2711      CLR	R17
    01650 940E 254F CALL	_EEPROM_read
    01652 2EC0      MOV	R12,R16
    01653 92C0 033B STS	Motor1Gear,R12
(1564) 							Motor2Gear=EEPROM_read(1);//调节电机
    01655 E001      LDI	R16,1
    01656 E010      LDI	R17,0
    01657 940E 254F CALL	_EEPROM_read
    01659 2EC0      MOV	R12,R16
    0165A 92C0 033A STS	Motor2Gear,R12
(1565) 							MotorIdelGear=EEPROM_read(2); //电机断路
    0165C E002      LDI	R16,2
    0165D E010      LDI	R17,0
    0165E 940E 254F CALL	_EEPROM_read
    01660 2EC0      MOV	R12,R16
    01661 92C0 0337 STS	MotorIdelGear,R12
(1566) 							Gear2Thr();
    01663 940E 0AC7 CALL	_Gear2Thr
(1567) 							CheckMotor(30);//延迟30ms  	
    01665 E10E      LDI	R16,0x1E
    01666 E010      LDI	R17,0
    01667 940E 07BE CALL	_CheckMotor
(1568) 							T_dat=MotorIdelGear;
    01669 9020 0337 LDS	R2,MotorIdelGear
    0166B 2433      CLR	R3
    0166C 9230 02D0 STS	T_dat+1,R3
    0166E 9220 02CF STS	T_dat,R2
(1569) 							T_dat<<=4;
    01670 9020 02CF LDS	R2,T_dat
    01672 9030 02D0 LDS	R3,T_dat+1
    01674 0C22      LSL	R2
    01675 1C33      ROL	R3
    01676 0C22      LSL	R2
    01677 1C33      ROL	R3
    01678 0C22      LSL	R2
    01679 1C33      ROL	R3
    0167A 0C22      LSL	R2
    0167B 1C33      ROL	R3
    0167C 9230 02D0 STS	T_dat+1,R3
    0167E 9220 02CF STS	T_dat,R2
(1570) 							T_dat|=Motor2Gear;	 
    01680 9020 033A LDS	R2,Motor2Gear
    01682 2433      CLR	R3
    01683 9040 02CF LDS	R4,T_dat
    01685 9050 02D0 LDS	R5,T_dat+1
    01687 2842      OR	R4,R2
    01688 2853      OR	R5,R3
    01689 9250 02D0 STS	T_dat+1,R5
    0168B 9240 02CF STS	T_dat,R4
(1571) 							T_dat<<=4;
    0168D 0112      MOVW	R2,R4
    0168E 0C22      LSL	R2
    0168F 1C33      ROL	R3
    01690 0C22      LSL	R2
    01691 1C33      ROL	R3
    01692 0C22      LSL	R2
    01693 1C33      ROL	R3
    01694 0C22      LSL	R2
    01695 1C33      ROL	R3
    01696 9230 02D0 STS	T_dat+1,R3
    01698 9220 02CF STS	T_dat,R2
(1572) 							T_dat|=Motor1Gear; 
    0169A 9020 033B LDS	R2,Motor1Gear
    0169C 2433      CLR	R3
    0169D 9040 02CF LDS	R4,T_dat
    0169F 9050 02D0 LDS	R5,T_dat+1
    016A1 2842      OR	R4,R2
    016A2 2853      OR	R5,R3
    016A3 9250 02D0 STS	T_dat+1,R5
    016A5 9240 02CF STS	T_dat,R4
(1573) 							SendManchester();
    016A7 940E 2144 CALL	_SendManchester
(1574) 						}	
    016A9 940C 20BD JMP	0x20BD
(1575) 						else if(R_dat>0x83)//还剩12档，用于设置电机堵转电流, 收放电机和调节电机各6档
    016AB E883      LDI	R24,0x83
    016AC E090      LDI	R25,0
    016AD 9020 02CD LDS	R2,R_dat
    016AF 9030 02CE LDS	R3,R_dat+1
    016B1 1582      CP	R24,R2
    016B2 0593      CPC	R25,R3
    016B3 F014      BLT	0x16B6
    016B4 940C 20BD JMP	0x20BD
(1576) 						{
(1577) 							if(R_dat==0x84)
    016B6 01C1      MOVW	R24,R2
    016B7 3884      CPI	R24,0x84
    016B8 E0E0      LDI	R30,0
    016B9 079E      CPC	R25,R30
    016BA F449      BNE	0x16C4
(1578) 							{
(1579) 								Motor1Gear=1; 
    016BB E081      LDI	R24,1
    016BC 9380 033B STS	Motor1Gear,R24
(1580) 								EEPROM_write(0,Motor1Gear);
    016BE 2F28      MOV	R18,R24
    016BF 2700      CLR	R16
    016C0 2711      CLR	R17
    016C1 940E 2547 CALL	_EEPROM_write
(1581) 							}
    016C3 C0BA      RJMP	0x177E
(1582) 							else if(R_dat==0x85)
    016C4 9180 02CD LDS	R24,R_dat
    016C6 9190 02CE LDS	R25,R_dat+1
    016C8 3885      CPI	R24,0x85
    016C9 E0E0      LDI	R30,0
    016CA 079E      CPC	R25,R30
    016CB F449      BNE	0x16D5
(1583) 							{
(1584) 								Motor1Gear=2; 
    016CC E082      LDI	R24,2
    016CD 9380 033B STS	Motor1Gear,R24
(1585) 								EEPROM_write(0,Motor1Gear);
    016CF 2F28      MOV	R18,R24
    016D0 2700      CLR	R16
    016D1 2711      CLR	R17
    016D2 940E 2547 CALL	_EEPROM_write
(1586) 							}
    016D4 C0A9      RJMP	0x177E
(1587) 							else if(R_dat==0x86)
    016D5 9180 02CD LDS	R24,R_dat
    016D7 9190 02CE LDS	R25,R_dat+1
    016D9 3886      CPI	R24,0x86
    016DA E0E0      LDI	R30,0
    016DB 079E      CPC	R25,R30
    016DC F449      BNE	0x16E6
(1588) 							{
(1589) 								Motor1Gear=3; 
    016DD E083      LDI	R24,3
    016DE 9380 033B STS	Motor1Gear,R24
(1590) 								EEPROM_write(0,Motor1Gear);
    016E0 2F28      MOV	R18,R24
    016E1 2700      CLR	R16
    016E2 2711      CLR	R17
    016E3 940E 2547 CALL	_EEPROM_write
(1591) 							}
    016E5 C098      RJMP	0x177E
(1592) 							else if(R_dat==0x87)
    016E6 9180 02CD LDS	R24,R_dat
    016E8 9190 02CE LDS	R25,R_dat+1
    016EA 3887      CPI	R24,0x87
    016EB E0E0      LDI	R30,0
    016EC 079E      CPC	R25,R30
    016ED F449      BNE	0x16F7
(1593) 							{
(1594) 								Motor1Gear=4; 
    016EE E084      LDI	R24,4
    016EF 9380 033B STS	Motor1Gear,R24
(1595) 								EEPROM_write(0,Motor1Gear);
    016F1 2F28      MOV	R18,R24
    016F2 2700      CLR	R16
    016F3 2711      CLR	R17
    016F4 940E 2547 CALL	_EEPROM_write
(1596) 							}
    016F6 C087      RJMP	0x177E
(1597) 							else if(R_dat==0x88)
    016F7 9180 02CD LDS	R24,R_dat
    016F9 9190 02CE LDS	R25,R_dat+1
    016FB 3888      CPI	R24,0x88
    016FC E0E0      LDI	R30,0
    016FD 079E      CPC	R25,R30
    016FE F449      BNE	0x1708
(1598) 							{
(1599) 								Motor1Gear=5; 
    016FF E085      LDI	R24,5
    01700 9380 033B STS	Motor1Gear,R24
(1600) 								EEPROM_write(0,Motor1Gear);
    01702 2F28      MOV	R18,R24
    01703 2700      CLR	R16
    01704 2711      CLR	R17
    01705 940E 2547 CALL	_EEPROM_write
(1601) 							}
    01707 C076      RJMP	0x177E
(1602) 							else if(R_dat==0x89)
    01708 9180 02CD LDS	R24,R_dat
    0170A 9190 02CE LDS	R25,R_dat+1
    0170C 3889      CPI	R24,0x89
    0170D E0E0      LDI	R30,0
    0170E 079E      CPC	R25,R30
    0170F F449      BNE	0x1719
(1603) 							{
(1604) 								Motor1Gear=6; 
    01710 E086      LDI	R24,6
    01711 9380 033B STS	Motor1Gear,R24
(1605) 								EEPROM_write(0,Motor1Gear);
    01713 2F28      MOV	R18,R24
    01714 2700      CLR	R16
    01715 2711      CLR	R17
    01716 940E 2547 CALL	_EEPROM_write
(1606) 							}
    01718 C065      RJMP	0x177E
(1607) 							else if(R_dat==0x8a)
    01719 9180 02CD LDS	R24,R_dat
    0171B 9190 02CE LDS	R25,R_dat+1
    0171D 388A      CPI	R24,0x8A
    0171E E0E0      LDI	R30,0
    0171F 079E      CPC	R25,R30
    01720 F449      BNE	0x172A
(1608) 							{
(1609) 								Motor2Gear=1; 
    01721 E081      LDI	R24,1
    01722 9380 033A STS	Motor2Gear,R24
(1610) 								EEPROM_write(1,Motor2Gear);
    01724 2F28      MOV	R18,R24
    01725 E001      LDI	R16,1
    01726 E010      LDI	R17,0
    01727 940E 2547 CALL	_EEPROM_write
(1611) 							}
    01729 C054      RJMP	0x177E
(1612) 							else if(R_dat==0x8b)
    0172A 9180 02CD LDS	R24,R_dat
    0172C 9190 02CE LDS	R25,R_dat+1
    0172E 388B      CPI	R24,0x8B
    0172F E0E0      LDI	R30,0
    01730 079E      CPC	R25,R30
    01731 F449      BNE	0x173B
(1613) 							{
(1614) 								Motor2Gear=2;
    01732 E082      LDI	R24,2
    01733 9380 033A STS	Motor2Gear,R24
(1615) 								EEPROM_write(1,Motor2Gear);
    01735 2F28      MOV	R18,R24
    01736 E001      LDI	R16,1
    01737 E010      LDI	R17,0
    01738 940E 2547 CALL	_EEPROM_write
(1616) 							}
    0173A C043      RJMP	0x177E
(1617) 							else if(R_dat==0x8c)
    0173B 9180 02CD LDS	R24,R_dat
    0173D 9190 02CE LDS	R25,R_dat+1
    0173F 388C      CPI	R24,0x8C
    01740 E0E0      LDI	R30,0
    01741 079E      CPC	R25,R30
    01742 F449      BNE	0x174C
(1618) 							{
(1619) 								Motor2Gear=3;
    01743 E083      LDI	R24,3
    01744 9380 033A STS	Motor2Gear,R24
(1620) 								EEPROM_write(1,Motor2Gear);
    01746 2F28      MOV	R18,R24
    01747 E001      LDI	R16,1
    01748 E010      LDI	R17,0
    01749 940E 2547 CALL	_EEPROM_write
(1621) 							}
    0174B C032      RJMP	0x177E
(1622) 							else if(R_dat==0x8d)
    0174C 9180 02CD LDS	R24,R_dat
    0174E 9190 02CE LDS	R25,R_dat+1
    01750 388D      CPI	R24,0x8D
    01751 E0E0      LDI	R30,0
    01752 079E      CPC	R25,R30
    01753 F449      BNE	0x175D
(1623) 							{
(1624) 								Motor2Gear=4;
    01754 E084      LDI	R24,4
    01755 9380 033A STS	Motor2Gear,R24
(1625) 								EEPROM_write(1,Motor2Gear);
    01757 2F28      MOV	R18,R24
    01758 E001      LDI	R16,1
    01759 E010      LDI	R17,0
    0175A 940E 2547 CALL	_EEPROM_write
(1626) 							}
    0175C C021      RJMP	0x177E
(1627) 							else if(R_dat==0x8e)
    0175D 9180 02CD LDS	R24,R_dat
    0175F 9190 02CE LDS	R25,R_dat+1
    01761 388E      CPI	R24,0x8E
    01762 E0E0      LDI	R30,0
    01763 079E      CPC	R25,R30
    01764 F449      BNE	0x176E
(1628) 							{
(1629) 								Motor2Gear=5;
    01765 E085      LDI	R24,5
    01766 9380 033A STS	Motor2Gear,R24
(1630) 								EEPROM_write(1,Motor2Gear);
    01768 2F28      MOV	R18,R24
    01769 E001      LDI	R16,1
    0176A E010      LDI	R17,0
    0176B 940E 2547 CALL	_EEPROM_write
(1631) 							}
    0176D C010      RJMP	0x177E
(1632) 							else if(R_dat==0x8f)
    0176E 9180 02CD LDS	R24,R_dat
    01770 9190 02CE LDS	R25,R_dat+1
    01772 388F      CPI	R24,0x8F
    01773 E0E0      LDI	R30,0
    01774 079E      CPC	R25,R30
    01775 F441      BNE	0x177E
(1633) 							{
(1634) 								Motor2Gear=6;
    01776 E086      LDI	R24,6
    01777 9380 033A STS	Motor2Gear,R24
(1635) 								EEPROM_write(1,Motor2Gear);
    01779 2F28      MOV	R18,R24
    0177A E001      LDI	R16,1
    0177B E010      LDI	R17,0
    0177C 940E 2547 CALL	_EEPROM_write
(1636) 							}	  
(1637) 							Gear2Thr();
    0177E 940E 0AC7 CALL	_Gear2Thr
(1638) 							CheckMotor(30);//延迟30ms  	
    01780 E10E      LDI	R16,0x1E
    01781 E010      LDI	R17,0
    01782 940E 07BE CALL	_CheckMotor
(1639) 							T_dat=0;	    
    01784 2422      CLR	R2
    01785 2433      CLR	R3
    01786 9230 02D0 STS	T_dat+1,R3
    01788 9220 02CF STS	T_dat,R2
(1640) 							SendManchester(); 
    0178A 940E 2144 CALL	_SendManchester
(1641) 						}	  
(1642) 						break;
    0178C 940C 20BD JMP	0x20BD
(1643) 
(1644) 
(1645) 
(1646) 					case 0x90: //标定数据
(1647) 						if(R_dat==0x90)//提取测试信息
    0178E 9180 02CD LDS	R24,R_dat
    01790 9190 02CE LDS	R25,R_dat+1
    01792 3980      CPI	R24,0x90
    01793 E0E0      LDI	R30,0
    01794 079E      CPC	R25,R30
    01795 F009      BEQ	0x1797
    01796 C116      RJMP	0x18AD
(1648) 						{
(1649) 							Uart0TxData[0]=0xE8;
    01797 EE88      LDI	R24,0xE8
    01798 9380 0121 STS	Uart0TxData,R24
(1650) 							Uart0TxData[1]=0x40;
    0179A E480      LDI	R24,0x40
    0179B 9380 0122 STS	Uart0TxData+1,R24
(1651) 							Uart0TxData[2]=0xc8;
    0179D EC88      LDI	R24,0xC8
    0179E 9380 0123 STS	Uart0TxData+2,R24
(1652) 							Uart0TxData[3]=0;//测试信息包0
    017A0 2422      CLR	R2
    017A1 9220 0124 STS	Uart0TxData+3,R2
(1653) 							SendUart0_2(9,4);// 超时32ms	 
    017A3 E024      LDI	R18,4
    017A4 E030      LDI	R19,0
    017A5 E009      LDI	R16,0x9
    017A6 940E 03C1 CALL	_SendUart0_2
(1654) 							for(i=0;i<32;i++)
    017A8 24AA      CLR	R10
    017A9 C02F      RJMP	0x17D9
(1655) 							{
(1656) 								CheckMotor(20);
    017AA E104      LDI	R16,0x14
    017AB E010      LDI	R17,0
    017AC 940E 07BE CALL	_CheckMotor
(1657) 								T_dat=Uart0RxData[i*2+1];//高字节
    017AE EE85      LDI	R24,0xE5
    017AF E092      LDI	R25,2
    017B0 2DEA      MOV	R30,R10
    017B1 27FF      CLR	R31
    017B2 0FEE      LSL	R30
    017B3 1FFF      ROL	R31
    017B4 0FE8      ADD	R30,R24
    017B5 1FF9      ADC	R31,R25
    017B6 8020      LD	R2,Z
    017B7 2433      CLR	R3
    017B8 9230 02D0 STS	T_dat+1,R3
    017BA 9220 02CF STS	T_dat,R2
(1658) 								T_dat<<=8;
    017BC 2C32      MOV	R3,R2
    017BD 2422      CLR	R2
    017BE 9230 02D0 STS	T_dat+1,R3
    017C0 9220 02CF STS	T_dat,R2
(1659) 								T_dat|=Uart0RxData[i*2+0];//低字节
    017C2 EE84      LDI	R24,0xE4
    017C3 E092      LDI	R25,2
    017C4 2DEA      MOV	R30,R10
    017C5 27FF      CLR	R31
    017C6 0FEE      LSL	R30
    017C7 1FFF      ROL	R31
    017C8 0FE8      ADD	R30,R24
    017C9 1FF9      ADC	R31,R25
    017CA 8020      LD	R2,Z
    017CB 2433      CLR	R3
    017CC 9040 02CF LDS	R4,T_dat
    017CE 9050 02D0 LDS	R5,T_dat+1
    017D0 2842      OR	R4,R2
    017D1 2853      OR	R5,R3
    017D2 9250 02D0 STS	T_dat+1,R5
    017D4 9240 02CF STS	T_dat,R4
(1660) 								SendManchester();		 
    017D6 940E 2144 CALL	_SendManchester
    017D8 94A3      INC	R10
    017D9 2D8A      MOV	R24,R10
    017DA 3280      CPI	R24,0x20
    017DB F270      BCS	0x17AA
(1661) 							}		
(1662) 
(1663) 							Uart0TxData[0]=0xE8;
    017DC EE88      LDI	R24,0xE8
    017DD 9380 0121 STS	Uart0TxData,R24
(1664) 							Uart0TxData[1]=0x40;
    017DF E480      LDI	R24,0x40
    017E0 9380 0122 STS	Uart0TxData+1,R24
(1665) 							Uart0TxData[2]=0xc8;
    017E2 EC88      LDI	R24,0xC8
    017E3 9380 0123 STS	Uart0TxData+2,R24
(1666) 							Uart0TxData[3]=1;//测试信息包1
    017E5 E081      LDI	R24,1
    017E6 9380 0124 STS	Uart0TxData+3,R24
(1667) 							SendUart0_2(9,4);// 超时32ms	 
    017E8 E024      LDI	R18,4
    017E9 E030      LDI	R19,0
    017EA E009      LDI	R16,0x9
    017EB 940E 03C1 CALL	_SendUart0_2
(1668) 							for(i=0;i<32;i++)
    017ED 24AA      CLR	R10
    017EE C02F      RJMP	0x181E
(1669) 							{
(1670) 								T_dat=Uart0RxData[i*2+1];//高字节
    017EF EE85      LDI	R24,0xE5
    017F0 E092      LDI	R25,2
    017F1 2DEA      MOV	R30,R10
    017F2 27FF      CLR	R31
    017F3 0FEE      LSL	R30
    017F4 1FFF      ROL	R31
    017F5 0FE8      ADD	R30,R24
    017F6 1FF9      ADC	R31,R25
    017F7 8020      LD	R2,Z
    017F8 2433      CLR	R3
    017F9 9230 02D0 STS	T_dat+1,R3
    017FB 9220 02CF STS	T_dat,R2
(1671) 								T_dat<<=8;
    017FD 2C32      MOV	R3,R2
    017FE 2422      CLR	R2
    017FF 9230 02D0 STS	T_dat+1,R3
    01801 9220 02CF STS	T_dat,R2
(1672) 								T_dat|=Uart0RxData[i*2+0];//低字节
    01803 EE84      LDI	R24,0xE4
    01804 E092      LDI	R25,2
    01805 2DEA      MOV	R30,R10
    01806 27FF      CLR	R31
    01807 0FEE      LSL	R30
    01808 1FFF      ROL	R31
    01809 0FE8      ADD	R30,R24
    0180A 1FF9      ADC	R31,R25
    0180B 8020      LD	R2,Z
    0180C 2433      CLR	R3
    0180D 9040 02CF LDS	R4,T_dat
    0180F 9050 02D0 LDS	R5,T_dat+1
    01811 2842      OR	R4,R2
    01812 2853      OR	R5,R3
    01813 9250 02D0 STS	T_dat+1,R5
    01815 9240 02CF STS	T_dat,R4
(1673) 								SendManchester();
    01817 940E 2144 CALL	_SendManchester
(1674) 								CheckMotor(20);
    01819 E104      LDI	R16,0x14
    0181A E010      LDI	R17,0
    0181B 940E 07BE CALL	_CheckMotor
    0181D 94A3      INC	R10
    0181E 2D8A      MOV	R24,R10
    0181F 3280      CPI	R24,0x20
    01820 F270      BCS	0x17EF
(1675) 							}	
(1676) 
(1677) 							Uart0TxData[0]=0xE8;
    01821 EE88      LDI	R24,0xE8
    01822 9380 0121 STS	Uart0TxData,R24
(1678) 							Uart0TxData[1]=0x40;
    01824 E480      LDI	R24,0x40
    01825 9380 0122 STS	Uart0TxData+1,R24
(1679) 							Uart0TxData[2]=0xc8;
    01827 EC88      LDI	R24,0xC8
    01828 9380 0123 STS	Uart0TxData+2,R24
(1680) 							Uart0TxData[3]=2;//测试信息包2
    0182A E082      LDI	R24,2
    0182B 9380 0124 STS	Uart0TxData+3,R24
(1681) 							SendUart0_2(9,4);// 超时32ms	 
    0182D E024      LDI	R18,4
    0182E E030      LDI	R19,0
    0182F E009      LDI	R16,0x9
    01830 940E 03C1 CALL	_SendUart0_2
(1682) 							for(i=0;i<32;i++)
    01832 24AA      CLR	R10
    01833 C02F      RJMP	0x1863
(1683) 							{
(1684) 								T_dat=Uart0RxData[i*2+1];//高字节
    01834 EE85      LDI	R24,0xE5
    01835 E092      LDI	R25,2
    01836 2DEA      MOV	R30,R10
    01837 27FF      CLR	R31
    01838 0FEE      LSL	R30
    01839 1FFF      ROL	R31
    0183A 0FE8      ADD	R30,R24
    0183B 1FF9      ADC	R31,R25
    0183C 8020      LD	R2,Z
    0183D 2433      CLR	R3
    0183E 9230 02D0 STS	T_dat+1,R3
    01840 9220 02CF STS	T_dat,R2
(1685) 								T_dat<<=8;
    01842 2C32      MOV	R3,R2
    01843 2422      CLR	R2
    01844 9230 02D0 STS	T_dat+1,R3
    01846 9220 02CF STS	T_dat,R2
(1686) 								T_dat|=Uart0RxData[i*2+0];//低字节
    01848 EE84      LDI	R24,0xE4
    01849 E092      LDI	R25,2
    0184A 2DEA      MOV	R30,R10
    0184B 27FF      CLR	R31
    0184C 0FEE      LSL	R30
    0184D 1FFF      ROL	R31
    0184E 0FE8      ADD	R30,R24
    0184F 1FF9      ADC	R31,R25
    01850 8020      LD	R2,Z
    01851 2433      CLR	R3
    01852 9040 02CF LDS	R4,T_dat
    01854 9050 02D0 LDS	R5,T_dat+1
    01856 2842      OR	R4,R2
    01857 2853      OR	R5,R3
    01858 9250 02D0 STS	T_dat+1,R5
    0185A 9240 02CF STS	T_dat,R4
(1687) 								SendManchester();
    0185C 940E 2144 CALL	_SendManchester
(1688) 								CheckMotor(20);
    0185E E104      LDI	R16,0x14
    0185F E010      LDI	R17,0
    01860 940E 07BE CALL	_CheckMotor
    01862 94A3      INC	R10
    01863 2D8A      MOV	R24,R10
    01864 3280      CPI	R24,0x20
    01865 F270      BCS	0x1834
(1689) 							}		
(1690) 
(1691) 							Uart0TxData[0]=0xE8;
    01866 EE88      LDI	R24,0xE8
    01867 9380 0121 STS	Uart0TxData,R24
(1692) 							Uart0TxData[1]=0x40;
    01869 E480      LDI	R24,0x40
    0186A 9380 0122 STS	Uart0TxData+1,R24
(1693) 							Uart0TxData[2]=0xc8;
    0186C EC88      LDI	R24,0xC8
    0186D 9380 0123 STS	Uart0TxData+2,R24
(1694) 							Uart0TxData[3]=3;//测试信息包3
    0186F E083      LDI	R24,3
    01870 9380 0124 STS	Uart0TxData+3,R24
(1695) 							SendUart0_2(9,4);// 超时32ms	 
    01872 E024      LDI	R18,4
    01873 E030      LDI	R19,0
    01874 E009      LDI	R16,0x9
    01875 940E 03C1 CALL	_SendUart0_2
(1696) 							for(i=0;i<32;i++)
    01877 24AA      CLR	R10
    01878 C02F      RJMP	0x18A8
(1697) 							{
(1698) 								T_dat=Uart0RxData[i*2+1];//高字节
    01879 EE85      LDI	R24,0xE5
    0187A E092      LDI	R25,2
    0187B 2DEA      MOV	R30,R10
    0187C 27FF      CLR	R31
    0187D 0FEE      LSL	R30
    0187E 1FFF      ROL	R31
    0187F 0FE8      ADD	R30,R24
    01880 1FF9      ADC	R31,R25
    01881 8020      LD	R2,Z
    01882 2433      CLR	R3
    01883 9230 02D0 STS	T_dat+1,R3
    01885 9220 02CF STS	T_dat,R2
(1699) 								T_dat<<=8;
    01887 2C32      MOV	R3,R2
    01888 2422      CLR	R2
    01889 9230 02D0 STS	T_dat+1,R3
    0188B 9220 02CF STS	T_dat,R2
(1700) 								T_dat|=Uart0RxData[i*2+0];//低字节
    0188D EE84      LDI	R24,0xE4
    0188E E092      LDI	R25,2
    0188F 2DEA      MOV	R30,R10
    01890 27FF      CLR	R31
    01891 0FEE      LSL	R30
    01892 1FFF      ROL	R31
    01893 0FE8      ADD	R30,R24
    01894 1FF9      ADC	R31,R25
    01895 8020      LD	R2,Z
    01896 2433      CLR	R3
    01897 9040 02CF LDS	R4,T_dat
    01899 9050 02D0 LDS	R5,T_dat+1
    0189B 2842      OR	R4,R2
    0189C 2853      OR	R5,R3
    0189D 9250 02D0 STS	T_dat+1,R5
    0189F 9240 02CF STS	T_dat,R4
(1701) 								SendManchester();
    018A1 940E 2144 CALL	_SendManchester
(1702) 								CheckMotor(20);
    018A3 E104      LDI	R16,0x14
    018A4 E010      LDI	R17,0
    018A5 940E 07BE CALL	_CheckMotor
    018A7 94A3      INC	R10
    018A8 2D8A      MOV	R24,R10
    018A9 3280      CPI	R24,0x20
    018AA F270      BCS	0x1879
(1703) 							}			
(1704) 						}
    018AB 940C 20BD JMP	0x20BD
(1705) 						else if(R_dat==0x91)//上传压力标定数据,20ms/帧 	
    018AD 9180 02CD LDS	R24,R_dat
    018AF 9190 02CE LDS	R25,R_dat+1
    018B1 3981      CPI	R24,0x91
    018B2 E0E0      LDI	R30,0
    018B3 079E      CPC	R25,R30
    018B4 F521      BNE	0x18D9
(1706) 						{
(1707) 							//先获取总标定点数    
(1708) 							DataFlag=3;
    018B5 E083      LDI	R24,3
    018B6 E090      LDI	R25,0
    018B7 9390 02B4 STS	DataFlag+1,R25
    018B9 9380 02B3 STS	DataFlag,R24
(1709) 							coeff_len=4;//上位机还需传4字节，分别为首块地址和包数
    018BB E084      LDI	R24,4
    018BC 9390 011F STS	coeff_len+1,R25
    018BE 9380 011E STS	coeff_len,R24
(1710) 							coeff_count=0;
    018C0 2422      CLR	R2
    018C1 2433      CLR	R3
    018C2 9230 011D STS	coeff_count+1,R3
    018C4 9220 011C STS	coeff_count,R2
(1711) 							TimeOutFlag=0;
    018C6 9220 02CB STS	TimeOutFlag,R2
(1712) 							Timer0Counter=200;//1.6s定时
    018C8 EC88      LDI	R24,0xC8
    018C9 9390 032F STS	Timer0Counter+1,R25
    018CB 9380 032E STS	Timer0Counter,R24
(1713) 							TCNT0=0x06; //8ms
    018CD E086      LDI	R24,6
    018CE BF82      OUT	0x32,R24
(1714) 							TCCR0|=0x06;//256分频
    018CF B783      IN	R24,0x33
    018D0 6086      ORI	R24,6
    018D1 BF83      OUT	0x33,R24
(1715) 							TIFR|=0x01; //清定时器0中断标志
    018D2 B786      IN	R24,0x36
    018D3 6081      ORI	R24,1
    018D4 BF86      OUT	0x36,R24
(1716) 							TIMSK|=0x01;//使能定时器0中断		
    018D5 B787      IN	R24,0x37
    018D6 6081      ORI	R24,1
    018D7 BF87      OUT	0x37,R24
(1717) 						}
    018D8 C7E4      RJMP	0x20BD
(1718) 						else if(R_dat==0x92)//清空标定数据,整机格式化  
    018D9 9180 02CD LDS	R24,R_dat
    018DB 9190 02CE LDS	R25,R_dat+1
    018DD 3982      CPI	R24,0x92
    018DE E0E0      LDI	R30,0
    018DF 079E      CPC	R25,R30
    018E0 F5E9      BNE	0x191E
(1719) 						{ 	
(1720) 							Uart0TxData[0]=0xE8;
    018E1 EE88      LDI	R24,0xE8
    018E2 9380 0121 STS	Uart0TxData,R24
(1721) 							Uart0TxData[1]=0x40;
    018E4 E480      LDI	R24,0x40
    018E5 9380 0122 STS	Uart0TxData+1,R24
(1722) 							Uart0TxData[2]=0x8c;
    018E7 E88C      LDI	R24,0x8C
    018E8 9380 0123 STS	Uart0TxData+2,R24
(1723) 							Uart0TxData[3]=8;
    018EA E088      LDI	R24,0x8
    018EB 9380 0124 STS	Uart0TxData+3,R24
(1724) 							Uart0TxData[4]=0;
    018ED 2422      CLR	R2
    018EE 9220 0125 STS	Uart0TxData+4,R2
(1725) 							Uart0TxData[5]=0;
    018F0 9220 0126 STS	Uart0TxData+5,R2
(1726) 							Uart0TxData[6]=0xff;
    018F2 EF8F      LDI	R24,0xFF
    018F3 9380 0127 STS	Uart0TxData+6,R24
(1727) 							Uart0TxData[7]=0xff;
    018F5 9380 0128 STS	Uart0TxData+7,R24
(1728) 							SendUart0_3(9,5000,9);// 最大超时40秒
    018F7 E089      LDI	R24,0x9
    018F8 8388      ST	Y,R24
    018F9 E828      LDI	R18,0x88
    018FA E133      LDI	R19,0x13
    018FB E009      LDI	R16,0x9
    018FC 940E 0411 CALL	_SendUart0_3
(1729) 							if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8c))
    018FE 9180 02E3 LDS	R24,Uart0RxCounter
    01900 3089      CPI	R24,0x9
    01901 F499      BNE	0x1915
    01902 9180 02E4 LDS	R24,Uart0RxData
    01904 3585      CPI	R24,0x55
    01905 F479      BNE	0x1915
    01906 9180 02E5 LDS	R24,Uart0RxData+1
    01908 3480      CPI	R24,0x40
    01909 F459      BNE	0x1915
    0190A 9180 02E6 LDS	R24,Uart0RxData+2
    0190C 388C      CPI	R24,0x8C
    0190D F439      BNE	0x1915
(1730) 								{T_dat=0x0000;}
    0190E 2422      CLR	R2
    0190F 2433      CLR	R3
    01910 9230 02D0 STS	T_dat+1,R3
    01912 9220 02CF STS	T_dat,R2
    01914 C006      RJMP	0x191B
(1731) 							else
(1732) 								{T_dat=0xffff;}
    01915 EF8F      LDI	R24,0xFF
    01916 EF9F      LDI	R25,0xFF
    01917 9390 02D0 STS	T_dat+1,R25
    01919 9380 02CF STS	T_dat,R24
(1733) 							SendManchester();	 
    0191B 940E 2144 CALL	_SendManchester
(1734) 						}
    0191D C79F      RJMP	0x20BD
(1735) 						else if(R_dat==0x93)//上传全部系数，共256字节分128帧上传
    0191E 9180 02CD LDS	R24,R_dat
    01920 9190 02CE LDS	R25,R_dat+1
    01922 3983      CPI	R24,0x93
    01923 E0E0      LDI	R30,0
    01924 079E      CPC	R25,R30
    01925 F009      BEQ	0x1927
    01926 C122      RJMP	0x1A49
(1736) 						{
(1737) 							Uart0TxData[0]=0xE8;
    01927 EE88      LDI	R24,0xE8
    01928 9380 0121 STS	Uart0TxData,R24
(1738) 							Uart0TxData[1]=0x40;
    0192A E480      LDI	R24,0x40
    0192B 9380 0122 STS	Uart0TxData+1,R24
(1739) 							Uart0TxData[2]=0x87;
    0192D E887      LDI	R24,0x87
    0192E 9380 0123 STS	Uart0TxData+2,R24
(1740) 							Uart0TxData[3]=0;//系数包0
    01930 2422      CLR	R2
    01931 9220 0124 STS	Uart0TxData+3,R2
(1741) 							SendUart0_2(9,4);// 超时32ms	
    01933 E024      LDI	R18,4
    01934 E030      LDI	R19,0
    01935 E009      LDI	R16,0x9
    01936 940E 03C1 CALL	_SendUart0_2
(1742) 							if(Uart0RxCounter==64) 
    01938 9180 02E3 LDS	R24,Uart0RxCounter
    0193A 3480      CPI	R24,0x40
    0193B F599      BNE	0x196F
(1743) 							{
(1744) 								for(i=0;i<32;i++)
    0193C 24AA      CLR	R10
    0193D C02E      RJMP	0x196C
(1745) 								{
(1746) 									CheckMotor(20);
    0193E E104      LDI	R16,0x14
    0193F E010      LDI	R17,0
    01940 940E 07BE CALL	_CheckMotor
(1747) 									T_dat=Uart0RxData[i*2+1];//高字节
    01942 EE85      LDI	R24,0xE5
    01943 E092      LDI	R25,2
    01944 2DEA      MOV	R30,R10
    01945 27FF      CLR	R31
    01946 0FEE      LSL	R30
    01947 1FFF      ROL	R31
    01948 0FE8      ADD	R30,R24
    01949 1FF9      ADC	R31,R25
    0194A 8020      LD	R2,Z
    0194B 2433      CLR	R3
    0194C 9230 02D0 STS	T_dat+1,R3
    0194E 9220 02CF STS	T_dat,R2
(1748) 									T_dat<<=8;
    01950 2C32      MOV	R3,R2
    01951 2422      CLR	R2
    01952 9230 02D0 STS	T_dat+1,R3
    01954 9220 02CF STS	T_dat,R2
(1749) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01956 EE84      LDI	R24,0xE4
    01957 E092      LDI	R25,2
    01958 2DEA      MOV	R30,R10
    01959 27FF      CLR	R31
    0195A 0FEE      LSL	R30
    0195B 1FFF      ROL	R31
    0195C 0FE8      ADD	R30,R24
    0195D 1FF9      ADC	R31,R25
    0195E 8020      LD	R2,Z
    0195F 2433      CLR	R3
    01960 9040 02CF LDS	R4,T_dat
    01962 9050 02D0 LDS	R5,T_dat+1
    01964 2842      OR	R4,R2
    01965 2853      OR	R5,R3
    01966 9250 02D0 STS	T_dat+1,R5
    01968 9240 02CF STS	T_dat,R4
(1750) 									SendManchester();		 
    0196A D7D9      RCALL	_SendManchester
    0196B 94A3      INC	R10
    0196C 2D8A      MOV	R24,R10
    0196D 3280      CPI	R24,0x20
    0196E F278      BCS	0x193E
(1751) 								}	
(1752) 							}	
(1753) 
(1754) 							Uart0TxData[0]=0xE8;
    0196F EE88      LDI	R24,0xE8
    01970 9380 0121 STS	Uart0TxData,R24
(1755) 							Uart0TxData[1]=0x40;
    01972 E480      LDI	R24,0x40
    01973 9380 0122 STS	Uart0TxData+1,R24
(1756) 							Uart0TxData[2]=0x87;
    01975 E887      LDI	R24,0x87
    01976 9380 0123 STS	Uart0TxData+2,R24
(1757) 							Uart0TxData[3]=1;//系数包1
    01978 E081      LDI	R24,1
    01979 9380 0124 STS	Uart0TxData+3,R24
(1758) 							SendUart0_2(9,4);// 超时32ms	 
    0197B E024      LDI	R18,4
    0197C E030      LDI	R19,0
    0197D E009      LDI	R16,0x9
    0197E 940E 03C1 CALL	_SendUart0_2
(1759) 							if(Uart0RxCounter==64) 
    01980 9180 02E3 LDS	R24,Uart0RxCounter
    01982 3480      CPI	R24,0x40
    01983 F599      BNE	0x19B7
(1760) 							{
(1761) 								for(i=0;i<32;i++)
    01984 24AA      CLR	R10
    01985 C02E      RJMP	0x19B4
(1762) 								{
(1763) 									T_dat=Uart0RxData[i*2+1];//高字节
    01986 EE85      LDI	R24,0xE5
    01987 E092      LDI	R25,2
    01988 2DEA      MOV	R30,R10
    01989 27FF      CLR	R31
    0198A 0FEE      LSL	R30
    0198B 1FFF      ROL	R31
    0198C 0FE8      ADD	R30,R24
    0198D 1FF9      ADC	R31,R25
    0198E 8020      LD	R2,Z
    0198F 2433      CLR	R3
    01990 9230 02D0 STS	T_dat+1,R3
    01992 9220 02CF STS	T_dat,R2
(1764) 									T_dat<<=8;
    01994 2C32      MOV	R3,R2
    01995 2422      CLR	R2
    01996 9230 02D0 STS	T_dat+1,R3
    01998 9220 02CF STS	T_dat,R2
(1765) 									T_dat|=Uart0RxData[i*2+0];//低字节
    0199A EE84      LDI	R24,0xE4
    0199B E092      LDI	R25,2
    0199C 2DEA      MOV	R30,R10
    0199D 27FF      CLR	R31
    0199E 0FEE      LSL	R30
    0199F 1FFF      ROL	R31
    019A0 0FE8      ADD	R30,R24
    019A1 1FF9      ADC	R31,R25
    019A2 8020      LD	R2,Z
    019A3 2433      CLR	R3
    019A4 9040 02CF LDS	R4,T_dat
    019A6 9050 02D0 LDS	R5,T_dat+1
    019A8 2842      OR	R4,R2
    019A9 2853      OR	R5,R3
    019AA 9250 02D0 STS	T_dat+1,R5
    019AC 9240 02CF STS	T_dat,R4
(1766) 									SendManchester();
    019AE D795      RCALL	_SendManchester
(1767) 									CheckMotor(20);
    019AF E104      LDI	R16,0x14
    019B0 E010      LDI	R17,0
    019B1 940E 07BE CALL	_CheckMotor
    019B3 94A3      INC	R10
    019B4 2D8A      MOV	R24,R10
    019B5 3280      CPI	R24,0x20
    019B6 F278      BCS	0x1986
(1768) 								}
(1769) 							}		
(1770) 
(1771) 							Uart0TxData[0]=0xE8;
    019B7 EE88      LDI	R24,0xE8
    019B8 9380 0121 STS	Uart0TxData,R24
(1772) 							Uart0TxData[1]=0x40;
    019BA E480      LDI	R24,0x40
    019BB 9380 0122 STS	Uart0TxData+1,R24
(1773) 							Uart0TxData[2]=0x87;
    019BD E887      LDI	R24,0x87
    019BE 9380 0123 STS	Uart0TxData+2,R24
(1774) 							Uart0TxData[3]=2;//系数包2
    019C0 E082      LDI	R24,2
    019C1 9380 0124 STS	Uart0TxData+3,R24
(1775) 							SendUart0_2(9,4);// 超时32ms	
    019C3 E024      LDI	R18,4
    019C4 E030      LDI	R19,0
    019C5 E009      LDI	R16,0x9
    019C6 940E 03C1 CALL	_SendUart0_2
(1776) 							if(Uart0RxCounter==64) 
    019C8 9180 02E3 LDS	R24,Uart0RxCounter
    019CA 3480      CPI	R24,0x40
    019CB F599      BNE	0x19FF
(1777) 							{
(1778) 								for(i=0;i<32;i++)
    019CC 24AA      CLR	R10
    019CD C02E      RJMP	0x19FC
(1779) 								{
(1780) 									CheckMotor(20);
    019CE E104      LDI	R16,0x14
    019CF E010      LDI	R17,0
    019D0 940E 07BE CALL	_CheckMotor
(1781) 									T_dat=Uart0RxData[i*2+1];//高字节
    019D2 EE85      LDI	R24,0xE5
    019D3 E092      LDI	R25,2
    019D4 2DEA      MOV	R30,R10
    019D5 27FF      CLR	R31
    019D6 0FEE      LSL	R30
    019D7 1FFF      ROL	R31
    019D8 0FE8      ADD	R30,R24
    019D9 1FF9      ADC	R31,R25
    019DA 8020      LD	R2,Z
    019DB 2433      CLR	R3
    019DC 9230 02D0 STS	T_dat+1,R3
    019DE 9220 02CF STS	T_dat,R2
(1782) 									T_dat<<=8;
    019E0 2C32      MOV	R3,R2
    019E1 2422      CLR	R2
    019E2 9230 02D0 STS	T_dat+1,R3
    019E4 9220 02CF STS	T_dat,R2
(1783) 									T_dat|=Uart0RxData[i*2+0];//低字节
    019E6 EE84      LDI	R24,0xE4
    019E7 E092      LDI	R25,2
    019E8 2DEA      MOV	R30,R10
    019E9 27FF      CLR	R31
    019EA 0FEE      LSL	R30
    019EB 1FFF      ROL	R31
    019EC 0FE8      ADD	R30,R24
    019ED 1FF9      ADC	R31,R25
    019EE 8020      LD	R2,Z
    019EF 2433      CLR	R3
    019F0 9040 02CF LDS	R4,T_dat
    019F2 9050 02D0 LDS	R5,T_dat+1
    019F4 2842      OR	R4,R2
    019F5 2853      OR	R5,R3
    019F6 9250 02D0 STS	T_dat+1,R5
    019F8 9240 02CF STS	T_dat,R4
(1784) 									SendManchester();		 
    019FA D749      RCALL	_SendManchester
    019FB 94A3      INC	R10
    019FC 2D8A      MOV	R24,R10
    019FD 3280      CPI	R24,0x20
    019FE F278      BCS	0x19CE
(1785) 								}	
(1786) 							}	
(1787) 
(1788) 							Uart0TxData[0]=0xE8;
    019FF EE88      LDI	R24,0xE8
    01A00 9380 0121 STS	Uart0TxData,R24
(1789) 							Uart0TxData[1]=0x40;
    01A02 E480      LDI	R24,0x40
    01A03 9380 0122 STS	Uart0TxData+1,R24
(1790) 							Uart0TxData[2]=0x87;
    01A05 E887      LDI	R24,0x87
    01A06 9380 0123 STS	Uart0TxData+2,R24
(1791) 							Uart0TxData[3]=3;//系数包3
    01A08 E083      LDI	R24,3
    01A09 9380 0124 STS	Uart0TxData+3,R24
(1792) 							SendUart0_2(9,4);// 超时32ms	 
    01A0B E024      LDI	R18,4
    01A0C E030      LDI	R19,0
    01A0D E009      LDI	R16,0x9
    01A0E 940E 03C1 CALL	_SendUart0_2
(1793) 							if(Uart0RxCounter==64) 
    01A10 9180 02E3 LDS	R24,Uart0RxCounter
    01A12 3480      CPI	R24,0x40
    01A13 F009      BEQ	0x1A15
    01A14 C6A8      RJMP	0x20BD
(1794) 							{
(1795) 								for(i=0;i<32;i++)
    01A15 24AA      CLR	R10
    01A16 C02E      RJMP	0x1A45
(1796) 								{
(1797) 									T_dat=Uart0RxData[i*2+1];//高字节
    01A17 EE85      LDI	R24,0xE5
    01A18 E092      LDI	R25,2
    01A19 2DEA      MOV	R30,R10
    01A1A 27FF      CLR	R31
    01A1B 0FEE      LSL	R30
    01A1C 1FFF      ROL	R31
    01A1D 0FE8      ADD	R30,R24
    01A1E 1FF9      ADC	R31,R25
    01A1F 8020      LD	R2,Z
    01A20 2433      CLR	R3
    01A21 9230 02D0 STS	T_dat+1,R3
    01A23 9220 02CF STS	T_dat,R2
(1798) 									T_dat<<=8;
    01A25 2C32      MOV	R3,R2
    01A26 2422      CLR	R2
    01A27 9230 02D0 STS	T_dat+1,R3
    01A29 9220 02CF STS	T_dat,R2
(1799) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01A2B EE84      LDI	R24,0xE4
    01A2C E092      LDI	R25,2
    01A2D 2DEA      MOV	R30,R10
    01A2E 27FF      CLR	R31
    01A2F 0FEE      LSL	R30
    01A30 1FFF      ROL	R31
    01A31 0FE8      ADD	R30,R24
    01A32 1FF9      ADC	R31,R25
    01A33 8020      LD	R2,Z
    01A34 2433      CLR	R3
    01A35 9040 02CF LDS	R4,T_dat
    01A37 9050 02D0 LDS	R5,T_dat+1
    01A39 2842      OR	R4,R2
    01A3A 2853      OR	R5,R3
    01A3B 9250 02D0 STS	T_dat+1,R5
    01A3D 9240 02CF STS	T_dat,R4
(1800) 									SendManchester();
    01A3F D704      RCALL	_SendManchester
(1801) 									CheckMotor(20);
    01A40 E104      LDI	R16,0x14
    01A41 E010      LDI	R17,0
    01A42 940E 07BE CALL	_CheckMotor
    01A44 94A3      INC	R10
    01A45 2D8A      MOV	R24,R10
    01A46 3280      CPI	R24,0x20
    01A47 F278      BCS	0x1A17
(1802) 								}
(1803) 							}		
(1804) 						}
    01A48 C674      RJMP	0x20BD
(1805) 						else if(R_dat==0x9a)//电机断路电流为1档
    01A49 9180 02CD LDS	R24,R_dat
    01A4B 9190 02CE LDS	R25,R_dat+1
    01A4D 398A      CPI	R24,0x9A
    01A4E E0E0      LDI	R30,0
    01A4F 079E      CPC	R25,R30
    01A50 F4B1      BNE	0x1A67
(1806) 						{
(1807) 							MotorIdelGear=1;
    01A51 E081      LDI	R24,1
    01A52 9380 0337 STS	MotorIdelGear,R24
(1808) 							EEPROM_write(2,MotorIdelGear);  
    01A54 2F28      MOV	R18,R24
    01A55 E002      LDI	R16,2
    01A56 E010      LDI	R17,0
    01A57 940E 2547 CALL	_EEPROM_write
(1809) 							Gear2Thr();
    01A59 940E 0AC7 CALL	_Gear2Thr
(1810) 							CheckMotor(30);//延迟30ms  	
    01A5B E10E      LDI	R16,0x1E
    01A5C E010      LDI	R17,0
    01A5D 940E 07BE CALL	_CheckMotor
(1811) 							T_dat=0;	    
    01A5F 2422      CLR	R2
    01A60 2433      CLR	R3
    01A61 9230 02D0 STS	T_dat+1,R3
    01A63 9220 02CF STS	T_dat,R2
(1812) 							SendManchester(); 
    01A65 D6DE      RCALL	_SendManchester
(1813) 						}
    01A66 C656      RJMP	0x20BD
(1814) 						else if(R_dat==0x9b)//电机断路电流为2档
    01A67 9180 02CD LDS	R24,R_dat
    01A69 9190 02CE LDS	R25,R_dat+1
    01A6B 398B      CPI	R24,0x9B
    01A6C E0E0      LDI	R30,0
    01A6D 079E      CPC	R25,R30
    01A6E F4B1      BNE	0x1A85
(1815) 						{
(1816) 							MotorIdelGear=2;
    01A6F E082      LDI	R24,2
    01A70 9380 0337 STS	MotorIdelGear,R24
(1817) 							EEPROM_write(2,MotorIdelGear);  
    01A72 2F28      MOV	R18,R24
    01A73 E002      LDI	R16,2
    01A74 E010      LDI	R17,0
    01A75 940E 2547 CALL	_EEPROM_write
(1818) 							Gear2Thr();
    01A77 940E 0AC7 CALL	_Gear2Thr
(1819) 							CheckMotor(30);//延迟30ms  	
    01A79 E10E      LDI	R16,0x1E
    01A7A E010      LDI	R17,0
    01A7B 940E 07BE CALL	_CheckMotor
(1820) 							T_dat=0;	    
    01A7D 2422      CLR	R2
    01A7E 2433      CLR	R3
    01A7F 9230 02D0 STS	T_dat+1,R3
    01A81 9220 02CF STS	T_dat,R2
(1821) 							SendManchester(); 
    01A83 D6C0      RCALL	_SendManchester
(1822) 						}
    01A84 C638      RJMP	0x20BD
(1823) 						else if(R_dat==0x9c)//电机断路电流为3档
    01A85 9180 02CD LDS	R24,R_dat
    01A87 9190 02CE LDS	R25,R_dat+1
    01A89 398C      CPI	R24,0x9C
    01A8A E0E0      LDI	R30,0
    01A8B 079E      CPC	R25,R30
    01A8C F4B1      BNE	0x1AA3
(1824) 						{
(1825) 							MotorIdelGear=3;
    01A8D E083      LDI	R24,3
    01A8E 9380 0337 STS	MotorIdelGear,R24
(1826) 							EEPROM_write(2,MotorIdelGear);  
    01A90 2F28      MOV	R18,R24
    01A91 E002      LDI	R16,2
    01A92 E010      LDI	R17,0
    01A93 940E 2547 CALL	_EEPROM_write
(1827) 							Gear2Thr();
    01A95 940E 0AC7 CALL	_Gear2Thr
(1828) 							CheckMotor(30);//延迟30ms  	
    01A97 E10E      LDI	R16,0x1E
    01A98 E010      LDI	R17,0
    01A99 940E 07BE CALL	_CheckMotor
(1829) 							T_dat=0;	    
    01A9B 2422      CLR	R2
    01A9C 2433      CLR	R3
    01A9D 9230 02D0 STS	T_dat+1,R3
    01A9F 9220 02CF STS	T_dat,R2
(1830) 							SendManchester(); 
    01AA1 D6A2      RCALL	_SendManchester
(1831) 						}
    01AA2 C61A      RJMP	0x20BD
(1832) 						else if(R_dat==0x9d)//电机断路电流为4档
    01AA3 9180 02CD LDS	R24,R_dat
    01AA5 9190 02CE LDS	R25,R_dat+1
    01AA7 398D      CPI	R24,0x9D
    01AA8 E0E0      LDI	R30,0
    01AA9 079E      CPC	R25,R30
    01AAA F4B1      BNE	0x1AC1
(1833) 						{
(1834) 							MotorIdelGear=4;
    01AAB E084      LDI	R24,4
    01AAC 9380 0337 STS	MotorIdelGear,R24
(1835) 							EEPROM_write(2,MotorIdelGear);  
    01AAE 2F28      MOV	R18,R24
    01AAF E002      LDI	R16,2
    01AB0 E010      LDI	R17,0
    01AB1 940E 2547 CALL	_EEPROM_write
(1836) 							Gear2Thr();
    01AB3 940E 0AC7 CALL	_Gear2Thr
(1837) 							CheckMotor(30);//延迟30ms  	
    01AB5 E10E      LDI	R16,0x1E
    01AB6 E010      LDI	R17,0
    01AB7 940E 07BE CALL	_CheckMotor
(1838) 							T_dat=0;	    
    01AB9 2422      CLR	R2
    01ABA 2433      CLR	R3
    01ABB 9230 02D0 STS	T_dat+1,R3
    01ABD 9220 02CF STS	T_dat,R2
(1839) 							SendManchester(); 
    01ABF D684      RCALL	_SendManchester
(1840) 						}
    01AC0 C5FC      RJMP	0x20BD
(1841) 						else if(R_dat==0x9e)//电机断路电流为5档
    01AC1 9180 02CD LDS	R24,R_dat
    01AC3 9190 02CE LDS	R25,R_dat+1
    01AC5 398E      CPI	R24,0x9E
    01AC6 E0E0      LDI	R30,0
    01AC7 079E      CPC	R25,R30
    01AC8 F4B1      BNE	0x1ADF
(1842) 						{
(1843) 							MotorIdelGear=5;
    01AC9 E085      LDI	R24,5
    01ACA 9380 0337 STS	MotorIdelGear,R24
(1844) 							EEPROM_write(2,MotorIdelGear);  
    01ACC 2F28      MOV	R18,R24
    01ACD E002      LDI	R16,2
    01ACE E010      LDI	R17,0
    01ACF 940E 2547 CALL	_EEPROM_write
(1845) 							Gear2Thr();
    01AD1 940E 0AC7 CALL	_Gear2Thr
(1846) 							CheckMotor(30);//延迟30ms  	
    01AD3 E10E      LDI	R16,0x1E
    01AD4 E010      LDI	R17,0
    01AD5 940E 07BE CALL	_CheckMotor
(1847) 							T_dat=0;	    
    01AD7 2422      CLR	R2
    01AD8 2433      CLR	R3
    01AD9 9230 02D0 STS	T_dat+1,R3
    01ADB 9220 02CF STS	T_dat,R2
(1848) 							SendManchester(); 
    01ADD D666      RCALL	_SendManchester
(1849) 						}
    01ADE C5DE      RJMP	0x20BD
(1850) 						else if(R_dat==0x9f)//电机断路电流为6档
    01ADF 9180 02CD LDS	R24,R_dat
    01AE1 9190 02CE LDS	R25,R_dat+1
    01AE3 398F      CPI	R24,0x9F
    01AE4 E0E0      LDI	R30,0
    01AE5 079E      CPC	R25,R30
    01AE6 F009      BEQ	0x1AE8
    01AE7 C5D5      RJMP	0x20BD
(1851) 						{
(1852) 							MotorIdelGear=6;
    01AE8 E086      LDI	R24,6
    01AE9 9380 0337 STS	MotorIdelGear,R24
(1853) 							EEPROM_write(2,MotorIdelGear);  
    01AEB 2F28      MOV	R18,R24
    01AEC E002      LDI	R16,2
    01AED E010      LDI	R17,0
    01AEE 940E 2547 CALL	_EEPROM_write
(1854) 							Gear2Thr();
    01AF0 940E 0AC7 CALL	_Gear2Thr
(1855) 							CheckMotor(30);//延迟30ms  	
    01AF2 E10E      LDI	R16,0x1E
    01AF3 E010      LDI	R17,0
    01AF4 940E 07BE CALL	_CheckMotor
(1856) 							T_dat=0;	    
    01AF6 2422      CLR	R2
    01AF7 2433      CLR	R3
    01AF8 9230 02D0 STS	T_dat+1,R3
    01AFA 9220 02CF STS	T_dat,R2
(1857) 							SendManchester(); 
    01AFC D647      RCALL	_SendManchester
(1858) 						}
(1859) 
(1860) 						break;
    01AFD C5BF      RJMP	0x20BD
(1861) 
(1862) 					case 0xa0://压力标定系数
(1863) 						if(R_dat==0xa0)//下发全部标定系数，共128字节,20ms/帧，共2560ms   
    01AFE 9180 02CD LDS	R24,R_dat
    01B00 9190 02CE LDS	R25,R_dat+1
    01B02 3A80      CPI	R24,0xA0
    01B03 E0E0      LDI	R30,0
    01B04 079E      CPC	R25,R30
    01B05 F529      BNE	0x1B2B
(1864) 							{ 
(1865) 							DataFlag=1;
    01B06 E081      LDI	R24,1
    01B07 E090      LDI	R25,0
    01B08 9390 02B4 STS	DataFlag+1,R25
    01B0A 9380 02B3 STS	DataFlag,R24
(1866) 							coeff_len=128;
    01B0C E880      LDI	R24,0x80
    01B0D 9390 011F STS	coeff_len+1,R25
    01B0F 9380 011E STS	coeff_len,R24
(1867) 							coeff_count=0;
    01B11 2422      CLR	R2
    01B12 2433      CLR	R3
    01B13 9230 011D STS	coeff_count+1,R3
    01B15 9220 011C STS	coeff_count,R2
(1868) 							TimeOutFlag=0;
    01B17 9220 02CB STS	TimeOutFlag,R2
(1869) 							Timer0Counter=1000;//8s定时
    01B19 EE88      LDI	R24,0xE8
    01B1A E093      LDI	R25,3
    01B1B 9390 032F STS	Timer0Counter+1,R25
    01B1D 9380 032E STS	Timer0Counter,R24
(1870) 							TCNT0=0x06; //8ms
    01B1F E086      LDI	R24,6
    01B20 BF82      OUT	0x32,R24
(1871) 							TCCR0|=0x06;//256分频
    01B21 B783      IN	R24,0x33
    01B22 6086      ORI	R24,6
    01B23 BF83      OUT	0x33,R24
(1872) 							TIFR|=0x01; //清定时器0中断标志
    01B24 B786      IN	R24,0x36
    01B25 6081      ORI	R24,1
    01B26 BF86      OUT	0x36,R24
(1873) 							TIMSK|=0x01;//使能定时器0中断				    
    01B27 B787      IN	R24,0x37
    01B28 6081      ORI	R24,1
    01B29 BF87      OUT	0x37,R24
(1874) 						}
    01B2A C592      RJMP	0x20BD
(1875) 						else if(R_dat==0xa1)//上传标定系数,28ms/帧 ，共64帧128字节
    01B2B 9180 02CD LDS	R24,R_dat
    01B2D 9190 02CE LDS	R25,R_dat+1
    01B2F 3A81      CPI	R24,0xA1
    01B30 E0E0      LDI	R30,0
    01B31 079E      CPC	R25,R30
    01B32 F009      BEQ	0x1B34
    01B33 C589      RJMP	0x20BD
(1876) 						{    
(1877) 							Uart0TxData[0]=0xE8;
    01B34 EE88      LDI	R24,0xE8
    01B35 9380 0121 STS	Uart0TxData,R24
(1878) 							Uart0TxData[1]=0x40;
    01B37 E480      LDI	R24,0x40
    01B38 9380 0122 STS	Uart0TxData+1,R24
(1879) 							Uart0TxData[2]=0x87;
    01B3A E887      LDI	R24,0x87
    01B3B 9380 0123 STS	Uart0TxData+2,R24
(1880) 							Uart0TxData[3]=0;//系数包0
    01B3D 2422      CLR	R2
    01B3E 9220 0124 STS	Uart0TxData+3,R2
(1881) 							SendUart0_2(9,5);// 超时40ms	
    01B40 E025      LDI	R18,5
    01B41 E030      LDI	R19,0
    01B42 E009      LDI	R16,0x9
    01B43 940E 03C1 CALL	_SendUart0_2
(1882) 							if(Uart0RxCounter==64) 
    01B45 9180 02E3 LDS	R24,Uart0RxCounter
    01B47 3480      CPI	R24,0x40
    01B48 F599      BNE	0x1B7C
(1883) 							{
(1884) 								for(i=0;i<32;i++)
    01B49 24AA      CLR	R10
    01B4A C02E      RJMP	0x1B79
(1885) 								{
(1886) 									CheckMotor(20);
    01B4B E104      LDI	R16,0x14
    01B4C E010      LDI	R17,0
    01B4D 940E 07BE CALL	_CheckMotor
(1887) 									T_dat=Uart0RxData[i*2+1];//高字节
    01B4F EE85      LDI	R24,0xE5
    01B50 E092      LDI	R25,2
    01B51 2DEA      MOV	R30,R10
    01B52 27FF      CLR	R31
    01B53 0FEE      LSL	R30
    01B54 1FFF      ROL	R31
    01B55 0FE8      ADD	R30,R24
    01B56 1FF9      ADC	R31,R25
    01B57 8020      LD	R2,Z
    01B58 2433      CLR	R3
    01B59 9230 02D0 STS	T_dat+1,R3
    01B5B 9220 02CF STS	T_dat,R2
(1888) 									T_dat<<=8;
    01B5D 2C32      MOV	R3,R2
    01B5E 2422      CLR	R2
    01B5F 9230 02D0 STS	T_dat+1,R3
    01B61 9220 02CF STS	T_dat,R2
(1889) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01B63 EE84      LDI	R24,0xE4
    01B64 E092      LDI	R25,2
    01B65 2DEA      MOV	R30,R10
    01B66 27FF      CLR	R31
    01B67 0FEE      LSL	R30
    01B68 1FFF      ROL	R31
    01B69 0FE8      ADD	R30,R24
    01B6A 1FF9      ADC	R31,R25
    01B6B 8020      LD	R2,Z
    01B6C 2433      CLR	R3
    01B6D 9040 02CF LDS	R4,T_dat
    01B6F 9050 02D0 LDS	R5,T_dat+1
    01B71 2842      OR	R4,R2
    01B72 2853      OR	R5,R3
    01B73 9250 02D0 STS	T_dat+1,R5
    01B75 9240 02CF STS	T_dat,R4
(1890) 									SendManchester();		 
    01B77 D5CC      RCALL	_SendManchester
    01B78 94A3      INC	R10
    01B79 2D8A      MOV	R24,R10
    01B7A 3280      CPI	R24,0x20
    01B7B F278      BCS	0x1B4B
(1891) 								}	
(1892) 							}	
(1893) 
(1894) 							Uart0TxData[0]=0xE8;
    01B7C EE88      LDI	R24,0xE8
    01B7D 9380 0121 STS	Uart0TxData,R24
(1895) 							Uart0TxData[1]=0x40;
    01B7F E480      LDI	R24,0x40
    01B80 9380 0122 STS	Uart0TxData+1,R24
(1896) 							Uart0TxData[2]=0x87;
    01B82 E887      LDI	R24,0x87
    01B83 9380 0123 STS	Uart0TxData+2,R24
(1897) 							Uart0TxData[3]=1;//系数包1
    01B85 E081      LDI	R24,1
    01B86 9380 0124 STS	Uart0TxData+3,R24
(1898) 							SendUart0_2(9,5);// 超时40ms		 
    01B88 E025      LDI	R18,5
    01B89 E030      LDI	R19,0
    01B8A E009      LDI	R16,0x9
    01B8B 940E 03C1 CALL	_SendUart0_2
(1899) 							if(Uart0RxCounter==64) 
    01B8D 9180 02E3 LDS	R24,Uart0RxCounter
    01B8F 3480      CPI	R24,0x40
    01B90 F009      BEQ	0x1B92
    01B91 C52B      RJMP	0x20BD
(1900) 							{
(1901) 								for(i=0;i<32;i++)
    01B92 24AA      CLR	R10
    01B93 C02E      RJMP	0x1BC2
(1902) 								{
(1903) 									T_dat=Uart0RxData[i*2+1];//高字节
    01B94 EE85      LDI	R24,0xE5
    01B95 E092      LDI	R25,2
    01B96 2DEA      MOV	R30,R10
    01B97 27FF      CLR	R31
    01B98 0FEE      LSL	R30
    01B99 1FFF      ROL	R31
    01B9A 0FE8      ADD	R30,R24
    01B9B 1FF9      ADC	R31,R25
    01B9C 8020      LD	R2,Z
    01B9D 2433      CLR	R3
    01B9E 9230 02D0 STS	T_dat+1,R3
    01BA0 9220 02CF STS	T_dat,R2
(1904) 									T_dat<<=8;
    01BA2 2C32      MOV	R3,R2
    01BA3 2422      CLR	R2
    01BA4 9230 02D0 STS	T_dat+1,R3
    01BA6 9220 02CF STS	T_dat,R2
(1905) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01BA8 EE84      LDI	R24,0xE4
    01BA9 E092      LDI	R25,2
    01BAA 2DEA      MOV	R30,R10
    01BAB 27FF      CLR	R31
    01BAC 0FEE      LSL	R30
    01BAD 1FFF      ROL	R31
    01BAE 0FE8      ADD	R30,R24
    01BAF 1FF9      ADC	R31,R25
    01BB0 8020      LD	R2,Z
    01BB1 2433      CLR	R3
    01BB2 9040 02CF LDS	R4,T_dat
    01BB4 9050 02D0 LDS	R5,T_dat+1
    01BB6 2842      OR	R4,R2
    01BB7 2853      OR	R5,R3
    01BB8 9250 02D0 STS	T_dat+1,R5
    01BBA 9240 02CF STS	T_dat,R4
(1906) 									SendManchester();
    01BBC D587      RCALL	_SendManchester
(1907) 									CheckMotor(20);
    01BBD E104      LDI	R16,0x14
    01BBE E010      LDI	R17,0
    01BBF 940E 07BE CALL	_CheckMotor
    01BC1 94A3      INC	R10
    01BC2 2D8A      MOV	R24,R10
    01BC3 3280      CPI	R24,0x20
    01BC4 F278      BCS	0x1B94
(1908) 								}
(1909) 							}		
(1910) 						}
(1911) 						break;
    01BC5 C4F7      RJMP	0x20BD
(1912) 
(1913) 
(1914) 					case 0xB0://流量相关
(1915) 						if(R_dat==0xb0) //下发流量系数
    01BC6 9180 02CD LDS	R24,R_dat
    01BC8 9190 02CE LDS	R25,R_dat+1
    01BCA 3B80      CPI	R24,0xB0
    01BCB E0E0      LDI	R30,0
    01BCC 079E      CPC	R25,R30
    01BCD F529      BNE	0x1BF3
(1916) 						{
(1917) 							DataFlag=2;
    01BCE E082      LDI	R24,2
    01BCF E090      LDI	R25,0
    01BD0 9390 02B4 STS	DataFlag+1,R25
    01BD2 9380 02B3 STS	DataFlag,R24
(1918) 							coeff_len=128;
    01BD4 E880      LDI	R24,0x80
    01BD5 9390 011F STS	coeff_len+1,R25
    01BD7 9380 011E STS	coeff_len,R24
(1919) 							coeff_count=0;
    01BD9 2422      CLR	R2
    01BDA 2433      CLR	R3
    01BDB 9230 011D STS	coeff_count+1,R3
    01BDD 9220 011C STS	coeff_count,R2
(1920) 							TimeOutFlag=0;
    01BDF 9220 02CB STS	TimeOutFlag,R2
(1921) 							Timer0Counter=1000;//8s定时
    01BE1 EE88      LDI	R24,0xE8
    01BE2 E093      LDI	R25,3
    01BE3 9390 032F STS	Timer0Counter+1,R25
    01BE5 9380 032E STS	Timer0Counter,R24
(1922) 							TCNT0=0x06; //8ms
    01BE7 E086      LDI	R24,6
    01BE8 BF82      OUT	0x32,R24
(1923) 							TCCR0|=0x06;//256分频
    01BE9 B783      IN	R24,0x33
    01BEA 6086      ORI	R24,6
    01BEB BF83      OUT	0x33,R24
(1924) 							TIFR|=0x01; //清定时器0中断标志
    01BEC B786      IN	R24,0x36
    01BED 6081      ORI	R24,1
    01BEE BF86      OUT	0x36,R24
(1925) 							TIMSK|=0x01;//使能定时器0中断		
    01BEF B787      IN	R24,0x37
    01BF0 6081      ORI	R24,1
    01BF1 BF87      OUT	0x37,R24
(1926) 						}
    01BF2 C4CA      RJMP	0x20BD
(1927) 						else  if(R_dat==0xb1)//上提流量系数
    01BF3 9180 02CD LDS	R24,R_dat
    01BF5 9190 02CE LDS	R25,R_dat+1
    01BF7 3B81      CPI	R24,0xB1
    01BF8 E0E0      LDI	R30,0
    01BF9 079E      CPC	R25,R30
    01BFA F009      BEQ	0x1BFC
    01BFB C4C1      RJMP	0x20BD
(1928) 						{
(1929) 							Uart0TxData[0]=0xE8;
    01BFC EE88      LDI	R24,0xE8
    01BFD 9380 0121 STS	Uart0TxData,R24
(1930) 							Uart0TxData[1]=0x40;
    01BFF E480      LDI	R24,0x40
    01C00 9380 0122 STS	Uart0TxData+1,R24
(1931) 							Uart0TxData[2]=0x87;
    01C02 E887      LDI	R24,0x87
    01C03 9380 0123 STS	Uart0TxData+2,R24
(1932) 							Uart0TxData[3]=2;//系数包2
    01C05 E082      LDI	R24,2
    01C06 9380 0124 STS	Uart0TxData+3,R24
(1933) 							SendUart0_2(9,5);// 超时40ms	
    01C08 E025      LDI	R18,5
    01C09 E030      LDI	R19,0
    01C0A E009      LDI	R16,0x9
    01C0B 940E 03C1 CALL	_SendUart0_2
(1934) 							if(Uart0RxCounter==64) 
    01C0D 9180 02E3 LDS	R24,Uart0RxCounter
    01C0F 3480      CPI	R24,0x40
    01C10 F599      BNE	0x1C44
(1935) 							{
(1936) 								for(i=0;i<32;i++)
    01C11 24AA      CLR	R10
    01C12 C02E      RJMP	0x1C41
(1937) 								{
(1938) 									CheckMotor(20);
    01C13 E104      LDI	R16,0x14
    01C14 E010      LDI	R17,0
    01C15 940E 07BE CALL	_CheckMotor
(1939) 									T_dat=Uart0RxData[i*2+1];//高字节
    01C17 EE85      LDI	R24,0xE5
    01C18 E092      LDI	R25,2
    01C19 2DEA      MOV	R30,R10
    01C1A 27FF      CLR	R31
    01C1B 0FEE      LSL	R30
    01C1C 1FFF      ROL	R31
    01C1D 0FE8      ADD	R30,R24
    01C1E 1FF9      ADC	R31,R25
    01C1F 8020      LD	R2,Z
    01C20 2433      CLR	R3
    01C21 9230 02D0 STS	T_dat+1,R3
    01C23 9220 02CF STS	T_dat,R2
(1940) 									T_dat<<=8;
    01C25 2C32      MOV	R3,R2
    01C26 2422      CLR	R2
    01C27 9230 02D0 STS	T_dat+1,R3
    01C29 9220 02CF STS	T_dat,R2
(1941) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01C2B EE84      LDI	R24,0xE4
    01C2C E092      LDI	R25,2
    01C2D 2DEA      MOV	R30,R10
    01C2E 27FF      CLR	R31
    01C2F 0FEE      LSL	R30
    01C30 1FFF      ROL	R31
    01C31 0FE8      ADD	R30,R24
    01C32 1FF9      ADC	R31,R25
    01C33 8020      LD	R2,Z
    01C34 2433      CLR	R3
    01C35 9040 02CF LDS	R4,T_dat
    01C37 9050 02D0 LDS	R5,T_dat+1
    01C39 2842      OR	R4,R2
    01C3A 2853      OR	R5,R3
    01C3B 9250 02D0 STS	T_dat+1,R5
    01C3D 9240 02CF STS	T_dat,R4
(1942) 									SendManchester();		 
    01C3F D504      RCALL	_SendManchester
    01C40 94A3      INC	R10
    01C41 2D8A      MOV	R24,R10
    01C42 3280      CPI	R24,0x20
    01C43 F278      BCS	0x1C13
(1943) 								}	
(1944) 							}	
(1945) 
(1946) 							Uart0TxData[0]=0xE8;
    01C44 EE88      LDI	R24,0xE8
    01C45 9380 0121 STS	Uart0TxData,R24
(1947) 							Uart0TxData[1]=0x40;
    01C47 E480      LDI	R24,0x40
    01C48 9380 0122 STS	Uart0TxData+1,R24
(1948) 							Uart0TxData[2]=0x87;
    01C4A E887      LDI	R24,0x87
    01C4B 9380 0123 STS	Uart0TxData+2,R24
(1949) 							Uart0TxData[3]=3;//系数包3
    01C4D E083      LDI	R24,3
    01C4E 9380 0124 STS	Uart0TxData+3,R24
(1950) 							SendUart0_2(9,5);// 超时40ms	 
    01C50 E025      LDI	R18,5
    01C51 E030      LDI	R19,0
    01C52 E009      LDI	R16,0x9
    01C53 940E 03C1 CALL	_SendUart0_2
(1951) 							if(Uart0RxCounter==64) 
    01C55 9180 02E3 LDS	R24,Uart0RxCounter
    01C57 3480      CPI	R24,0x40
    01C58 F009      BEQ	0x1C5A
    01C59 C463      RJMP	0x20BD
(1952) 							{
(1953) 								for(i=0;i<32;i++)
    01C5A 24AA      CLR	R10
    01C5B C02E      RJMP	0x1C8A
(1954) 								{
(1955) 									T_dat=Uart0RxData[i*2+1];//高字节
    01C5C EE85      LDI	R24,0xE5
    01C5D E092      LDI	R25,2
    01C5E 2DEA      MOV	R30,R10
    01C5F 27FF      CLR	R31
    01C60 0FEE      LSL	R30
    01C61 1FFF      ROL	R31
    01C62 0FE8      ADD	R30,R24
    01C63 1FF9      ADC	R31,R25
    01C64 8020      LD	R2,Z
    01C65 2433      CLR	R3
    01C66 9230 02D0 STS	T_dat+1,R3
    01C68 9220 02CF STS	T_dat,R2
(1956) 									T_dat<<=8;
    01C6A 2C32      MOV	R3,R2
    01C6B 2422      CLR	R2
    01C6C 9230 02D0 STS	T_dat+1,R3
    01C6E 9220 02CF STS	T_dat,R2
(1957) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01C70 EE84      LDI	R24,0xE4
    01C71 E092      LDI	R25,2
    01C72 2DEA      MOV	R30,R10
    01C73 27FF      CLR	R31
    01C74 0FEE      LSL	R30
    01C75 1FFF      ROL	R31
    01C76 0FE8      ADD	R30,R24
    01C77 1FF9      ADC	R31,R25
    01C78 8020      LD	R2,Z
    01C79 2433      CLR	R3
    01C7A 9040 02CF LDS	R4,T_dat
    01C7C 9050 02D0 LDS	R5,T_dat+1
    01C7E 2842      OR	R4,R2
    01C7F 2853      OR	R5,R3
    01C80 9250 02D0 STS	T_dat+1,R5
    01C82 9240 02CF STS	T_dat,R4
(1958) 									SendManchester();
    01C84 D4BF      RCALL	_SendManchester
(1959) 									CheckMotor(20);
    01C85 E104      LDI	R16,0x14
    01C86 E010      LDI	R17,0
    01C87 940E 07BE CALL	_CheckMotor
    01C89 94A3      INC	R10
    01C8A 2D8A      MOV	R24,R10
    01C8B 3280      CPI	R24,0x20
    01C8C F278      BCS	0x1C5C
(1960) 								}
(1961) 							}		
(1962) 						}
(1963) 						/*   if(R_dat==0xb1)//读幅值
(1964) 						{
(1965) 						SendUart0(0xb0,5);//40ms定时
(1966) 						for(k=0;k<8;k+=2)
(1967) 						{
(1968) 						T_dat=Uart0RxData[k];
(1969) 						T_dat<<=8;
(1970) 						T_dat|=Uart0RxData[k+1];
(1971) 						SendManchester();
(1972) 						CheckMotor(40);
(1973) 						}
(1974) 						}
(1975) 						else  if((R_dat>0xb0) && (R_dat<0xb5) )//1800点提取,连续提取流量测试数据，4个通道分别提取，命令为0xB1-0xB4
(1976) 						{   
(1977) 						SendUart0(R_dat,125);//1s定时	 
(1978) 						for(k=0;k<1800;k++)//共1800帧数据，全部提取
(1979) 						{
(1980) 						SendUart0(0xFF,1);//8ms定时	   
(1981) 						T_dat=Uart0RxData[0];
(1982) 						T_dat<<=8;
(1983) 						T_dat|=Uart0RxData[1];
(1984) 						SendManchester();
(1985) 						CheckMotor(42);
(1986) 						}
(1987) 						} */  
(1988) 						break;
    01C8D C42F      RJMP	0x20BD
(1989) 
(1990) 					case 0xc0://所有参数全采，上传16字节共8帧
(1991) 						if(R_dat==0xc0)
    01C8E 9180 02CD LDS	R24,R_dat
    01C90 9190 02CE LDS	R25,R_dat+1
    01C92 3C80      CPI	R24,0xC0
    01C93 E0E0      LDI	R30,0
    01C94 079E      CPC	R25,R30
    01C95 F009      BEQ	0x1C97
    01C96 C286      RJMP	0x1F1D
(1992) 						{
(1993) 							Uart0TxData[0]=0xE8;
    01C97 EE88      LDI	R24,0xE8
    01C98 9380 0121 STS	Uart0TxData,R24
(1994) 							Uart0TxData[1]=0x40;
    01C9A E480      LDI	R24,0x40
    01C9B 9380 0122 STS	Uart0TxData+1,R24
(1995) 							Uart0TxData[2]=0x89;
    01C9D E889      LDI	R24,0x89
    01C9E 9380 0123 STS	Uart0TxData+2,R24
(1996) 							Uart0TxData[3]=9;
    01CA0 E089      LDI	R24,0x9
    01CA1 9380 0124 STS	Uart0TxData+3,R24
(1997) 							SendUart0_2(9,50);//流量板直读检测，超时400ms
    01CA3 E322      LDI	R18,0x32
    01CA4 E030      LDI	R19,0
    01CA5 E009      LDI	R16,0x9
    01CA6 940E 03C1 CALL	_SendUart0_2
(1998) 							if(Uart0RxCounter==64)//成功接收到压力、温度、流量数据，先低字节后高字节
    01CA8 9180 02E3 LDS	R24,Uart0RxCounter
    01CAA 3480      CPI	R24,0x40
    01CAB F009      BEQ	0x1CAD
    01CAC C410      RJMP	0x20BD
(1999) 							{
(2000) 								T_dat=Uart0RxData[1];
    01CAD 9020 02E5 LDS	R2,Uart0RxData+1
    01CAF 2433      CLR	R3
    01CB0 9230 02D0 STS	T_dat+1,R3
    01CB2 9220 02CF STS	T_dat,R2
(2001) 								T_dat<<=8;
    01CB4 9020 02CF LDS	R2,T_dat
    01CB6 9030 02D0 LDS	R3,T_dat+1
    01CB8 2C32      MOV	R3,R2
    01CB9 2422      CLR	R2
    01CBA 9230 02D0 STS	T_dat+1,R3
    01CBC 9220 02CF STS	T_dat,R2
(2002) 								T_dat|=Uart0RxData[0];
    01CBE 9020 02E4 LDS	R2,Uart0RxData
    01CC0 2433      CLR	R3
    01CC1 9040 02CF LDS	R4,T_dat
    01CC3 9050 02D0 LDS	R5,T_dat+1
    01CC5 2842      OR	R4,R2
    01CC6 2853      OR	R5,R3
    01CC7 9250 02D0 STS	T_dat+1,R5
    01CC9 9240 02CF STS	T_dat,R4
(2003) 								SendManchester();//压力
    01CCB D478      RCALL	_SendManchester
(2004) 								crc16array[0]=(unsigned char)(T_dat);
    01CCC 9020 02CF LDS	R2,T_dat
    01CCE 9030 02D0 LDS	R3,T_dat+1
    01CD0 9220 0100 STS	crc16array,R2
(2005) 								crc16array[1]=(unsigned char)(T_dat>>8);
    01CD2 2C23      MOV	R2,R3
    01CD3 2433      CLR	R3
    01CD4 FC27      SBRC	R2,7
    01CD5 9430      COM	R3
    01CD6 9220 0101 STS	crc16array+1,R2
(2006) 
(2007) 
(2008) 								CheckMotor(30);	
    01CD8 E10E      LDI	R16,0x1E
    01CD9 E010      LDI	R17,0
    01CDA 940E 07BE CALL	_CheckMotor
(2009) 								T_dat=Uart0RxData[3];
    01CDC 9020 02E7 LDS	R2,Uart0RxData+3
    01CDE 2433      CLR	R3
    01CDF 9230 02D0 STS	T_dat+1,R3
    01CE1 9220 02CF STS	T_dat,R2
(2010) 								T_dat<<=8;
    01CE3 9020 02CF LDS	R2,T_dat
    01CE5 9030 02D0 LDS	R3,T_dat+1
    01CE7 2C32      MOV	R3,R2
    01CE8 2422      CLR	R2
    01CE9 9230 02D0 STS	T_dat+1,R3
    01CEB 9220 02CF STS	T_dat,R2
(2011) 								T_dat|=Uart0RxData[2];
    01CED 9020 02E6 LDS	R2,Uart0RxData+2
    01CEF 2433      CLR	R3
    01CF0 9040 02CF LDS	R4,T_dat
    01CF2 9050 02D0 LDS	R5,T_dat+1
    01CF4 2842      OR	R4,R2
    01CF5 2853      OR	R5,R3
    01CF6 9250 02D0 STS	T_dat+1,R5
    01CF8 9240 02CF STS	T_dat,R4
(2012) 								SendManchester();//温度
    01CFA D449      RCALL	_SendManchester
(2013) 								crc16array[2]=(unsigned char)(T_dat);
    01CFB 9020 02CF LDS	R2,T_dat
    01CFD 9030 02D0 LDS	R3,T_dat+1
    01CFF 9220 0102 STS	crc16array+2,R2
(2014) 								crc16array[3]=(unsigned char)(T_dat>>8);
    01D01 2C23      MOV	R2,R3
    01D02 2433      CLR	R3
    01D03 FC27      SBRC	R2,7
    01D04 9430      COM	R3
    01D05 9220 0103 STS	crc16array+3,R2
(2015) 
(2016) 								CheckMotor(30);	
    01D07 E10E      LDI	R16,0x1E
    01D08 E010      LDI	R17,0
    01D09 940E 07BE CALL	_CheckMotor
(2017) 
(2018) 								lfib=Uart0RxData[5];
    01D0B 9020 02E9 LDS	R2,Uart0RxData+5
    01D0D 2433      CLR	R3
    01D0E 2444      CLR	R4
    01D0F 2455      CLR	R5
    01D10 9230 0115 STS	lfib+1,R3
    01D12 9220 0114 STS	lfib,R2
    01D14 9250 0117 STS	lfib+3,R5
    01D16 9240 0116 STS	lfib+2,R4
(2019) 								lfib<<=8;
    01D18 E088      LDI	R24,0x8
    01D19 E090      LDI	R25,0
    01D1A 9120 0116 LDS	R18,lfib+2
    01D1C 9130 0117 LDS	R19,lfib+3
    01D1E 9100 0114 LDS	R16,lfib
    01D20 9110 0115 LDS	R17,lfib+1
    01D22 938A      ST	-Y,R24
    01D23 940E 2652 CALL	lsl32
    01D25 9310 0115 STS	lfib+1,R17
    01D27 9300 0114 STS	lfib,R16
    01D29 9330 0117 STS	lfib+3,R19
    01D2B 9320 0116 STS	lfib+2,R18
(2020) 								lfib|=Uart0RxData[4];
    01D2D 9020 02E8 LDS	R2,Uart0RxData+4
    01D2F 2433      CLR	R3
    01D30 2444      CLR	R4
    01D31 2455      CLR	R5
    01D32 0138      MOVW	R6,R16
    01D33 0149      MOVW	R8,R18
    01D34 2862      OR	R6,R2
    01D35 2873      OR	R7,R3
    01D36 2884      OR	R8,R4
    01D37 2895      OR	R9,R5
    01D38 9270 0115 STS	lfib+1,R7
    01D3A 9260 0114 STS	lfib,R6
    01D3C 9290 0117 STS	lfib+3,R9
    01D3E 9280 0116 STS	lfib+2,R8
(2021) 								lfib&=0x0000ffff;
    01D40 EF4F      LDI	R20,0xFF
    01D41 EF5F      LDI	R21,0xFF
    01D42 E060      LDI	R22,0
    01D43 E070      LDI	R23,0
    01D44 0113      MOVW	R2,R6
    01D45 0124      MOVW	R4,R8
    01D46 2224      AND	R2,R20
    01D47 2235      AND	R3,R21
    01D48 2246      AND	R4,R22
    01D49 2257      AND	R5,R23
    01D4A 9230 0115 STS	lfib+1,R3
    01D4C 9220 0114 STS	lfib,R2
    01D4E 9250 0117 STS	lfib+3,R5
    01D50 9240 0116 STS	lfib+2,R4
(2022) 								myFIB.f=(unsigned long)lfib; 
    01D52 0181      MOVW	R16,R2
    01D53 0192      MOVW	R18,R4
    01D54 940E 26B4 CALL	ulong2fp
    01D56 9310 0341 STS	myFIB+1,R17
    01D58 9300 0340 STS	myFIB,R16
    01D5A 9330 0343 STS	myFIB+3,R19
    01D5C 9320 0342 STS	myFIB+2,R18
(2023) 
(2024) 								T_dat=myFIB.i[1];
    01D5E 9020 0342 LDS	R2,myFIB+2
    01D60 9030 0343 LDS	R3,myFIB+3
    01D62 9230 02D0 STS	T_dat+1,R3
    01D64 9220 02CF STS	T_dat,R2
(2025) 								SendManchester();//流量-时间1
    01D66 D3DD      RCALL	_SendManchester
(2026) 								crc16array[4]=(unsigned char)(T_dat);
    01D67 9020 02CF LDS	R2,T_dat
    01D69 9030 02D0 LDS	R3,T_dat+1
    01D6B 9220 0104 STS	crc16array+4,R2
(2027) 								crc16array[5]=(unsigned char)(T_dat>>8);
    01D6D 2C23      MOV	R2,R3
    01D6E 2433      CLR	R3
    01D6F FC27      SBRC	R2,7
    01D70 9430      COM	R3
    01D71 9220 0105 STS	crc16array+5,R2
(2028) 
(2029) 								CheckMotor(30);	
    01D73 E10E      LDI	R16,0x1E
    01D74 E010      LDI	R17,0
    01D75 940E 07BE CALL	_CheckMotor
(2030) 								T_dat=myFIB.i[0];
    01D77 9020 0340 LDS	R2,myFIB
    01D79 9030 0341 LDS	R3,myFIB+1
    01D7B 9230 02D0 STS	T_dat+1,R3
    01D7D 9220 02CF STS	T_dat,R2
(2031) 								SendManchester();//流量-时间2
    01D7F D3C4      RCALL	_SendManchester
(2032) 								crc16array[6]=(unsigned char)(T_dat);
    01D80 9020 02CF LDS	R2,T_dat
    01D82 9030 02D0 LDS	R3,T_dat+1
    01D84 9220 0106 STS	crc16array+6,R2
(2033) 								crc16array[7]=(unsigned char)(T_dat>>8);
    01D86 2C23      MOV	R2,R3
    01D87 2433      CLR	R3
    01D88 FC27      SBRC	R2,7
    01D89 9430      COM	R3
    01D8A 9220 0107 STS	crc16array+7,R2
(2034) 
(2035) 								CheckMotor(30);	
    01D8C E10E      LDI	R16,0x1E
    01D8D E010      LDI	R17,0
    01D8E 940E 07BE CALL	_CheckMotor
(2036) 
(2037) 								lfib=Uart0RxData[7];
    01D90 9020 02EB LDS	R2,Uart0RxData+7
    01D92 2433      CLR	R3
    01D93 2444      CLR	R4
    01D94 2455      CLR	R5
    01D95 9230 0115 STS	lfib+1,R3
    01D97 9220 0114 STS	lfib,R2
    01D99 9250 0117 STS	lfib+3,R5
    01D9B 9240 0116 STS	lfib+2,R4
(2038) 								lfib<<=8;
    01D9D E088      LDI	R24,0x8
    01D9E E090      LDI	R25,0
    01D9F 9120 0116 LDS	R18,lfib+2
    01DA1 9130 0117 LDS	R19,lfib+3
    01DA3 9100 0114 LDS	R16,lfib
    01DA5 9110 0115 LDS	R17,lfib+1
    01DA7 938A      ST	-Y,R24
    01DA8 940E 2652 CALL	lsl32
    01DAA 9310 0115 STS	lfib+1,R17
    01DAC 9300 0114 STS	lfib,R16
    01DAE 9330 0117 STS	lfib+3,R19
    01DB0 9320 0116 STS	lfib+2,R18
(2039) 								lfib|=Uart0RxData[6];
    01DB2 9020 02EA LDS	R2,Uart0RxData+6
    01DB4 2433      CLR	R3
    01DB5 2444      CLR	R4
    01DB6 2455      CLR	R5
    01DB7 0138      MOVW	R6,R16
    01DB8 0149      MOVW	R8,R18
    01DB9 2862      OR	R6,R2
    01DBA 2873      OR	R7,R3
    01DBB 2884      OR	R8,R4
    01DBC 2895      OR	R9,R5
    01DBD 9270 0115 STS	lfib+1,R7
    01DBF 9260 0114 STS	lfib,R6
    01DC1 9290 0117 STS	lfib+3,R9
    01DC3 9280 0116 STS	lfib+2,R8
(2040) 								lfib&=0x0000ffff;
    01DC5 EF4F      LDI	R20,0xFF
    01DC6 EF5F      LDI	R21,0xFF
    01DC7 E060      LDI	R22,0
    01DC8 E070      LDI	R23,0
    01DC9 0113      MOVW	R2,R6
    01DCA 0124      MOVW	R4,R8
    01DCB 2224      AND	R2,R20
    01DCC 2235      AND	R3,R21
    01DCD 2246      AND	R4,R22
    01DCE 2257      AND	R5,R23
    01DCF 9230 0115 STS	lfib+1,R3
    01DD1 9220 0114 STS	lfib,R2
    01DD3 9250 0117 STS	lfib+3,R5
    01DD5 9240 0116 STS	lfib+2,R4
(2041) 								myFIB.f=(unsigned long)lfib; 
    01DD7 0181      MOVW	R16,R2
    01DD8 0192      MOVW	R18,R4
    01DD9 940E 26B4 CALL	ulong2fp
    01DDB 9310 0341 STS	myFIB+1,R17
    01DDD 9300 0340 STS	myFIB,R16
    01DDF 9330 0343 STS	myFIB+3,R19
    01DE1 9320 0342 STS	myFIB+2,R18
(2042) 
(2043) 								T_dat=myFIB.i[1];
    01DE3 9020 0342 LDS	R2,myFIB+2
    01DE5 9030 0343 LDS	R3,myFIB+3
    01DE7 9230 02D0 STS	T_dat+1,R3
    01DE9 9220 02CF STS	T_dat,R2
(2044) 								SendManchester();//流量-相位1
    01DEB D358      RCALL	_SendManchester
(2045) 								crc16array[8]=(unsigned char)(T_dat);
    01DEC 9020 02CF LDS	R2,T_dat
    01DEE 9030 02D0 LDS	R3,T_dat+1
    01DF0 9220 0108 STS	crc16array+8,R2
(2046) 								crc16array[9]=(unsigned char)(T_dat>>8);
    01DF2 2C23      MOV	R2,R3
    01DF3 2433      CLR	R3
    01DF4 FC27      SBRC	R2,7
    01DF5 9430      COM	R3
    01DF6 9220 0109 STS	crc16array+9,R2
(2047) 
(2048) 								CheckMotor(30);	
    01DF8 E10E      LDI	R16,0x1E
    01DF9 E010      LDI	R17,0
    01DFA 940E 07BE CALL	_CheckMotor
(2049) 								T_dat=myFIB.i[0];
    01DFC 9020 0340 LDS	R2,myFIB
    01DFE 9030 0341 LDS	R3,myFIB+1
    01E00 9230 02D0 STS	T_dat+1,R3
    01E02 9220 02CF STS	T_dat,R2
(2050) 								SendManchester();//流量-相位2
    01E04 D33F      RCALL	_SendManchester
(2051) 								crc16array[10]=(unsigned char)(T_dat);
    01E05 9020 02CF LDS	R2,T_dat
    01E07 9030 02D0 LDS	R3,T_dat+1
    01E09 9220 010A STS	crc16array+10,R2
(2052) 								crc16array[11]=(unsigned char)(T_dat>>8);
    01E0B 2C23      MOV	R2,R3
    01E0C 2433      CLR	R3
    01E0D FC27      SBRC	R2,7
    01E0E 9430      COM	R3
    01E0F 9220 010B STS	crc16array+11,R2
(2053) 
(2054) 								CheckMotor(30);	 
    01E11 E10E      LDI	R16,0x1E
    01E12 E010      LDI	R17,0
    01E13 940E 07BE CALL	_CheckMotor
(2055) 								T_dat=Motor1Status.i;
    01E15 9020 033E LDS	R2,Motor1Status
    01E17 9030 033F LDS	R3,Motor1Status+1
    01E19 9230 02D0 STS	T_dat+1,R3
    01E1B 9220 02CF STS	T_dat,R2
(2056) 								SendManchester();//收放电机状态
    01E1D D326      RCALL	_SendManchester
(2057) 								crc16array[12]=(unsigned char)(T_dat);
    01E1E 9020 02CF LDS	R2,T_dat
    01E20 9030 02D0 LDS	R3,T_dat+1
    01E22 9220 010C STS	crc16array+12,R2
(2058) 								crc16array[13]=(unsigned char)(T_dat>>8);
    01E24 2C23      MOV	R2,R3
    01E25 2433      CLR	R3
    01E26 FC27      SBRC	R2,7
    01E27 9430      COM	R3
    01E28 9220 010D STS	crc16array+13,R2
(2059) 
(2060) 								CheckMotor(30);	 
    01E2A E10E      LDI	R16,0x1E
    01E2B E010      LDI	R17,0
    01E2C 940E 07BE CALL	_CheckMotor
(2061) 								T_dat=Motor2Status.i;
    01E2E 9020 033C LDS	R2,Motor2Status
    01E30 9030 033D LDS	R3,Motor2Status+1
    01E32 9230 02D0 STS	T_dat+1,R3
    01E34 9220 02CF STS	T_dat,R2
(2062) 								SendManchester();//调节电机状态
    01E36 D30D      RCALL	_SendManchester
(2063) 								crc16array[14]=(unsigned char)(T_dat);
    01E37 9020 02CF LDS	R2,T_dat
    01E39 9030 02D0 LDS	R3,T_dat+1
    01E3B 9220 010E STS	crc16array+14,R2
(2064) 								crc16array[15]=(unsigned char)(T_dat>>8);
    01E3D 2C23      MOV	R2,R3
    01E3E 2433      CLR	R3
    01E3F FC27      SBRC	R2,7
    01E40 9430      COM	R3
    01E41 9220 010F STS	crc16array+15,R2
(2065) 
(2066) 								CheckMotor(30);	
    01E43 E10E      LDI	R16,0x1E
    01E44 E010      LDI	R17,0
    01E45 940E 07BE CALL	_CheckMotor
(2067) 								f=SampleADC(4);//Cable CAB-R1
    01E47 E004      LDI	R16,4
    01E48 940E 074F CALL	_SampleADC
    01E4A 2711      CLR	R17
    01E4B 940E 26AB CALL	int2fp
    01E4D 830D      STD	Y+5,R16
    01E4E 831E      STD	Y+6,R17
    01E4F 832F      STD	Y+7,R18
    01E50 8738      STD	Y+8,R19
(2068) 								f=f*2.56;
    01E51 E904      LDI	R16,0x94
    01E52 E010      LDI	R17,0
    01E53 940E 25EF CALL	elpm32
    01E55 01CE      MOVW	R24,R28
    01E56 9605      ADIW	R24,5
    01E57 939A      ST	-Y,R25
    01E58 938A      ST	-Y,R24
    01E59 940E 2846 CALL	fpmule1
    01E5B 830D      STD	Y+5,R16
    01E5C 831E      STD	Y+6,R17
    01E5D 832F      STD	Y+7,R18
    01E5E 8738      STD	Y+8,R19
(2069) 								f=f*101;
    01E5F E900      LDI	R16,0x90
    01E60 E010      LDI	R17,0
    01E61 940E 25EF CALL	elpm32
    01E63 01CE      MOVW	R24,R28
    01E64 9605      ADIW	R24,5
    01E65 939A      ST	-Y,R25
    01E66 938A      ST	-Y,R24
    01E67 940E 2846 CALL	fpmule1
    01E69 830D      STD	Y+5,R16
    01E6A 831E      STD	Y+6,R17
    01E6B 832F      STD	Y+7,R18
    01E6C 8738      STD	Y+8,R19
(2070) 								f=f/256;
    01E6D 802D      LDD	R2,Y+5
    01E6E 803E      LDD	R3,Y+6
    01E6F 804F      LDD	R4,Y+7
    01E70 8458      LDD	R5,Y+8
    01E71 E80C      LDI	R16,0x8C
    01E72 E010      LDI	R17,0
    01E73 940E 25EF CALL	elpm32
    01E75 933A      ST	-Y,R19
    01E76 932A      ST	-Y,R18
    01E77 931A      ST	-Y,R17
    01E78 930A      ST	-Y,R16
    01E79 0181      MOVW	R16,R2
    01E7A 0192      MOVW	R18,R4
    01E7B 940E 26D6 CALL	fpdiv2
    01E7D 830D      STD	Y+5,R16
    01E7E 831E      STD	Y+6,R17
    01E7F 832F      STD	Y+7,R18
    01E80 8738      STD	Y+8,R19
(2071) 								T_dat=f;
    01E81 810D      LDD	R16,Y+5
    01E82 811E      LDD	R17,Y+6
    01E83 812F      LDD	R18,Y+7
    01E84 8538      LDD	R19,Y+8
    01E85 940E 2677 CALL	fpint
    01E87 9310 02D0 STS	T_dat+1,R17
    01E89 9300 02CF STS	T_dat,R16
(2072) 								CheckMotor(30);
    01E8B E10E      LDI	R16,0x1E
    01E8C E010      LDI	R17,0
    01E8D 940E 07BE CALL	_CheckMotor
(2073) 								T_dat<<=8;   
    01E8F 9020 02CF LDS	R2,T_dat
    01E91 9030 02D0 LDS	R3,T_dat+1
    01E93 2C32      MOV	R3,R2
    01E94 2422      CLR	R2
    01E95 9230 02D0 STS	T_dat+1,R3
    01E97 9220 02CF STS	T_dat,R2
(2074) 								f=SampleADC(5);//VIN / VR CAB-R2
    01E99 E005      LDI	R16,5
    01E9A 940E 074F CALL	_SampleADC
    01E9C 2EC0      MOV	R12,R16
    01E9D 2711      CLR	R17
    01E9E 940E 26AB CALL	int2fp
    01EA0 830D      STD	Y+5,R16
    01EA1 831E      STD	Y+6,R17
    01EA2 832F      STD	Y+7,R18
    01EA3 8738      STD	Y+8,R19
(2075) 								f=f*2.56;
    01EA4 E904      LDI	R16,0x94
    01EA5 E010      LDI	R17,0
    01EA6 940E 25EF CALL	elpm32
    01EA8 01CE      MOVW	R24,R28
    01EA9 9605      ADIW	R24,5
    01EAA 939A      ST	-Y,R25
    01EAB 938A      ST	-Y,R24
    01EAC 940E 2846 CALL	fpmule1
    01EAE 830D      STD	Y+5,R16
    01EAF 831E      STD	Y+6,R17
    01EB0 832F      STD	Y+7,R18
    01EB1 8738      STD	Y+8,R19
(2076) 								f=f*101;
    01EB2 E900      LDI	R16,0x90
    01EB3 E010      LDI	R17,0
    01EB4 940E 25EF CALL	elpm32
    01EB6 01CE      MOVW	R24,R28
    01EB7 9605      ADIW	R24,5
    01EB8 939A      ST	-Y,R25
    01EB9 938A      ST	-Y,R24
    01EBA 940E 2846 CALL	fpmule1
    01EBC 830D      STD	Y+5,R16
    01EBD 831E      STD	Y+6,R17
    01EBE 832F      STD	Y+7,R18
    01EBF 8738      STD	Y+8,R19
(2077) 								f=f/256;
    01EC0 802D      LDD	R2,Y+5
    01EC1 803E      LDD	R3,Y+6
    01EC2 804F      LDD	R4,Y+7
    01EC3 8458      LDD	R5,Y+8
    01EC4 E80C      LDI	R16,0x8C
    01EC5 E010      LDI	R17,0
    01EC6 940E 25EF CALL	elpm32
    01EC8 933A      ST	-Y,R19
    01EC9 932A      ST	-Y,R18
    01ECA 931A      ST	-Y,R17
    01ECB 930A      ST	-Y,R16
    01ECC 0181      MOVW	R16,R2
    01ECD 0192      MOVW	R18,R4
    01ECE 940E 26D6 CALL	fpdiv2
    01ED0 830D      STD	Y+5,R16
    01ED1 831E      STD	Y+6,R17
    01ED2 832F      STD	Y+7,R18
    01ED3 8738      STD	Y+8,R19
(2078) 								i=f;
    01ED4 810D      LDD	R16,Y+5
    01ED5 811E      LDD	R17,Y+6
    01ED6 812F      LDD	R18,Y+7
    01ED7 8538      LDD	R19,Y+8
    01ED8 940E 2677 CALL	fpint
    01EDA 2EA0      MOV	R10,R16
(2079) 								T_dat|=i; 
    01EDB 2C2A      MOV	R2,R10
    01EDC 2433      CLR	R3
    01EDD 9040 02CF LDS	R4,T_dat
    01EDF 9050 02D0 LDS	R5,T_dat+1
    01EE1 2842      OR	R4,R2
    01EE2 2853      OR	R5,R3
    01EE3 9250 02D0 STS	T_dat+1,R5
    01EE5 9240 02CF STS	T_dat,R4
(2080) 								SendManchester();//2路电缆电压
    01EE7 D25C      RCALL	_SendManchester
(2081) 								crc16array[16]=(unsigned char)(T_dat);
    01EE8 9020 02CF LDS	R2,T_dat
    01EEA 9030 02D0 LDS	R3,T_dat+1
    01EEC 9220 0110 STS	crc16array+16,R2
(2082) 								crc16array[17]=(unsigned char)(T_dat>>8);
    01EEE 2C23      MOV	R2,R3
    01EEF 2433      CLR	R3
    01EF0 FC27      SBRC	R2,7
    01EF1 9430      COM	R3
    01EF2 9220 0111 STS	crc16array+17,R2
(2083) 
(2084) 								CheckMotor(30);	
    01EF4 E10E      LDI	R16,0x1E
    01EF5 E010      LDI	R17,0
    01EF6 940E 07BE CALL	_CheckMotor
(2085) 								crc16(crc16array,18);//0.75ms
    01EF8 E122      LDI	R18,0x12
    01EF9 E030      LDI	R19,0
    01EFA E000      LDI	R16,0
    01EFB E011      LDI	R17,1
    01EFC D659      RCALL	_crc16
(2086) 								T_dat=crc16hi;
    01EFD 9020 0113 LDS	R2,crc16hi
    01EFF 2433      CLR	R3
    01F00 9230 02D0 STS	T_dat+1,R3
    01F02 9220 02CF STS	T_dat,R2
(2087) 								T_dat<<=8;
    01F04 9020 02CF LDS	R2,T_dat
    01F06 9030 02D0 LDS	R3,T_dat+1
    01F08 2C32      MOV	R3,R2
    01F09 2422      CLR	R2
    01F0A 9230 02D0 STS	T_dat+1,R3
    01F0C 9220 02CF STS	T_dat,R2
(2088) 								T_dat|=crc16lo;	  
    01F0E 9020 0112 LDS	R2,crc16lo
    01F10 2433      CLR	R3
    01F11 9040 02CF LDS	R4,T_dat
    01F13 9050 02D0 LDS	R5,T_dat+1
    01F15 2842      OR	R4,R2
    01F16 2853      OR	R5,R3
    01F17 9250 02D0 STS	T_dat+1,R5
    01F19 9240 02CF STS	T_dat,R4
(2089) 								SendManchester();//上传CRC校验共2字节
    01F1B D228      RCALL	_SendManchester
(2090) 							}	
(2091) 						}
    01F1C C1A0      RJMP	0x20BD
(2092) 						else  if(R_dat==0xc5) //读仪器信息,共320字节，分5次从流量板中提取，每包64字节
    01F1D 9180 02CD LDS	R24,R_dat
    01F1F 9190 02CE LDS	R25,R_dat+1
    01F21 3C85      CPI	R24,0xC5
    01F22 E0E0      LDI	R30,0
    01F23 079E      CPC	R25,R30
    01F24 F009      BEQ	0x1F26
    01F25 C16A      RJMP	0x2090
(2093) 						{
(2094) 							Uart0TxData[0]=0xE8;
    01F26 EE88      LDI	R24,0xE8
    01F27 9380 0121 STS	Uart0TxData,R24
(2095) 							Uart0TxData[1]=0x40;
    01F29 E480      LDI	R24,0x40
    01F2A 9380 0122 STS	Uart0TxData+1,R24
(2096) 							Uart0TxData[2]=0x83;
    01F2C E883      LDI	R24,0x83
    01F2D 9380 0123 STS	Uart0TxData+2,R24
(2097) 							Uart0TxData[3]=0;//包0
    01F2F 2422      CLR	R2
    01F30 9220 0124 STS	Uart0TxData+3,R2
(2098) 							SendUart0_2(9,5);// 超时40ms	
    01F32 E025      LDI	R18,5
    01F33 E030      LDI	R19,0
    01F34 E009      LDI	R16,0x9
    01F35 940E 03C1 CALL	_SendUart0_2
(2099) 							if(Uart0RxCounter==64) 
    01F37 9180 02E3 LDS	R24,Uart0RxCounter
    01F39 3480      CPI	R24,0x40
    01F3A F599      BNE	0x1F6E
(2100) 							{
(2101) 								for(i=0;i<32;i++)
    01F3B 24AA      CLR	R10
    01F3C C02E      RJMP	0x1F6B
(2102) 								{
(2103) 									CheckMotor(20);
    01F3D E104      LDI	R16,0x14
    01F3E E010      LDI	R17,0
    01F3F 940E 07BE CALL	_CheckMotor
(2104) 									T_dat=Uart0RxData[i*2+1];//高字节
    01F41 EE85      LDI	R24,0xE5
    01F42 E092      LDI	R25,2
    01F43 2DEA      MOV	R30,R10
    01F44 27FF      CLR	R31
    01F45 0FEE      LSL	R30
    01F46 1FFF      ROL	R31
    01F47 0FE8      ADD	R30,R24
    01F48 1FF9      ADC	R31,R25
    01F49 8020      LD	R2,Z
    01F4A 2433      CLR	R3
    01F4B 9230 02D0 STS	T_dat+1,R3
    01F4D 9220 02CF STS	T_dat,R2
(2105) 									T_dat<<=8;
    01F4F 2C32      MOV	R3,R2
    01F50 2422      CLR	R2
    01F51 9230 02D0 STS	T_dat+1,R3
    01F53 9220 02CF STS	T_dat,R2
(2106) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01F55 EE84      LDI	R24,0xE4
    01F56 E092      LDI	R25,2
    01F57 2DEA      MOV	R30,R10
    01F58 27FF      CLR	R31
    01F59 0FEE      LSL	R30
    01F5A 1FFF      ROL	R31
    01F5B 0FE8      ADD	R30,R24
    01F5C 1FF9      ADC	R31,R25
    01F5D 8020      LD	R2,Z
    01F5E 2433      CLR	R3
    01F5F 9040 02CF LDS	R4,T_dat
    01F61 9050 02D0 LDS	R5,T_dat+1
    01F63 2842      OR	R4,R2
    01F64 2853      OR	R5,R3
    01F65 9250 02D0 STS	T_dat+1,R5
    01F67 9240 02CF STS	T_dat,R4
(2107) 									SendManchester();		 
    01F69 D1DA      RCALL	_SendManchester
    01F6A 94A3      INC	R10
    01F6B 2D8A      MOV	R24,R10
    01F6C 3280      CPI	R24,0x20
    01F6D F278      BCS	0x1F3D
(2108) 								}	
(2109) 							}	
(2110) 
(2111) 							Uart0TxData[0]=0xE8;
    01F6E EE88      LDI	R24,0xE8
    01F6F 9380 0121 STS	Uart0TxData,R24
(2112) 							Uart0TxData[1]=0x40;
    01F71 E480      LDI	R24,0x40
    01F72 9380 0122 STS	Uart0TxData+1,R24
(2113) 							Uart0TxData[2]=0x83;
    01F74 E883      LDI	R24,0x83
    01F75 9380 0123 STS	Uart0TxData+2,R24
(2114) 							Uart0TxData[3]=1;//包1
    01F77 E081      LDI	R24,1
    01F78 9380 0124 STS	Uart0TxData+3,R24
(2115) 							SendUart0_2(9,5);// 超时40ms	 
    01F7A E025      LDI	R18,5
    01F7B E030      LDI	R19,0
    01F7C E009      LDI	R16,0x9
    01F7D 940E 03C1 CALL	_SendUart0_2
(2116) 							if(Uart0RxCounter==64) 
    01F7F 9180 02E3 LDS	R24,Uart0RxCounter
    01F81 3480      CPI	R24,0x40
    01F82 F599      BNE	0x1FB6
(2117) 							{
(2118) 								for(i=0;i<32;i++)
    01F83 24AA      CLR	R10
    01F84 C02E      RJMP	0x1FB3
(2119) 								{
(2120) 									T_dat=Uart0RxData[i*2+1];//高字节
    01F85 EE85      LDI	R24,0xE5
    01F86 E092      LDI	R25,2
    01F87 2DEA      MOV	R30,R10
    01F88 27FF      CLR	R31
    01F89 0FEE      LSL	R30
    01F8A 1FFF      ROL	R31
    01F8B 0FE8      ADD	R30,R24
    01F8C 1FF9      ADC	R31,R25
    01F8D 8020      LD	R2,Z
    01F8E 2433      CLR	R3
    01F8F 9230 02D0 STS	T_dat+1,R3
    01F91 9220 02CF STS	T_dat,R2
(2121) 									T_dat<<=8;
    01F93 2C32      MOV	R3,R2
    01F94 2422      CLR	R2
    01F95 9230 02D0 STS	T_dat+1,R3
    01F97 9220 02CF STS	T_dat,R2
(2122) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01F99 EE84      LDI	R24,0xE4
    01F9A E092      LDI	R25,2
    01F9B 2DEA      MOV	R30,R10
    01F9C 27FF      CLR	R31
    01F9D 0FEE      LSL	R30
    01F9E 1FFF      ROL	R31
    01F9F 0FE8      ADD	R30,R24
    01FA0 1FF9      ADC	R31,R25
    01FA1 8020      LD	R2,Z
    01FA2 2433      CLR	R3
    01FA3 9040 02CF LDS	R4,T_dat
    01FA5 9050 02D0 LDS	R5,T_dat+1
    01FA7 2842      OR	R4,R2
    01FA8 2853      OR	R5,R3
    01FA9 9250 02D0 STS	T_dat+1,R5
    01FAB 9240 02CF STS	T_dat,R4
(2123) 									SendManchester();
    01FAD D196      RCALL	_SendManchester
(2124) 									CheckMotor(20);
    01FAE E104      LDI	R16,0x14
    01FAF E010      LDI	R17,0
    01FB0 940E 07BE CALL	_CheckMotor
    01FB2 94A3      INC	R10
    01FB3 2D8A      MOV	R24,R10
    01FB4 3280      CPI	R24,0x20
    01FB5 F278      BCS	0x1F85
(2125) 								}
(2126) 							}	
(2127) 
(2128) 							Uart0TxData[0]=0xE8;
    01FB6 EE88      LDI	R24,0xE8
    01FB7 9380 0121 STS	Uart0TxData,R24
(2129) 							Uart0TxData[1]=0x40;
    01FB9 E480      LDI	R24,0x40
    01FBA 9380 0122 STS	Uart0TxData+1,R24
(2130) 							Uart0TxData[2]=0x83;
    01FBC E883      LDI	R24,0x83
    01FBD 9380 0123 STS	Uart0TxData+2,R24
(2131) 							Uart0TxData[3]=2;//包2
    01FBF E082      LDI	R24,2
    01FC0 9380 0124 STS	Uart0TxData+3,R24
(2132) 							SendUart0_2(9,5);// 超时40ms	 
    01FC2 E025      LDI	R18,5
    01FC3 E030      LDI	R19,0
    01FC4 E009      LDI	R16,0x9
    01FC5 940E 03C1 CALL	_SendUart0_2
(2133) 							if(Uart0RxCounter==64) 
    01FC7 9180 02E3 LDS	R24,Uart0RxCounter
    01FC9 3480      CPI	R24,0x40
    01FCA F599      BNE	0x1FFE
(2134) 							{
(2135) 								for(i=0;i<32;i++)
    01FCB 24AA      CLR	R10
    01FCC C02E      RJMP	0x1FFB
(2136) 								{
(2137) 									T_dat=Uart0RxData[i*2+1];//高字节
    01FCD EE85      LDI	R24,0xE5
    01FCE E092      LDI	R25,2
    01FCF 2DEA      MOV	R30,R10
    01FD0 27FF      CLR	R31
    01FD1 0FEE      LSL	R30
    01FD2 1FFF      ROL	R31
    01FD3 0FE8      ADD	R30,R24
    01FD4 1FF9      ADC	R31,R25
    01FD5 8020      LD	R2,Z
    01FD6 2433      CLR	R3
    01FD7 9230 02D0 STS	T_dat+1,R3
    01FD9 9220 02CF STS	T_dat,R2
(2138) 									T_dat<<=8;
    01FDB 2C32      MOV	R3,R2
    01FDC 2422      CLR	R2
    01FDD 9230 02D0 STS	T_dat+1,R3
    01FDF 9220 02CF STS	T_dat,R2
(2139) 									T_dat|=Uart0RxData[i*2+0];//低字节
    01FE1 EE84      LDI	R24,0xE4
    01FE2 E092      LDI	R25,2
    01FE3 2DEA      MOV	R30,R10
    01FE4 27FF      CLR	R31
    01FE5 0FEE      LSL	R30
    01FE6 1FFF      ROL	R31
    01FE7 0FE8      ADD	R30,R24
    01FE8 1FF9      ADC	R31,R25
    01FE9 8020      LD	R2,Z
    01FEA 2433      CLR	R3
    01FEB 9040 02CF LDS	R4,T_dat
    01FED 9050 02D0 LDS	R5,T_dat+1
    01FEF 2842      OR	R4,R2
    01FF0 2853      OR	R5,R3
    01FF1 9250 02D0 STS	T_dat+1,R5
    01FF3 9240 02CF STS	T_dat,R4
(2140) 									SendManchester();
    01FF5 D14E      RCALL	_SendManchester
(2141) 									CheckMotor(20);
    01FF6 E104      LDI	R16,0x14
    01FF7 E010      LDI	R17,0
    01FF8 940E 07BE CALL	_CheckMotor
    01FFA 94A3      INC	R10
    01FFB 2D8A      MOV	R24,R10
    01FFC 3280      CPI	R24,0x20
    01FFD F278      BCS	0x1FCD
(2142) 								}
(2143) 							}	
(2144) 
(2145) 							Uart0TxData[0]=0xE8;
    01FFE EE88      LDI	R24,0xE8
    01FFF 9380 0121 STS	Uart0TxData,R24
(2146) 							Uart0TxData[1]=0x40;
    02001 E480      LDI	R24,0x40
    02002 9380 0122 STS	Uart0TxData+1,R24
(2147) 							Uart0TxData[2]=0x83;
    02004 E883      LDI	R24,0x83
    02005 9380 0123 STS	Uart0TxData+2,R24
(2148) 							Uart0TxData[3]=3;//包3
    02007 E083      LDI	R24,3
    02008 9380 0124 STS	Uart0TxData+3,R24
(2149) 							SendUart0_2(9,5);// 超时40ms	 
    0200A E025      LDI	R18,5
    0200B E030      LDI	R19,0
    0200C E009      LDI	R16,0x9
    0200D 940E 03C1 CALL	_SendUart0_2
(2150) 							if(Uart0RxCounter==64) 
    0200F 9180 02E3 LDS	R24,Uart0RxCounter
    02011 3480      CPI	R24,0x40
    02012 F599      BNE	0x2046
(2151) 							{
(2152) 								for(i=0;i<32;i++)
    02013 24AA      CLR	R10
    02014 C02E      RJMP	0x2043
(2153) 								{
(2154) 									T_dat=Uart0RxData[i*2+1];//高字节
    02015 EE85      LDI	R24,0xE5
    02016 E092      LDI	R25,2
    02017 2DEA      MOV	R30,R10
    02018 27FF      CLR	R31
    02019 0FEE      LSL	R30
    0201A 1FFF      ROL	R31
    0201B 0FE8      ADD	R30,R24
    0201C 1FF9      ADC	R31,R25
    0201D 8020      LD	R2,Z
    0201E 2433      CLR	R3
    0201F 9230 02D0 STS	T_dat+1,R3
    02021 9220 02CF STS	T_dat,R2
(2155) 									T_dat<<=8;
    02023 2C32      MOV	R3,R2
    02024 2422      CLR	R2
    02025 9230 02D0 STS	T_dat+1,R3
    02027 9220 02CF STS	T_dat,R2
(2156) 									T_dat|=Uart0RxData[i*2+0];//低字节
    02029 EE84      LDI	R24,0xE4
    0202A E092      LDI	R25,2
    0202B 2DEA      MOV	R30,R10
    0202C 27FF      CLR	R31
    0202D 0FEE      LSL	R30
    0202E 1FFF      ROL	R31
    0202F 0FE8      ADD	R30,R24
    02030 1FF9      ADC	R31,R25
    02031 8020      LD	R2,Z
    02032 2433      CLR	R3
    02033 9040 02CF LDS	R4,T_dat
    02035 9050 02D0 LDS	R5,T_dat+1
    02037 2842      OR	R4,R2
    02038 2853      OR	R5,R3
    02039 9250 02D0 STS	T_dat+1,R5
    0203B 9240 02CF STS	T_dat,R4
(2157) 									SendManchester();
    0203D D106      RCALL	_SendManchester
(2158) 									CheckMotor(20);
    0203E E104      LDI	R16,0x14
    0203F E010      LDI	R17,0
    02040 940E 07BE CALL	_CheckMotor
    02042 94A3      INC	R10
    02043 2D8A      MOV	R24,R10
    02044 3280      CPI	R24,0x20
    02045 F278      BCS	0x2015
(2159) 								}
(2160) 							}	
(2161) 
(2162) 							Uart0TxData[0]=0xE8;
    02046 EE88      LDI	R24,0xE8
    02047 9380 0121 STS	Uart0TxData,R24
(2163) 							Uart0TxData[1]=0x40;
    02049 E480      LDI	R24,0x40
    0204A 9380 0122 STS	Uart0TxData+1,R24
(2164) 							Uart0TxData[2]=0x83;
    0204C E883      LDI	R24,0x83
    0204D 9380 0123 STS	Uart0TxData+2,R24
(2165) 							Uart0TxData[3]=4;//包4
    0204F E084      LDI	R24,4
    02050 9380 0124 STS	Uart0TxData+3,R24
(2166) 							SendUart0_2(9,5);// 超时40ms	 
    02052 E025      LDI	R18,5
    02053 E030      LDI	R19,0
    02054 E009      LDI	R16,0x9
    02055 940E 03C1 CALL	_SendUart0_2
(2167) 							if(Uart0RxCounter==64) 
    02057 9180 02E3 LDS	R24,Uart0RxCounter
    02059 3480      CPI	R24,0x40
    0205A F009      BEQ	0x205C
    0205B C061      RJMP	0x20BD
(2168) 							{
(2169) 								for(i=0;i<32;i++)
    0205C 24AA      CLR	R10
    0205D C02E      RJMP	0x208C
(2170) 								{
(2171) 									T_dat=Uart0RxData[i*2+1];//高字节
    0205E EE85      LDI	R24,0xE5
    0205F E092      LDI	R25,2
    02060 2DEA      MOV	R30,R10
    02061 27FF      CLR	R31
    02062 0FEE      LSL	R30
    02063 1FFF      ROL	R31
    02064 0FE8      ADD	R30,R24
    02065 1FF9      ADC	R31,R25
    02066 8020      LD	R2,Z
    02067 2433      CLR	R3
    02068 9230 02D0 STS	T_dat+1,R3
    0206A 9220 02CF STS	T_dat,R2
(2172) 									T_dat<<=8;
    0206C 2C32      MOV	R3,R2
    0206D 2422      CLR	R2
    0206E 9230 02D0 STS	T_dat+1,R3
    02070 9220 02CF STS	T_dat,R2
(2173) 									T_dat|=Uart0RxData[i*2+0];//低字节
    02072 EE84      LDI	R24,0xE4
    02073 E092      LDI	R25,2
    02074 2DEA      MOV	R30,R10
    02075 27FF      CLR	R31
    02076 0FEE      LSL	R30
    02077 1FFF      ROL	R31
    02078 0FE8      ADD	R30,R24
    02079 1FF9      ADC	R31,R25
    0207A 8020      LD	R2,Z
    0207B 2433      CLR	R3
    0207C 9040 02CF LDS	R4,T_dat
    0207E 9050 02D0 LDS	R5,T_dat+1
    02080 2842      OR	R4,R2
    02081 2853      OR	R5,R3
    02082 9250 02D0 STS	T_dat+1,R5
    02084 9240 02CF STS	T_dat,R4
(2174) 									SendManchester();
    02086 D0BD      RCALL	_SendManchester
(2175) 									CheckMotor(20);
    02087 E104      LDI	R16,0x14
    02088 E010      LDI	R17,0
    02089 940E 07BE CALL	_CheckMotor
    0208B 94A3      INC	R10
    0208C 2D8A      MOV	R24,R10
    0208D 3280      CPI	R24,0x20
    0208E F278      BCS	0x205E
(2176) 								}
(2177) 							}	
(2178) 						}
    0208F C02D      RJMP	0x20BD
(2179) 						else  if(R_dat==0xca) //写仪器信息
    02090 9180 02CD LDS	R24,R_dat
    02092 9190 02CE LDS	R25,R_dat+1
    02094 3C8A      CPI	R24,0xCA
    02095 E0E0      LDI	R30,0
    02096 079E      CPC	R25,R30
    02097 F529      BNE	0x20BD
(2180) 						{
(2181) 							DataFlag=4;
    02098 E084      LDI	R24,4
    02099 E090      LDI	R25,0
    0209A 9390 02B4 STS	DataFlag+1,R25
    0209C 9380 02B3 STS	DataFlag,R24
(2182) 							coeff_len=320;
    0209E E480      LDI	R24,0x40
    0209F E091      LDI	R25,1
    020A0 9390 011F STS	coeff_len+1,R25
    020A2 9380 011E STS	coeff_len,R24
(2183) 							coeff_count=0;
    020A4 2422      CLR	R2
    020A5 2433      CLR	R3
    020A6 9230 011D STS	coeff_count+1,R3
    020A8 9220 011C STS	coeff_count,R2
(2184) 							TimeOutFlag=0;
    020AA 9220 02CB STS	TimeOutFlag,R2
(2185) 							Timer0Counter=2000;//16s定时
    020AC ED80      LDI	R24,0xD0
    020AD E097      LDI	R25,7
    020AE 9390 032F STS	Timer0Counter+1,R25
    020B0 9380 032E STS	Timer0Counter,R24
(2186) 							TCNT0=0x06; //8ms
    020B2 E086      LDI	R24,6
    020B3 BF82      OUT	0x32,R24
(2187) 							TCCR0|=0x06;//256分频
    020B4 B783      IN	R24,0x33
    020B5 6086      ORI	R24,6
    020B6 BF83      OUT	0x33,R24
(2188) 							TIFR|=0x01; //清定时器0中断标志
    020B7 B786      IN	R24,0x36
    020B8 6081      ORI	R24,1
    020B9 BF86      OUT	0x36,R24
(2189) 							TIMSK|=0x01;//使能定时器0中断		
    020BA B787      IN	R24,0x37
    020BB 6081      ORI	R24,1
    020BC BF87      OUT	0x37,R24
(2190) 						}
(2191) 						break;
(2192) 						
(2193) 					default: 
(2194) 						break;	
(2195) 				}
(2196) 			}
(2197) 			
(2198) 		RDataEnd:
(2199) 			IntFlag=0;
    020BD 2422      CLR	R2
    020BE 9220 02B1 STS	IntFlag,R2
(2200) 			EIFR|=0x01;//清INT0中断标志
    020C0 B788      IN	R24,0x38
    020C1 6081      ORI	R24,1
    020C2 BF88      OUT	0x38,R24
(2201) 			EIMSK|=0x01;//使能INT0中断 
    020C3 B789      IN	R24,0x39
    020C4 6081      ORI	R24,1
    020C5 BF89      OUT	0x39,R24
    020C6 940C 0B65 JMP	0xB65
    020C8 9629      ADIW	R28,0x9
    020C9 9508      RET
_E_comp:
    020CA 921A      ST	-Y,R1
    020CB 922A      ST	-Y,R2
    020CC 938A      ST	-Y,R24
    020CD 939A      ST	-Y,R25
    020CE B61F      IN	R1,0x3F
    020CF 921A      ST	-Y,R1
(2202) 		}  
(2203) 	}
(2204) }
(2205) 
(2206) #pragma interrupt_handler E_comp:24
(2207) void E_comp(void)  //模拟比较器中断,总线电压被拉低到28.5V后，立即停电机
(2208) {   
(2209)   if( (Motor1Run_P) || (Motor1Run_N) )//收放电机欠压堵转
    020D0 B389      IN	R24,0x19
    020D1 7082      ANDI	R24,2
    020D2 9586      LSR	R24
    020D3 F431      BNE	0x20DA
    020D4 B389      IN	R24,0x19
    020D5 7084      ANDI	R24,4
    020D6 9586      LSR	R24
    020D7 9586      LSR	R24
    020D8 3081      CPI	R24,1
    020D9 F051      BEQ	0x20E4
    020DA B389      IN	R24,0x19
    020DB 7082      ANDI	R24,2
    020DC 9586      LSR	R24
    020DD 3081      CPI	R24,1
    020DE F499      BNE	0x20F2
    020DF B389      IN	R24,0x19
    020E0 7084      ANDI	R24,4
    020E1 9586      LSR	R24
    020E2 9586      LSR	R24
    020E3 F471      BNE	0x20F2
(2210)    {
(2211)  	 Motor1Status.s.UnderVoltage=1;
    020E4 9180 033E LDS	R24,Motor1Status
    020E6 9190 033F LDS	R25,Motor1Status+1
    020E8 6280      ORI	R24,0x20
    020E9 9390 033F STS	Motor1Status+1,R25
    020EB 9380 033E STS	Motor1Status,R24
(2212) 	 Motor1Status.s.RUN=0;//停止状态
    020ED 7F8E      ANDI	R24,0xFE
    020EE 9390 033F STS	Motor1Status+1,R25
    020F0 9380 033E STS	Motor1Status,R24
(2213)    }
(2214)   if( (Motor2Run_P) || (Motor2Run_N) )//调节电机欠压堵转
    020F2 B180      IN	R24,0x00
    020F3 7084      ANDI	R24,4
    020F4 9586      LSR	R24
    020F5 9586      LSR	R24
    020F6 F421      BNE	0x20FB
    020F7 B180      IN	R24,0x00
    020F8 7081      ANDI	R24,1
    020F9 3081      CPI	R24,1
    020FA F041      BEQ	0x2103
    020FB B180      IN	R24,0x00
    020FC 7084      ANDI	R24,4
    020FD 9586      LSR	R24
    020FE 9586      LSR	R24
    020FF 3081      CPI	R24,1
    02100 F481      BNE	0x2111
    02101 9900      SBIC	0x00,0
    02102 C00E      RJMP	0x2111
(2215)    { 
(2216)  	 Motor2Status.s.UnderVoltage=1;
    02103 9180 033C LDS	R24,Motor2Status
    02105 9190 033D LDS	R25,Motor2Status+1
    02107 6280      ORI	R24,0x20
    02108 9390 033D STS	Motor2Status+1,R25
    0210A 9380 033C STS	Motor2Status,R24
(2217) 	 Motor2Status.s.RUN=0;//停止状态
    0210C 7F8E      ANDI	R24,0xFE
    0210D 9390 033D STS	Motor2Status+1,R25
    0210F 9380 033C STS	Motor2Status,R24
(2218)    } 
(2219)    MOTORSTOP  //关电机 
    02111 9AD0      SBI	0x1A,0
    02112 9AD8      SBI	0x1B,0
    02113 9180 0061 LDS	R24,0x61
    02115 6082      ORI	R24,2
    02116 9380 0061 STS	0x61,R24
    02118 9180 0062 LDS	R24,0x62
    0211A 6082      ORI	R24,2
    0211B 9380 0062 STS	0x62,R24
    0211D 9ABF      SBI	0x17,7
    0211E B388      IN	R24,0x18
    0211F 778F      ANDI	R24,0x7F
    02120 BB88      OUT	0x18,R24
    02121 9AD2      SBI	0x1A,2
    02122 B38B      IN	R24,0x1B
    02123 7F8B      ANDI	R24,0xFB
    02124 BB8B      OUT	0x1B,R24
    02125 9AD1      SBI	0x1A,1
    02126 B38B      IN	R24,0x1B
    02127 7F8D      ANDI	R24,0xFD
    02128 BB8B      OUT	0x1B,R24
    02129 9180 0061 LDS	R24,0x61
    0212B 6081      ORI	R24,1
    0212C 9380 0061 STS	0x61,R24
    0212E 9180 0062 LDS	R24,0x62
    02130 7F8E      ANDI	R24,0xFE
    02131 9380 0062 STS	0x62,R24
    02133 9180 0061 LDS	R24,0x61
    02135 6084      ORI	R24,4
    02136 9380 0061 STS	0x61,R24
    02138 9180 0062 LDS	R24,0x62
    0213A 7F8B      ANDI	R24,0xFB
    0213B 9380 0062 STS	0x62,R24
    0213D 9019      LD	R1,Y+
    0213E BE1F      OUT	0x3F,R1
    0213F 9199      LD	R25,Y+
    02140 9189      LD	R24,Y+
    02141 9029      LD	R2,Y+
    02142 9019      LD	R1,Y+
    02143 9518      RETI
_SendManchester:
  L                    --> R20
    02144 934A      ST	-Y,R20
(2220) }
(2221) 
(2222) /*
(2223) #pragma interrupt_handler int0_isr:2
(2224) void int0_isr(void)//外部中断0，过流堵转
(2225) {
(2226)   CompCounter++; 
(2227)   if(CompCounter>1000)
(2228)   {
(2229)    MOTORSTOP  //关电机
(2230)   
(2231)    if(Motor1Status.s.ThisRun>0)//收放电机过流堵转
(2232)     {
(2233) 	 Motor1Status.s.ThisRun=0;
(2234) 	 Motor1Status.s.CommandStop=0;
(2235)  	 Motor1Status.s.OverCurrent=1;
(2236)  	 Motor1Status.s.UnderVoltage=0;
(2237) 	}
(2238)    if(Motor2Status.s.ThisRun>0)//调节电机过流堵转
(2239)     {
(2240) 	  Motor2Status.s.ThisRun=0;
(2241) 	  Motor2Status.s.CommandStop=0;
(2242)  	  Motor2Status.s.OverCurrent=1;
(2243)  	  Motor2Status.s.UnderVoltage=0;
(2244) 	}
(2245)   }
(2246) }
(2247) */
(2248) 
(2249) 
(2250) /*
(2251) #pragma interrupt_handler ad_isr:22
(2252) void ad_isr(void)  //ad转换中断
(2253) {
(2254)   ADCData[ADCCn]=ADCH;
(2255)   ADCData[ADCCn]<<=8;
(2256)   ADCData[ADCCn]|=ADCL;//读AD转换结果
(2257)   ADCCn++;
(2258)   ADCData[ADCCn]&=0x03ff;//10位有效转换结果
(2259)   if(ADCCn==129)
(2260)    { 
(2261)    ADCSRA&=0xF7;//关AD中断
(2262)    ADCSRA|=0x10;//清AD中断标志
(2263)    ADCSRA=0;//关ADC
(2264)    }
(2265) }
(2266) */
(2267) 
(2268) 
(2269) 
(2270) void SendManchester(void) //曼码发送程序,总耗时最大约120+560+8400+720=9800us，最小约120+560+5040+720=6440us
(2271) { //每位80us
(2272)  //同步：1高6低
(2273)  //1:    1高2低
(2274)  //0：   1高4低  
(2275)   unsigned char L;
(2276)   SREG&=0x7f;//关总中断 
    02145 B78F      IN	R24,0x3F
    02146 778F      ANDI	R24,0x7F
    02147 BF8F      OUT	0x3F,R24
(2277)   
(2278)     M1_H //先给总线放电，耗时约120us
    02148 9A94      SBI	0x12,4
(2279) 	
(2280)   //模拟同步头数据
(2281) 	//4位命令
(2282) 	T_dat_buf[21]=(T_com&0x08)>>3;
    02149 9180 02CC LDS	R24,T_com
    0214B 7088      ANDI	R24,0x8
    0214C 9586      LSR	R24
    0214D 9586      LSR	R24
    0214E 9586      LSR	R24
    0214F 9380 02CA STS	T_dat_buf+21,R24
(2283) 	T_dat_buf[20]=(T_com&0x04)>>2;
    02151 9180 02CC LDS	R24,T_com
    02153 7084      ANDI	R24,4
    02154 9586      LSR	R24
    02155 9586      LSR	R24
    02156 9380 02C9 STS	T_dat_buf+20,R24
(2284) 	T_dat_buf[19]=(T_com&0x02)>>1;
    02158 9180 02CC LDS	R24,T_com
    0215A 7082      ANDI	R24,2
    0215B 9586      LSR	R24
    0215C 9380 02C8 STS	T_dat_buf+19,R24
(2285) 	T_dat_buf[18]=T_com&0x01;
    0215E 9180 02CC LDS	R24,T_com
    02160 7081      ANDI	R24,1
    02161 9380 02C7 STS	T_dat_buf+18,R24
(2286) 	//16位数据
(2287) 	T_dat_buf[17]=(T_dat&0x8000)>>15;
    02163 E02F      LDI	R18,0xF
    02164 E030      LDI	R19,0
    02165 9100 02CF LDS	R16,T_dat
    02167 9110 02D0 LDS	R17,T_dat+1
    02169 7000      ANDI	R16,0
    0216A 7810      ANDI	R17,0x80
    0216B 940E 265E CALL	lsr16
    0216D 9300 02C6 STS	T_dat_buf+17,R16
(2288) 	T_dat_buf[16]=(T_dat&0x4000)>>14;
    0216F E02E      LDI	R18,0xE
    02170 E030      LDI	R19,0
    02171 9100 02CF LDS	R16,T_dat
    02173 9110 02D0 LDS	R17,T_dat+1
    02175 7000      ANDI	R16,0
    02176 7410      ANDI	R17,0x40
    02177 940E 25AE CALL	asr16
    02179 9300 02C5 STS	T_dat_buf+16,R16
(2289) 	T_dat_buf[15]=(T_dat&0x2000)>>13;
    0217B E02D      LDI	R18,0xD
    0217C E030      LDI	R19,0
    0217D 9100 02CF LDS	R16,T_dat
    0217F 9110 02D0 LDS	R17,T_dat+1
    02181 7000      ANDI	R16,0
    02182 7210      ANDI	R17,0x20
    02183 940E 25AE CALL	asr16
    02185 9300 02C4 STS	T_dat_buf+15,R16
(2290) 	T_dat_buf[14]=(T_dat&0x1000)>>12;
    02187 E02C      LDI	R18,0xC
    02188 E030      LDI	R19,0
    02189 9100 02CF LDS	R16,T_dat
    0218B 9110 02D0 LDS	R17,T_dat+1
    0218D 7000      ANDI	R16,0
    0218E 7110      ANDI	R17,0x10
    0218F 940E 25AE CALL	asr16
    02191 9300 02C3 STS	T_dat_buf+14,R16
(2291) 	T_dat_buf[13]=(T_dat&0x0800)>>11;
    02193 E02B      LDI	R18,0xB
    02194 E030      LDI	R19,0
    02195 9100 02CF LDS	R16,T_dat
    02197 9110 02D0 LDS	R17,T_dat+1
    02199 7000      ANDI	R16,0
    0219A 7018      ANDI	R17,0x8
    0219B 940E 25AE CALL	asr16
    0219D 9300 02C2 STS	T_dat_buf+13,R16
(2292)     T_dat_buf[12]=(T_dat&0x0400)>>10;
    0219F E02A      LDI	R18,0xA
    021A0 E030      LDI	R19,0
    021A1 9100 02CF LDS	R16,T_dat
    021A3 9110 02D0 LDS	R17,T_dat+1
    021A5 7000      ANDI	R16,0
    021A6 7014      ANDI	R17,4
    021A7 940E 25AE CALL	asr16
    021A9 9300 02C1 STS	T_dat_buf+12,R16
(2293)     T_dat_buf[11]=(T_dat&0x0200)>>9;
    021AB E029      LDI	R18,0x9
    021AC E030      LDI	R19,0
    021AD 9100 02CF LDS	R16,T_dat
    021AF 9110 02D0 LDS	R17,T_dat+1
    021B1 7000      ANDI	R16,0
    021B2 7012      ANDI	R17,2
    021B3 940E 25AE CALL	asr16
    021B5 9300 02C0 STS	T_dat_buf+11,R16
(2294) 	T_dat_buf[10]=(T_dat&0x0100)>>8;
    021B7 9180 02CF LDS	R24,T_dat
    021B9 9190 02D0 LDS	R25,T_dat+1
    021BB 7080      ANDI	R24,0
    021BC 7091      ANDI	R25,1
    021BD 011C      MOVW	R2,R24
    021BE 2C23      MOV	R2,R3
    021BF 2433      CLR	R3
    021C0 FC27      SBRC	R2,7
    021C1 9430      COM	R3
    021C2 9220 02BF STS	T_dat_buf+10,R2
(2295) 	T_dat_buf[9]=(T_dat&0x0080)>>7;
    021C4 E027      LDI	R18,7
    021C5 E030      LDI	R19,0
    021C6 9100 02CF LDS	R16,T_dat
    021C8 9110 02D0 LDS	R17,T_dat+1
    021CA 7800      ANDI	R16,0x80
    021CB 7010      ANDI	R17,0
    021CC 940E 25AE CALL	asr16
    021CE 9300 02BE STS	T_dat_buf+9,R16
(2296) 	T_dat_buf[8]=(T_dat&0x0040)>>6;
    021D0 E026      LDI	R18,6
    021D1 E030      LDI	R19,0
    021D2 9100 02CF LDS	R16,T_dat
    021D4 9110 02D0 LDS	R17,T_dat+1
    021D6 7400      ANDI	R16,0x40
    021D7 7010      ANDI	R17,0
    021D8 940E 25AE CALL	asr16
    021DA 9300 02BD STS	T_dat_buf+8,R16
(2297) 	T_dat_buf[7]=(T_dat&0x0020)>>5;
    021DC E025      LDI	R18,5
    021DD E030      LDI	R19,0
    021DE 9100 02CF LDS	R16,T_dat
    021E0 9110 02D0 LDS	R17,T_dat+1
    021E2 7200      ANDI	R16,0x20
    021E3 7010      ANDI	R17,0
    021E4 940E 25AE CALL	asr16
    021E6 9300 02BC STS	T_dat_buf+7,R16
(2298) 	T_dat_buf[6]=(T_dat&0x0010)>>4;
    021E8 9180 02CF LDS	R24,T_dat
    021EA 9190 02D0 LDS	R25,T_dat+1
    021EC 7180      ANDI	R24,0x10
    021ED 7090      ANDI	R25,0
    021EE 011C      MOVW	R2,R24
    021EF 9435      ASR	R3
    021F0 9427      ROR	R2
    021F1 9435      ASR	R3
    021F2 9427      ROR	R2
    021F3 9435      ASR	R3
    021F4 9427      ROR	R2
    021F5 9435      ASR	R3
    021F6 9427      ROR	R2
    021F7 9220 02BB STS	T_dat_buf+6,R2
(2299) 	T_dat_buf[5]=(T_dat&0x0008)>>3;
    021F9 9180 02CF LDS	R24,T_dat
    021FB 9190 02D0 LDS	R25,T_dat+1
    021FD 7088      ANDI	R24,0x8
    021FE 7090      ANDI	R25,0
    021FF 011C      MOVW	R2,R24
    02200 9435      ASR	R3
    02201 9427      ROR	R2
    02202 9435      ASR	R3
    02203 9427      ROR	R2
    02204 9435      ASR	R3
    02205 9427      ROR	R2
    02206 9220 02BA STS	T_dat_buf+5,R2
(2300) 	T_dat_buf[4]=(T_dat&0x0004)>>2;
    02208 9180 02CF LDS	R24,T_dat
    0220A 9190 02D0 LDS	R25,T_dat+1
    0220C 7084      ANDI	R24,4
    0220D 7090      ANDI	R25,0
    0220E 011C      MOVW	R2,R24
    0220F 9435      ASR	R3
    02210 9427      ROR	R2
    02211 9435      ASR	R3
    02212 9427      ROR	R2
    02213 9220 02B9 STS	T_dat_buf+4,R2
(2301) 	T_dat_buf[3]=(T_dat&0x0002)>>1;
    02215 9180 02CF LDS	R24,T_dat
    02217 9190 02D0 LDS	R25,T_dat+1
    02219 7082      ANDI	R24,2
    0221A 7090      ANDI	R25,0
    0221B 011C      MOVW	R2,R24
    0221C 9435      ASR	R3
    0221D 9427      ROR	R2
    0221E 9220 02B8 STS	T_dat_buf+3,R2
(2302) 	T_dat_buf[2]=T_dat&0x0001;
    02220 9180 02CF LDS	R24,T_dat
    02222 9190 02D0 LDS	R25,T_dat+1
    02224 7081      ANDI	R24,1
    02225 7090      ANDI	R25,0
    02226 9380 02B7 STS	T_dat_buf+2,R24
(2303) 	//计算校验位，奇校验
(2304) 	T_dat_buf[1]=1;
    02228 E081      LDI	R24,1
    02229 9380 02B6 STS	T_dat_buf+1,R24
(2305)   	for(L=2;L<22;L++)
    0222B E042      LDI	R20,2
    0222C C00D      RJMP	0x223A
(2306) 		{T_dat_buf[1]^=T_dat_buf[L];}
    0222D EB85      LDI	R24,0xB5
    0222E E092      LDI	R25,2
    0222F 2FE4      MOV	R30,R20
    02230 27FF      CLR	R31
    02231 0FE8      ADD	R30,R24
    02232 1FF9      ADC	R31,R25
    02233 8020      LD	R2,Z
    02234 9030 02B6 LDS	R3,T_dat_buf+1
    02236 2432      EOR	R3,R2
    02237 9230 02B6 STS	T_dat_buf+1,R3
    02239 9543      INC	R20
    0223A 3146      CPI	R20,0x16
    0223B F388      BCS	0x222D
(2307)     DELAY80
    0223C 2422      CLR	R2
    0223D 2433      CLR	R3
    0223E 9230 02B0 STS	Tt+1,R3
    02240 9220 02AF STS	Tt,R2
    02242 C009      RJMP	0x224C
    02243 9180 02AF LDS	R24,Tt
    02245 9190 02B0 LDS	R25,Tt+1
    02247 9601      ADIW	R24,1
    02248 9390 02B0 STS	Tt+1,R25
    0224A 9380 02AF STS	Tt,R24
    0224C 9180 02AF LDS	R24,Tt
    0224E 9190 02B0 LDS	R25,Tt+1
    02250 3280      CPI	R24,0x20
    02251 E0E0      LDI	R30,0
    02252 079E      CPC	R25,R30
    02253 F378      BCS	0x2243
(2308)     M1_L
    02254 B382      IN	R24,0x12
    02255 7E8F      ANDI	R24,0xEF
    02256 BB82      OUT	0x12,R24
(2309) 	DELAY40
    02257 2422      CLR	R2
    02258 2433      CLR	R3
    02259 9230 02B0 STS	Tt+1,R3
    0225B 9220 02AF STS	Tt,R2
    0225D C009      RJMP	0x2267
    0225E 9180 02AF LDS	R24,Tt
    02260 9190 02B0 LDS	R25,Tt+1
    02262 9601      ADIW	R24,1
    02263 9390 02B0 STS	Tt+1,R25
    02265 9380 02AF STS	Tt,R24
    02267 9180 02AF LDS	R24,Tt
    02269 9190 02B0 LDS	R25,Tt+1
    0226B 3180      CPI	R24,0x10
    0226C E0E0      LDI	R30,0
    0226D 079E      CPC	R25,R30
    0226E F378      BCS	0x225E
(2310)    
(2311)    
(2312) 	//同步头,560us
(2313) 	//充电开始，高80us	 
(2314) 	M2_H 	
    0226F 9A95      SBI	0x12,5
(2315) 	DELAY80
    02270 2422      CLR	R2
    02271 2433      CLR	R3
    02272 9230 02B0 STS	Tt+1,R3
    02274 9220 02AF STS	Tt,R2
    02276 C009      RJMP	0x2280
    02277 9180 02AF LDS	R24,Tt
    02279 9190 02B0 LDS	R25,Tt+1
    0227B 9601      ADIW	R24,1
    0227C 9390 02B0 STS	Tt+1,R25
    0227E 9380 02AF STS	Tt,R24
    02280 9180 02AF LDS	R24,Tt
    02282 9190 02B0 LDS	R25,Tt+1
    02284 3280      CPI	R24,0x20
    02285 E0E0      LDI	R30,0
    02286 079E      CPC	R25,R30
    02287 F378      BCS	0x2277
(2316) 	M2_L   //充电结束	
    02288 B382      IN	R24,0x12
    02289 7D8F      ANDI	R24,0xDF
    0228A BB82      OUT	0x12,R24
(2317) 	//放电开始，低80*6=480us
(2318) 	DELAY40
    0228B 2422      CLR	R2
    0228C 2433      CLR	R3
    0228D 9230 02B0 STS	Tt+1,R3
    0228F 9220 02AF STS	Tt,R2
    02291 C009      RJMP	0x229B
    02292 9180 02AF LDS	R24,Tt
    02294 9190 02B0 LDS	R25,Tt+1
    02296 9601      ADIW	R24,1
    02297 9390 02B0 STS	Tt+1,R25
    02299 9380 02AF STS	Tt,R24
    0229B 9180 02AF LDS	R24,Tt
    0229D 9190 02B0 LDS	R25,Tt+1
    0229F 3180      CPI	R24,0x10
    022A0 E0E0      LDI	R30,0
    022A1 079E      CPC	R25,R30
    022A2 F378      BCS	0x2292
(2319) 	M1_H    
    022A3 9A94      SBI	0x12,4
(2320)     DELAY80
    022A4 2422      CLR	R2
    022A5 2433      CLR	R3
    022A6 9230 02B0 STS	Tt+1,R3
    022A8 9220 02AF STS	Tt,R2
    022AA C009      RJMP	0x22B4
    022AB 9180 02AF LDS	R24,Tt
    022AD 9190 02B0 LDS	R25,Tt+1
    022AF 9601      ADIW	R24,1
    022B0 9390 02B0 STS	Tt+1,R25
    022B2 9380 02AF STS	Tt,R24
    022B4 9180 02AF LDS	R24,Tt
    022B6 9190 02B0 LDS	R25,Tt+1
    022B8 3280      CPI	R24,0x20
    022B9 E0E0      LDI	R30,0
    022BA 079E      CPC	R25,R30
    022BB F378      BCS	0x22AB
(2321) 	DELAY80
    022BC 2422      CLR	R2
    022BD 2433      CLR	R3
    022BE 9230 02B0 STS	Tt+1,R3
    022C0 9220 02AF STS	Tt,R2
    022C2 C009      RJMP	0x22CC
    022C3 9180 02AF LDS	R24,Tt
    022C5 9190 02B0 LDS	R25,Tt+1
    022C7 9601      ADIW	R24,1
    022C8 9390 02B0 STS	Tt+1,R25
    022CA 9380 02AF STS	Tt,R24
    022CC 9180 02AF LDS	R24,Tt
    022CE 9190 02B0 LDS	R25,Tt+1
    022D0 3280      CPI	R24,0x20
    022D1 E0E0      LDI	R30,0
    022D2 079E      CPC	R25,R30
    022D3 F378      BCS	0x22C3
(2322) 	DELAY80
    022D4 2422      CLR	R2
    022D5 2433      CLR	R3
    022D6 9230 02B0 STS	Tt+1,R3
    022D8 9220 02AF STS	Tt,R2
    022DA C009      RJMP	0x22E4
    022DB 9180 02AF LDS	R24,Tt
    022DD 9190 02B0 LDS	R25,Tt+1
    022DF 9601      ADIW	R24,1
    022E0 9390 02B0 STS	Tt+1,R25
    022E2 9380 02AF STS	Tt,R24
    022E4 9180 02AF LDS	R24,Tt
    022E6 9190 02B0 LDS	R25,Tt+1
    022E8 3280      CPI	R24,0x20
    022E9 E0E0      LDI	R30,0
    022EA 079E      CPC	R25,R30
    022EB F378      BCS	0x22DB
(2323) 	DELAY80
    022EC 2422      CLR	R2
    022ED 2433      CLR	R3
    022EE 9230 02B0 STS	Tt+1,R3
    022F0 9220 02AF STS	Tt,R2
    022F2 C009      RJMP	0x22FC
    022F3 9180 02AF LDS	R24,Tt
    022F5 9190 02B0 LDS	R25,Tt+1
    022F7 9601      ADIW	R24,1
    022F8 9390 02B0 STS	Tt+1,R25
    022FA 9380 02AF STS	Tt,R24
    022FC 9180 02AF LDS	R24,Tt
    022FE 9190 02B0 LDS	R25,Tt+1
    02300 3280      CPI	R24,0x20
    02301 E0E0      LDI	R30,0
    02302 079E      CPC	R25,R30
    02303 F378      BCS	0x22F3
(2324) 	DELAY80
    02304 2422      CLR	R2
    02305 2433      CLR	R3
    02306 9230 02B0 STS	Tt+1,R3
    02308 9220 02AF STS	Tt,R2
    0230A C009      RJMP	0x2314
    0230B 9180 02AF LDS	R24,Tt
    0230D 9190 02B0 LDS	R25,Tt+1
    0230F 9601      ADIW	R24,1
    02310 9390 02B0 STS	Tt+1,R25
    02312 9380 02AF STS	Tt,R24
    02314 9180 02AF LDS	R24,Tt
    02316 9190 02B0 LDS	R25,Tt+1
    02318 3280      CPI	R24,0x20
    02319 E0E0      LDI	R30,0
    0231A 079E      CPC	R25,R30
    0231B F378      BCS	0x230B
(2325) 	M1_L    
    0231C B382      IN	R24,0x12
    0231D 7E8F      ANDI	R24,0xEF
    0231E BB82      OUT	0x12,R24
(2326) 	DELAY40  //放电结束
    0231F 2422      CLR	R2
    02320 2433      CLR	R3
    02321 9230 02B0 STS	Tt+1,R3
    02323 9220 02AF STS	Tt,R2
    02325 C009      RJMP	0x232F
    02326 9180 02AF LDS	R24,Tt
    02328 9190 02B0 LDS	R25,Tt+1
    0232A 9601      ADIW	R24,1
    0232B 9390 02B0 STS	Tt+1,R25
    0232D 9380 02AF STS	Tt,R24
    0232F 9180 02AF LDS	R24,Tt
    02331 9190 02B0 LDS	R25,Tt+1
    02333 3180      CPI	R24,0x10
    02334 E0E0      LDI	R30,0
    02335 079E      CPC	R25,R30
    02336 F378      BCS	0x2326
(2327) 	
(2328)      //连续发送 ,全0时每位400us，共8400us，全1时每位240us，共5040us
(2329)  	for(L=21;L>0;L--)
    02337 E145      LDI	R20,0x15
    02338 C10C      RJMP	0x2445
(2330) 	{   
(2331) 	  if(T_dat_buf[L])//1，一高二低
    02339 EB85      LDI	R24,0xB5
    0233A E092      LDI	R25,2
    0233B 2FE4      MOV	R30,R20
    0233C 27FF      CLR	R31
    0233D 0FE8      ADD	R30,R24
    0233E 1FF9      ADC	R31,R25
    0233F 8020      LD	R2,Z
    02340 2022      TST	R2
    02341 F409      BNE	0x2343
    02342 C069      RJMP	0x23AC
(2332)         {         	 		
(2333) 	        M2_H 
    02343 9A95      SBI	0x12,5
(2334) 	        DELAY80
    02344 2422      CLR	R2
    02345 2433      CLR	R3
    02346 9230 02B0 STS	Tt+1,R3
    02348 9220 02AF STS	Tt,R2
    0234A C009      RJMP	0x2354
    0234B 9180 02AF LDS	R24,Tt
    0234D 9190 02B0 LDS	R25,Tt+1
    0234F 9601      ADIW	R24,1
    02350 9390 02B0 STS	Tt+1,R25
    02352 9380 02AF STS	Tt,R24
    02354 9180 02AF LDS	R24,Tt
    02356 9190 02B0 LDS	R25,Tt+1
    02358 3280      CPI	R24,0x20
    02359 E0E0      LDI	R30,0
    0235A 079E      CPC	R25,R30
    0235B F378      BCS	0x234B
(2335) 	        M2_L
    0235C B382      IN	R24,0x12
    0235D 7D8F      ANDI	R24,0xDF
    0235E BB82      OUT	0x12,R24
(2336) 			DELAY40
    0235F 2422      CLR	R2
    02360 2433      CLR	R3
    02361 9230 02B0 STS	Tt+1,R3
    02363 9220 02AF STS	Tt,R2
    02365 C009      RJMP	0x236F
    02366 9180 02AF LDS	R24,Tt
    02368 9190 02B0 LDS	R25,Tt+1
    0236A 9601      ADIW	R24,1
    0236B 9390 02B0 STS	Tt+1,R25
    0236D 9380 02AF STS	Tt,R24
    0236F 9180 02AF LDS	R24,Tt
    02371 9190 02B0 LDS	R25,Tt+1
    02373 3180      CPI	R24,0x10
    02374 E0E0      LDI	R30,0
    02375 079E      CPC	R25,R30
    02376 F378      BCS	0x2366
(2337) 	        M1_H       
    02377 9A94      SBI	0x12,4
(2338)          	DELAY80
    02378 2422      CLR	R2
    02379 2433      CLR	R3
    0237A 9230 02B0 STS	Tt+1,R3
    0237C 9220 02AF STS	Tt,R2
    0237E C009      RJMP	0x2388
    0237F 9180 02AF LDS	R24,Tt
    02381 9190 02B0 LDS	R25,Tt+1
    02383 9601      ADIW	R24,1
    02384 9390 02B0 STS	Tt+1,R25
    02386 9380 02AF STS	Tt,R24
    02388 9180 02AF LDS	R24,Tt
    0238A 9190 02B0 LDS	R25,Tt+1
    0238C 3280      CPI	R24,0x20
    0238D E0E0      LDI	R30,0
    0238E 079E      CPC	R25,R30
    0238F F378      BCS	0x237F
(2339) 			M1_L
    02390 B382      IN	R24,0x12
    02391 7E8F      ANDI	R24,0xEF
    02392 BB82      OUT	0x12,R24
(2340) 			DELAY40
    02393 2422      CLR	R2
    02394 2433      CLR	R3
    02395 9230 02B0 STS	Tt+1,R3
    02397 9220 02AF STS	Tt,R2
    02399 C009      RJMP	0x23A3
    0239A 9180 02AF LDS	R24,Tt
    0239C 9190 02B0 LDS	R25,Tt+1
    0239E 9601      ADIW	R24,1
    0239F 9390 02B0 STS	Tt+1,R25
    023A1 9380 02AF STS	Tt,R24
    023A3 9180 02AF LDS	R24,Tt
    023A5 9190 02B0 LDS	R25,Tt+1
    023A7 3180      CPI	R24,0x10
    023A8 E0E0      LDI	R30,0
    023A9 079E      CPC	R25,R30
    023AA F378      BCS	0x239A
(2341) 		} 
    023AB C098      RJMP	0x2444
(2342)        else 		//0，一高四低 				                
(2343)         {
(2344) 		 	M2_H 
    023AC 9A95      SBI	0x12,5
(2345) 	        DELAY80
    023AD 2422      CLR	R2
    023AE 2433      CLR	R3
    023AF 9230 02B0 STS	Tt+1,R3
    023B1 9220 02AF STS	Tt,R2
    023B3 C009      RJMP	0x23BD
    023B4 9180 02AF LDS	R24,Tt
    023B6 9190 02B0 LDS	R25,Tt+1
    023B8 9601      ADIW	R24,1
    023B9 9390 02B0 STS	Tt+1,R25
    023BB 9380 02AF STS	Tt,R24
    023BD 9180 02AF LDS	R24,Tt
    023BF 9190 02B0 LDS	R25,Tt+1
    023C1 3280      CPI	R24,0x20
    023C2 E0E0      LDI	R30,0
    023C3 079E      CPC	R25,R30
    023C4 F378      BCS	0x23B4
(2346) 	        M2_L
    023C5 B382      IN	R24,0x12
    023C6 7D8F      ANDI	R24,0xDF
    023C7 BB82      OUT	0x12,R24
(2347) 			DELAY40
    023C8 2422      CLR	R2
    023C9 2433      CLR	R3
    023CA 9230 02B0 STS	Tt+1,R3
    023CC 9220 02AF STS	Tt,R2
    023CE C009      RJMP	0x23D8
    023CF 9180 02AF LDS	R24,Tt
    023D1 9190 02B0 LDS	R25,Tt+1
    023D3 9601      ADIW	R24,1
    023D4 9390 02B0 STS	Tt+1,R25
    023D6 9380 02AF STS	Tt,R24
    023D8 9180 02AF LDS	R24,Tt
    023DA 9190 02B0 LDS	R25,Tt+1
    023DC 3180      CPI	R24,0x10
    023DD E0E0      LDI	R30,0
    023DE 079E      CPC	R25,R30
    023DF F378      BCS	0x23CF
(2348) 	        M1_H       
    023E0 9A94      SBI	0x12,4
(2349)          	DELAY80
    023E1 2422      CLR	R2
    023E2 2433      CLR	R3
    023E3 9230 02B0 STS	Tt+1,R3
    023E5 9220 02AF STS	Tt,R2
    023E7 C009      RJMP	0x23F1
    023E8 9180 02AF LDS	R24,Tt
    023EA 9190 02B0 LDS	R25,Tt+1
    023EC 9601      ADIW	R24,1
    023ED 9390 02B0 STS	Tt+1,R25
    023EF 9380 02AF STS	Tt,R24
    023F1 9180 02AF LDS	R24,Tt
    023F3 9190 02B0 LDS	R25,Tt+1
    023F5 3280      CPI	R24,0x20
    023F6 E0E0      LDI	R30,0
    023F7 079E      CPC	R25,R30
    023F8 F378      BCS	0x23E8
(2350) 			DELAY80
    023F9 2422      CLR	R2
    023FA 2433      CLR	R3
    023FB 9230 02B0 STS	Tt+1,R3
    023FD 9220 02AF STS	Tt,R2
    023FF C009      RJMP	0x2409
    02400 9180 02AF LDS	R24,Tt
    02402 9190 02B0 LDS	R25,Tt+1
    02404 9601      ADIW	R24,1
    02405 9390 02B0 STS	Tt+1,R25
    02407 9380 02AF STS	Tt,R24
    02409 9180 02AF LDS	R24,Tt
    0240B 9190 02B0 LDS	R25,Tt+1
    0240D 3280      CPI	R24,0x20
    0240E E0E0      LDI	R30,0
    0240F 079E      CPC	R25,R30
    02410 F378      BCS	0x2400
(2351) 			DELAY80
    02411 2422      CLR	R2
    02412 2433      CLR	R3
    02413 9230 02B0 STS	Tt+1,R3
    02415 9220 02AF STS	Tt,R2
    02417 C009      RJMP	0x2421
    02418 9180 02AF LDS	R24,Tt
    0241A 9190 02B0 LDS	R25,Tt+1
    0241C 9601      ADIW	R24,1
    0241D 9390 02B0 STS	Tt+1,R25
    0241F 9380 02AF STS	Tt,R24
    02421 9180 02AF LDS	R24,Tt
    02423 9190 02B0 LDS	R25,Tt+1
    02425 3280      CPI	R24,0x20
    02426 E0E0      LDI	R30,0
    02427 079E      CPC	R25,R30
    02428 F378      BCS	0x2418
(2352) 			M1_L
    02429 B382      IN	R24,0x12
    0242A 7E8F      ANDI	R24,0xEF
    0242B BB82      OUT	0x12,R24
(2353) 			DELAY40
    0242C 2422      CLR	R2
    0242D 2433      CLR	R3
    0242E 9230 02B0 STS	Tt+1,R3
    02430 9220 02AF STS	Tt,R2
    02432 C009      RJMP	0x243C
    02433 9180 02AF LDS	R24,Tt
    02435 9190 02B0 LDS	R25,Tt+1
    02437 9601      ADIW	R24,1
    02438 9390 02B0 STS	Tt+1,R25
    0243A 9380 02AF STS	Tt,R24
    0243C 9180 02AF LDS	R24,Tt
    0243E 9190 02B0 LDS	R25,Tt+1
    02440 3180      CPI	R24,0x10
    02441 E0E0      LDI	R30,0
    02442 079E      CPC	R25,R30
    02443 F378      BCS	0x2433
    02444 954A      DEC	R20
    02445 E080      LDI	R24,0
    02446 1784      CP	R24,R20
    02447 F408      BCC	0x2449
    02448 CEF0      RJMP	0x2339
(2354) 		}
(2355)     }	       	   
(2356) 		   //结束位，一高八低，720us
(2357)  	 	    M2_H 
    02449 9A95      SBI	0x12,5
(2358) 		    DELAY80
    0244A 2422      CLR	R2
    0244B 2433      CLR	R3
    0244C 9230 02B0 STS	Tt+1,R3
    0244E 9220 02AF STS	Tt,R2
    02450 C009      RJMP	0x245A
    02451 9180 02AF LDS	R24,Tt
    02453 9190 02B0 LDS	R25,Tt+1
    02455 9601      ADIW	R24,1
    02456 9390 02B0 STS	Tt+1,R25
    02458 9380 02AF STS	Tt,R24
    0245A 9180 02AF LDS	R24,Tt
    0245C 9190 02B0 LDS	R25,Tt+1
    0245E 3280      CPI	R24,0x20
    0245F E0E0      LDI	R30,0
    02460 079E      CPC	R25,R30
    02461 F378      BCS	0x2451
(2359) 	        M2_L
    02462 B382      IN	R24,0x12
    02463 7D8F      ANDI	R24,0xDF
    02464 BB82      OUT	0x12,R24
(2360) 			DELAY40
    02465 2422      CLR	R2
    02466 2433      CLR	R3
    02467 9230 02B0 STS	Tt+1,R3
    02469 9220 02AF STS	Tt,R2
    0246B C009      RJMP	0x2475
    0246C 9180 02AF LDS	R24,Tt
    0246E 9190 02B0 LDS	R25,Tt+1
    02470 9601      ADIW	R24,1
    02471 9390 02B0 STS	Tt+1,R25
    02473 9380 02AF STS	Tt,R24
    02475 9180 02AF LDS	R24,Tt
    02477 9190 02B0 LDS	R25,Tt+1
    02479 3180      CPI	R24,0x10
    0247A E0E0      LDI	R30,0
    0247B 079E      CPC	R25,R30
    0247C F378      BCS	0x246C
(2361) 	        M1_H       
    0247D 9A94      SBI	0x12,4
(2362)          	DELAY80
    0247E 2422      CLR	R2
    0247F 2433      CLR	R3
    02480 9230 02B0 STS	Tt+1,R3
    02482 9220 02AF STS	Tt,R2
    02484 C009      RJMP	0x248E
    02485 9180 02AF LDS	R24,Tt
    02487 9190 02B0 LDS	R25,Tt+1
    02489 9601      ADIW	R24,1
    0248A 9390 02B0 STS	Tt+1,R25
    0248C 9380 02AF STS	Tt,R24
    0248E 9180 02AF LDS	R24,Tt
    02490 9190 02B0 LDS	R25,Tt+1
    02492 3280      CPI	R24,0x20
    02493 E0E0      LDI	R30,0
    02494 079E      CPC	R25,R30
    02495 F378      BCS	0x2485
(2363) 			DELAY80
    02496 2422      CLR	R2
    02497 2433      CLR	R3
    02498 9230 02B0 STS	Tt+1,R3
    0249A 9220 02AF STS	Tt,R2
    0249C C009      RJMP	0x24A6
    0249D 9180 02AF LDS	R24,Tt
    0249F 9190 02B0 LDS	R25,Tt+1
    024A1 9601      ADIW	R24,1
    024A2 9390 02B0 STS	Tt+1,R25
    024A4 9380 02AF STS	Tt,R24
    024A6 9180 02AF LDS	R24,Tt
    024A8 9190 02B0 LDS	R25,Tt+1
    024AA 3280      CPI	R24,0x20
    024AB E0E0      LDI	R30,0
    024AC 079E      CPC	R25,R30
    024AD F378      BCS	0x249D
(2364) 			DELAY80
    024AE 2422      CLR	R2
    024AF 2433      CLR	R3
    024B0 9230 02B0 STS	Tt+1,R3
    024B2 9220 02AF STS	Tt,R2
    024B4 C009      RJMP	0x24BE
    024B5 9180 02AF LDS	R24,Tt
    024B7 9190 02B0 LDS	R25,Tt+1
    024B9 9601      ADIW	R24,1
    024BA 9390 02B0 STS	Tt+1,R25
    024BC 9380 02AF STS	Tt,R24
    024BE 9180 02AF LDS	R24,Tt
    024C0 9190 02B0 LDS	R25,Tt+1
    024C2 3280      CPI	R24,0x20
    024C3 E0E0      LDI	R30,0
    024C4 079E      CPC	R25,R30
    024C5 F378      BCS	0x24B5
(2365) 			DELAY80
    024C6 2422      CLR	R2
    024C7 2433      CLR	R3
    024C8 9230 02B0 STS	Tt+1,R3
    024CA 9220 02AF STS	Tt,R2
    024CC C009      RJMP	0x24D6
    024CD 9180 02AF LDS	R24,Tt
    024CF 9190 02B0 LDS	R25,Tt+1
    024D1 9601      ADIW	R24,1
    024D2 9390 02B0 STS	Tt+1,R25
    024D4 9380 02AF STS	Tt,R24
    024D6 9180 02AF LDS	R24,Tt
    024D8 9190 02B0 LDS	R25,Tt+1
    024DA 3280      CPI	R24,0x20
    024DB E0E0      LDI	R30,0
    024DC 079E      CPC	R25,R30
    024DD F378      BCS	0x24CD
(2366) 			DELAY80
    024DE 2422      CLR	R2
    024DF 2433      CLR	R3
    024E0 9230 02B0 STS	Tt+1,R3
    024E2 9220 02AF STS	Tt,R2
    024E4 C009      RJMP	0x24EE
    024E5 9180 02AF LDS	R24,Tt
    024E7 9190 02B0 LDS	R25,Tt+1
    024E9 9601      ADIW	R24,1
    024EA 9390 02B0 STS	Tt+1,R25
    024EC 9380 02AF STS	Tt,R24
    024EE 9180 02AF LDS	R24,Tt
    024F0 9190 02B0 LDS	R25,Tt+1
    024F2 3280      CPI	R24,0x20
    024F3 E0E0      LDI	R30,0
    024F4 079E      CPC	R25,R30
    024F5 F378      BCS	0x24E5
(2367) 			DELAY80
    024F6 2422      CLR	R2
    024F7 2433      CLR	R3
    024F8 9230 02B0 STS	Tt+1,R3
    024FA 9220 02AF STS	Tt,R2
    024FC C009      RJMP	0x2506
    024FD 9180 02AF LDS	R24,Tt
    024FF 9190 02B0 LDS	R25,Tt+1
    02501 9601      ADIW	R24,1
    02502 9390 02B0 STS	Tt+1,R25
    02504 9380 02AF STS	Tt,R24
    02506 9180 02AF LDS	R24,Tt
    02508 9190 02B0 LDS	R25,Tt+1
    0250A 3280      CPI	R24,0x20
    0250B E0E0      LDI	R30,0
    0250C 079E      CPC	R25,R30
    0250D F378      BCS	0x24FD
(2368) 			DELAY80
    0250E 2422      CLR	R2
    0250F 2433      CLR	R3
    02510 9230 02B0 STS	Tt+1,R3
    02512 9220 02AF STS	Tt,R2
    02514 C009      RJMP	0x251E
    02515 9180 02AF LDS	R24,Tt
    02517 9190 02B0 LDS	R25,Tt+1
    02519 9601      ADIW	R24,1
    0251A 9390 02B0 STS	Tt+1,R25
    0251C 9380 02AF STS	Tt,R24
    0251E 9180 02AF LDS	R24,Tt
    02520 9190 02B0 LDS	R25,Tt+1
    02522 3280      CPI	R24,0x20
    02523 E0E0      LDI	R30,0
    02524 079E      CPC	R25,R30
    02525 F378      BCS	0x2515
(2369) 			M1_L
    02526 B382      IN	R24,0x12
    02527 7E8F      ANDI	R24,0xEF
    02528 BB82      OUT	0x12,R24
(2370) 			DELAY40
    02529 2422      CLR	R2
    0252A 2433      CLR	R3
    0252B 9230 02B0 STS	Tt+1,R3
    0252D 9220 02AF STS	Tt,R2
    0252F C009      RJMP	0x2539
    02530 9180 02AF LDS	R24,Tt
    02532 9190 02B0 LDS	R25,Tt+1
    02534 9601      ADIW	R24,1
    02535 9390 02B0 STS	Tt+1,R25
    02537 9380 02AF STS	Tt,R24
    02539 9180 02AF LDS	R24,Tt
    0253B 9190 02B0 LDS	R25,Tt+1
    0253D 3180      CPI	R24,0x10
    0253E E0E0      LDI	R30,0
    0253F 079E      CPC	R25,R30
    02540 F378      BCS	0x2530
(2371) 	
(2372)  	EIFR|=0x08;//清INT3中断标志 
    02541 B788      IN	R24,0x38
    02542 6088      ORI	R24,0x8
    02543 BF88      OUT	0x38,R24
(2373)  	SREG|=0x80; //开总中断
    02544 9478      BSET	7
    02545 9149      LD	R20,Y+
    02546 9508      RET
(2374) }
(2375) 
(2376) 
(2377) 
(2378) void EEPROM_write(unsigned int Address,unsigned char Data)  	//内部EEPROM写
(2379) {//时钟频率为1MHz，典型的EEPROM字节写耗时约8.5ms
(2380)     while(EECR&0x02);                   // 等待上一次写操作结束
_EEPROM_write:
  Data                 --> R18
  Address              --> R16
    02547 99E1      SBIC	0x1C,1
    02548 CFFE      RJMP	_EEPROM_write
(2381)     EEAR=Address;
    02549 BB1F      OUT	0x1F,R17
    0254A BB0E      OUT	0x1E,R16
(2382)     EEDR=Data;                        	// 设置地址和数据寄存器
    0254B BB2D      OUT	0x1D,R18
(2383)     EECR|=0x04;                         //置位EEMWE
    0254C 9AE2      SBI	0x1C,2
(2384)     EECR|=0x02;                         //置位EEWE 以启动写操作
    0254D 9AE1      SBI	0x1C,1
    0254E 9508      RET
(2385) }
(2386) 
(2387) unsigned char EEPROM_read(unsigned int Address)  				//内部EEPROM读
(2388) {
(2389)     while(EECR&0x02);      				//等待上一次操作结束
_EEPROM_read:
  Address              --> R16
    0254F 99E1      SBIC	0x1C,1
    02550 CFFE      RJMP	_EEPROM_read
(2390)     EEAR = Address;                     //设置地址寄存器						
    02551 BB1F      OUT	0x1F,R17
    02552 BB0E      OUT	0x1E,R16
(2391) 	EECR|=0x01;             			//设置EERE 以启动读操作
    02553 9AE0      SBI	0x1C,0
(2392)     return EEDR;                   		//自数据寄存器返回数据
    02554 B30D      IN	R16,0x1D
    02555 9508      RET
_crc16:
  ii                   --> R20
  ch                   --> R10
  cl                   --> R22
  savelo               --> R14
  savehi               --> Y,+0
  flag                 --> R12
  length               --> R18
  r_data               --> Y,+11
    02556 940E 25A9 CALL	push_arg4
    02558 940E 261E CALL	push_xgsetF0FC
    0255A 9721      SBIW	R28,1
(2393) }    
(2394) 
(2395) void crc16(unsigned char r_data[],unsigned int length)
(2396) {
(2397)         unsigned char cl,ch;
(2398)         unsigned char savehi,savelo;
(2399)         int ii,flag;
(2400)         crc16hi=0xFF;
    0255B EF8F      LDI	R24,0xFF
    0255C 9380 0113 STS	crc16hi,R24
(2401)         crc16lo=0xFF;
    0255E 9380 0112 STS	crc16lo,R24
(2402)         cl=0x1;
    02560 E061      LDI	R22,1
(2403)         ch=0xA0;
    02561 EA80      LDI	R24,0xA0
    02562 2EA8      MOV	R10,R24
(2404)         for (ii=0;ii<length-2;ii++)
    02563 2744      CLR	R20
    02564 2755      CLR	R21
    02565 C038      RJMP	0x259E
(2405)         {
(2406)             crc16lo=(crc16lo ^ r_data[ii]);
    02566 01FA      MOVW	R30,R20
    02567 840B      LDD	R0,Y+11
    02568 841C      LDD	R1,Y+12
    02569 0DE0      ADD	R30,R0
    0256A 1DF1      ADC	R31,R1
    0256B 8020      LD	R2,Z
    0256C 9030 0112 LDS	R3,crc16lo
    0256E 2432      EOR	R3,R2
    0256F 9230 0112 STS	crc16lo,R3
(2407)                 for (flag=0;flag<8;flag++)
    02571 24CC      CLR	R12
    02572 24DD      CLR	R13
(2408)                 {
(2409)                        savehi=crc16hi;
    02573 9020 0113 LDS	R2,crc16hi
    02575 8228      ST	Y,R2
(2410)                         savelo=crc16lo;
    02576 90E0 0112 LDS	R14,crc16lo
(2411)                        crc16hi=(crc16hi>>1);
    02578 9426      LSR	R2
    02579 9220 0113 STS	crc16hi,R2
(2412)                        crc16lo=(crc16lo>>1);
    0257B 2C2E      MOV	R2,R14
    0257C 9426      LSR	R2
    0257D 9220 0112 STS	crc16lo,R2
(2413)                         if ((savehi & 0x01)==0x01)
    0257F 8188      LD	R24,Y
    02580 7081      ANDI	R24,1
    02581 3081      CPI	R24,1
    02582 F421      BNE	0x2587
(2414)                                 crc16lo=(crc16lo | 0x80);
    02583 2D82      MOV	R24,R2
    02584 6880      ORI	R24,0x80
    02585 9380 0112 STS	crc16lo,R24
(2415)                         if        ((savelo & 0x01)==0x01)
    02587 2D8E      MOV	R24,R14
    02588 7081      ANDI	R24,1
    02589 3081      CPI	R24,1
    0258A F451      BNE	0x2595
(2416)                         {
(2417)                                 crc16hi = (crc16hi ^ ch);
    0258B 9020 0113 LDS	R2,crc16hi
    0258D 242A      EOR	R2,R10
    0258E 9220 0113 STS	crc16hi,R2
(2418) 								crc16lo = (crc16lo ^ cl);
FILE: <library>
    02590 9020 0112 LDS	R2,crc16lo
    02592 2626      EOR	R2,R22
    02593 9220 0112 STS	crc16lo,R2
    02595 01C6      MOVW	R24,R12
    02596 9601      ADIW	R24,1
    02597 016C      MOVW	R12,R24
    02598 3088      CPI	R24,0x8
    02599 E0E0      LDI	R30,0
    0259A 079E      CPC	R25,R30
    0259B F2BC      BLT	0x2573
    0259C 5F4F      SUBI	R20,0xFF
    0259D 4F5F      SBCI	R21,0xFF
    0259E 01C9      MOVW	R24,R18
    0259F 9702      SBIW	R24,2
    025A0 1748      CP	R20,R24
    025A1 0759      CPC	R21,R25
    025A2 F408      BCC	0x25A4
    025A3 CFC2      RJMP	0x2566
    025A4 9621      ADIW	R28,1
    025A5 940E 2613 CALL	pop_xgsetF0FC
    025A7 9624      ADIW	R28,4
    025A8 9508      RET
push_arg4:
    025A9 933A      ST	-Y,R19
    025AA 932A      ST	-Y,R18
push_arg2:
    025AB 931A      ST	-Y,R17
    025AC 930A      ST	-Y,R16
    025AD 9508      RET
asr16:
    025AE 2322      TST	R18
    025AF F021      BEQ	0x25B4
    025B0 9515      ASR	R17
    025B1 9507      ROR	R16
    025B2 952A      DEC	R18
    025B3 CFFA      RJMP	asr16
    025B4 9508      RET
mod16s:
    025B5 9468      BSET	6
    025B6 92DA      ST	-Y,R13
    025B7 2ED1      MOV	R13,R17
    025B8 C004      RJMP	0x25BD
div16s:
    025B9 94E8      BCLR	6
    025BA 92DA      ST	-Y,R13
    025BB 2ED1      MOV	R13,R17
    025BC 26D3      EOR	R13,R19
    025BD FF17      SBRS	R17,7
    025BE C004      RJMP	0x25C3
    025BF 9510      COM	R17
    025C0 9500      COM	R16
    025C1 5F0F      SUBI	R16,0xFF
    025C2 4F1F      SBCI	R17,0xFF
    025C3 FF37      SBRS	R19,7
    025C4 C004      RJMP	0x25C9
    025C5 9530      COM	R19
    025C6 9520      COM	R18
    025C7 5F2F      SUBI	R18,0xFF
    025C8 4F3F      SBCI	R19,0xFF
    025C9 940E 25D6 CALL	xdiv16u
    025CB FED7      SBRS	R13,7
    025CC C004      RJMP	0x25D1
    025CD 9510      COM	R17
    025CE 9500      COM	R16
    025CF 5F0F      SUBI	R16,0xFF
    025D0 4F1F      SBCI	R17,0xFF
    025D1 90D9      LD	R13,Y+
    025D2 9508      RET
mod16u:
    025D3 9468      BSET	6
    025D4 C001      RJMP	xdiv16u
div16u:
    025D5 94E8      BCLR	6
xdiv16u:
    025D6 92EA      ST	-Y,R14
    025D7 92FA      ST	-Y,R15
    025D8 938A      ST	-Y,R24
    025D9 24EE      CLR	R14
    025DA 24FF      CLR	R15
    025DB E180      LDI	R24,0x10
    025DC 0F00      LSL	R16
    025DD 1F11      ROL	R17
    025DE 1CEE      ROL	R14
    025DF 1CFF      ROL	R15
    025E0 16E2      CP	R14,R18
    025E1 06F3      CPC	R15,R19
    025E2 F018      BCS	0x25E6
    025E3 1AE2      SUB	R14,R18
    025E4 0AF3      SBC	R15,R19
    025E5 9503      INC	R16
    025E6 958A      DEC	R24
    025E7 F7A1      BNE	0x25DC
    025E8 F416      BRTC	0x25EB
    025E9 2D0E      MOV	R16,R14
    025EA 2D1F      MOV	R17,R15
    025EB 9189      LD	R24,Y+
    025EC 90F9      LD	R15,Y+
    025ED 90E9      LD	R14,Y+
    025EE 9508      RET
elpm32:
    025EF 93EA      ST	-Y,R30
    025F0 93FA      ST	-Y,R31
    025F1 920A      ST	-Y,R0
    025F2 2FE0      MOV	R30,R16
    025F3 2FF1      MOV	R31,R17
    025F4 95D8      ELPM
    025F5 2D00      MOV	R16,R0
    025F6 9631      ADIW	R30,1
    025F7 95D8      ELPM
    025F8 2D10      MOV	R17,R0
    025F9 9631      ADIW	R30,1
    025FA 95D8      ELPM
    025FB 2D20      MOV	R18,R0
    025FC 9631      ADIW	R30,1
    025FD 95D8      ELPM
    025FE 2D30      MOV	R19,R0
    025FF 9009      LD	R0,Y+
    02600 91F9      LD	R31,Y+
    02601 91E9      LD	R30,Y+
    02602 9508      RET
empy16s:
    02603 920A      ST	-Y,R0
    02604 921A      ST	-Y,R1
    02605 938A      ST	-Y,R24
    02606 939A      ST	-Y,R25
    02607 9F02      MUL	R16,R18
    02608 01C0      MOVW	R24,R0
    02609 9F12      MUL	R17,R18
    0260A 0D90      ADD	R25,R0
    0260B 9F03      MUL	R16,R19
    0260C 0D90      ADD	R25,R0
    0260D 018C      MOVW	R16,R24
    0260E 9199      LD	R25,Y+
    0260F 9189      LD	R24,Y+
    02610 9019      LD	R1,Y+
    02611 9009      LD	R0,Y+
    02612 9508      RET
pop_xgsetF0FC:
    02613 90A9      LD	R10,Y+
    02614 90B9      LD	R11,Y+
    02615 90C9      LD	R12,Y+
    02616 90D9      LD	R13,Y+
    02617 90E9      LD	R14,Y+
    02618 90F9      LD	R15,Y+
    02619 9149      LD	R20,Y+
    0261A 9159      LD	R21,Y+
    0261B 9169      LD	R22,Y+
    0261C 9179      LD	R23,Y+
    0261D 9508      RET
push_xgsetF0FC:
    0261E 937A      ST	-Y,R23
    0261F 936A      ST	-Y,R22
push_xgset30FC:
    02620 935A      ST	-Y,R21
    02621 934A      ST	-Y,R20
push_xgset00FC:
    02622 92FA      ST	-Y,R15
    02623 92EA      ST	-Y,R14
push_xgset003C:
    02624 92DA      ST	-Y,R13
    02625 92CA      ST	-Y,R12
    02626 92BA      ST	-Y,R11
    02627 92AA      ST	-Y,R10
    02628 9508      RET
push_xgsetF00C:
    02629 937A      ST	-Y,R23
    0262A 936A      ST	-Y,R22
    0262B 935A      ST	-Y,R21
    0262C 934A      ST	-Y,R20
    0262D 92BA      ST	-Y,R11
    0262E 92AA      ST	-Y,R10
    0262F 9508      RET
pop_xgsetF00C:
    02630 90A9      LD	R10,Y+
    02631 90B9      LD	R11,Y+
    02632 9149      LD	R20,Y+
    02633 9159      LD	R21,Y+
    02634 9169      LD	R22,Y+
    02635 9179      LD	R23,Y+
    02636 9508      RET
push_xgsetF03C:
    02637 937A      ST	-Y,R23
    02638 936A      ST	-Y,R22
    02639 935A      ST	-Y,R21
    0263A 934A      ST	-Y,R20
    0263B 92DA      ST	-Y,R13
    0263C 92CA      ST	-Y,R12
    0263D 92BA      ST	-Y,R11
    0263E 92AA      ST	-Y,R10
    0263F 9508      RET
pop_xgsetF03C:
    02640 90A9      LD	R10,Y+
    02641 90B9      LD	R11,Y+
    02642 90C9      LD	R12,Y+
    02643 90D9      LD	R13,Y+
    02644 9149      LD	R20,Y+
    02645 9159      LD	R21,Y+
    02646 9169      LD	R22,Y+
    02647 9179      LD	R23,Y+
    02648 9508      RET
neg32:
    02649 9500      COM	R16
    0264A 9510      COM	R17
    0264B 9520      COM	R18
    0264C 9530      COM	R19
    0264D 5F0F      SUBI	R16,0xFF
    0264E 4F1F      SBCI	R17,0xFF
    0264F 4F2F      SBCI	R18,0xFF
    02650 4F3F      SBCI	R19,0xFF
    02651 9508      RET
lsl32:
    02652 920F      PUSH	R0
    02653 9009      LD	R0,Y+
    02654 2000      TST	R0
    02655 F031      BEQ	0x265C
    02656 0F00      LSL	R16
    02657 1F11      ROL	R17
    02658 1F22      ROL	R18
    02659 1F33      ROL	R19
    0265A 940A      DEC	R0
    0265B CFF8      RJMP	0x2654
    0265C 900F      POP	R0
    0265D 9508      RET
lsr16:
    0265E 2322      TST	R18
    0265F F021      BEQ	0x2664
    02660 9516      LSR	R17
    02661 9507      ROR	R16
    02662 952A      DEC	R18
    02663 CFFA      RJMP	lsr16
    02664 9508      RET
lsr32:
    02665 920F      PUSH	R0
    02666 9009      LD	R0,Y+
    02667 2000      TST	R0
    02668 F031      BEQ	0x266F
    02669 9536      LSR	R19
    0266A 9527      ROR	R18
    0266B 9517      ROR	R17
    0266C 9507      ROR	R16
    0266D 940A      DEC	R0
    0266E CFF8      RJMP	0x2667
    0266F 900F      POP	R0
    02670 9508      RET
lsr8:
    02671 2311      TST	R17
    02672 F019      BEQ	0x2676
    02673 9506      LSR	R16
    02674 951A      DEC	R17
    02675 CFFB      RJMP	lsr8
    02676 9508      RET
fpint:
    02677 924A      ST	-Y,R4
    02678 925A      ST	-Y,R5
    02679 926A      ST	-Y,R6
    0267A 938A      ST	-Y,R24
    0267B 940E 2777 CALL	unpacku
    0267D F111      BEQ	0x26A0
    0267E 2055      TST	R5
    0267F F0E2      BMI	0x269C
    02680 E18F      LDI	R24,0x1F
    02681 1648      CP	R4,R24
    02682 F4C0      BCC	0x269B
    02683 E187      LDI	R24,0x17
    02684 1648      CP	R4,R24
    02685 F0D1      BEQ	0x26A0
    02686 F458      BCC	0x2692
    02687 9441      NEG	R4
    02688 EE89      LDI	R24,0xE9
    02689 1A48      SUB	R4,R24
    0268A C005      RJMP	0x2690
    0268B 9535      ASR	R19
    0268C 9527      ROR	R18
    0268D 9517      ROR	R17
    0268E 9507      ROR	R16
    0268F 944A      DEC	R4
    02690 F7D1      BNE	0x268B
    02691 C00E      RJMP	0x26A0
    02692 E187      LDI	R24,0x17
    02693 1A48      SUB	R4,R24
    02694 0F00      LSL	R16
    02695 1F11      ROL	R17
    02696 1F22      ROL	R18
    02697 1F33      ROL	R19
    02698 944A      DEC	R4
    02699 F7D1      BNE	0x2694
    0269A C005      RJMP	0x26A0
    0269B E73F      LDI	R19,0x7F
    0269C 2F23      MOV	R18,R19
    0269D 2F13      MOV	R17,R19
    0269E 2F03      MOV	R16,R19
    0269F C004      RJMP	0x26A4
    026A0 2066      TST	R6
    026A1 F011      BEQ	0x26A4
    026A2 940E 2649 CALL	neg32
    026A4 9189      LD	R24,Y+
    026A5 9069      LD	R6,Y+
    026A6 9059      LD	R5,Y+
    026A7 9049      LD	R4,Y+
    026A8 9508      RET
uint2fp:
    026A9 9468      BSET	6
    026AA C001      RJMP	0x26AC
int2fp:
    026AB 94E8      BCLR	6
    026AC 2722      CLR	R18
    026AD 2733      CLR	R19
    026AE F046      BRTS	0x26B7
    026AF FD17      SBRC	R17,7
    026B0 9520      COM	R18
    026B1 FD17      SBRC	R17,7
    026B2 9530      COM	R19
    026B3 C003      RJMP	0x26B7
ulong2fp:
    026B4 9468      BSET	6
    026B5 C001      RJMP	0x26B7
long2fp:
    026B6 94E8      BCLR	6
    026B7 924A      ST	-Y,R4
    026B8 925A      ST	-Y,R5
    026B9 926A      ST	-Y,R6
    026BA 938A      ST	-Y,R24
    026BB E187      LDI	R24,0x17
    026BC 2E48      MOV	R4,R24
    026BD 2455      CLR	R5
    026BE 2466      CLR	R6
    026BF F036      BRTS	0x26C6
    026C0 2333      TST	R19
    026C1 F422      BPL	0x26C6
    026C2 940E 2649 CALL	neg32
    026C4 E880      LDI	R24,0x80
    026C5 2E68      MOV	R6,R24
    026C6 940E 2790 CALL	normalize_and_pack
    026C8 9189      LD	R24,Y+
    026C9 9069      LD	R6,Y+
    026CA 9059      LD	R5,Y+
    026CB 9049      LD	R4,Y+
    026CC 9508      RET
fpdiv1:
    026CD 93FA      ST	-Y,R31
    026CE 93EA      ST	-Y,R30
    026CF 81EA      LDD	R30,Y+2
    026D0 81FB      LDD	R31,Y+3
    026D1 D027      RCALL	0x26F9
    026D2 91E9      LD	R30,Y+
    026D3 91F9      LD	R31,Y+
    026D4 9622      ADIW	R28,2
    026D5 9508      RET
fpdiv2:
    026D6 93FA      ST	-Y,R31
    026D7 93EA      ST	-Y,R30
    026D8 2FEC      MOV	R30,R28
    026D9 2FFD      MOV	R31,R29
    026DA 9632      ADIW	R30,2
    026DB D01D      RCALL	0x26F9
    026DC 91E9      LD	R30,Y+
    026DD 91F9      LD	R31,Y+
    026DE 9624      ADIW	R28,4
    026DF 9508      RET
fpdiv1x:
    026E0 93FA      ST	-Y,R31
    026E1 93EA      ST	-Y,R30
    026E2 81EA      LDD	R30,Y+2
    026E3 81FB      LDD	R31,Y+3
    026E4 D014      RCALL	0x26F9
    026E5 91E9      LD	R30,Y+
    026E6 91F9      LD	R31,Y+
    026E7 8339      STD	Y+1,R19
    026E8 8328      ST	Y,R18
    026E9 931A      ST	-Y,R17
    026EA 930A      ST	-Y,R16
    026EB 9508      RET
fpdiv2x:
    026EC 93FA      ST	-Y,R31
    026ED 93EA      ST	-Y,R30
    026EE 2FEC      MOV	R30,R28
    026EF 2FFD      MOV	R31,R29
    026F0 9632      ADIW	R30,2
    026F1 D007      RCALL	0x26F9
    026F2 91E9      LD	R30,Y+
    026F3 91F9      LD	R31,Y+
    026F4 833B      STD	Y+3,R19
    026F5 832A      STD	Y+2,R18
    026F6 8319      STD	Y+1,R17
    026F7 8308      ST	Y,R16
    026F8 9508      RET
    026F9 920A      ST	-Y,R0
    026FA 921A      ST	-Y,R1
    026FB 922A      ST	-Y,R2
    026FC 923A      ST	-Y,R3
    026FD 940E 27D5 CALL	saveFPRegs
    026FF 933A      ST	-Y,R19
    02700 932A      ST	-Y,R18
    02701 931A      ST	-Y,R17
    02702 930A      ST	-Y,R16
    02703 8100      LD	R16,Z
    02704 8111      LDD	R17,Z+1
    02705 8122      LDD	R18,Z+2
    02706 8133      LDD	R19,Z+3
    02707 940E 2777 CALL	unpacku
    02709 F409      BNE	0x270B
    0270A C057      RJMP	0x2762
    0270B 2CE6      MOV	R14,R6
    0270C 2CD5      MOV	R13,R5
    0270D 2CC4      MOV	R12,R4
    0270E 2EB3      MOV	R11,R19
    0270F 2EA2      MOV	R10,R18
    02710 2E91      MOV	R9,R17
    02711 2E80      MOV	R8,R16
    02712 9109      LD	R16,Y+
    02713 9119      LD	R17,Y+
    02714 9129      LD	R18,Y+
    02715 9139      LD	R19,Y+
    02716 940E 2777 CALL	unpacku
    02718 F1A1      BEQ	0x274D
    02719 246E      EOR	R6,R14
    0271A 184C      SUB	R4,R12
    0271B 085D      SBC	R5,R13
    0271C E880      LDI	R24,0x80
    0271D 1648      CP	R4,R24
    0271E 0653      CPC	R5,R19
    0271F F00C      BLT	0x2721
    02720 C033      RJMP	0x2754
    02721 E881      LDI	R24,0x81
    02722 1648      CP	R4,R24
    02723 EF8F      LDI	R24,0xFF
    02724 0658      CPC	R5,R24
    02725 F40C      BGE	0x2727
    02726 C036      RJMP	0x275D
    02727 E280      LDI	R24,0x20
    02728 2433      CLR	R3
    02729 2E23      MOV	R2,R19
    0272A 2E12      MOV	R1,R18
    0272B 2E01      MOV	R0,R17
    0272C 2F30      MOV	R19,R16
    0272D 2722      CLR	R18
    0272E 2711      CLR	R17
    0272F 2700      CLR	R16
    02730 9426      LSR	R2
    02731 9417      ROR	R1
    02732 9407      ROR	R0
    02733 9537      ROR	R19
    02734 9527      ROR	R18
    02735 0F00      LSL	R16
    02736 1F11      ROL	R17
    02737 1F22      ROL	R18
    02738 1F33      ROL	R19
    02739 1C00      ROL	R0
    0273A 1C11      ROL	R1
    0273B 1C22      ROL	R2
    0273C 1C33      ROL	R3
    0273D F028      BCS	0x2743
    0273E 1808      SUB	R0,R8
    0273F 0819      SBC	R1,R9
    02740 082A      SBC	R2,R10
    02741 083B      SBC	R3,R11
    02742 C004      RJMP	0x2747
    02743 0C08      ADD	R0,R8
    02744 1C19      ADC	R1,R9
    02745 1C2A      ADC	R2,R10
    02746 1C3B      ADC	R3,R11
    02747 F00A      BMI	0x2749
    02748 6001      ORI	R16,1
    02749 958A      DEC	R24
    0274A F751      BNE	0x2735
    0274B 940E 2790 CALL	normalize_and_pack
    0274D 940E 27E4 CALL	restoreFPRegs
    0274F 9039      LD	R3,Y+
    02750 9029      LD	R2,Y+
    02751 9019      LD	R1,Y+
    02752 9009      LD	R0,Y+
    02753 9508      RET
    02754 EF0F      LDI	R16,0xFF
    02755 2F10      MOV	R17,R16
    02756 E72F      LDI	R18,0x7F
    02757 E73F      LDI	R19,0x7F
    02758 2066      TST	R6
    02759 F399      BEQ	0x274D
    0275A 940E 2649 CALL	neg32
    0275C CFF0      RJMP	0x274D
    0275D 2700      CLR	R16
    0275E 2F10      MOV	R17,R16
    0275F 2F20      MOV	R18,R16
    02760 2F30      MOV	R19,R16
    02761 CFEB      RJMP	0x274D
    02762 9109      LD	R16,Y+
    02763 9119      LD	R17,Y+
    02764 9129      LD	R18,Y+
    02765 9139      LD	R19,Y+
    02766 CFED      RJMP	0x2754
unpacks:
    02767 D00F      RCALL	unpacku
    02768 F029      BEQ	0x276E
    02769 2066      TST	R6
    0276A F011      BEQ	0x276D
    0276B 940E 2649 CALL	neg32
    0276D 9498      BCLR	1
    0276E 9508      RET
tstR16_R19:
    0276F 2300      TST	R16
    02770 F429      BNE	0x2776
    02771 2311      TST	R17
    02772 F419      BNE	0x2776
    02773 2322      TST	R18
    02774 F409      BNE	0x2776
    02775 2333      TST	R19
    02776 9508      RET
unpacku:
    02777 DFF7      RCALL	tstR16_R19
    02778 F099      BEQ	0x278C
    02779 938A      ST	-Y,R24
    0277A 2E63      MOV	R6,R19
    0277B E880      LDI	R24,0x80
    0277C 2268      AND	R6,R24
    0277D 0F22      LSL	R18
    0277E 1F33      ROL	R19
    0277F 2E43      MOV	R4,R19
    02780 E78F      LDI	R24,0x7F
    02781 1A48      SUB	R4,R24
    02782 2455      CLR	R5
    02783 2788      CLR	R24
    02784 0A58      SBC	R5,R24
    02785 9526      LSR	R18
    02786 E830      LDI	R19,0x80
    02787 2B23      OR	R18,R19
    02788 2733      CLR	R19
    02789 9189      LD	R24,Y+
    0278A 9498      BCLR	1
    0278B 9508      RET
    0278C 2444      CLR	R4
    0278D 2455      CLR	R5
    0278E 2466      CLR	R6
    0278F 9508      RET
normalize_and_pack:
    02790 DFDE      RCALL	tstR16_R19
    02791 F409      BNE	0x2793
    02792 9508      RET
    02793 93AA      ST	-Y,R26
    02794 93BA      ST	-Y,R27
    02795 01D2      MOVW	R26,R4
    02796 939A      ST	-Y,R25
    02797 938A      ST	-Y,R24
    02798 E78E      LDI	R24,0x7E
    02799 E090      LDI	R25,0
    0279A 2333      TST	R19
    0279B F049      BEQ	0x27A5
    0279C 9536      LSR	R19
    0279D 9527      ROR	R18
    0279E 9517      ROR	R17
    0279F 9507      ROR	R16
    027A0 17A8      CP	R26,R24
    027A1 07B9      CPC	R27,R25
    027A2 F4CC      BGE	0x27BC
    027A3 9611      ADIW	R26,1
    027A4 CFF5      RJMP	0x279A
    027A5 9580      COM	R24
    027A6 9590      COM	R25
    027A7 9601      ADIW	R24,1
    027A8 2322      TST	R18
    027A9 F0BA      BMI	0x27C1
    027AA 0F00      LSL	R16
    027AB 1F11      ROL	R17
    027AC 1F22      ROL	R18
    027AD 17A8      CP	R26,R24
    027AE 07B9      CPC	R27,R25
    027AF F014      BLT	0x27B2
    027B0 9711      SBIW	R26,1
    027B1 CFF6      RJMP	0x27A8
    027B2 2700      CLR	R16
    027B3 2711      CLR	R17
    027B4 2722      CLR	R18
    027B5 2733      CLR	R19
    027B6 9189      LD	R24,Y+
    027B7 9199      LD	R25,Y+
    027B8 012D      MOVW	R4,R26
    027B9 91B9      LD	R27,Y+
    027BA 91A9      LD	R26,Y+
    027BB 9508      RET
    027BC 2733      CLR	R19
    027BD EF0F      LDI	R16,0xFF
    027BE 2F10      MOV	R17,R16
    027BF E72F      LDI	R18,0x7F
    027C0 2F32      MOV	R19,R18
    027C1 9189      LD	R24,Y+
    027C2 9199      LD	R25,Y+
    027C3 012D      MOVW	R4,R26
    027C4 C002      RJMP	0x27C7
pack:
    027C5 93AA      ST	-Y,R26
    027C6 93BA      ST	-Y,R27
    027C7 DFA7      RCALL	tstR16_R19
    027C8 F049      BEQ	0x27D2
    027C9 01D2      MOVW	R26,R4
    027CA 58A1      SUBI	R26,0x81
    027CB 4FBF      SBCI	R27,0xFF
    027CC 012D      MOVW	R4,R26
    027CD 2D34      MOV	R19,R4
    027CE 0F22      LSL	R18
    027CF 9536      LSR	R19
    027D0 9527      ROR	R18
    027D1 2936      OR	R19,R6
    027D2 91B9      LD	R27,Y+
    027D3 91A9      LD	R26,Y+
    027D4 9508      RET
saveFPRegs:
    027D5 924A      ST	-Y,R4
    027D6 925A      ST	-Y,R5
    027D7 926A      ST	-Y,R6
    027D8 927A      ST	-Y,R7
    027D9 928A      ST	-Y,R8
    027DA 929A      ST	-Y,R9
    027DB 92AA      ST	-Y,R10
    027DC 92BA      ST	-Y,R11
    027DD 92CA      ST	-Y,R12
    027DE 92DA      ST	-Y,R13
    027DF 92EA      ST	-Y,R14
    027E0 92FA      ST	-Y,R15
    027E1 938A      ST	-Y,R24
    027E2 939A      ST	-Y,R25
    027E3 9508      RET
restoreFPRegs:
    027E4 9199      LD	R25,Y+
    027E5 9189      LD	R24,Y+
    027E6 90F9      LD	R15,Y+
    027E7 90E9      LD	R14,Y+
    027E8 90D9      LD	R13,Y+
    027E9 90C9      LD	R12,Y+
    027EA 90B9      LD	R11,Y+
    027EB 90A9      LD	R10,Y+
    027EC 9099      LD	R9,Y+
    027ED 9089      LD	R8,Y+
    027EE 9079      LD	R7,Y+
    027EF 9069      LD	R6,Y+
    027F0 9059      LD	R5,Y+
    027F1 9049      LD	R4,Y+
    027F2 9508      RET
fpmule:
    027F3 940E 27D5 CALL	saveFPRegs
    027F5 93AA      ST	-Y,R26
    027F6 93BA      ST	-Y,R27
    027F7 940E 2777 CALL	unpacku
    027F9 F1E1      BEQ	0x2836
    027FA 2CE6      MOV	R14,R6
    027FB 2CD5      MOV	R13,R5
    027FC 2CC4      MOV	R12,R4
    027FD 2EB3      MOV	R11,R19
    027FE 2EA2      MOV	R10,R18
    027FF 2E91      MOV	R9,R17
    02800 2E80      MOV	R8,R16
    02801 8100      LD	R16,Z
    02802 8111      LDD	R17,Z+1
    02803 8122      LDD	R18,Z+2
    02804 8133      LDD	R19,Z+3
    02805 940E 2777 CALL	unpacku
    02807 F171      BEQ	0x2836
    02808 246E      EOR	R6,R14
    02809 0C4C      ADD	R4,R12
    0280A 1C5D      ADC	R5,R13
    0280B E880      LDI	R24,0x80
    0280C 1648      CP	R4,R24
    0280D 0653      CPC	R5,R19
    0280E F564      BGE	0x283B
    0280F E881      LDI	R24,0x81
    02810 1648      CP	R4,R24
    02811 EF8F      LDI	R24,0xFF
    02812 0658      CPC	R5,R24
    02813 F16C      BLT	0x2841
    02814 9EA2      MUL	R10,R18
    02815 2DB1      MOV	R27,R1
    02816 2DA0      MOV	R26,R0
    02817 9E91      MUL	R9,R17
    02818 2D91      MOV	R25,R1
    02819 2D80      MOV	R24,R0
    0281A 9EA0      MUL	R10,R16
    0281B 0D80      ADD	R24,R0
    0281C 1D91      ADC	R25,R1
    0281D 1FA3      ADC	R26,R19
    0281E 1FB3      ADC	R27,R19
    0281F 9E82      MUL	R8,R18
    02820 0D80      ADD	R24,R0
    02821 1D91      ADC	R25,R1
    02822 1FA3      ADC	R26,R19
    02823 1FB3      ADC	R27,R19
    02824 9E92      MUL	R9,R18
    02825 0D90      ADD	R25,R0
    02826 1DA1      ADC	R26,R1
    02827 1FB3      ADC	R27,R19
    02828 9EA1      MUL	R10,R17
    02829 0D90      ADD	R25,R0
    0282A 1DA1      ADC	R26,R1
    0282B 1FB3      ADC	R27,R19
    0282C 2F2B      MOV	R18,R27
    0282D 2F1A      MOV	R17,R26
    0282E 2F09      MOV	R16,R25
    0282F 0F88      LSL	R24
    02830 1F00      ROL	R16
    02831 1F11      ROL	R17
    02832 1F22      ROL	R18
    02833 1F33      ROL	R19
    02834 940E 2790 CALL	normalize_and_pack
    02836 91B9      LD	R27,Y+
    02837 91A9      LD	R26,Y+
    02838 940E 27E4 CALL	restoreFPRegs
    0283A 9508      RET
    0283B EF0F      LDI	R16,0xFF
    0283C 2F10      MOV	R17,R16
    0283D E72F      LDI	R18,0x7F
    0283E E78F      LDI	R24,0x7F
    0283F 2E48      MOV	R4,R24
    02840 CFF5      RJMP	0x2836
    02841 2700      CLR	R16
    02842 2F10      MOV	R17,R16
    02843 2F20      MOV	R18,R16
    02844 2F30      MOV	R19,R16
    02845 CFF0      RJMP	0x2836
fpmule1:
    02846 93FA      ST	-Y,R31
    02847 93EA      ST	-Y,R30
    02848 81EA      LDD	R30,Y+2
    02849 81FB      LDD	R31,Y+3
    0284A 940E 27F3 CALL	fpmule
    0284C 91E9      LD	R30,Y+
    0284D 91F9      LD	R31,Y+
    0284E 9622      ADIW	R28,2
    0284F 9508      RET

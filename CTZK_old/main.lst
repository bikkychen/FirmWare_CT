Interrupt Vectors
    00000 940C 0048 JMP	__start|__text_start
    00008 940C 188E JMP	_int3_isr
    00020 940C 0092 JMP	_timer0_ovf_isr
    00024 940C 186D JMP	_usart0_isr
    0002E 940C 1827 JMP	_E_comp

Program Code (text area)
__start|__text_start:
    00048 EFCF      LDI	R28,0xFF
    00049 E1D0      LDI	R29,0x10
    0004A BFCD      OUT	0x3D,R28
    0004B BFDE      OUT	0x3E,R29
    0004C 58C0      SUBI	R28,0x80
    0004D 40D0      SBCI	R29,0
    0004E EA0A      LDI	R16,0xAA
    0004F 8308      ST	Y,R16
    00050 2400      CLR	R0
    00051 E0E0      LDI	R30,0
    00052 E0F1      LDI	R31,1
    00053 E013      LDI	R17,3
    00054 33E9      CPI	R30,0x39
    00055 07F1      CPC	R31,R17
    00056 F011      BEQ	0x0059
    00057 9201      ST	Z+,R0
    00058 CFFB      RJMP	0x0054
    00059 8300      ST	Z,R16
    0005A E9E0      LDI	R30,0x90
    0005B E0F0      LDI	R31,0
    0005C E0A0      LDI	R26,0
    0005D E0B1      LDI	R27,1
    0005E E010      LDI	R17,0
    0005F E000      LDI	R16,0
    00060 BF0B      OUT	0x3B,R16
    00061 39E0      CPI	R30,0x90
    00062 07F1      CPC	R31,R17
    00063 F021      BEQ	0x0068
    00064 95C8      LPM
    00065 9631      ADIW	R30,1
    00066 920D      ST	X+,R0
    00067 CFF9      RJMP	0x0061
    00068 940E 0559 CALL	_main
_exit:
    0006A CFFF      RJMP	_exit
FILE: D:\chen\Core\FirmWare_CT\CTZK\main.c
(0001)  /**************************************************
(0002) CTZK
(0003) //20161110 增加了流量采样和全部采样的CRC16校验
(0004) //20161113 改进了流量数据中时间和相位由无符号短整型转为浮点数时的转换方法，以防上位机软件出现相位超大值
(0005) **************************************************/
(0006) #include <iom128v.h>								   	
(0007) #include <macros.h>
(0008) #include <stdio.h>
(0009) 
(0010) #define  BB     0x32        //固件版本号
(0011) 
(0012) #define M1_L    PORTD&=0xfb;
(0013) #define M1_H    PORTD|=0x04;
(0014) #define M2_L    PORTD&=0xfd;
(0015) #define M2_H    PORTD|=0x02;
(0016) 
(0017)  
(0018) //收放电机管脚定义和控制项
(0019) #define DIR1_PIN    ((PINA&0x04)>>2)
(0020) #define PWM1_PIN    ((PINA&0x02)>>1)
(0021) #define BREAKE1_PIN (PINA&0x01)
(0022) 
(0023) #define DIR1_H      {DDRA|=0x04;PORTA|=0x04;}
(0024) #define PWM1_H      {DDRA|=0x02;PORTA|=0x02;}
(0025) #define BREAKE1_H   {DDRA|=0x01;PORTA|=0x01;}
(0026) 
(0027) #define DIR1_L      {DDRA|=0x04;PORTA&=0xfb;}
(0028) #define PWM1_L      {DDRA|=0x02;PORTA&=0xFD;}
(0029) #define BREAKE1_L   {DDRA|=0x01;PORTA&=0xFE;}
(0030) 
(0031) //调节电机管脚定义和控制项
(0032) #define PWM2_PIN    ((PINF&0x04)>>2)
(0033) #define BREAKE2_PIN ((PINF&0x02)>>1)
(0034) #define DIR2_PIN    (PINF&0x01)
(0035) 
(0036) #define PWM2_H      {DDRF|=0x04;PORTF|=0x04;}
(0037) #define BREAKE2_H   {DDRF|=0x02;PORTF|=0x02;}
(0038) #define DIR2_H      {DDRF|=0x01;PORTF|=0x01;}
(0039) 
(0040) #define PWM2_L      {DDRF|=0x04;PORTF&=0xfb;}
(0041) #define BREAKE2_L   {DDRF|=0x02;PORTF&=0xFD;}
(0042) #define DIR2_L      {DDRF|=0x01;PORTF&=0xFE;}
(0043) 
(0044) //电机电源
(0045) #define VM_H        {DDRB|=0x80;PORTB|=0x80;}
(0046) 
(0047) //同时关二个电机，先把PWM置低，后把DIR和BREAK置低，最后关电机电源
(0048) //最好不关刹车，这样电机堵转停止后不会有1.6秒的反向电压，电机不会喘气
(0049) #define MOTORSTOP   {DDRA|=0x07;PORTA&=0xFD;PORTA&=0xF8;   DDRF|=0x07;PORTF&=0xFB;PORTF&=0xF8;     DDRB|=0x80;PORTB&=0x7f;}
(0050) 
(0051) #define DELAY10 for(Tt=0;Tt<4;Tt++);
(0052) #define DELAY20 for(Tt=0;Tt<4;Tt++);
(0053) #define DELAY40 for(Tt=0;Tt<16;Tt++); 
(0054) #define DELAY50 for(Tt=0;Tt<21;Tt++); 
(0055) #define DELAY80 for(Tt=0;Tt<32;Tt++); 
(0056) #define DELAY89 for(Tt=0;Tt<36;Tt++); 
(0057) #define DELAY100 for(Tt=0;Tt<42;Tt++); 
(0058) #define DELAY170 for(Tt=0;Tt<72;Tt++);
(0059) #define DELAY268 for(Tt=0;Tt<113;Tt++);
(0060) #define DELAY397 for(Tt=0;Tt<165;Tt++);
(0061) #define DELAY400 for(Tt=0;Tt<168;Tt++);
(0062) 
(0063) union FIB
(0064) {
(0065)  float f;
(0066)  unsigned int i[2];
(0067)  unsigned char b[4];
(0068) }myFIB;
(0069) 
(0070) union MotorStatus
(0071) {
(0072)  unsigned int i;
(0073)  struct 
(0074)  { 
(0075)    unsigned int PWM:1;//bit0,电机运行状态，0：停止，1：运行
(0076)    unsigned int DIR:1;//bit1,电机运行方向，0：收臂-调小，1：张臂-调大
(0077)    unsigned int BrokenStop:1;//bit2, 断路停
(0078)    unsigned int CommandStop:1;//bit3,手动停
(0079)    unsigned int OverCurrent:1;//bit4,过流停
(0080)    unsigned int UnderVoltage:1;//bit5,欠压停
(0081)    unsigned int StartResult:2;//bit6-bit7,电机最近一次启动结果(0：正常上电启动，1：本电机同向运行，2：本电机反向运行，3：另一个电机正在运行)
(0082)    
(0083)    unsigned int ThisCurrent:8;//bit8-bit15 ,  电机当前或停止前最近一次电流
(0084)  }s;
(0085) }Motor1Status,Motor2Status;//电机状态
(0086) 
(0087) unsigned char Motor1Thr,Motor2Thr;//电机堵转过流阈值
(0088) 
(0089) unsigned char T_Flag;
(0090) 
(0091) unsigned int Timer0Counter;//定时器0超过4ms时的计数
(0092) 
(0093) unsigned char Uart0RxData[74];//串口接收数据缓存
(0094) unsigned char Uart0RxCounter;
(0095) 
(0096) unsigned char Rx[18];//解码接收9位共18个半位
(0097) int  T_dat,R_dat;//曼码发送数据
(0098) unsigned char T_com;//曼码发送命令
(0099) 
(0100) unsigned char TimeOutFlag;//发送超时标志
(0101) 
(0102) unsigned char T_dat_buf[22];//曼码发送缓冲 
(0103) 
(0104) unsigned int DataFlag;//下发标定系数开始标志
(0105) unsigned char Int_count;
(0106) unsigned char IntFlag;//接收帧状态
(0107) 
(0108) unsigned int Tt,k;
(0109) unsigned int T2cn;
(0110) unsigned char coeffdata[320];
(0111) 
(0112) unsigned char Uart0TxData[74];//串口发送数据缓存
(0113) 
(0114) unsigned char EEPAdd;//接收系数存放地址索引
(0115) unsigned int coeff_len,coeff_count;//接收系数长度，接收系数计数
(0116) unsigned int CompCounter;
(0117) 
(0118) unsigned int bf;
(0119) 
(0120) unsigned long lfib;//短整型转浮点数时用的临时变量
(0121) unsigned char crc16hi,crc16lo,crc16array[16];
(0122) 
(0123) void InitialIO(void);
(0124) void init_USART0(void);
(0125) void SendUart0_2(unsigned char len,unsigned int s);
(0126) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn);
(0127) void Pwm_startup(unsigned char motor);
(0128) void Start(void);
(0129) void SendManchester(void); 
(0130) unsigned char SampleADC(unsigned char ch);
(0131) void EEPROM_write(unsigned int Address,unsigned char Data);
(0132) unsigned char EEPROM_read(unsigned int Address);
(0133) void CheckMotor(unsigned int t);
(0134) void crc16(unsigned char r_data[],unsigned int length);
(0135) 
(0136) void InitialIO(void)
(0137) {//1输出，0输入
(0138)  PORTA=0x00;
_InitialIO:
    0006B 2422      CLR	R2
    0006C BA2B      OUT	0x1B,R2
(0139)  DDRA=0x07; //PA0=BREAKE1 PA1=PWM1 PA2=DIR1
    0006D E087      LDI	R24,7
    0006E BB8A      OUT	0x1A,R24
(0140) 
(0141)  PORTB=0x00; 
    0006F BA28      OUT	0x18,R2
(0142)  DDRB=0x80; //PB7=VM_CTRL
    00070 E880      LDI	R24,0x80
    00071 BB87      OUT	0x17,R24
(0143)  
(0144)  PORTC=0x00;
    00072 BA25      OUT	0x15,R2
(0145)  DDRC=0x00; 
    00073 BA24      OUT	0x14,R2
(0146)  
(0147)  PORTD=0x00; 
    00074 BA22      OUT	0x12,R2
(0148)  DDRD=0x06;//PD1=M2 PD2=M1
    00075 E086      LDI	R24,6
    00076 BB81      OUT	0x11,R24
(0149)  
(0150)  PORTE=0x00; 
    00077 B823      OUT	0x03,R2
(0151)  DDRE=0x00;
    00078 B822      OUT	0x02,R2
(0152)  
(0153)  PORTF=0x00; 
    00079 9220 0062 STS	0x62,R2
(0154)  DDRF=0x07;//PF0=DIR2 PF1=BREAKE2 PF2=PWM2
    0007B E087      LDI	R24,7
    0007C 9380 0061 STS	0x61,R24
(0155)  
(0156)  PORTG=0x00; 
    0007E 9220 0065 STS	0x65,R2
(0157)  DDRG=0x00; 
    00080 9220 0064 STS	0x64,R2
    00082 9508      RET
(0158) }
(0159) 
(0160) //UART0 initialize
(0161) // desired baud rate: 57600
(0162) // actual: baud rate:58824 (2.1%)
(0163) // char size: 8 bit
(0164) // parity: Disabled
(0165) void uart0_init(void)
(0166) {
(0167)  UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    00083 2422      CLR	R2
    00084 B82A      OUT	0x0A,R2
(0168)  UCSR0A = 0x02;
    00085 E082      LDI	R24,2
    00086 B98B      OUT	0x0B,R24
(0169)  UCSR0C = 0x06;
    00087 E086      LDI	R24,6
    00088 9380 0095 STS	0x95,R24
(0170)  UBRR0L = 0x10; //set baud rate lo
    0008A E180      LDI	R24,0x10
    0008B B989      OUT	0x09,R24
(0171)  UBRR0H = 0x00; //set baud rate hi
    0008C 9220 0090 STS	0x90,R2
(0172)  UCSR0B = 0x98;
    0008E E988      LDI	R24,0x98
    0008F B98A      OUT	0x0A,R24
    00090 9508      RET
(0173) }
(0174) 
(0175) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0176) void uart0_rx_isr(void)
(0177) {
_uart0_rx_isr:
    00091 9518      RETI
_timer0_ovf_isr:
    00092 922A      ST	-Y,R2
    00093 938A      ST	-Y,R24
    00094 939A      ST	-Y,R25
    00095 B62F      IN	R2,0x3F
    00096 922A      ST	-Y,R2
(0178)  //uart has received a character in UDR
(0179) }
(0180) 
(0181) #pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
(0182) void timer0_ovf_isr(void)
(0183) {
(0184) Timer0Counter--;
    00097 9180 032C LDS	R24,Timer0Counter
    00099 9190 032D LDS	R25,Timer0Counter+1
    0009B 9701      SBIW	R24,1
    0009C 9390 032D STS	Timer0Counter+1,R25
    0009E 9380 032C STS	Timer0Counter,R24
(0185) if(Timer0Counter==0)
    000A0 3080      CPI	R24,0
    000A1 0789      CPC	R24,R25
    000A2 F461      BNE	0x00AF
(0186) {
(0187)  TCNT0=0;
    000A3 2422      CLR	R2
    000A4 BE22      OUT	0x32,R2
(0188)  TimeOutFlag=1;
    000A5 E081      LDI	R24,1
    000A6 9380 02C9 STS	TimeOutFlag,R24
(0189)  TIMSK&=0xFE;//关定时器0中断
    000A8 B787      IN	R24,0x37
    000A9 7F8E      ANDI	R24,0xFE
    000AA BF87      OUT	0x37,R24
(0190)  UCSR0B&=0x7f;//关串口接收中断
    000AB B18A      IN	R24,0x0A
    000AC 778F      ANDI	R24,0x7F
    000AD B98A      OUT	0x0A,R24
(0191)  }
    000AE C002      RJMP	0x00B1
(0192)  else
(0193)  {
(0194)  TCNT0=0x06;//定时8ms
    000AF E086      LDI	R24,6
    000B0 BF82      OUT	0x32,R24
(0195)  }
    000B1 9029      LD	R2,Y+
    000B2 BE2F      OUT	0x3F,R2
    000B3 9199      LD	R25,Y+
    000B4 9189      LD	R24,Y+
    000B5 9029      LD	R2,Y+
    000B6 9518      RETI
_SendUart0_2:
  t                    --> R20
  i                    --> R22
  s                    --> R10
  len                  --> R12
    000B7 940E 1F40 CALL	push_xgsetF03C
    000B9 0159      MOVW	R10,R18
    000BA 2EC0      MOV	R12,R16
(0196) }
(0197) 
(0198) void SendUart0_2(unsigned char len,unsigned int s)   //串口发送数据
(0199) {//要求流量板在s个8ms内通过串口返回数据
(0200) unsigned char t,i; 	
(0201) 
(0202) for(t=0;t<74;t++)
    000BB 2744      CLR	R20
    000BC C009      RJMP	0x00C6
(0203)   Uart0RxData[t]=0xff;
    000BD EE82      LDI	R24,0xE2
    000BE E092      LDI	R25,2
    000BF 2FE4      MOV	R30,R20
    000C0 27FF      CLR	R31
    000C1 0FE8      ADD	R30,R24
    000C2 1FF9      ADC	R31,R25
    000C3 EF8F      LDI	R24,0xFF
    000C4 8380      ST	Z,R24
    000C5 9543      INC	R20
    000C6 344A      CPI	R20,0x4A
    000C7 F3A8      BCS	0x00BD
(0204)   
(0205) Uart0RxCounter=0; //清串口接受计数  
    000C8 2422      CLR	R2
    000C9 9220 02E1 STS	Uart0RxCounter,R2
(0206) 
(0207) for(t=0;t<len;t++)
    000CB 2744      CLR	R20
    000CC C010      RJMP	0x00DD
(0208) {
(0209) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    000CD 9B5D      SBIS	0x0B,5
    000CE CFFE      RJMP	0x00CD
(0210) for(i=0;i<200;i++);
    000CF 2766      CLR	R22
    000D0 C001      RJMP	0x00D2
    000D1 9563      INC	R22
    000D2 3C68      CPI	R22,0xC8
    000D3 F3E8      BCS	0x00D1
(0211) UDR0=Uart0TxData[t];  
    000D4 E18F      LDI	R24,0x1F
    000D5 E091      LDI	R25,1
    000D6 2FE4      MOV	R30,R20
    000D7 27FF      CLR	R31
    000D8 0FE8      ADD	R30,R24
    000D9 1FF9      ADC	R31,R25
    000DA 8020      LD	R2,Z
    000DB B82C      OUT	0x0C,R2
    000DC 9543      INC	R20
    000DD 154C      CP	R20,R12
    000DE F370      BCS	0x00CD
(0212) }
(0213)                   
(0214) if(s>0)
    000DF 20AA      TST	R10
    000E0 F411      BNE	0x00E3
    000E1 20BB      TST	R11
    000E2 F111      BEQ	0x0105
(0215) {
(0216)  //超时设定
(0217) TimeOutFlag=0; //超时标志置0
    000E3 2422      CLR	R2
    000E4 9220 02C9 STS	TimeOutFlag,R2
(0218) Timer0Counter=s; //8ms定时循环次数
    000E6 92B0 032D STS	Timer0Counter+1,R11
    000E8 92A0 032C STS	Timer0Counter,R10
(0219) TCNT0=0x06;//定时8ms
    000EA E086      LDI	R24,6
    000EB BF82      OUT	0x32,R24
(0220) TCCR0|=0x06;//256分频
    000EC B783      IN	R24,0x33
    000ED 6086      ORI	R24,6
    000EE BF83      OUT	0x33,R24
(0221) TIFR|=0x01; //清定时器0中断标志
    000EF B786      IN	R24,0x36
    000F0 6081      ORI	R24,1
    000F1 BF86      OUT	0x36,R24
(0222) TIMSK|=0x01;//使能定时器0中断
    000F2 B787      IN	R24,0x37
    000F3 6081      ORI	R24,1
    000F4 BF87      OUT	0x37,R24
(0223) t=UDR0;//开串口接收中断前读空缓存
    000F5 B14C      IN	R20,0x0C
(0224) UCSR0B|=0x80;//开串口接收中断
    000F6 9A57      SBI	0x0A,7
    000F7 C003      RJMP	0x00FB
(0225) while(TimeOutFlag==0)
(0226) {
(0227) CheckMotor(0);
    000F8 2700      CLR	R16
    000F9 2711      CLR	R17
    000FA D1FA      RCALL	_CheckMotor
    000FB 9020 02C9 LDS	R2,TimeOutFlag
    000FD 2022      TST	R2
    000FE F3C9      BEQ	0x00F8
(0228) }
(0229) TIMSK&=0xFE;//关定时器0中断
    000FF B787      IN	R24,0x37
    00100 7F8E      ANDI	R24,0xFE
    00101 BF87      OUT	0x37,R24
(0230) UCSR0B&=0x7f;//关串口接收中断
    00102 B18A      IN	R24,0x0A
    00103 778F      ANDI	R24,0x7F
    00104 B98A      OUT	0x0A,R24
(0231) }
    00105 940C 1F49 JMP	pop_xgsetF03C
_SendUart0_3:
  t                    --> R20
  i                    --> R22
  cn                   --> R10
  s                    --> R12
  len                  --> R14
    00107 940E 1F35 CALL	push_xgsetF0FC
    00109 0169      MOVW	R12,R18
    0010A 2EE0      MOV	R14,R16
    0010B 84AA      LDD	R10,Y+10
(0232) }
(0233) 
(0234) void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn)   //串口发送数据，不死等，收到采集板返回的cn个字节后即退出，如一直没收到cn个字节，则超时时间s*8ms到后也退出
(0235) {//要求流量板在s个8ms内通过串口返回数据
(0236) unsigned char t,i; 	
(0237) 
(0238) for(t=0;t<74;t++)
    0010C 2744      CLR	R20
    0010D C009      RJMP	0x0117
(0239)   Uart0RxData[t]=0xff;
    0010E EE82      LDI	R24,0xE2
    0010F E092      LDI	R25,2
    00110 2FE4      MOV	R30,R20
    00111 27FF      CLR	R31
    00112 0FE8      ADD	R30,R24
    00113 1FF9      ADC	R31,R25
    00114 EF8F      LDI	R24,0xFF
    00115 8380      ST	Z,R24
    00116 9543      INC	R20
    00117 344A      CPI	R20,0x4A
    00118 F3A8      BCS	0x010E
(0240)   
(0241) Uart0RxCounter=0; //清串口接受计数  
    00119 2422      CLR	R2
    0011A 9220 02E1 STS	Uart0RxCounter,R2
(0242) 
(0243) for(t=0;t<len;t++)
    0011C 2744      CLR	R20
    0011D C010      RJMP	0x012E
(0244) {
(0245) while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    0011E 9B5D      SBIS	0x0B,5
    0011F CFFE      RJMP	0x011E
(0246) for(i=0;i<200;i++);
    00120 2766      CLR	R22
    00121 C001      RJMP	0x0123
    00122 9563      INC	R22
    00123 3C68      CPI	R22,0xC8
    00124 F3E8      BCS	0x0122
(0247) UDR0=Uart0TxData[t];  
    00125 E18F      LDI	R24,0x1F
    00126 E091      LDI	R25,1
    00127 2FE4      MOV	R30,R20
    00128 27FF      CLR	R31
    00129 0FE8      ADD	R30,R24
    0012A 1FF9      ADC	R31,R25
    0012B 8020      LD	R2,Z
    0012C B82C      OUT	0x0C,R2
    0012D 9543      INC	R20
    0012E 154E      CP	R20,R14
    0012F F370      BCS	0x011E
(0248) }
(0249)                   
(0250) if(s>0)
    00130 20CC      TST	R12
    00131 F411      BNE	0x0134
    00132 20DD      TST	R13
    00133 F139      BEQ	0x015B
(0251) {
(0252)  //超时设定
(0253) TimeOutFlag=0; //超时标志置0
    00134 2422      CLR	R2
    00135 9220 02C9 STS	TimeOutFlag,R2
(0254) Timer0Counter=s; //8ms定时循环次数
    00137 92D0 032D STS	Timer0Counter+1,R13
    00139 92C0 032C STS	Timer0Counter,R12
(0255) TCNT0=0x06;//定时8ms
    0013B E086      LDI	R24,6
    0013C BF82      OUT	0x32,R24
(0256) TCCR0|=0x06;//256分频
    0013D B783      IN	R24,0x33
    0013E 6086      ORI	R24,6
    0013F BF83      OUT	0x33,R24
(0257) TIFR|=0x01; //清定时器0中断标志
    00140 B786      IN	R24,0x36
    00141 6081      ORI	R24,1
    00142 BF86      OUT	0x36,R24
(0258) TIMSK|=0x01;//使能定时器0中断
    00143 B787      IN	R24,0x37
    00144 6081      ORI	R24,1
    00145 BF87      OUT	0x37,R24
(0259) t=UDR0;//开串口接收中断前读空缓存
    00146 B14C      IN	R20,0x0C
(0260) UCSR0B|=0x80;//开串口接收中断
    00147 9A57      SBI	0x0A,7
    00148 C008      RJMP	0x0151
(0261) while(TimeOutFlag==0)
(0262) {
(0263) CheckMotor(0);
    00149 2700      CLR	R16
    0014A 2711      CLR	R17
    0014B D1A9      RCALL	_CheckMotor
(0264)  if(Uart0RxCounter>=cn)
    0014C 9020 02E1 LDS	R2,Uart0RxCounter
    0014E 142A      CP	R2,R10
    0014F F008      BCS	0x0151
(0265)    break;
    00150 C004      RJMP	0x0155
    00151 9020 02C9 LDS	R2,TimeOutFlag
    00153 2022      TST	R2
    00154 F3A1      BEQ	0x0149
(0266) }
(0267) TIMSK&=0xFE;//关定时器0中断
    00155 B787      IN	R24,0x37
    00156 7F8E      ANDI	R24,0xFE
    00157 BF87      OUT	0x37,R24
(0268) UCSR0B&=0x7f;//关串口接收中断
    00158 B18A      IN	R24,0x0A
    00159 778F      ANDI	R24,0x7F
    0015A B98A      OUT	0x0A,R24
(0269) }
    0015B 940C 1F2A JMP	pop_xgsetF0FC
_Pwm_startup:
  c                    --> R20
  b                    --> R22
  motor                --> R16
    0015D 934A      ST	-Y,R20
    0015E 936A      ST	-Y,R22
(0270) }
(0271) 
(0272) 
(0273) void Pwm_startup(unsigned char motor)//电机软启动
(0274) {	unsigned char c,b;
(0275) 
(0276) 	if(motor==1)
    0015F 3001      CPI	R16,1
    00160 F009      BEQ	0x0162
    00161 C07F      RJMP	0x01E1
(0277) 	{         
(0278) 	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    00162 2766      CLR	R22
    00163 C037      RJMP	0x019B
(0279) 		 {
(0280) 		  PWM1_H
    00164 9AD1      SBI	0x1A,1
    00165 9AD9      SBI	0x1B,1
(0281) 		  DELAY100
    00166 2422      CLR	R2
    00167 2433      CLR	R3
    00168 9230 02AE STS	Tt+1,R3
    0016A 9220 02AD STS	Tt,R2
    0016C C009      RJMP	0x0176
    0016D 9180 02AD LDS	R24,Tt
    0016F 9190 02AE LDS	R25,Tt+1
    00171 9601      ADIW	R24,1
    00172 9390 02AE STS	Tt+1,R25
    00174 9380 02AD STS	Tt,R24
    00176 9180 02AD LDS	R24,Tt
    00178 9190 02AE LDS	R25,Tt+1
    0017A 328A      CPI	R24,0x2A
    0017B E0E0      LDI	R30,0
    0017C 079E      CPC	R25,R30
    0017D F378      BCS	0x016D
(0282) 		  PWM1_L
    0017E 9AD1      SBI	0x1A,1
    0017F B38B      IN	R24,0x1B
    00180 7F8D      ANDI	R24,0xFD
    00181 BB8B      OUT	0x1B,R24
(0283) 		  DELAY100
    00182 2422      CLR	R2
    00183 2433      CLR	R3
    00184 9230 02AE STS	Tt+1,R3
    00186 9220 02AD STS	Tt,R2
    00188 C009      RJMP	0x0192
    00189 9180 02AD LDS	R24,Tt
    0018B 9190 02AE LDS	R25,Tt+1
    0018D 9601      ADIW	R24,1
    0018E 9390 02AE STS	Tt+1,R25
    00190 9380 02AD STS	Tt,R24
    00192 9180 02AD LDS	R24,Tt
    00194 9190 02AE LDS	R25,Tt+1
    00196 328A      CPI	R24,0x2A
    00197 E0E0      LDI	R30,0
    00198 079E      CPC	R25,R30
    00199 F378      BCS	0x0189
    0019A 9563      INC	R22
    0019B 316E      CPI	R22,0x1E
    0019C F238      BCS	0x0164
(0284) 		 }
(0285)  
(0286)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    0019D 2744      CLR	R20
    0019E C03E      RJMP	0x01DD
(0287) 		 {
(0288) 	       PWM1_L
    0019F 9AD1      SBI	0x1A,1
    001A0 B38B      IN	R24,0x1B
    001A1 7F8D      ANDI	R24,0xFD
    001A2 BB8B      OUT	0x1B,R24
(0289) 		   for(b=0;b<(200-c);b++)
    001A3 2766      CLR	R22
    001A4 C00C      RJMP	0x01B1
(0290) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    001A5 0000      NOP
    001A6 0000      NOP
    001A7 0000      NOP
    001A8 0000      NOP
    001A9 0000      NOP
    001AA 0000      NOP
    001AB 0000      NOP
    001AC 0000      NOP
    001AD 0000      NOP
    001AE 0000      NOP
    001AF 0000      NOP
    001B0 9563      INC	R22
    001B1 2E24      MOV	R2,R20
    001B2 2433      CLR	R3
    001B3 EC88      LDI	R24,0xC8
    001B4 E090      LDI	R25,0
    001B5 012C      MOVW	R4,R24
    001B6 1842      SUB	R4,R2
    001B7 0853      SBC	R5,R3
    001B8 2E26      MOV	R2,R22
    001B9 2433      CLR	R3
    001BA 1424      CP	R2,R4
    001BB 0435      CPC	R3,R5
    001BC F344      BLT	0x01A5
(0291) 			
(0292) 	       if(Motor1Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    001BD 9020 0333 LDS	R2,Motor1Status
    001BF 9030 0334 LDS	R3,Motor1Status+1
    001C1 FC25      SBRC	R2,5
    001C2 C003      RJMP	0x01C6
(0293) 		   {PWM1_H}
    001C3 9AD1      SBI	0x1A,1
    001C4 9AD9      SBI	0x1B,1
    001C5 C004      RJMP	0x01CA
(0294) 		   else 
(0295) 		   {PWM1_L}
    001C6 9AD1      SBI	0x1A,1
    001C7 B38B      IN	R24,0x1B
    001C8 7F8D      ANDI	R24,0xFD
    001C9 BB8B      OUT	0x1B,R24
(0296) 		   
(0297) 	       for(b=0;b<(c+50);b++)
    001CA 2766      CLR	R22
    001CB C00C      RJMP	0x01D8
(0298) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    001CC 0000      NOP
    001CD 0000      NOP
    001CE 0000      NOP
    001CF 0000      NOP
    001D0 0000      NOP
    001D1 0000      NOP
    001D2 0000      NOP
    001D3 0000      NOP
    001D4 0000      NOP
    001D5 0000      NOP
    001D6 0000      NOP
    001D7 9563      INC	R22
    001D8 2F84      MOV	R24,R20
    001D9 5C8E      SUBI	R24,0xCE
    001DA 1768      CP	R22,R24
    001DB F380      BCS	0x01CC
    001DC 9543      INC	R20
    001DD 3C48      CPI	R20,0xC8
    001DE F408      BCC	0x01E0
    001DF CFBF      RJMP	0x019F
(0299) 		 }	
(0300) 	} 
    001E0 C0A4      RJMP	0x0285
(0301) 	else if(motor==2)
    001E1 3002      CPI	R16,2
    001E2 F009      BEQ	0x01E4
    001E3 C0A1      RJMP	0x0285
(0302) 	{  
(0303) 	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
    001E4 2766      CLR	R22
    001E5 C045      RJMP	0x022B
(0304) 		 {
(0305) 		  PWM2_H
    001E6 9180 0061 LDS	R24,0x61
    001E8 6084      ORI	R24,4
    001E9 9380 0061 STS	0x61,R24
    001EB 9180 0062 LDS	R24,0x62
    001ED 6084      ORI	R24,4
    001EE 9380 0062 STS	0x62,R24
(0306) 		  DELAY100
    001F0 2422      CLR	R2
    001F1 2433      CLR	R3
    001F2 9230 02AE STS	Tt+1,R3
    001F4 9220 02AD STS	Tt,R2
    001F6 C009      RJMP	0x0200
    001F7 9180 02AD LDS	R24,Tt
    001F9 9190 02AE LDS	R25,Tt+1
    001FB 9601      ADIW	R24,1
    001FC 9390 02AE STS	Tt+1,R25
    001FE 9380 02AD STS	Tt,R24
    00200 9180 02AD LDS	R24,Tt
    00202 9190 02AE LDS	R25,Tt+1
    00204 328A      CPI	R24,0x2A
    00205 E0E0      LDI	R30,0
    00206 079E      CPC	R25,R30
    00207 F378      BCS	0x01F7
(0307) 		  PWM2_L
    00208 9180 0061 LDS	R24,0x61
    0020A 6084      ORI	R24,4
    0020B 9380 0061 STS	0x61,R24
    0020D 9180 0062 LDS	R24,0x62
    0020F 7F8B      ANDI	R24,0xFB
    00210 9380 0062 STS	0x62,R24
(0308) 		  DELAY100
    00212 2422      CLR	R2
    00213 2433      CLR	R3
    00214 9230 02AE STS	Tt+1,R3
    00216 9220 02AD STS	Tt,R2
    00218 C009      RJMP	0x0222
    00219 9180 02AD LDS	R24,Tt
    0021B 9190 02AE LDS	R25,Tt+1
    0021D 9601      ADIW	R24,1
    0021E 9390 02AE STS	Tt+1,R25
    00220 9380 02AD STS	Tt,R24
    00222 9180 02AD LDS	R24,Tt
    00224 9190 02AE LDS	R25,Tt+1
    00226 328A      CPI	R24,0x2A
    00227 E0E0      LDI	R30,0
    00228 079E      CPC	R25,R30
    00229 F378      BCS	0x0219
    0022A 9563      INC	R22
    0022B 316E      CPI	R22,0x1E
    0022C F408      BCC	0x022E
    0022D CFB8      RJMP	0x01E6
(0309) 		 }
(0310)  
(0311)     	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
    0022E 2744      CLR	R20
    0022F C052      RJMP	0x0282
(0312) 		 {
(0313) 	       PWM2_L
    00230 9180 0061 LDS	R24,0x61
    00232 6084      ORI	R24,4
    00233 9380 0061 STS	0x61,R24
    00235 9180 0062 LDS	R24,0x62
    00237 7F8B      ANDI	R24,0xFB
    00238 9380 0062 STS	0x62,R24
(0314) 		   for(b=0;b<(200-c);b++)
    0023A 2766      CLR	R22
    0023B C00C      RJMP	0x0248
(0315) 		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    0023C 0000      NOP
    0023D 0000      NOP
    0023E 0000      NOP
    0023F 0000      NOP
    00240 0000      NOP
    00241 0000      NOP
    00242 0000      NOP
    00243 0000      NOP
    00244 0000      NOP
    00245 0000      NOP
    00246 0000      NOP
    00247 9563      INC	R22
    00248 2E24      MOV	R2,R20
    00249 2433      CLR	R3
    0024A EC88      LDI	R24,0xC8
    0024B E090      LDI	R25,0
    0024C 012C      MOVW	R4,R24
    0024D 1842      SUB	R4,R2
    0024E 0853      SBC	R5,R3
    0024F 2E26      MOV	R2,R22
    00250 2433      CLR	R3
    00251 1424      CP	R2,R4
    00252 0435      CPC	R3,R5
    00253 F344      BLT	0x023C
(0316) 			
(0317) 	       if(Motor2Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
    00254 9020 0331 LDS	R2,Motor2Status
    00256 9030 0332 LDS	R3,Motor2Status+1
    00258 FC25      SBRC	R2,5
    00259 C00B      RJMP	0x0265
(0318) 		   {PWM2_H}
    0025A 9180 0061 LDS	R24,0x61
    0025C 6084      ORI	R24,4
    0025D 9380 0061 STS	0x61,R24
    0025F 9180 0062 LDS	R24,0x62
    00261 6084      ORI	R24,4
    00262 9380 0062 STS	0x62,R24
    00264 C00A      RJMP	0x026F
(0319) 		   else 
(0320) 		   {PWM2_L}
    00265 9180 0061 LDS	R24,0x61
    00267 6084      ORI	R24,4
    00268 9380 0061 STS	0x61,R24
    0026A 9180 0062 LDS	R24,0x62
    0026C 7F8B      ANDI	R24,0xFB
    0026D 9380 0062 STS	0x62,R24
(0321) 		   
(0322) 	       for(b=0;b<(c+50);b++)
    0026F 2766      CLR	R22
    00270 C00C      RJMP	0x027D
(0323) 		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
    00271 0000      NOP
    00272 0000      NOP
    00273 0000      NOP
    00274 0000      NOP
    00275 0000      NOP
    00276 0000      NOP
    00277 0000      NOP
    00278 0000      NOP
    00279 0000      NOP
    0027A 0000      NOP
    0027B 0000      NOP
    0027C 9563      INC	R22
    0027D 2F84      MOV	R24,R20
    0027E 5C8E      SUBI	R24,0xCE
    0027F 1768      CP	R22,R24
    00280 F380      BCS	0x0271
    00281 9543      INC	R20
    00282 3C48      CPI	R20,0xC8
    00283 F408      BCC	0x0285
    00284 CFAB      RJMP	0x0230
(0324) 		 }	
(0325) 	}
    00285 9169      LD	R22,Y+
    00286 9149      LD	R20,Y+
    00287 9508      RET
_SampleADC:
  adcl                 --> Y,+0
  c                    --> R10
  ADdata               --> R12
  ch                   --> R10
    00288 940E 1F40 CALL	push_xgsetF03C
    0028A 2EA0      MOV	R10,R16
    0028B 9724      SBIW	R28,4
(0326) }
(0327) 
(0328)    
(0329) unsigned char SampleADC(unsigned char ch)//耗时约5ms
(0330) {     unsigned char c;
(0331)       unsigned long adcl;
(0332) 	  unsigned int ADdata;
(0333) 
(0334) 	  ADMUX  = ch;//片外基准，选择单端输入通道 
    0028C B8A7      OUT	0x07,R10
(0335) 	  ADCSRA =0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    0028D EC83      LDI	R24,0xC3
    0028E B986      OUT	0x06,R24
(0336)    
(0337) 	  //第一次采样值不要
(0338) 	  for(ADdata=0;ADdata<100;ADdata++);
    0028F 24CC      CLR	R12
    00290 24DD      CLR	R13
    00291 C003      RJMP	0x0295
    00292 01C6      MOVW	R24,R12
    00293 9601      ADIW	R24,1
    00294 016C      MOVW	R12,R24
    00295 01C6      MOVW	R24,R12
    00296 3684      CPI	R24,0x64
    00297 E0E0      LDI	R30,0
    00298 079E      CPC	R25,R30
    00299 F3C0      BCS	0x0292
(0339) 	  while((ADCSRA&0x40)==0x40);//等待转换完成
    0029A B186      IN	R24,0x06
    0029B 7480      ANDI	R24,0x40
    0029C 3480      CPI	R24,0x40
    0029D F3E1      BEQ	0x029A
(0340) 	  ADdata=ADCL;
    0029E B0C4      IN	R12,0x04
    0029F 24DD      CLR	R13
(0341) 	  ADdata=ADCH;  
    002A0 B0C5      IN	R12,0x05
    002A1 24DD      CLR	R13
(0342)   
(0343) 	  adcl=0;
    002A2 E080      LDI	R24,0
    002A3 8388      ST	Y,R24
    002A4 8389      STD	Y+1,R24
    002A5 838A      STD	Y+2,R24
    002A6 838B      STD	Y+3,R24
(0344) 	  for(c=0;c<32;c++)//32次值取平均
    002A7 24AA      CLR	R10
    002A8 C02C      RJMP	0x02D5
(0345) 	  {
(0346) 	   ADCSRA = 0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
    002A9 EC83      LDI	R24,0xC3
    002AA B986      OUT	0x06,R24
(0347) 	   for(ADdata=0;ADdata<100;ADdata++);
    002AB 24CC      CLR	R12
    002AC 24DD      CLR	R13
    002AD C003      RJMP	0x02B1
    002AE 01C6      MOVW	R24,R12
    002AF 9601      ADIW	R24,1
    002B0 016C      MOVW	R12,R24
    002B1 01C6      MOVW	R24,R12
    002B2 3684      CPI	R24,0x64
    002B3 E0E0      LDI	R30,0
    002B4 079E      CPC	R25,R30
    002B5 F3C0      BCS	0x02AE
(0348) 	   while((ADCSRA&0x40)==0x40);//等待转换完成	
    002B6 B186      IN	R24,0x06
    002B7 7480      ANDI	R24,0x40
    002B8 3480      CPI	R24,0x40
    002B9 F3E1      BEQ	0x02B6
(0349) 	   ADdata=ADCL;   
    002BA B0C4      IN	R12,0x04
    002BB 24DD      CLR	R13
(0350) 	   ADdata|=(ADCH<<8);
    002BC B025      IN	R2,0x05
    002BD 2433      CLR	R3
    002BE 2C32      MOV	R3,R2
    002BF 2422      CLR	R2
    002C0 28C2      OR	R12,R2
    002C1 28D3      OR	R13,R3
(0351) 	   ADdata&=0x03ff;//10位有效转换结果
    002C2 01C6      MOVW	R24,R12
    002C3 7093      ANDI	R25,3
    002C4 016C      MOVW	R12,R24
(0352) 	   adcl+=ADdata;
    002C5 011C      MOVW	R2,R24
    002C6 2444      CLR	R4
    002C7 2455      CLR	R5
    002C8 8068      LD	R6,Y
    002C9 8079      LDD	R7,Y+1
    002CA 808A      LDD	R8,Y+2
    002CB 809B      LDD	R9,Y+3
    002CC 0C62      ADD	R6,R2
    002CD 1C73      ADC	R7,R3
    002CE 1C84      ADC	R8,R4
    002CF 1C95      ADC	R9,R5
    002D0 8268      ST	Y,R6
    002D1 8279      STD	Y+1,R7
    002D2 828A      STD	Y+2,R8
    002D3 829B      STD	Y+3,R9
    002D4 94A3      INC	R10
    002D5 2D8A      MOV	R24,R10
    002D6 3280      CPI	R24,0x20
    002D7 F288      BCS	0x02A9
(0353) 	  }
(0354) 
(0355) 	  adcl>>=7;//除以32，再除以4，相当于8位AD
    002D8 E087      LDI	R24,7
    002D9 E090      LDI	R25,0
    002DA 8108      LD	R16,Y
    002DB 8119      LDD	R17,Y+1
    002DC 812A      LDD	R18,Y+2
    002DD 813B      LDD	R19,Y+3
    002DE 938A      ST	-Y,R24
    002DF 940E 1F6E CALL	lsr32
    002E1 8308      ST	Y,R16
    002E2 8319      STD	Y+1,R17
    002E3 832A      STD	Y+2,R18
    002E4 833B      STD	Y+3,R19
(0356) 	  return (adcl&0x000000ff);//取8位有效位
    002E5 EF4F      LDI	R20,0xFF
    002E6 E050      LDI	R21,0
    002E7 E060      LDI	R22,0
    002E8 E070      LDI	R23,0
    002E9 8028      LD	R2,Y
    002EA 8039      LDD	R3,Y+1
    002EB 804A      LDD	R4,Y+2
    002EC 805B      LDD	R5,Y+3
    002ED 2224      AND	R2,R20
    002EE 2235      AND	R3,R21
    002EF 2246      AND	R4,R22
    002F0 2257      AND	R5,R23
    002F1 2D02      MOV	R16,R2
    002F2 9624      ADIW	R28,4
    002F3 940C 1F49 JMP	pop_xgsetF03C
_CheckMotor:
  n                    --> R12
  f                    --> Y,+0
  t                    --> R10
    002F5 940E 1F40 CALL	push_xgsetF03C
    002F7 0158      MOVW	R10,R16
    002F8 9724      SBIW	R28,4
(0357) }
(0358) 
(0359) void CheckMotor(unsigned int t)//电机不转时耗时5us，最大定时8388ms
(0360) {   
(0361)     float f;
(0362)     unsigned int n;
(0363)     TCCR1B = 0x00; //stop
    002F9 2422      CLR	R2
    002FA BC2E      OUT	0x2E,R2
(0364) 	if(t>8388)
    002FB EC84      LDI	R24,0xC4
    002FC E290      LDI	R25,0x20
    002FD 158A      CP	R24,R10
    002FE 059B      CPC	R25,R11
    002FF F408      BCC	0x0301
(0365) 	   t=8388;
    00300 015C      MOVW	R10,R24
(0366) 	f=t;
    00301 0185      MOVW	R16,R10
    00302 940E 1FAC CALL	uint2fp
    00304 8308      ST	Y,R16
    00305 8319      STD	Y+1,R17
    00306 832A      STD	Y+2,R18
    00307 833B      STD	Y+3,R19
(0367) 	f*=7.8125;
    00308 E80C      LDI	R16,0x8C
    00309 E010      LDI	R17,0
    0030A 940E 1F16 CALL	elpm32
    0030C 01CE      MOVW	R24,R28
    0030D 939A      ST	-Y,R25
    0030E 938A      ST	-Y,R24
    0030F 940E 20AF CALL	fpmule1
    00311 8308      ST	Y,R16
    00312 8319      STD	Y+1,R17
    00313 832A      STD	Y+2,R18
    00314 833B      STD	Y+3,R19
(0368) 	n=f;
    00315 8108      LD	R16,Y
    00316 8119      LDD	R17,Y+1
    00317 812A      LDD	R18,Y+2
    00318 813B      LDD	R19,Y+3
    00319 940E 1F7A CALL	fpint
    0031B 0168      MOVW	R12,R16
(0369)     TCNT1 = 65536-n;   
    0031C 0116      MOVW	R2,R12
    0031D 2444      CLR	R4
    0031E 2455      CLR	R5
    0031F E040      LDI	R20,0
    00320 E050      LDI	R21,0
    00321 E061      LDI	R22,1
    00322 E070      LDI	R23,0
    00323 1942      SUB	R20,R2
    00324 0953      SBC	R21,R3
    00325 0964      SBC	R22,R4
    00326 0975      SBC	R23,R5
    00327 BD5D      OUT	0x2D,R21
    00328 BD4C      OUT	0x2C,R20
(0370)  	TCCR1B = 0x05; //1024分频
    00329 E085      LDI	R24,5
    0032A BD8E      OUT	0x2E,R24
(0371) 	TIFR|=0x04; //清定时器1中断标志
    0032B B786      IN	R24,0x36
    0032C 6084      ORI	R24,4
    0032D BF86      OUT	0x36,R24
    0032E C140      RJMP	0x046F
(0372) 	while((TIFR&0x04)==0x00) 
(0373)    {
(0374)    if(PWM1_PIN==1)//电机运行时才实时检测电流，否则电流保存最后一次的测试值
    0032F B389      IN	R24,0x19
    00330 7082      ANDI	R24,2
    00331 9586      LSR	R24
    00332 3081      CPI	R24,1
    00333 F009      BEQ	0x0335
    00334 C070      RJMP	0x03A5
(0375)    {
(0376)     Motor1Status.s.ThisCurrent=SampleADC(7);
    00335 E007      LDI	R16,7
    00336 DF51      RCALL	_SampleADC
    00337 2F80      MOV	R24,R16
    00338 2799      CLR	R25
    00339 7090      ANDI	R25,0
    0033A 2F98      MOV	R25,R24
    0033B 2788      CLR	R24
    0033C 7080      ANDI	R24,0
    0033D 91E0 0333 LDS	R30,Motor1Status
    0033F 91F0 0334 LDS	R31,Motor1Status+1
    00341 70F0      ANDI	R31,0
    00342 2BE8      OR	R30,R24
    00343 2BF9      OR	R31,R25
    00344 93F0 0334 STS	Motor1Status+1,R31
    00346 93E0 0333 STS	Motor1Status,R30
(0377)     if(Motor1Status.s.ThisCurrent>Motor1Thr)//过流关电机
    00348 9020 0330 LDS	R2,Motor1Thr
    0034A 2433      CLR	R3
    0034B 01CF      MOVW	R24,R30
    0034C 2F89      MOV	R24,R25
    0034D 2799      CLR	R25
    0034E 7090      ANDI	R25,0
    0034F 1628      CP	R2,R24
    00350 0639      CPC	R3,R25
    00351 F518      BCC	0x0375
(0378)     {
(0379) 	 MOTORSTOP//关电机
    00352 B38A      IN	R24,0x1A
    00353 6087      ORI	R24,7
    00354 BB8A      OUT	0x1A,R24
    00355 B38B      IN	R24,0x1B
    00356 7F8D      ANDI	R24,0xFD
    00357 BB8B      OUT	0x1B,R24
    00358 B38B      IN	R24,0x1B
    00359 7F88      ANDI	R24,0xF8
    0035A BB8B      OUT	0x1B,R24
    0035B 9180 0061 LDS	R24,0x61
    0035D 6087      ORI	R24,7
    0035E 9380 0061 STS	0x61,R24
    00360 9180 0062 LDS	R24,0x62
    00362 7F8B      ANDI	R24,0xFB
    00363 9380 0062 STS	0x62,R24
    00365 9180 0062 LDS	R24,0x62
    00367 7F88      ANDI	R24,0xF8
    00368 9380 0062 STS	0x62,R24
    0036A 9ABF      SBI	0x17,7
    0036B B388      IN	R24,0x18
    0036C 778F      ANDI	R24,0x7F
    0036D BB88      OUT	0x18,R24
(0380)      Motor1Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
    0036E 01CF      MOVW	R24,R30
    0036F 6180      ORI	R24,0x10
    00370 9390 0334 STS	Motor1Status+1,R25
    00372 9380 0333 STS	Motor1Status,R24
(0381) 	}
    00374 C030      RJMP	0x03A5
(0382) 	else if(Motor1Status.s.ThisCurrent<20)//断路关电机，电流小于26mA认为是断路
    00375 9180 0333 LDS	R24,Motor1Status
    00377 9190 0334 LDS	R25,Motor1Status+1
    00379 2F89      MOV	R24,R25
    0037A 2799      CLR	R25
    0037B 7090      ANDI	R25,0
    0037C 3184      CPI	R24,0x14
    0037D E0E0      LDI	R30,0
    0037E 079E      CPC	R25,R30
    0037F F528      BCC	0x03A5
(0383) 	{
(0384) 	 MOTORSTOP//关电机
    00380 B38A      IN	R24,0x1A
    00381 6087      ORI	R24,7
    00382 BB8A      OUT	0x1A,R24
    00383 B38B      IN	R24,0x1B
    00384 7F8D      ANDI	R24,0xFD
    00385 BB8B      OUT	0x1B,R24
    00386 B38B      IN	R24,0x1B
    00387 7F88      ANDI	R24,0xF8
    00388 BB8B      OUT	0x1B,R24
    00389 9180 0061 LDS	R24,0x61
    0038B 6087      ORI	R24,7
    0038C 9380 0061 STS	0x61,R24
    0038E 9180 0062 LDS	R24,0x62
    00390 7F8B      ANDI	R24,0xFB
    00391 9380 0062 STS	0x62,R24
    00393 9180 0062 LDS	R24,0x62
    00395 7F88      ANDI	R24,0xF8
    00396 9380 0062 STS	0x62,R24
    00398 9ABF      SBI	0x17,7
    00399 B388      IN	R24,0x18
    0039A 778F      ANDI	R24,0x7F
    0039B BB88      OUT	0x18,R24
(0385)      Motor1Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
    0039C 9180 0333 LDS	R24,Motor1Status
    0039E 9190 0334 LDS	R25,Motor1Status+1
    003A0 6084      ORI	R24,4
    003A1 9390 0334 STS	Motor1Status+1,R25
    003A3 9380 0333 STS	Motor1Status,R24
(0386) 	}
(0387)    }
(0388)     Motor1Status.s.PWM=PWM1_PIN; 
    003A5 B389      IN	R24,0x19
    003A6 2799      CLR	R25
    003A7 7082      ANDI	R24,2
    003A8 7090      ANDI	R25,0
    003A9 9595      ASR	R25
    003AA 9587      ROR	R24
    003AB 7081      ANDI	R24,1
    003AC 7090      ANDI	R25,0
    003AD 91E0 0333 LDS	R30,Motor1Status
    003AF 91F0 0334 LDS	R31,Motor1Status+1
    003B1 7FEE      ANDI	R30,0xFE
    003B2 2BE8      OR	R30,R24
    003B3 2BF9      OR	R31,R25
    003B4 93F0 0334 STS	Motor1Status+1,R31
    003B6 93E0 0333 STS	Motor1Status,R30
(0389) 	Motor1Status.s.DIR=DIR1_PIN;
    003B8 B389      IN	R24,0x19
    003B9 2799      CLR	R25
    003BA 7084      ANDI	R24,4
    003BB 7090      ANDI	R25,0
    003BC 9595      ASR	R25
    003BD 9587      ROR	R24
    003BE 9595      ASR	R25
    003BF 9587      ROR	R24
    003C0 7081      ANDI	R24,1
    003C1 7090      ANDI	R25,0
    003C2 0F88      LSL	R24
    003C3 1F99      ROL	R25
    003C4 7082      ANDI	R24,2
    003C5 7090      ANDI	R25,0
    003C6 7FED      ANDI	R30,0xFD
    003C7 2BE8      OR	R30,R24
    003C8 2BF9      OR	R31,R25
    003C9 93F0 0334 STS	Motor1Status+1,R31
    003CB 93E0 0333 STS	Motor1Status,R30
(0390) 	 
(0391) 		  	   
(0392)    if(PWM2_PIN==1)//电机运行时才实时检测电流，否则电流保存最后一次的测试值
    003CD B180      IN	R24,0x00
    003CE 7084      ANDI	R24,4
    003CF 9586      LSR	R24
    003D0 9586      LSR	R24
    003D1 3081      CPI	R24,1
    003D2 F009      BEQ	0x03D4
    003D3 C070      RJMP	0x0444
(0393)    {
(0394) 	Motor2Status.s.ThisCurrent=SampleADC(6);
    003D4 E006      LDI	R16,6
    003D5 DEB2      RCALL	_SampleADC
    003D6 2F80      MOV	R24,R16
    003D7 2799      CLR	R25
    003D8 7090      ANDI	R25,0
    003D9 2F98      MOV	R25,R24
    003DA 2788      CLR	R24
    003DB 7080      ANDI	R24,0
    003DC 91E0 0331 LDS	R30,Motor2Status
    003DE 91F0 0332 LDS	R31,Motor2Status+1
    003E0 70F0      ANDI	R31,0
    003E1 2BE8      OR	R30,R24
    003E2 2BF9      OR	R31,R25
    003E3 93F0 0332 STS	Motor2Status+1,R31
    003E5 93E0 0331 STS	Motor2Status,R30
(0395)     if(Motor2Status.s.ThisCurrent>Motor2Thr)//过流关电机
    003E7 9020 032F LDS	R2,Motor2Thr
    003E9 2433      CLR	R3
    003EA 01CF      MOVW	R24,R30
    003EB 2F89      MOV	R24,R25
    003EC 2799      CLR	R25
    003ED 7090      ANDI	R25,0
    003EE 1628      CP	R2,R24
    003EF 0639      CPC	R3,R25
    003F0 F518      BCC	0x0414
(0396)     {
(0397) 	 MOTORSTOP//关电机
    003F1 B38A      IN	R24,0x1A
    003F2 6087      ORI	R24,7
    003F3 BB8A      OUT	0x1A,R24
    003F4 B38B      IN	R24,0x1B
    003F5 7F8D      ANDI	R24,0xFD
    003F6 BB8B      OUT	0x1B,R24
    003F7 B38B      IN	R24,0x1B
    003F8 7F88      ANDI	R24,0xF8
    003F9 BB8B      OUT	0x1B,R24
    003FA 9180 0061 LDS	R24,0x61
    003FC 6087      ORI	R24,7
    003FD 9380 0061 STS	0x61,R24
    003FF 9180 0062 LDS	R24,0x62
    00401 7F8B      ANDI	R24,0xFB
    00402 9380 0062 STS	0x62,R24
    00404 9180 0062 LDS	R24,0x62
    00406 7F88      ANDI	R24,0xF8
    00407 9380 0062 STS	0x62,R24
    00409 9ABF      SBI	0x17,7
    0040A B388      IN	R24,0x18
    0040B 778F      ANDI	R24,0x7F
    0040C BB88      OUT	0x18,R24
(0398)      Motor2Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
    0040D 01CF      MOVW	R24,R30
    0040E 6180      ORI	R24,0x10
    0040F 9390 0332 STS	Motor2Status+1,R25
    00411 9380 0331 STS	Motor2Status,R24
(0399) 	} 
    00413 C030      RJMP	0x0444
(0400) 	else if(Motor2Status.s.ThisCurrent<20) //断路关电机，电流小于26mA认为是断路
    00414 9180 0331 LDS	R24,Motor2Status
    00416 9190 0332 LDS	R25,Motor2Status+1
    00418 2F89      MOV	R24,R25
    00419 2799      CLR	R25
    0041A 7090      ANDI	R25,0
    0041B 3184      CPI	R24,0x14
    0041C E0E0      LDI	R30,0
    0041D 079E      CPC	R25,R30
    0041E F528      BCC	0x0444
(0401) 	{
(0402) 	 MOTORSTOP//关电机
    0041F B38A      IN	R24,0x1A
    00420 6087      ORI	R24,7
    00421 BB8A      OUT	0x1A,R24
    00422 B38B      IN	R24,0x1B
    00423 7F8D      ANDI	R24,0xFD
    00424 BB8B      OUT	0x1B,R24
    00425 B38B      IN	R24,0x1B
    00426 7F88      ANDI	R24,0xF8
    00427 BB8B      OUT	0x1B,R24
    00428 9180 0061 LDS	R24,0x61
    0042A 6087      ORI	R24,7
    0042B 9380 0061 STS	0x61,R24
    0042D 9180 0062 LDS	R24,0x62
    0042F 7F8B      ANDI	R24,0xFB
    00430 9380 0062 STS	0x62,R24
    00432 9180 0062 LDS	R24,0x62
    00434 7F88      ANDI	R24,0xF8
    00435 9380 0062 STS	0x62,R24
    00437 9ABF      SBI	0x17,7
    00438 B388      IN	R24,0x18
    00439 778F      ANDI	R24,0x7F
    0043A BB88      OUT	0x18,R24
(0403)      Motor2Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
    0043B 9180 0331 LDS	R24,Motor2Status
    0043D 9190 0332 LDS	R25,Motor2Status+1
    0043F 6084      ORI	R24,4
    00440 9390 0332 STS	Motor2Status+1,R25
    00442 9380 0331 STS	Motor2Status,R24
(0404) 	}
(0405)    }
(0406)    Motor2Status.s.PWM=PWM2_PIN; 
    00444 B180      IN	R24,0x00
    00445 2799      CLR	R25
    00446 7084      ANDI	R24,4
    00447 7090      ANDI	R25,0
    00448 9595      ASR	R25
    00449 9587      ROR	R24
    0044A 9595      ASR	R25
    0044B 9587      ROR	R24
    0044C 7081      ANDI	R24,1
    0044D 7090      ANDI	R25,0
    0044E 91E0 0331 LDS	R30,Motor2Status
    00450 91F0 0332 LDS	R31,Motor2Status+1
    00452 7FEE      ANDI	R30,0xFE
    00453 2BE8      OR	R30,R24
    00454 2BF9      OR	R31,R25
    00455 93F0 0332 STS	Motor2Status+1,R31
    00457 93E0 0331 STS	Motor2Status,R30
(0407)    Motor2Status.s.DIR=DIR2_PIN;  
    00459 B180      IN	R24,0x00
    0045A 2799      CLR	R25
    0045B 7081      ANDI	R24,1
    0045C 7090      ANDI	R25,0
    0045D 7081      ANDI	R24,1
    0045E 7090      ANDI	R25,0
    0045F 0F88      LSL	R24
    00460 1F99      ROL	R25
    00461 7082      ANDI	R24,2
    00462 7090      ANDI	R25,0
    00463 7FED      ANDI	R30,0xFD
    00464 2BE8      OR	R30,R24
    00465 2BF9      OR	R31,R25
    00466 93F0 0332 STS	Motor2Status+1,R31
    00468 93E0 0331 STS	Motor2Status,R30
(0408)    if(t==0){break;}//不定时则检测一次电机状态后直接跳出
    0046A 20AA      TST	R10
    0046B F419      BNE	0x046F
    0046C 20BB      TST	R11
    0046D F409      BNE	0x046F
    0046E C003      RJMP	0x0472
    0046F B626      IN	R2,0x36
    00470 FE22      SBRS	R2,2
    00471 CEBD      RJMP	0x032F
(0409)    } 
(0410)    TCCR1B = 0x00; //stop
    00472 2422      CLR	R2
    00473 BC2E      OUT	0x2E,R2
    00474 9624      ADIW	R28,4
    00475 940C 1F49 JMP	pop_xgsetF03C
(0411) }
(0412) 
(0413) 
(0414) void Start(void)
(0415) {
(0416)  InitialIO();
_Start:
    00477 DBF3      RCALL	_InitialIO
(0417)  uart0_init();
    00478 DC0A      RCALL	_uart0_init
(0418)  
(0419)  MOTORSTOP//关电机
    00479 B38A      IN	R24,0x1A
    0047A 6087      ORI	R24,7
    0047B BB8A      OUT	0x1A,R24
    0047C B38B      IN	R24,0x1B
    0047D 7F8D      ANDI	R24,0xFD
    0047E BB8B      OUT	0x1B,R24
    0047F B38B      IN	R24,0x1B
    00480 7F88      ANDI	R24,0xF8
    00481 BB8B      OUT	0x1B,R24
    00482 9180 0061 LDS	R24,0x61
    00484 6087      ORI	R24,7
    00485 9380 0061 STS	0x61,R24
    00487 9180 0062 LDS	R24,0x62
    00489 7F8B      ANDI	R24,0xFB
    0048A 9380 0062 STS	0x62,R24
    0048C 9180 0062 LDS	R24,0x62
    0048E 7F88      ANDI	R24,0xF8
    0048F 9380 0062 STS	0x62,R24
    00491 9ABF      SBI	0x17,7
    00492 B388      IN	R24,0x18
    00493 778F      ANDI	R24,0x7F
    00494 BB88      OUT	0x18,R24
(0420)  BREAKE1_L//放开刹车
    00495 9AD0      SBI	0x1A,0
    00496 B38B      IN	R24,0x1B
    00497 7F8E      ANDI	R24,0xFE
    00498 BB8B      OUT	0x1B,R24
(0421)  BREAKE2_L//放开刹车
    00499 9180 0061 LDS	R24,0x61
    0049B 6082      ORI	R24,2
    0049C 9380 0061 STS	0x61,R24
    0049E 9180 0062 LDS	R24,0x62
    004A0 7F8D      ANDI	R24,0xFD
    004A1 9380 0062 STS	0x62,R24
(0422)  
(0423)  Motor1Status.s.PWM=PWM1_PIN; 
    004A3 B389      IN	R24,0x19
    004A4 2799      CLR	R25
    004A5 7082      ANDI	R24,2
    004A6 7090      ANDI	R25,0
    004A7 9595      ASR	R25
    004A8 9587      ROR	R24
    004A9 7081      ANDI	R24,1
    004AA 7090      ANDI	R25,0
    004AB 91E0 0333 LDS	R30,Motor1Status
    004AD 91F0 0334 LDS	R31,Motor1Status+1
    004AF 7FEE      ANDI	R30,0xFE
    004B0 2BE8      OR	R30,R24
    004B1 2BF9      OR	R31,R25
    004B2 93F0 0334 STS	Motor1Status+1,R31
    004B4 93E0 0333 STS	Motor1Status,R30
(0424)  Motor1Status.s.DIR=DIR1_PIN;
    004B6 B389      IN	R24,0x19
    004B7 2799      CLR	R25
    004B8 7084      ANDI	R24,4
    004B9 7090      ANDI	R25,0
    004BA 9595      ASR	R25
    004BB 9587      ROR	R24
    004BC 9595      ASR	R25
    004BD 9587      ROR	R24
    004BE 7081      ANDI	R24,1
    004BF 7090      ANDI	R25,0
    004C0 0F88      LSL	R24
    004C1 1F99      ROL	R25
    004C2 7082      ANDI	R24,2
    004C3 7090      ANDI	R25,0
    004C4 7FED      ANDI	R30,0xFD
    004C5 2BE8      OR	R30,R24
    004C6 2BF9      OR	R31,R25
    004C7 93F0 0334 STS	Motor1Status+1,R31
    004C9 93E0 0333 STS	Motor1Status,R30
(0425)  Motor1Status.s.BrokenStop=0;
    004CB 01CF      MOVW	R24,R30
    004CC 7F8B      ANDI	R24,0xFB
    004CD 9390 0334 STS	Motor1Status+1,R25
    004CF 9380 0333 STS	Motor1Status,R24
(0426)  Motor1Status.s.CommandStop=0;
    004D1 7F87      ANDI	R24,0xF7
    004D2 9390 0334 STS	Motor1Status+1,R25
    004D4 9380 0333 STS	Motor1Status,R24
(0427)  Motor1Status.s.OverCurrent=0;
    004D6 7E8F      ANDI	R24,0xEF
    004D7 9390 0334 STS	Motor1Status+1,R25
    004D9 9380 0333 STS	Motor1Status,R24
(0428)  Motor1Status.s.UnderVoltage=0;
    004DB 7D8F      ANDI	R24,0xDF
    004DC 9390 0334 STS	Motor1Status+1,R25
    004DE 9380 0333 STS	Motor1Status,R24
(0429)  Motor1Status.s.StartResult=0;
    004E0 738F      ANDI	R24,0x3F
    004E1 9390 0334 STS	Motor1Status+1,R25
    004E3 9380 0333 STS	Motor1Status,R24
(0430)  Motor1Status.s.ThisCurrent=0;
    004E5 7090      ANDI	R25,0
    004E6 9390 0334 STS	Motor1Status+1,R25
    004E8 9380 0333 STS	Motor1Status,R24
(0431)  
(0432)  Motor2Status.s.PWM=PWM2_PIN; 
    004EA B180      IN	R24,0x00
    004EB 2799      CLR	R25
    004EC 7084      ANDI	R24,4
    004ED 7090      ANDI	R25,0
    004EE 9595      ASR	R25
    004EF 9587      ROR	R24
    004F0 9595      ASR	R25
    004F1 9587      ROR	R24
    004F2 7081      ANDI	R24,1
    004F3 7090      ANDI	R25,0
    004F4 91E0 0331 LDS	R30,Motor2Status
    004F6 91F0 0332 LDS	R31,Motor2Status+1
    004F8 7FEE      ANDI	R30,0xFE
    004F9 2BE8      OR	R30,R24
    004FA 2BF9      OR	R31,R25
    004FB 93F0 0332 STS	Motor2Status+1,R31
    004FD 93E0 0331 STS	Motor2Status,R30
(0433)  Motor2Status.s.DIR=DIR2_PIN;
    004FF B180      IN	R24,0x00
    00500 2799      CLR	R25
    00501 7081      ANDI	R24,1
    00502 7090      ANDI	R25,0
    00503 7081      ANDI	R24,1
    00504 7090      ANDI	R25,0
    00505 0F88      LSL	R24
    00506 1F99      ROL	R25
    00507 7082      ANDI	R24,2
    00508 7090      ANDI	R25,0
    00509 7FED      ANDI	R30,0xFD
    0050A 2BE8      OR	R30,R24
    0050B 2BF9      OR	R31,R25
    0050C 93F0 0332 STS	Motor2Status+1,R31
    0050E 93E0 0331 STS	Motor2Status,R30
(0434)  Motor2Status.s.BrokenStop=0;
    00510 01CF      MOVW	R24,R30
    00511 7F8B      ANDI	R24,0xFB
    00512 9390 0332 STS	Motor2Status+1,R25
    00514 9380 0331 STS	Motor2Status,R24
(0435)  Motor2Status.s.CommandStop=0;
    00516 7F87      ANDI	R24,0xF7
    00517 9390 0332 STS	Motor2Status+1,R25
    00519 9380 0331 STS	Motor2Status,R24
(0436)  Motor2Status.s.OverCurrent=0;
    0051B 7E8F      ANDI	R24,0xEF
    0051C 9390 0332 STS	Motor2Status+1,R25
    0051E 9380 0331 STS	Motor2Status,R24
(0437)  Motor2Status.s.UnderVoltage=0;
    00520 7D8F      ANDI	R24,0xDF
    00521 9390 0332 STS	Motor2Status+1,R25
    00523 9380 0331 STS	Motor2Status,R24
(0438)  Motor2Status.s.StartResult=0;
    00525 738F      ANDI	R24,0x3F
    00526 9390 0332 STS	Motor2Status+1,R25
    00528 9380 0331 STS	Motor2Status,R24
(0439)  Motor2Status.s.ThisCurrent=0;
    0052A 7090      ANDI	R25,0
    0052B 9390 0332 STS	Motor2Status+1,R25
    0052D 9380 0331 STS	Motor2Status,R24
(0440)  
(0441)  IntFlag=0;//无接收帧中断
    0052F 2422      CLR	R2
    00530 9220 02AF STS	IntFlag,R2
(0442)  DataFlag=0;//无标定系数下发 
    00532 2433      CLR	R3
    00533 9230 02B2 STS	DataFlag+1,R3
    00535 9220 02B1 STS	DataFlag,R2
(0443)  coeff_len=0;
    00537 9230 011D STS	coeff_len+1,R3
    00539 9220 011C STS	coeff_len,R2
(0444)  coeff_count=0;//标定系数计数
    0053B 9230 011B STS	coeff_count+1,R3
    0053D 9220 011A STS	coeff_count,R2
(0445)  
(0446)  ACSR|=0x10;//清模拟比较器中断标志
    0053F 9A44      SBI	0x08,4
(0447)  ACSR=0x03;//开模拟比较器    
    00540 E083      LDI	R24,3
    00541 B988      OUT	0x08,R24
(0448)  ACSR|=0x08;//开模拟比较器中断，任何时候都要进行欠压监测	
    00542 9A43      SBI	0x08,3
(0449)  ACSR|=0x10;//清模拟比较器中断标志	
    00543 9A44      SBI	0x08,4
(0450) 	
(0451) 
(0452)  EIFR|=0x08;//清INT3中断标志,每位控制一个中断，可控制8个中断
    00544 B788      IN	R24,0x38
    00545 6088      ORI	R24,0x8
    00546 BF88      OUT	0x38,R24
(0453)  EICRA|=0xc0; //INT3上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发
    00547 9180 006A LDS	R24,0x6A
    00549 6C80      ORI	R24,0xC0
    0054A 9380 006A STS	0x6A,R24
(0454)  EIMSK|=0x08;//使能INT3中断 ,每位控制一个中断，可控制8个中断
    0054C B789      IN	R24,0x39
    0054D 6088      ORI	R24,0x8
    0054E BF89      OUT	0x39,R24
(0455)  
(0456)  SREG=0x80;//总中断使能
    0054F E880      LDI	R24,0x80
    00550 BF8F      OUT	0x3F,R24
(0457)  
(0458)  M1_H
    00551 9A92      SBI	0x12,2
(0459)  CheckMotor(50);
    00552 E302      LDI	R16,0x32
    00553 E010      LDI	R17,0
    00554 DDA0      RCALL	_CheckMotor
(0460)  M1_L
    00555 B382      IN	R24,0x12
    00556 7F8B      ANDI	R24,0xFB
    00557 BB82      OUT	0x12,R24
    00558 9508      RET
_main:
  l                    --> Y,+1
  pt                   --> Y,+2
  mk                   --> Y,+2
  at                   --> Y,+2
  add                  --> Y,+2
  TestDataBlockCount   --> R12
  TestDataBlockIndex   --> R10
  i                    --> R10
    00559 9725      SBIW	R28,5
(0461)  
(0462) }
(0463) 
(0464) void main(void)
(0465) { 
(0466)   unsigned char i;
(0467)   unsigned int add,at,mk,pt;
(0468)   unsigned long l;
(0469)   unsigned int TestDataBlockIndex,TestDataBlockCount;
(0470)  
(0471)   Start();
    0055A DF1C      RCALL	_Start
(0472)   
(0473)   CheckMotor(50); 
    0055B E302      LDI	R16,0x32
    0055C E010      LDI	R17,0
    0055D DD97      RCALL	_CheckMotor
(0474)   
(0475)   Motor1Thr=EEPROM_read(0);
    0055E 2700      CLR	R16
    0055F 2711      CLR	R17
    00560 940E 1EB0 CALL	_EEPROM_read
    00562 9300 0330 STS	Motor1Thr,R16
(0476)   Motor2Thr=EEPROM_read(1);
    00564 E001      LDI	R16,1
    00565 E010      LDI	R17,0
    00566 940E 1EB0 CALL	_EEPROM_read
    00568 9300 032F STS	Motor2Thr,R16
(0477)   if(Motor1Thr<77) {Motor1Thr=77;}//堵转电流最小为100mA
    0056A 9180 0330 LDS	R24,Motor1Thr
    0056C 348D      CPI	R24,0x4D
    0056D F418      BCC	0x0571
    0056E E48D      LDI	R24,0x4D
    0056F 9380 0330 STS	Motor1Thr,R24
(0478)   if(Motor1Thr>154) {Motor1Thr=154;}//堵转电流最大为200mA
    00571 E98A      LDI	R24,0x9A
    00572 9020 0330 LDS	R2,Motor1Thr
    00574 1582      CP	R24,R2
    00575 F410      BCC	0x0578
    00576 9380 0330 STS	Motor1Thr,R24
(0479)   if(Motor2Thr<77) {Motor2Thr=77;}//堵转电流最小为100mA
    00578 9180 032F LDS	R24,Motor2Thr
    0057A 348D      CPI	R24,0x4D
    0057B F418      BCC	0x057F
    0057C E48D      LDI	R24,0x4D
    0057D 9380 032F STS	Motor2Thr,R24
(0480)   if(Motor2Thr>154) {Motor2Thr=154;}//堵转电流最大为200mA
    0057F E98A      LDI	R24,0x9A
    00580 9020 032F LDS	R2,Motor2Thr
    00582 1582      CP	R24,R2
    00583 F410      BCC	0x0586
    00584 9380 032F STS	Motor2Thr,R24
(0481)  
(0482)   //采集总线电压，判断是否进入存储状态  
(0483)   if(SampleADC(5)<45)//Cable端的电压低于30V 
    00586 E005      LDI	R16,5
    00587 DD00      RCALL	_SampleADC
    00588 2EA0      MOV	R10,R16
    00589 320D      CPI	R16,0x2D
    0058A F010      BCS	0x058D
    0058B 940C 1823 JMP	0x1823
(0484) 	{	  UCSR0B = 0x00;
    0058D 2422      CLR	R2
    0058E B82A      OUT	0x0A,R2
(0485) 	      PORTE&=0xFD;
    0058F B183      IN	R24,0x03
    00590 7F8D      ANDI	R24,0xFD
    00591 B983      OUT	0x03,R24
(0486) 		  DDRE|=0x02;
    00592 9A11      SBI	0x02,1
(0487) 		  PORTE&=0xFD;	 
    00593 B183      IN	R24,0x03
    00594 7F8D      ANDI	R24,0xFD
    00595 B983      OUT	0x03,R24
(0488) 		  while(1); 
    00596 CFFF      RJMP	0x0596
(0489) 	}
(0490) 	     
(0491) while(1)//若Cable端为高电压，则进入正常的通讯状态
(0492) { 
(0493)    CheckMotor(0);//实时进行电机过流检测
    00597 2700      CLR	R16
    00598 2711      CLR	R17
    00599 DD5B      RCALL	_CheckMotor
(0494) 
(0495)    if(IntFlag==2)//校验位错误，不上传任何响应，上位机按超时处理
    0059A 9180 02AF LDS	R24,IntFlag
    0059C 3082      CPI	R24,2
    0059D F459      BNE	0x05A9
(0496)    { 
(0497) 	IntFlag=0;//无命令帧
    0059E 2422      CLR	R2
    0059F 9220 02AF STS	IntFlag,R2
(0498) 	EIFR|=0x08;//清INT3中断标志
    005A1 B788      IN	R24,0x38
    005A2 6088      ORI	R24,0x8
    005A3 BF88      OUT	0x38,R24
(0499)     EIMSK|=0x08;//使能INT3中断	 
    005A4 B789      IN	R24,0x39
    005A5 6088      ORI	R24,0x8
    005A6 BF89      OUT	0x39,R24
(0500)    }
    005A7 940C 1823 JMP	0x1823
(0501)    else if(IntFlag==1)//接收到了正常命令帧
    005A9 9180 02AF LDS	R24,IntFlag
    005AB 3081      CPI	R24,1
    005AC F011      BEQ	0x05AF
    005AD 940C 1823 JMP	0x1823
(0502)    {
(0503) 	if(DataFlag)
    005AF 9020 02B1 LDS	R2,DataFlag
    005B1 9030 02B2 LDS	R3,DataFlag+1
    005B3 2022      TST	R2
    005B4 F419      BNE	0x05B8
    005B5 2033      TST	R3
    005B6 F409      BNE	0x05B8
    005B7 C4B8      RJMP	0x0A70
(0504)      { 		  
(0505) 	  coeffdata[coeff_count]=R_dat;
    005B8 E689      LDI	R24,0x69
    005B9 E091      LDI	R25,1
    005BA 91E0 011A LDS	R30,coeff_count
    005BC 91F0 011B LDS	R31,coeff_count+1
    005BE 0FE8      ADD	R30,R24
    005BF 1FF9      ADC	R31,R25
    005C0 9020 02CB LDS	R2,R_dat
    005C2 9030 02CC LDS	R3,R_dat+1
    005C4 8220      ST	Z,R2
(0506) 	  coeff_count++;	  
    005C5 9180 011A LDS	R24,coeff_count
    005C7 9190 011B LDS	R25,coeff_count+1
    005C9 9601      ADIW	R24,1
    005CA 9390 011B STS	coeff_count+1,R25
    005CC 9380 011A STS	coeff_count,R24
(0507)  
(0508) 	  if(coeff_count==coeff_len)
    005CE 9020 011C LDS	R2,coeff_len
    005D0 9030 011D LDS	R3,coeff_len+1
    005D2 1582      CP	R24,R2
    005D3 0593      CPC	R25,R3
    005D4 F011      BEQ	0x05D7
    005D5 940C 181A JMP	0x181A
(0509) 	  {
(0510) 		if(DataFlag==1)//下发压力温度系数
    005D7 9180 02B1 LDS	R24,DataFlag
    005D9 9190 02B2 LDS	R25,DataFlag+1
    005DB 3081      CPI	R24,1
    005DC E0E0      LDI	R30,0
    005DD 079E      CPC	R25,R30
    005DE F009      BEQ	0x05E0
    005DF C0E5      RJMP	0x06C5
(0511)    	    {
(0512) 		 Uart0TxData[0]=0xE8;
    005E0 EE88      LDI	R24,0xE8
    005E1 9380 011F STS	Uart0TxData,R24
(0513) 		 Uart0TxData[1]=0x40;
    005E3 E480      LDI	R24,0x40
    005E4 9380 0120 STS	Uart0TxData+1,R24
(0514) 		 Uart0TxData[2]=0x88;
    005E6 E888      LDI	R24,0x88
    005E7 9380 0121 STS	Uart0TxData+2,R24
(0515) 		 Uart0TxData[3]=0;//压力温度系数包0
    005E9 2422      CLR	R2
    005EA 9220 0122 STS	Uart0TxData+3,R2
(0516) 		 Uart0TxData[4]=0x21;
    005EC E281      LDI	R24,0x21
    005ED 9380 0123 STS	Uart0TxData+4,R24
(0517) 		 Uart0TxData[5]=0x22;
    005EF E282      LDI	R24,0x22
    005F0 9380 0124 STS	Uart0TxData+5,R24
(0518) 		 Uart0TxData[6]=0x23;
    005F2 E283      LDI	R24,0x23
    005F3 9380 0125 STS	Uart0TxData+6,R24
(0519) 		 Uart0TxData[7]=0x24;
    005F5 E284      LDI	R24,0x24
    005F6 9380 0126 STS	Uart0TxData+7,R24
(0520) 		 Uart0TxData[8]=0x32;	 
    005F8 E382      LDI	R24,0x32
    005F9 9380 0127 STS	Uart0TxData+8,R24
(0521) 		 for(k=0;k<64;k++)
    005FB 2433      CLR	R3
    005FC 9230 02AC STS	k+1,R3
    005FE 9220 02AB STS	k,R2
    00600 C01A      RJMP	0x061B
(0522) 		 {
(0523) 		 Uart0TxData[9+k]=coeffdata[k];  
    00601 90A0 02AB LDS	R10,k
    00603 90B0 02AC LDS	R11,k+1
    00605 E689      LDI	R24,0x69
    00606 E091      LDI	R25,1
    00607 01F5      MOVW	R30,R10
    00608 0FE8      ADD	R30,R24
    00609 1FF9      ADC	R31,R25
    0060A 8020      LD	R2,Z
    0060B E18F      LDI	R24,0x1F
    0060C E091      LDI	R25,1
    0060D 01F5      MOVW	R30,R10
    0060E 9639      ADIW	R30,0x9
    0060F 0FE8      ADD	R30,R24
    00610 1FF9      ADC	R31,R25
    00611 8220      ST	Z,R2
    00612 9180 02AB LDS	R24,k
    00614 9190 02AC LDS	R25,k+1
    00616 9601      ADIW	R24,1
    00617 9390 02AC STS	k+1,R25
    00619 9380 02AB STS	k,R24
    0061B 9180 02AB LDS	R24,k
    0061D 9190 02AC LDS	R25,k+1
    0061F 3480      CPI	R24,0x40
    00620 E0E0      LDI	R30,0
    00621 079E      CPC	R25,R30
    00622 F2F0      BCS	0x0601
(0524) 		 }		 
(0525) 		 SendUart0_2(74,20);//超时160ms
    00623 E124      LDI	R18,0x14
    00624 E030      LDI	R19,0
    00625 E40A      LDI	R16,0x4A
    00626 DA90      RCALL	_SendUart0_2
(0526) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00627 9180 02E1 LDS	R24,Uart0RxCounter
    00629 3089      CPI	R24,0x9
    0062A F4B1      BNE	0x0641
    0062B 9180 02E2 LDS	R24,Uart0RxData
    0062D 3585      CPI	R24,0x55
    0062E F491      BNE	0x0641
    0062F 9180 02E3 LDS	R24,Uart0RxData+1
    00631 3480      CPI	R24,0x40
    00632 F471      BNE	0x0641
    00633 9180 02E4 LDS	R24,Uart0RxData+2
    00635 3888      CPI	R24,0x88
    00636 F451      BNE	0x0641
(0527) 		 {T_dat&=0xff00; }
    00637 9180 02CD LDS	R24,T_dat
    00639 9190 02CE LDS	R25,T_dat+1
    0063B 7080      ANDI	R24,0
    0063C 9390 02CE STS	T_dat+1,R25
    0063E 9380 02CD STS	T_dat,R24
    00640 C006      RJMP	0x0647
(0528) 		 else
(0529) 		 {T_dat=0x00aa; }
    00641 EA8A      LDI	R24,0xAA
    00642 E090      LDI	R25,0
    00643 9390 02CE STS	T_dat+1,R25
    00645 9380 02CD STS	T_dat,R24
(0530) 		 
(0531) 		 Uart0TxData[0]=0xE8;
    00647 EE88      LDI	R24,0xE8
    00648 9380 011F STS	Uart0TxData,R24
(0532) 		 Uart0TxData[1]=0x40;
    0064A E480      LDI	R24,0x40
    0064B 9380 0120 STS	Uart0TxData+1,R24
(0533) 		 Uart0TxData[2]=0x88;
    0064D E888      LDI	R24,0x88
    0064E 9380 0121 STS	Uart0TxData+2,R24
(0534) 		 Uart0TxData[3]=1;//压力温度系数包1
    00650 E081      LDI	R24,1
    00651 9380 0122 STS	Uart0TxData+3,R24
(0535) 		 Uart0TxData[4]=0x21;
    00653 E281      LDI	R24,0x21
    00654 9380 0123 STS	Uart0TxData+4,R24
(0536) 		 Uart0TxData[5]=0x22;
    00656 E282      LDI	R24,0x22
    00657 9380 0124 STS	Uart0TxData+5,R24
(0537) 		 Uart0TxData[6]=0x23;
    00659 E283      LDI	R24,0x23
    0065A 9380 0125 STS	Uart0TxData+6,R24
(0538) 		 Uart0TxData[7]=0x24;
    0065C E284      LDI	R24,0x24
    0065D 9380 0126 STS	Uart0TxData+7,R24
(0539) 		 Uart0TxData[8]=0x32;	 
    0065F E382      LDI	R24,0x32
    00660 9380 0127 STS	Uart0TxData+8,R24
(0540) 		 for(k=0;k<64;k++)
    00662 2422      CLR	R2
    00663 2433      CLR	R3
    00664 9230 02AC STS	k+1,R3
    00666 9220 02AB STS	k,R2
    00668 C01C      RJMP	0x0685
(0541) 		 {
(0542) 		 Uart0TxData[9+k]=coeffdata[k+64];  
    00669 90A0 02AB LDS	R10,k
    0066B 90B0 02AC LDS	R11,k+1
    0066D E689      LDI	R24,0x69
    0066E E091      LDI	R25,1
    0066F 01F5      MOVW	R30,R10
    00670 5CE0      SUBI	R30,0xC0
    00671 4FFF      SBCI	R31,0xFF
    00672 0FE8      ADD	R30,R24
    00673 1FF9      ADC	R31,R25
    00674 8020      LD	R2,Z
    00675 E18F      LDI	R24,0x1F
    00676 E091      LDI	R25,1
    00677 01F5      MOVW	R30,R10
    00678 9639      ADIW	R30,0x9
    00679 0FE8      ADD	R30,R24
    0067A 1FF9      ADC	R31,R25
    0067B 8220      ST	Z,R2
    0067C 9180 02AB LDS	R24,k
    0067E 9190 02AC LDS	R25,k+1
    00680 9601      ADIW	R24,1
    00681 9390 02AC STS	k+1,R25
    00683 9380 02AB STS	k,R24
    00685 9180 02AB LDS	R24,k
    00687 9190 02AC LDS	R25,k+1
    00689 3480      CPI	R24,0x40
    0068A E0E0      LDI	R30,0
    0068B 079E      CPC	R25,R30
    0068C F2E0      BCS	0x0669
(0543) 		 }		 
(0544) 		 SendUart0_2(74,20);//超时160ms
    0068D E124      LDI	R18,0x14
    0068E E030      LDI	R19,0
    0068F E40A      LDI	R16,0x4A
    00690 DA26      RCALL	_SendUart0_2
(0545) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00691 9180 02E1 LDS	R24,Uart0RxCounter
    00693 3089      CPI	R24,0x9
    00694 F4B1      BNE	0x06AB
    00695 9180 02E2 LDS	R24,Uart0RxData
    00697 3585      CPI	R24,0x55
    00698 F491      BNE	0x06AB
    00699 9180 02E3 LDS	R24,Uart0RxData+1
    0069B 3480      CPI	R24,0x40
    0069C F471      BNE	0x06AB
    0069D 9180 02E4 LDS	R24,Uart0RxData+2
    0069F 3888      CPI	R24,0x88
    006A0 F451      BNE	0x06AB
(0546) 		 {T_dat&=0x00ff; }
    006A1 9180 02CD LDS	R24,T_dat
    006A3 9190 02CE LDS	R25,T_dat+1
    006A5 7090      ANDI	R25,0
    006A6 9390 02CE STS	T_dat+1,R25
    006A8 9380 02CD STS	T_dat,R24
    006AA C009      RJMP	0x06B4
(0547) 		 else
(0548) 		 {T_dat|=0x5500; }
    006AB 9180 02CD LDS	R24,T_dat
    006AD 9190 02CE LDS	R25,T_dat+1
    006AF 6595      ORI	R25,0x55
    006B0 9390 02CE STS	T_dat+1,R25
    006B2 9380 02CD STS	T_dat,R24
(0549) 		 
(0550) 		 DataFlag=0;
    006B4 2422      CLR	R2
    006B5 2433      CLR	R3
    006B6 9230 02B2 STS	DataFlag+1,R3
    006B8 9220 02B1 STS	DataFlag,R2
(0551) 		 coeff_len=0;	
    006BA 9230 011D STS	coeff_len+1,R3
    006BC 9220 011C STS	coeff_len,R2
(0552) 		 T_com=0x0A;
    006BE E08A      LDI	R24,0xA
    006BF 9380 02CA STS	T_com,R24
(0553) 		 SendManchester();		
    006C1 940E 1AA5 CALL	_SendManchester
(0554) 		}
    006C3 940C 181A JMP	0x181A
(0555) 		else if(DataFlag==2)//下发流量系数
    006C5 9180 02B1 LDS	R24,DataFlag
    006C7 9190 02B2 LDS	R25,DataFlag+1
    006C9 3082      CPI	R24,2
    006CA E0E0      LDI	R30,0
    006CB 079E      CPC	R25,R30
    006CC F009      BEQ	0x06CE
    006CD C0E6      RJMP	0x07B4
(0556) 		{
(0557) 		  Uart0TxData[0]=0xE8;
    006CE EE88      LDI	R24,0xE8
    006CF 9380 011F STS	Uart0TxData,R24
(0558) 		 Uart0TxData[1]=0x40;
    006D1 E480      LDI	R24,0x40
    006D2 9380 0120 STS	Uart0TxData+1,R24
(0559) 		 Uart0TxData[2]=0x88;
    006D4 E888      LDI	R24,0x88
    006D5 9380 0121 STS	Uart0TxData+2,R24
(0560) 		 Uart0TxData[3]=2;//流量系数包2
    006D7 E082      LDI	R24,2
    006D8 9380 0122 STS	Uart0TxData+3,R24
(0561) 		 Uart0TxData[4]=0x21;
    006DA E281      LDI	R24,0x21
    006DB 9380 0123 STS	Uart0TxData+4,R24
(0562) 		 Uart0TxData[5]=0x22;
    006DD E282      LDI	R24,0x22
    006DE 9380 0124 STS	Uart0TxData+5,R24
(0563) 		 Uart0TxData[6]=0x23;
    006E0 E283      LDI	R24,0x23
    006E1 9380 0125 STS	Uart0TxData+6,R24
(0564) 		 Uart0TxData[7]=0x24;
    006E3 E284      LDI	R24,0x24
    006E4 9380 0126 STS	Uart0TxData+7,R24
(0565) 		 Uart0TxData[8]=0x32;	 
    006E6 E382      LDI	R24,0x32
    006E7 9380 0127 STS	Uart0TxData+8,R24
(0566) 		 for(k=0;k<64;k++)
    006E9 2422      CLR	R2
    006EA 2433      CLR	R3
    006EB 9230 02AC STS	k+1,R3
    006ED 9220 02AB STS	k,R2
    006EF C01A      RJMP	0x070A
(0567) 		 {
(0568) 		 Uart0TxData[9+k]=coeffdata[k];  
    006F0 90A0 02AB LDS	R10,k
    006F2 90B0 02AC LDS	R11,k+1
    006F4 E689      LDI	R24,0x69
    006F5 E091      LDI	R25,1
    006F6 01F5      MOVW	R30,R10
    006F7 0FE8      ADD	R30,R24
    006F8 1FF9      ADC	R31,R25
    006F9 8020      LD	R2,Z
    006FA E18F      LDI	R24,0x1F
    006FB E091      LDI	R25,1
    006FC 01F5      MOVW	R30,R10
    006FD 9639      ADIW	R30,0x9
    006FE 0FE8      ADD	R30,R24
    006FF 1FF9      ADC	R31,R25
    00700 8220      ST	Z,R2
    00701 9180 02AB LDS	R24,k
    00703 9190 02AC LDS	R25,k+1
    00705 9601      ADIW	R24,1
    00706 9390 02AC STS	k+1,R25
    00708 9380 02AB STS	k,R24
    0070A 9180 02AB LDS	R24,k
    0070C 9190 02AC LDS	R25,k+1
    0070E 3480      CPI	R24,0x40
    0070F E0E0      LDI	R30,0
    00710 079E      CPC	R25,R30
    00711 F2F0      BCS	0x06F0
(0569) 		 }		 
(0570) 		 SendUart0_2(74,20);//超时160ms
    00712 E124      LDI	R18,0x14
    00713 E030      LDI	R19,0
    00714 E40A      LDI	R16,0x4A
    00715 D9A1      RCALL	_SendUart0_2
(0571) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00716 9180 02E1 LDS	R24,Uart0RxCounter
    00718 3089      CPI	R24,0x9
    00719 F4B1      BNE	0x0730
    0071A 9180 02E2 LDS	R24,Uart0RxData
    0071C 3585      CPI	R24,0x55
    0071D F491      BNE	0x0730
    0071E 9180 02E3 LDS	R24,Uart0RxData+1
    00720 3480      CPI	R24,0x40
    00721 F471      BNE	0x0730
    00722 9180 02E4 LDS	R24,Uart0RxData+2
    00724 3888      CPI	R24,0x88
    00725 F451      BNE	0x0730
(0572) 		 {T_dat&=0xff00; }
    00726 9180 02CD LDS	R24,T_dat
    00728 9190 02CE LDS	R25,T_dat+1
    0072A 7080      ANDI	R24,0
    0072B 9390 02CE STS	T_dat+1,R25
    0072D 9380 02CD STS	T_dat,R24
    0072F C006      RJMP	0x0736
(0573) 		 else
(0574) 		 {T_dat=0x00aa; }
    00730 EA8A      LDI	R24,0xAA
    00731 E090      LDI	R25,0
    00732 9390 02CE STS	T_dat+1,R25
    00734 9380 02CD STS	T_dat,R24
(0575) 		 
(0576) 		 Uart0TxData[0]=0xE8;
    00736 EE88      LDI	R24,0xE8
    00737 9380 011F STS	Uart0TxData,R24
(0577) 		 Uart0TxData[1]=0x40;
    00739 E480      LDI	R24,0x40
    0073A 9380 0120 STS	Uart0TxData+1,R24
(0578) 		 Uart0TxData[2]=0x88;
    0073C E888      LDI	R24,0x88
    0073D 9380 0121 STS	Uart0TxData+2,R24
(0579) 		 Uart0TxData[3]=3;//流量系数包3
    0073F E083      LDI	R24,3
    00740 9380 0122 STS	Uart0TxData+3,R24
(0580) 		 Uart0TxData[4]=0x21;
    00742 E281      LDI	R24,0x21
    00743 9380 0123 STS	Uart0TxData+4,R24
(0581) 		 Uart0TxData[5]=0x22;
    00745 E282      LDI	R24,0x22
    00746 9380 0124 STS	Uart0TxData+5,R24
(0582) 		 Uart0TxData[6]=0x23;
    00748 E283      LDI	R24,0x23
    00749 9380 0125 STS	Uart0TxData+6,R24
(0583) 		 Uart0TxData[7]=0x24;
    0074B E284      LDI	R24,0x24
    0074C 9380 0126 STS	Uart0TxData+7,R24
(0584) 		 Uart0TxData[8]=0x32;	 
    0074E E382      LDI	R24,0x32
    0074F 9380 0127 STS	Uart0TxData+8,R24
(0585) 		 for(k=0;k<64;k++)
    00751 2422      CLR	R2
    00752 2433      CLR	R3
    00753 9230 02AC STS	k+1,R3
    00755 9220 02AB STS	k,R2
    00757 C01C      RJMP	0x0774
(0586) 		 {
(0587) 		 Uart0TxData[9+k]=coeffdata[k+64];  
    00758 90A0 02AB LDS	R10,k
    0075A 90B0 02AC LDS	R11,k+1
    0075C E689      LDI	R24,0x69
    0075D E091      LDI	R25,1
    0075E 01F5      MOVW	R30,R10
    0075F 5CE0      SUBI	R30,0xC0
    00760 4FFF      SBCI	R31,0xFF
    00761 0FE8      ADD	R30,R24
    00762 1FF9      ADC	R31,R25
    00763 8020      LD	R2,Z
    00764 E18F      LDI	R24,0x1F
    00765 E091      LDI	R25,1
    00766 01F5      MOVW	R30,R10
    00767 9639      ADIW	R30,0x9
    00768 0FE8      ADD	R30,R24
    00769 1FF9      ADC	R31,R25
    0076A 8220      ST	Z,R2
    0076B 9180 02AB LDS	R24,k
    0076D 9190 02AC LDS	R25,k+1
    0076F 9601      ADIW	R24,1
    00770 9390 02AC STS	k+1,R25
    00772 9380 02AB STS	k,R24
    00774 9180 02AB LDS	R24,k
    00776 9190 02AC LDS	R25,k+1
    00778 3480      CPI	R24,0x40
    00779 E0E0      LDI	R30,0
    0077A 079E      CPC	R25,R30
    0077B F2E0      BCS	0x0758
(0588) 		 }		 
(0589) 		 SendUart0_2(74,20);//超时160ms
    0077C E124      LDI	R18,0x14
    0077D E030      LDI	R19,0
    0077E E40A      LDI	R16,0x4A
    0077F D937      RCALL	_SendUart0_2
(0590) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x88))
    00780 9180 02E1 LDS	R24,Uart0RxCounter
    00782 3089      CPI	R24,0x9
    00783 F4B1      BNE	0x079A
    00784 9180 02E2 LDS	R24,Uart0RxData
    00786 3585      CPI	R24,0x55
    00787 F491      BNE	0x079A
    00788 9180 02E3 LDS	R24,Uart0RxData+1
    0078A 3480      CPI	R24,0x40
    0078B F471      BNE	0x079A
    0078C 9180 02E4 LDS	R24,Uart0RxData+2
    0078E 3888      CPI	R24,0x88
    0078F F451      BNE	0x079A
(0591) 		 {T_dat&=0x00ff; }
    00790 9180 02CD LDS	R24,T_dat
    00792 9190 02CE LDS	R25,T_dat+1
    00794 7090      ANDI	R25,0
    00795 9390 02CE STS	T_dat+1,R25
    00797 9380 02CD STS	T_dat,R24
    00799 C009      RJMP	0x07A3
(0592) 		 else
(0593) 		 {T_dat|=0x5500; }
    0079A 9180 02CD LDS	R24,T_dat
    0079C 9190 02CE LDS	R25,T_dat+1
    0079E 6595      ORI	R25,0x55
    0079F 9390 02CE STS	T_dat+1,R25
    007A1 9380 02CD STS	T_dat,R24
(0594) 		 
(0595) 		 DataFlag=0;
    007A3 2422      CLR	R2
    007A4 2433      CLR	R3
    007A5 9230 02B2 STS	DataFlag+1,R3
    007A7 9220 02B1 STS	DataFlag,R2
(0596) 		 coeff_len=0;	
    007A9 9230 011D STS	coeff_len+1,R3
    007AB 9220 011C STS	coeff_len,R2
(0597) 		 T_com=0x0B;
    007AD E08B      LDI	R24,0xB
    007AE 9380 02CA STS	T_com,R24
(0598) 		 SendManchester();		
    007B0 940E 1AA5 CALL	_SendManchester
(0599) 		}	
    007B2 940C 181A JMP	0x181A
(0600) 		else if(DataFlag==3)//提取测试数据
    007B4 9180 02B1 LDS	R24,DataFlag
    007B6 9190 02B2 LDS	R25,DataFlag+1
    007B8 3083      CPI	R24,3
    007B9 E0E0      LDI	R30,0
    007BA 079E      CPC	R25,R30
    007BB F009      BEQ	0x07BD
    007BC C0A4      RJMP	0x0861
(0601) 		{
(0602) 		 DataFlag=0;
    007BD 2422      CLR	R2
    007BE 2433      CLR	R3
    007BF 9230 02B2 STS	DataFlag+1,R3
    007C1 9220 02B1 STS	DataFlag,R2
(0603) 		 coeff_len=0;	
    007C3 9230 011D STS	coeff_len+1,R3
    007C5 9220 011C STS	coeff_len,R2
(0604) 		 T_com=0x09;
    007C7 E089      LDI	R24,0x9
    007C8 9380 02CA STS	T_com,R24
(0605) 		 TestDataBlockIndex=coeffdata[1];
    007CA 90A0 016A LDS	R10,coeffdata+1
    007CC 24BB      CLR	R11
(0606) 		 TestDataBlockIndex<<=8;
    007CD 2CBA      MOV	R11,R10
    007CE 24AA      CLR	R10
(0607) 		 TestDataBlockIndex|=coeffdata[0];//首块地址/索引
    007CF 9020 0169 LDS	R2,coeffdata
    007D1 2433      CLR	R3
    007D2 28A2      OR	R10,R2
    007D3 28B3      OR	R11,R3
(0608) 		 TestDataBlockCount=coeffdata[3];
    007D4 90C0 016C LDS	R12,coeffdata+3
    007D6 24DD      CLR	R13
(0609) 		 TestDataBlockCount<<=8;
    007D7 2CDC      MOV	R13,R12
    007D8 24CC      CLR	R12
(0610) 		 TestDataBlockCount|=coeffdata[2];//需提取的总包数，每包64字节，每块4096字节共64包
    007D9 9020 016B LDS	R2,coeffdata+2
    007DB 2433      CLR	R3
    007DC 28C2      OR	R12,R2
    007DD 28D3      OR	R13,R3
(0611) 		 
(0612) 		 for(k=0;k<TestDataBlockCount;k++)//按用户要求分包进行上传，每包64字节传32帧
    007DE 2422      CLR	R2
    007DF 9230 02AC STS	k+1,R3
    007E1 9220 02AB STS	k,R2
    007E3 C073      RJMP	0x0857
(0613) 		 {
(0614) 		   Uart0TxData[0]=0xE8;
    007E4 EE88      LDI	R24,0xE8
    007E5 9380 011F STS	Uart0TxData,R24
(0615) 		   Uart0TxData[1]=0x40;
    007E7 E480      LDI	R24,0x40
    007E8 9380 0120 STS	Uart0TxData+1,R24
(0616) 		   Uart0TxData[2]=0x9A;//读测试数据
    007EA E98A      LDI	R24,0x9A
    007EB 9380 0121 STS	Uart0TxData+2,R24
(0617) 		   Uart0TxData[3]=8;
    007ED E088      LDI	R24,0x8
    007EE 9380 0122 STS	Uart0TxData+3,R24
(0618) 		   
(0619) 		   //统一块索引
(0620) 		   Uart0TxData[4]=(k); 	
    007F0 9020 02AB LDS	R2,k
    007F2 9030 02AC LDS	R3,k+1
    007F4 9220 0123 STS	Uart0TxData+4,R2
(0621) 		   Uart0TxData[5]=(k>>8); 	//包索引	
    007F6 2C23      MOV	R2,R3
    007F7 2433      CLR	R3
    007F8 9220 0124 STS	Uart0TxData+5,R2
(0622) 		   Uart0TxData[6]=(TestDataBlockIndex);
    007FA 92A0 0125 STS	Uart0TxData+6,R10
(0623) 		   Uart0TxData[7]=(TestDataBlockIndex>>8);//首块索引
    007FC 0115      MOVW	R2,R10
    007FD 2C23      MOV	R2,R3
    007FE 2433      CLR	R3
    007FF 9220 0126 STS	Uart0TxData+7,R2
(0624) 		   
(0625) 		   /*
(0626) 		   // 单独块索引
(0627) 		   Uart0TxData[4]=(k%8); 	
(0628) 		   Uart0TxData[5]=0; 	//包索引	
(0629) 		   Uart0TxData[6]=(TestDataBlockIndex+k/8);
(0630) 		   Uart0TxData[7]=((TestDataBlockIndex+k/8)>>8);//首块索引
(0631) 		   */
(0632) 		   
(0633) 		   SendUart0_2(9,6);//超时48ms
    00801 E026      LDI	R18,6
    00802 E030      LDI	R19,0
    00803 E009      LDI	R16,0x9
    00804 D8B2      RCALL	_SendUart0_2
(0634) 		   for(bf=0;bf<32;bf++)
    00805 2422      CLR	R2
    00806 2433      CLR	R3
    00807 9230 0117 STS	bf+1,R3
    00809 9220 0116 STS	bf,R2
    0080B C039      RJMP	0x0845
(0635) 		   {	   	
(0636) 		 	T_dat=Uart0RxData[bf*2+1];//高字节
    0080C EE82      LDI	R24,0xE2
    0080D E092      LDI	R25,2
    0080E 91E0 0116 LDS	R30,bf
    00810 91F0 0117 LDS	R31,bf+1
    00812 0FEE      LSL	R30
    00813 1FFF      ROL	R31
    00814 9631      ADIW	R30,1
    00815 0FE8      ADD	R30,R24
    00816 1FF9      ADC	R31,R25
    00817 8020      LD	R2,Z
    00818 2433      CLR	R3
    00819 9230 02CE STS	T_dat+1,R3
    0081B 9220 02CD STS	T_dat,R2
(0637) 		 	T_dat<<=8;
    0081D 2C32      MOV	R3,R2
    0081E 2422      CLR	R2
    0081F 9230 02CE STS	T_dat+1,R3
    00821 9220 02CD STS	T_dat,R2
(0638) 		 	T_dat|=Uart0RxData[bf*2+0];//低字节
    00823 91E0 0116 LDS	R30,bf
    00825 91F0 0117 LDS	R31,bf+1
    00827 0FEE      LSL	R30
    00828 1FFF      ROL	R31
    00829 0FE8      ADD	R30,R24
    0082A 1FF9      ADC	R31,R25
    0082B 8020      LD	R2,Z
    0082C 2433      CLR	R3
    0082D 9040 02CD LDS	R4,T_dat
    0082F 9050 02CE LDS	R5,T_dat+1
    00831 2842      OR	R4,R2
    00832 2853      OR	R5,R3
    00833 9250 02CE STS	T_dat+1,R5
    00835 9240 02CD STS	T_dat,R4
(0639) 		 	SendManchester();	
    00837 940E 1AA5 CALL	_SendManchester
(0640) 			CheckMotor(10);	 
    00839 E00A      LDI	R16,0xA
    0083A E010      LDI	R17,0
    0083B DAB9      RCALL	_CheckMotor
    0083C 9180 0116 LDS	R24,bf
    0083E 9190 0117 LDS	R25,bf+1
    00840 9601      ADIW	R24,1
    00841 9390 0117 STS	bf+1,R25
    00843 9380 0116 STS	bf,R24
    00845 9180 0116 LDS	R24,bf
    00847 9190 0117 LDS	R25,bf+1
    00849 3280      CPI	R24,0x20
    0084A E0E0      LDI	R30,0
    0084B 079E      CPC	R25,R30
    0084C F408      BCC	0x084E
    0084D CFBE      RJMP	0x080C
    0084E 9180 02AB LDS	R24,k
    00850 9190 02AC LDS	R25,k+1
    00852 9601      ADIW	R24,1
    00853 9390 02AC STS	k+1,R25
    00855 9380 02AB STS	k,R24
    00857 9020 02AB LDS	R2,k
    00859 9030 02AC LDS	R3,k+1
    0085B 142C      CP	R2,R12
    0085C 043D      CPC	R3,R13
    0085D F408      BCC	0x085F
    0085E CF85      RJMP	0x07E4
(0641) 		   }		
(0642) 		  }
(0643) 		} 
    0085F 940C 181A JMP	0x181A
(0644) 		else if(DataFlag==4)//下发仪器信息
    00861 9180 02B1 LDS	R24,DataFlag
    00863 9190 02B2 LDS	R25,DataFlag+1
    00865 3084      CPI	R24,4
    00866 E0E0      LDI	R30,0
    00867 079E      CPC	R25,R30
    00868 F011      BEQ	0x086B
    00869 940C 181A JMP	0x181A
(0645) 		{
(0646) 		T_dat=0x0000;
    0086B 2422      CLR	R2
    0086C 2433      CLR	R3
    0086D 9230 02CE STS	T_dat+1,R3
    0086F 9220 02CD STS	T_dat,R2
(0647) 		
(0648) 		 Uart0TxData[0]=0xE8;
    00871 EE88      LDI	R24,0xE8
    00872 9380 011F STS	Uart0TxData,R24
(0649) 		 Uart0TxData[1]=0x40;
    00874 E480      LDI	R24,0x40
    00875 9380 0120 STS	Uart0TxData+1,R24
(0650) 		 Uart0TxData[2]=0x84;
    00877 E884      LDI	R24,0x84
    00878 9380 0121 STS	Uart0TxData+2,R24
(0651) 		 Uart0TxData[3]=0;//包0
    0087A 9220 0122 STS	Uart0TxData+3,R2
(0652) 		 Uart0TxData[4]=0x21;
    0087C E281      LDI	R24,0x21
    0087D 9380 0123 STS	Uart0TxData+4,R24
(0653) 		 Uart0TxData[5]=0x22;
    0087F E282      LDI	R24,0x22
    00880 9380 0124 STS	Uart0TxData+5,R24
(0654) 		 Uart0TxData[6]=0x23;
    00882 E283      LDI	R24,0x23
    00883 9380 0125 STS	Uart0TxData+6,R24
(0655) 		 Uart0TxData[7]=0x24;
    00885 E284      LDI	R24,0x24
    00886 9380 0126 STS	Uart0TxData+7,R24
(0656) 		 Uart0TxData[8]=0x32;	 
    00888 E382      LDI	R24,0x32
    00889 9380 0127 STS	Uart0TxData+8,R24
(0657) 		 for(k=0;k<64;k++)
    0088B 9230 02AC STS	k+1,R3
    0088D 9220 02AB STS	k,R2
    0088F C01A      RJMP	0x08AA
(0658) 		 {
(0659) 		 Uart0TxData[9+k]=coeffdata[k];  
    00890 90A0 02AB LDS	R10,k
    00892 90B0 02AC LDS	R11,k+1
    00894 E689      LDI	R24,0x69
    00895 E091      LDI	R25,1
    00896 01F5      MOVW	R30,R10
    00897 0FE8      ADD	R30,R24
    00898 1FF9      ADC	R31,R25
    00899 8020      LD	R2,Z
    0089A E18F      LDI	R24,0x1F
    0089B E091      LDI	R25,1
    0089C 01F5      MOVW	R30,R10
    0089D 9639      ADIW	R30,0x9
    0089E 0FE8      ADD	R30,R24
    0089F 1FF9      ADC	R31,R25
    008A0 8220      ST	Z,R2
    008A1 9180 02AB LDS	R24,k
    008A3 9190 02AC LDS	R25,k+1
    008A5 9601      ADIW	R24,1
    008A6 9390 02AC STS	k+1,R25
    008A8 9380 02AB STS	k,R24
    008AA 9180 02AB LDS	R24,k
    008AC 9190 02AC LDS	R25,k+1
    008AE 3480      CPI	R24,0x40
    008AF E0E0      LDI	R30,0
    008B0 079E      CPC	R25,R30
    008B1 F2F0      BCS	0x0890
(0660) 		 }		 
(0661) 		 SendUart0_2(74,20);//超时160ms
    008B2 E124      LDI	R18,0x14
    008B3 E030      LDI	R19,0
    008B4 E40A      LDI	R16,0x4A
    008B5 D801      RCALL	_SendUart0_2
(0662) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    008B6 9180 02E1 LDS	R24,Uart0RxCounter
    008B8 3089      CPI	R24,0x9
    008B9 F461      BNE	0x08C6
    008BA 9180 02E2 LDS	R24,Uart0RxData
    008BC 3585      CPI	R24,0x55
    008BD F441      BNE	0x08C6
    008BE 9180 02E3 LDS	R24,Uart0RxData+1
    008C0 3480      CPI	R24,0x40
    008C1 F421      BNE	0x08C6
    008C2 9180 02E4 LDS	R24,Uart0RxData+2
    008C4 3884      CPI	R24,0x84
    008C5 F049      BEQ	0x08CF
(0663) 		 {T_dat|=0x0001; }
    008C6 9180 02CD LDS	R24,T_dat
    008C8 9190 02CE LDS	R25,T_dat+1
    008CA 6081      ORI	R24,1
    008CB 9390 02CE STS	T_dat+1,R25
    008CD 9380 02CD STS	T_dat,R24
(0664)  		 
(0665) 		 Uart0TxData[0]=0xE8;
    008CF EE88      LDI	R24,0xE8
    008D0 9380 011F STS	Uart0TxData,R24
(0666) 		 Uart0TxData[1]=0x40;
    008D2 E480      LDI	R24,0x40
    008D3 9380 0120 STS	Uart0TxData+1,R24
(0667) 		 Uart0TxData[2]=0x84;
    008D5 E884      LDI	R24,0x84
    008D6 9380 0121 STS	Uart0TxData+2,R24
(0668) 		 Uart0TxData[3]=1;//包1
    008D8 E081      LDI	R24,1
    008D9 9380 0122 STS	Uart0TxData+3,R24
(0669) 		 Uart0TxData[4]=0x21;
    008DB E281      LDI	R24,0x21
    008DC 9380 0123 STS	Uart0TxData+4,R24
(0670) 		 Uart0TxData[5]=0x22;
    008DE E282      LDI	R24,0x22
    008DF 9380 0124 STS	Uart0TxData+5,R24
(0671) 		 Uart0TxData[6]=0x23;
    008E1 E283      LDI	R24,0x23
    008E2 9380 0125 STS	Uart0TxData+6,R24
(0672) 		 Uart0TxData[7]=0x24;
    008E4 E284      LDI	R24,0x24
    008E5 9380 0126 STS	Uart0TxData+7,R24
(0673) 		 Uart0TxData[8]=0x32;	 
    008E7 E382      LDI	R24,0x32
    008E8 9380 0127 STS	Uart0TxData+8,R24
(0674) 		 for(k=0;k<64;k++)
    008EA 2422      CLR	R2
    008EB 2433      CLR	R3
    008EC 9230 02AC STS	k+1,R3
    008EE 9220 02AB STS	k,R2
    008F0 C01C      RJMP	0x090D
(0675) 		 {
(0676) 		 Uart0TxData[9+k]=coeffdata[k+64];  
    008F1 90A0 02AB LDS	R10,k
    008F3 90B0 02AC LDS	R11,k+1
    008F5 E689      LDI	R24,0x69
    008F6 E091      LDI	R25,1
    008F7 01F5      MOVW	R30,R10
    008F8 5CE0      SUBI	R30,0xC0
    008F9 4FFF      SBCI	R31,0xFF
    008FA 0FE8      ADD	R30,R24
    008FB 1FF9      ADC	R31,R25
    008FC 8020      LD	R2,Z
    008FD E18F      LDI	R24,0x1F
    008FE E091      LDI	R25,1
    008FF 01F5      MOVW	R30,R10
    00900 9639      ADIW	R30,0x9
    00901 0FE8      ADD	R30,R24
    00902 1FF9      ADC	R31,R25
    00903 8220      ST	Z,R2
    00904 9180 02AB LDS	R24,k
    00906 9190 02AC LDS	R25,k+1
    00908 9601      ADIW	R24,1
    00909 9390 02AC STS	k+1,R25
    0090B 9380 02AB STS	k,R24
    0090D 9180 02AB LDS	R24,k
    0090F 9190 02AC LDS	R25,k+1
    00911 3480      CPI	R24,0x40
    00912 E0E0      LDI	R30,0
    00913 079E      CPC	R25,R30
    00914 F2E0      BCS	0x08F1
(0677) 		 }		 
(0678) 		 SendUart0_2(74,20);//超时160ms
    00915 E124      LDI	R18,0x14
    00916 E030      LDI	R19,0
    00917 E40A      LDI	R16,0x4A
    00918 940E 00B7 CALL	_SendUart0_2
(0679) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    0091A 9180 02E1 LDS	R24,Uart0RxCounter
    0091C 3089      CPI	R24,0x9
    0091D F461      BNE	0x092A
    0091E 9180 02E2 LDS	R24,Uart0RxData
    00920 3585      CPI	R24,0x55
    00921 F441      BNE	0x092A
    00922 9180 02E3 LDS	R24,Uart0RxData+1
    00924 3480      CPI	R24,0x40
    00925 F421      BNE	0x092A
    00926 9180 02E4 LDS	R24,Uart0RxData+2
    00928 3884      CPI	R24,0x84
    00929 F049      BEQ	0x0933
(0680)          {T_dat|=0x0002; }
    0092A 9180 02CD LDS	R24,T_dat
    0092C 9190 02CE LDS	R25,T_dat+1
    0092E 6082      ORI	R24,2
    0092F 9390 02CE STS	T_dat+1,R25
    00931 9380 02CD STS	T_dat,R24
(0681) 		 
(0682) 		 Uart0TxData[0]=0xE8;
    00933 EE88      LDI	R24,0xE8
    00934 9380 011F STS	Uart0TxData,R24
(0683) 		 Uart0TxData[1]=0x40;
    00936 E480      LDI	R24,0x40
    00937 9380 0120 STS	Uart0TxData+1,R24
(0684) 		 Uart0TxData[2]=0x84;
    00939 E884      LDI	R24,0x84
    0093A 9380 0121 STS	Uart0TxData+2,R24
(0685) 		 Uart0TxData[3]=2;//包2
    0093C E082      LDI	R24,2
    0093D 9380 0122 STS	Uart0TxData+3,R24
(0686) 		 Uart0TxData[4]=0x21;
    0093F E281      LDI	R24,0x21
    00940 9380 0123 STS	Uart0TxData+4,R24
(0687) 		 Uart0TxData[5]=0x22;
    00942 E282      LDI	R24,0x22
    00943 9380 0124 STS	Uart0TxData+5,R24
(0688) 		 Uart0TxData[6]=0x23;
    00945 E283      LDI	R24,0x23
    00946 9380 0125 STS	Uart0TxData+6,R24
(0689) 		 Uart0TxData[7]=0x24;
    00948 E284      LDI	R24,0x24
    00949 9380 0126 STS	Uart0TxData+7,R24
(0690) 		 Uart0TxData[8]=0x32;	 
    0094B E382      LDI	R24,0x32
    0094C 9380 0127 STS	Uart0TxData+8,R24
(0691) 		 for(k=0;k<64;k++)
    0094E 2422      CLR	R2
    0094F 2433      CLR	R3
    00950 9230 02AC STS	k+1,R3
    00952 9220 02AB STS	k,R2
    00954 C01C      RJMP	0x0971
(0692) 		 {
(0693) 		 Uart0TxData[9+k]=coeffdata[k+128];  
    00955 90A0 02AB LDS	R10,k
    00957 90B0 02AC LDS	R11,k+1
    00959 E689      LDI	R24,0x69
    0095A E091      LDI	R25,1
    0095B 01F5      MOVW	R30,R10
    0095C 58E0      SUBI	R30,0x80
    0095D 4FFF      SBCI	R31,0xFF
    0095E 0FE8      ADD	R30,R24
    0095F 1FF9      ADC	R31,R25
    00960 8020      LD	R2,Z
    00961 E18F      LDI	R24,0x1F
    00962 E091      LDI	R25,1
    00963 01F5      MOVW	R30,R10
    00964 9639      ADIW	R30,0x9
    00965 0FE8      ADD	R30,R24
    00966 1FF9      ADC	R31,R25
    00967 8220      ST	Z,R2
    00968 9180 02AB LDS	R24,k
    0096A 9190 02AC LDS	R25,k+1
    0096C 9601      ADIW	R24,1
    0096D 9390 02AC STS	k+1,R25
    0096F 9380 02AB STS	k,R24
    00971 9180 02AB LDS	R24,k
    00973 9190 02AC LDS	R25,k+1
    00975 3480      CPI	R24,0x40
    00976 E0E0      LDI	R30,0
    00977 079E      CPC	R25,R30
    00978 F2E0      BCS	0x0955
(0694) 		 }		 
(0695) 		 SendUart0_2(74,20);//超时160ms
    00979 E124      LDI	R18,0x14
    0097A E030      LDI	R19,0
    0097B E40A      LDI	R16,0x4A
    0097C 940E 00B7 CALL	_SendUart0_2
(0696) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    0097E 9180 02E1 LDS	R24,Uart0RxCounter
    00980 3089      CPI	R24,0x9
    00981 F461      BNE	0x098E
    00982 9180 02E2 LDS	R24,Uart0RxData
    00984 3585      CPI	R24,0x55
    00985 F441      BNE	0x098E
    00986 9180 02E3 LDS	R24,Uart0RxData+1
    00988 3480      CPI	R24,0x40
    00989 F421      BNE	0x098E
    0098A 9180 02E4 LDS	R24,Uart0RxData+2
    0098C 3884      CPI	R24,0x84
    0098D F049      BEQ	0x0997
(0697)          {T_dat|=0x0004; }
    0098E 9180 02CD LDS	R24,T_dat
    00990 9190 02CE LDS	R25,T_dat+1
    00992 6084      ORI	R24,4
    00993 9390 02CE STS	T_dat+1,R25
    00995 9380 02CD STS	T_dat,R24
(0698) 		 
(0699) 		 Uart0TxData[0]=0xE8;
    00997 EE88      LDI	R24,0xE8
    00998 9380 011F STS	Uart0TxData,R24
(0700) 		 Uart0TxData[1]=0x40;
    0099A E480      LDI	R24,0x40
    0099B 9380 0120 STS	Uart0TxData+1,R24
(0701) 		 Uart0TxData[2]=0x84;
    0099D E884      LDI	R24,0x84
    0099E 9380 0121 STS	Uart0TxData+2,R24
(0702) 		 Uart0TxData[3]=3;//包3
    009A0 E083      LDI	R24,3
    009A1 9380 0122 STS	Uart0TxData+3,R24
(0703) 		 Uart0TxData[4]=0x21;
    009A3 E281      LDI	R24,0x21
    009A4 9380 0123 STS	Uart0TxData+4,R24
(0704) 		 Uart0TxData[5]=0x22;
    009A6 E282      LDI	R24,0x22
    009A7 9380 0124 STS	Uart0TxData+5,R24
(0705) 		 Uart0TxData[6]=0x23;
    009A9 E283      LDI	R24,0x23
    009AA 9380 0125 STS	Uart0TxData+6,R24
(0706) 		 Uart0TxData[7]=0x24;
    009AC E284      LDI	R24,0x24
    009AD 9380 0126 STS	Uart0TxData+7,R24
(0707) 		 Uart0TxData[8]=0x32;	 
    009AF E382      LDI	R24,0x32
    009B0 9380 0127 STS	Uart0TxData+8,R24
(0708) 		 for(k=0;k<64;k++)
    009B2 2422      CLR	R2
    009B3 2433      CLR	R3
    009B4 9230 02AC STS	k+1,R3
    009B6 9220 02AB STS	k,R2
    009B8 C01C      RJMP	0x09D5
(0709) 		 {
(0710) 		 Uart0TxData[9+k]=coeffdata[k+192];  
    009B9 90A0 02AB LDS	R10,k
    009BB 90B0 02AC LDS	R11,k+1
    009BD E689      LDI	R24,0x69
    009BE E091      LDI	R25,1
    009BF 01F5      MOVW	R30,R10
    009C0 54E0      SUBI	R30,0x40
    009C1 4FFF      SBCI	R31,0xFF
    009C2 0FE8      ADD	R30,R24
    009C3 1FF9      ADC	R31,R25
    009C4 8020      LD	R2,Z
    009C5 E18F      LDI	R24,0x1F
    009C6 E091      LDI	R25,1
    009C7 01F5      MOVW	R30,R10
    009C8 9639      ADIW	R30,0x9
    009C9 0FE8      ADD	R30,R24
    009CA 1FF9      ADC	R31,R25
    009CB 8220      ST	Z,R2
    009CC 9180 02AB LDS	R24,k
    009CE 9190 02AC LDS	R25,k+1
    009D0 9601      ADIW	R24,1
    009D1 9390 02AC STS	k+1,R25
    009D3 9380 02AB STS	k,R24
    009D5 9180 02AB LDS	R24,k
    009D7 9190 02AC LDS	R25,k+1
    009D9 3480      CPI	R24,0x40
    009DA E0E0      LDI	R30,0
    009DB 079E      CPC	R25,R30
    009DC F2E0      BCS	0x09B9
(0711) 		 }		 
(0712) 		 SendUart0_2(74,20);//超时160ms
    009DD E124      LDI	R18,0x14
    009DE E030      LDI	R19,0
    009DF E40A      LDI	R16,0x4A
    009E0 940E 00B7 CALL	_SendUart0_2
(0713) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    009E2 9180 02E1 LDS	R24,Uart0RxCounter
    009E4 3089      CPI	R24,0x9
    009E5 F461      BNE	0x09F2
    009E6 9180 02E2 LDS	R24,Uart0RxData
    009E8 3585      CPI	R24,0x55
    009E9 F441      BNE	0x09F2
    009EA 9180 02E3 LDS	R24,Uart0RxData+1
    009EC 3480      CPI	R24,0x40
    009ED F421      BNE	0x09F2
    009EE 9180 02E4 LDS	R24,Uart0RxData+2
    009F0 3884      CPI	R24,0x84
    009F1 F049      BEQ	0x09FB
(0714)          {T_dat|=0x0008; }
    009F2 9180 02CD LDS	R24,T_dat
    009F4 9190 02CE LDS	R25,T_dat+1
    009F6 6088      ORI	R24,0x8
    009F7 9390 02CE STS	T_dat+1,R25
    009F9 9380 02CD STS	T_dat,R24
(0715) 		 
(0716) 		 Uart0TxData[0]=0xE8;
    009FB EE88      LDI	R24,0xE8
    009FC 9380 011F STS	Uart0TxData,R24
(0717) 		 Uart0TxData[1]=0x40;
    009FE E480      LDI	R24,0x40
    009FF 9380 0120 STS	Uart0TxData+1,R24
(0718) 		 Uart0TxData[2]=0x84;
    00A01 E884      LDI	R24,0x84
    00A02 9380 0121 STS	Uart0TxData+2,R24
(0719) 		 Uart0TxData[3]=4;//包4
    00A04 E084      LDI	R24,4
    00A05 9380 0122 STS	Uart0TxData+3,R24
(0720) 		 Uart0TxData[4]=0x21;
    00A07 E281      LDI	R24,0x21
    00A08 9380 0123 STS	Uart0TxData+4,R24
(0721) 		 Uart0TxData[5]=0x22;
    00A0A E282      LDI	R24,0x22
    00A0B 9380 0124 STS	Uart0TxData+5,R24
(0722) 		 Uart0TxData[6]=0x23;
    00A0D E283      LDI	R24,0x23
    00A0E 9380 0125 STS	Uart0TxData+6,R24
(0723) 		 Uart0TxData[7]=0x24;
    00A10 E284      LDI	R24,0x24
    00A11 9380 0126 STS	Uart0TxData+7,R24
(0724) 		 Uart0TxData[8]=0x32;	 
    00A13 E382      LDI	R24,0x32
    00A14 9380 0127 STS	Uart0TxData+8,R24
(0725) 		 for(k=0;k<64;k++)
    00A16 2422      CLR	R2
    00A17 2433      CLR	R3
    00A18 9230 02AC STS	k+1,R3
    00A1A 9220 02AB STS	k,R2
    00A1C C01C      RJMP	0x0A39
(0726) 		 {
(0727) 		 Uart0TxData[9+k]=coeffdata[k+256];  
    00A1D 90A0 02AB LDS	R10,k
    00A1F 90B0 02AC LDS	R11,k+1
    00A21 E689      LDI	R24,0x69
    00A22 E091      LDI	R25,1
    00A23 01F5      MOVW	R30,R10
    00A24 50E0      SUBI	R30,0
    00A25 4FFF      SBCI	R31,0xFF
    00A26 0FE8      ADD	R30,R24
    00A27 1FF9      ADC	R31,R25
    00A28 8020      LD	R2,Z
    00A29 E18F      LDI	R24,0x1F
    00A2A E091      LDI	R25,1
    00A2B 01F5      MOVW	R30,R10
    00A2C 9639      ADIW	R30,0x9
    00A2D 0FE8      ADD	R30,R24
    00A2E 1FF9      ADC	R31,R25
    00A2F 8220      ST	Z,R2
    00A30 9180 02AB LDS	R24,k
    00A32 9190 02AC LDS	R25,k+1
    00A34 9601      ADIW	R24,1
    00A35 9390 02AC STS	k+1,R25
    00A37 9380 02AB STS	k,R24
    00A39 9180 02AB LDS	R24,k
    00A3B 9190 02AC LDS	R25,k+1
    00A3D 3480      CPI	R24,0x40
    00A3E E0E0      LDI	R30,0
    00A3F 079E      CPC	R25,R30
    00A40 F2E0      BCS	0x0A1D
(0728) 		 }		 
(0729) 		 SendUart0_2(74,20);//超时160ms
    00A41 E124      LDI	R18,0x14
    00A42 E030      LDI	R19,0
    00A43 E40A      LDI	R16,0x4A
    00A44 940E 00B7 CALL	_SendUart0_2
(0730) 		 if(!((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x84)))
    00A46 9180 02E1 LDS	R24,Uart0RxCounter
    00A48 3089      CPI	R24,0x9
    00A49 F461      BNE	0x0A56
    00A4A 9180 02E2 LDS	R24,Uart0RxData
    00A4C 3585      CPI	R24,0x55
    00A4D F441      BNE	0x0A56
    00A4E 9180 02E3 LDS	R24,Uart0RxData+1
    00A50 3480      CPI	R24,0x40
    00A51 F421      BNE	0x0A56
    00A52 9180 02E4 LDS	R24,Uart0RxData+2
    00A54 3884      CPI	R24,0x84
    00A55 F049      BEQ	0x0A5F
(0731)          {T_dat|=0x0010; }
    00A56 9180 02CD LDS	R24,T_dat
    00A58 9190 02CE LDS	R25,T_dat+1
    00A5A 6180      ORI	R24,0x10
    00A5B 9390 02CE STS	T_dat+1,R25
    00A5D 9380 02CD STS	T_dat,R24
(0732) 		 
(0733) 		 DataFlag=0;
    00A5F 2422      CLR	R2
    00A60 2433      CLR	R3
    00A61 9230 02B2 STS	DataFlag+1,R3
    00A63 9220 02B1 STS	DataFlag,R2
(0734) 		 coeff_len=0;	
    00A65 9230 011D STS	coeff_len+1,R3
    00A67 9220 011C STS	coeff_len,R2
(0735) 		 T_com=0x0C;
    00A69 E08C      LDI	R24,0xC
    00A6A 9380 02CA STS	T_com,R24
(0736) 		 SendManchester();		
    00A6C 940E 1AA5 CALL	_SendManchester
(0737) 		}     
(0738) 	  }	 
(0739) 	}
    00A6E 940C 181A JMP	0x181A
(0740) 	 
(0741)    else//若不是下发标定系数，则进入以下各个命令的子语句
(0742) 	{ 
(0743) 	T_com=(R_dat>>4);
    00A70 9020 02CB LDS	R2,R_dat
    00A72 9030 02CC LDS	R3,R_dat+1
    00A74 9435      ASR	R3
    00A75 9427      ROR	R2
    00A76 9435      ASR	R3
    00A77 9427      ROR	R2
    00A78 9435      ASR	R3
    00A79 9427      ROR	R2
    00A7A 9435      ASR	R3
    00A7B 9427      ROR	R2
    00A7C 9220 02CA STS	T_com,R2
(0744)     switch(R_dat&0xf0)
    00A7E 9180 02CB LDS	R24,R_dat
    00A80 9190 02CC LDS	R25,R_dat+1
    00A82 7F80      ANDI	R24,0xF0
    00A83 7090      ANDI	R25,0
    00A84 015C      MOVW	R10,R24
    00A85 3680      CPI	R24,0x60
    00A86 E0E0      LDI	R30,0
    00A87 079E      CPC	R25,R30
    00A88 F409      BNE	0x0A8A
    00A89 C271      RJMP	0x0CFB
    00A8A E680      LDI	R24,0x60
    00A8B E090      LDI	R25,0
    00A8C 158A      CP	R24,R10
    00A8D 059B      CPC	R25,R11
    00A8E F40C      BGE	0x0A90
    00A8F C033      RJMP	0x0AC3
    00A90 01C5      MOVW	R24,R10
    00A91 3380      CPI	R24,0x30
    00A92 E0E0      LDI	R30,0
    00A93 079E      CPC	R25,R30
    00A94 F409      BNE	0x0A96
    00A95 C0ED      RJMP	0x0B83
    00A96 E380      LDI	R24,0x30
    00A97 E090      LDI	R25,0
    00A98 158A      CP	R24,R10
    00A99 059B      CPC	R25,R11
    00A9A F0A4      BLT	0x0AAF
    00A9B 01C5      MOVW	R24,R10
    00A9C 3180      CPI	R24,0x10
    00A9D E0E0      LDI	R30,0
    00A9E 079E      CPC	R25,R30
    00A9F F409      BNE	0x0AA1
    00AA0 C05F      RJMP	0x0B00
    00AA1 3180      CPI	R24,0x10
    00AA2 E0E0      LDI	R30,0
    00AA3 079E      CPC	R25,R30
    00AA4 F414      BGE	0x0AA7
    00AA5 940C 181A JMP	0x181A
    00AA7 01C5      MOVW	R24,R10
    00AA8 3280      CPI	R24,0x20
    00AA9 E0E0      LDI	R30,0
    00AAA 079E      CPC	R25,R30
    00AAB F409      BNE	0x0AAD
    00AAC C093      RJMP	0x0B40
    00AAD 940C 181A JMP	0x181A
    00AAF 01C5      MOVW	R24,R10
    00AB0 3480      CPI	R24,0x40
    00AB1 E0E0      LDI	R30,0
    00AB2 079E      CPC	R25,R30
    00AB3 F409      BNE	0x0AB5
    00AB4 C102      RJMP	0x0BB7
    00AB5 3480      CPI	R24,0x40
    00AB6 E0E0      LDI	R30,0
    00AB7 079E      CPC	R25,R30
    00AB8 F414      BGE	0x0ABB
    00AB9 940C 181A JMP	0x181A
    00ABB 01C5      MOVW	R24,R10
    00ABC 3580      CPI	R24,0x50
    00ABD E0E0      LDI	R30,0
    00ABE 079E      CPC	R25,R30
    00ABF F409      BNE	0x0AC1
    00AC0 C14D      RJMP	0x0C0E
    00AC1 940C 181A JMP	0x181A
    00AC3 01C5      MOVW	R24,R10
    00AC4 3980      CPI	R24,0x90
    00AC5 E0E0      LDI	R30,0
    00AC6 079E      CPC	R25,R30
    00AC7 F409      BNE	0x0AC9
    00AC8 C586      RJMP	0x104F
    00AC9 E980      LDI	R24,0x90
    00ACA E090      LDI	R25,0
    00ACB 158A      CP	R24,R10
    00ACC 059B      CPC	R25,R11
    00ACD F0A4      BLT	0x0AE2
    00ACE 01C5      MOVW	R24,R10
    00ACF 3780      CPI	R24,0x70
    00AD0 E0E0      LDI	R30,0
    00AD1 079E      CPC	R25,R30
    00AD2 F409      BNE	0x0AD4
    00AD3 C2F8      RJMP	0x0DCC
    00AD4 3780      CPI	R24,0x70
    00AD5 E0E0      LDI	R30,0
    00AD6 079E      CPC	R25,R30
    00AD7 F414      BGE	0x0ADA
    00AD8 940C 181A JMP	0x181A
    00ADA 01C5      MOVW	R24,R10
    00ADB 3880      CPI	R24,0x80
    00ADC E0E0      LDI	R30,0
    00ADD 079E      CPC	R25,R30
    00ADE F409      BNE	0x0AE0
    00ADF C3C1      RJMP	0x0EA1
    00AE0 940C 181A JMP	0x181A
    00AE2 01C5      MOVW	R24,R10
    00AE3 3B80      CPI	R24,0xB0
    00AE4 E0E0      LDI	R30,0
    00AE5 079E      CPC	R25,R30
    00AE6 F411      BNE	0x0AE9
    00AE7 940C 13D3 JMP	0x13D3
    00AE9 EB80      LDI	R24,0xB0
    00AEA E090      LDI	R25,0
    00AEB 158A      CP	R24,R10
    00AEC 059B      CPC	R25,R11
    00AED F04C      BLT	0x0AF7
    00AEE 01C5      MOVW	R24,R10
    00AEF 3A80      CPI	R24,0xA0
    00AF0 E0E0      LDI	R30,0
    00AF1 079E      CPC	R25,R30
    00AF2 F411      BNE	0x0AF5
    00AF3 940C 130B JMP	0x130B
    00AF5 940C 181A JMP	0x181A
    00AF7 01C5      MOVW	R24,R10
    00AF8 3C80      CPI	R24,0xC0
    00AF9 E0E0      LDI	R30,0
    00AFA 079E      CPC	R25,R30
    00AFB F411      BNE	0x0AFE
    00AFC 940C 149B JMP	0x149B
    00AFE 940C 181A JMP	0x181A
(0745)      { 
(0746) 	  case 0x10://复位 	
(0747) 		Uart0TxData[0]=0xE8;
    00B00 EE88      LDI	R24,0xE8
    00B01 9380 011F STS	Uart0TxData,R24
(0748) 		Uart0TxData[1]=0x40;
    00B03 E480      LDI	R24,0x40
    00B04 9380 0120 STS	Uart0TxData+1,R24
(0749) 		Uart0TxData[2]=0x8D;
    00B06 E88D      LDI	R24,0x8D
    00B07 9380 0121 STS	Uart0TxData+2,R24
(0750) 		Uart0TxData[3]=31;
    00B09 E18F      LDI	R24,0x1F
    00B0A 9380 0122 STS	Uart0TxData+3,R24
(0751) 		SendUart0_2(9,5);//流量板握手，超时40ms
    00B0C E025      LDI	R18,5
    00B0D E030      LDI	R19,0
    00B0E E009      LDI	R16,0x9
    00B0F 940E 00B7 CALL	_SendUart0_2
(0752) 		if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    00B11 9180 02E1 LDS	R24,Uart0RxCounter
    00B13 3089      CPI	R24,0x9
    00B14 F499      BNE	0x0B28
    00B15 9180 02E2 LDS	R24,Uart0RxData
    00B17 3585      CPI	R24,0x55
    00B18 F479      BNE	0x0B28
    00B19 9180 02E3 LDS	R24,Uart0RxData+1
    00B1B 3480      CPI	R24,0x40
    00B1C F459      BNE	0x0B28
    00B1D 9180 02E4 LDS	R24,Uart0RxData+2
    00B1F 388D      CPI	R24,0x8D
    00B20 F439      BNE	0x0B28
(0753) 		 {T_dat=0x00;}
    00B21 2422      CLR	R2
    00B22 2433      CLR	R3
    00B23 9230 02CE STS	T_dat+1,R3
    00B25 9220 02CD STS	T_dat,R2
    00B27 C006      RJMP	0x0B2E
(0754) 		else
(0755) 		 {T_dat=0xff;}
    00B28 EF8F      LDI	R24,0xFF
    00B29 E090      LDI	R25,0
    00B2A 9390 02CE STS	T_dat+1,R25
    00B2C 9380 02CD STS	T_dat,R24
(0756) 		T_dat<<=8;
    00B2E 9020 02CD LDS	R2,T_dat
    00B30 9030 02CE LDS	R3,T_dat+1
    00B32 2C32      MOV	R3,R2
    00B33 2422      CLR	R2
    00B34 9230 02CE STS	T_dat+1,R3
    00B36 9220 02CD STS	T_dat,R2
(0757) 		T_dat|=0x00;
    00B38 9230 02CE STS	T_dat+1,R3
    00B3A 9220 02CD STS	T_dat,R2
(0758) 		SendManchester();	
    00B3C 940E 1AA5 CALL	_SendManchester
(0759) 	  break;
    00B3E 940C 181A JMP	0x181A
(0760) 	  
(0761) 	  case 0x20://读版本号
(0762) 		Uart0TxData[0]=0xE8;
    00B40 EE88      LDI	R24,0xE8
    00B41 9380 011F STS	Uart0TxData,R24
(0763) 		Uart0TxData[1]=0x40;
    00B43 E480      LDI	R24,0x40
    00B44 9380 0120 STS	Uart0TxData+1,R24
(0764) 		Uart0TxData[2]=0x8D;
    00B46 E88D      LDI	R24,0x8D
    00B47 9380 0121 STS	Uart0TxData+2,R24
(0765) 		Uart0TxData[3]=31;
    00B49 E18F      LDI	R24,0x1F
    00B4A 9380 0122 STS	Uart0TxData+3,R24
(0766) 		SendUart0_2(9,5);//流量板提取固件版本号	，超时40ms
    00B4C E025      LDI	R18,5
    00B4D E030      LDI	R19,0
    00B4E E009      LDI	R16,0x9
    00B4F 940E 00B7 CALL	_SendUart0_2
(0767) 		if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8D))
    00B51 9180 02E1 LDS	R24,Uart0RxCounter
    00B53 3089      CPI	R24,0x9
    00B54 F4A1      BNE	0x0B69
    00B55 9180 02E2 LDS	R24,Uart0RxData
    00B57 3585      CPI	R24,0x55
    00B58 F481      BNE	0x0B69
    00B59 9180 02E3 LDS	R24,Uart0RxData+1
    00B5B 3480      CPI	R24,0x40
    00B5C F461      BNE	0x0B69
    00B5D 9180 02E4 LDS	R24,Uart0RxData+2
    00B5F 388D      CPI	R24,0x8D
    00B60 F441      BNE	0x0B69
(0768) 		 {T_dat=Uart0RxData[3];}
    00B61 9020 02E5 LDS	R2,Uart0RxData+3
    00B63 2433      CLR	R3
    00B64 9230 02CE STS	T_dat+1,R3
    00B66 9220 02CD STS	T_dat,R2
    00B68 C006      RJMP	0x0B6F
(0769) 		else
(0770) 		 {T_dat=0xff;}    
    00B69 EF8F      LDI	R24,0xFF
    00B6A E090      LDI	R25,0
    00B6B 9390 02CE STS	T_dat+1,R25
    00B6D 9380 02CD STS	T_dat,R24
(0771) 		T_dat<<=8;
    00B6F 9020 02CD LDS	R2,T_dat
    00B71 9030 02CE LDS	R3,T_dat+1
    00B73 2C32      MOV	R3,R2
    00B74 2422      CLR	R2
    00B75 9230 02CE STS	T_dat+1,R3
    00B77 9220 02CD STS	T_dat,R2
(0772) 		T_dat|=BB;
    00B79 01C1      MOVW	R24,R2
    00B7A 6382      ORI	R24,0x32
    00B7B 9390 02CE STS	T_dat+1,R25
    00B7D 9380 02CD STS	T_dat,R24
(0773) 		SendManchester();	
    00B7F 940E 1AA5 CALL	_SendManchester
(0774) 	  break;
    00B81 940C 181A JMP	0x181A
(0775) 	  
(0776) 	  case 0x30://Cable电压,VIN电压
(0777) 	   CheckMotor(30);   
    00B83 E10E      LDI	R16,0x1E
    00B84 E010      LDI	R17,0
    00B85 940E 02F5 CALL	_CheckMotor
(0778) 	   T_dat=SampleADC(5); //Cable 
    00B87 E005      LDI	R16,5
    00B88 940E 0288 CALL	_SampleADC
    00B8A 2EA0      MOV	R10,R16
    00B8B 2C2A      MOV	R2,R10
    00B8C 2433      CLR	R3
    00B8D 9230 02CE STS	T_dat+1,R3
    00B8F 9220 02CD STS	T_dat,R2
(0779) 	   CheckMotor(30);
    00B91 E10E      LDI	R16,0x1E
    00B92 E010      LDI	R17,0
    00B93 940E 02F5 CALL	_CheckMotor
(0780) 	   T_dat<<=8;
    00B95 9020 02CD LDS	R2,T_dat
    00B97 9030 02CE LDS	R3,T_dat+1
    00B99 2C32      MOV	R3,R2
    00B9A 2422      CLR	R2
    00B9B 9230 02CE STS	T_dat+1,R3
    00B9D 9220 02CD STS	T_dat,R2
(0781) 	   T_dat|=SampleADC(4); //VIN  
    00B9F E004      LDI	R16,4
    00BA0 940E 0288 CALL	_SampleADC
    00BA2 2EA0      MOV	R10,R16
    00BA3 2C2A      MOV	R2,R10
    00BA4 2433      CLR	R3
    00BA5 9040 02CD LDS	R4,T_dat
    00BA7 9050 02CE LDS	R5,T_dat+1
    00BA9 2842      OR	R4,R2
    00BAA 2853      OR	R5,R3
    00BAB 9250 02CE STS	T_dat+1,R5
    00BAD 9240 02CD STS	T_dat,R4
(0782) 	   CheckMotor(30);
    00BAF E10E      LDI	R16,0x1E
    00BB0 E010      LDI	R17,0
    00BB1 940E 02F5 CALL	_CheckMotor
(0783) 	   SendManchester();   
    00BB3 940E 1AA5 CALL	_SendManchester
(0784) 	  break;
    00BB5 940C 181A JMP	0x181A
(0785) 	  
(0786) 	  case 0x40: //采集板压力和温度
(0787) 	  /*
(0788) 		CheckMotor(40); //40ms定时		
(0789) 		T_dat=1234;//没有流量板时暂用一固定数值表示压力
(0790) 		SendManchester();
(0791)         CheckMotor(40); //40ms定时		 
(0792) 		T_dat=5678;//没有流量板时暂用一固定数值表示温度
(0793) 		SendManchester();
(0794) 		*/
(0795) 		Uart0TxData[0]=0xE8;
    00BB7 EE88      LDI	R24,0xE8
    00BB8 9380 011F STS	Uart0TxData,R24
(0796) 		Uart0TxData[1]=0x40;
    00BBA E480      LDI	R24,0x40
    00BBB 9380 0120 STS	Uart0TxData+1,R24
(0797) 		Uart0TxData[2]=0x89;
    00BBD E889      LDI	R24,0x89
    00BBE 9380 0121 STS	Uart0TxData+2,R24
(0798) 		Uart0TxData[3]=9;
    00BC0 E089      LDI	R24,0x9
    00BC1 9380 0122 STS	Uart0TxData+3,R24
(0799) 		SendUart0_2(9,50);//流量板直读检测，超时400ms
    00BC3 E322      LDI	R18,0x32
    00BC4 E030      LDI	R19,0
    00BC5 E009      LDI	R16,0x9
    00BC6 940E 00B7 CALL	_SendUart0_2
(0800) 		
(0801) 		 T_dat=Uart0RxData[1];
    00BC8 9020 02E3 LDS	R2,Uart0RxData+1
    00BCA 2433      CLR	R3
    00BCB 9230 02CE STS	T_dat+1,R3
    00BCD 9220 02CD STS	T_dat,R2
(0802) 		 T_dat<<=8;
    00BCF 9020 02CD LDS	R2,T_dat
    00BD1 9030 02CE LDS	R3,T_dat+1
    00BD3 2C32      MOV	R3,R2
    00BD4 2422      CLR	R2
    00BD5 9230 02CE STS	T_dat+1,R3
    00BD7 9220 02CD STS	T_dat,R2
(0803) 		 T_dat|=Uart0RxData[0];
    00BD9 9020 02E2 LDS	R2,Uart0RxData
    00BDB 2433      CLR	R3
    00BDC 9040 02CD LDS	R4,T_dat
    00BDE 9050 02CE LDS	R5,T_dat+1
    00BE0 2842      OR	R4,R2
    00BE1 2853      OR	R5,R3
    00BE2 9250 02CE STS	T_dat+1,R5
    00BE4 9240 02CD STS	T_dat,R4
(0804) 		 SendManchester();//压力
    00BE6 940E 1AA5 CALL	_SendManchester
(0805) 		 
(0806) 		 CheckMotor(30);	
    00BE8 E10E      LDI	R16,0x1E
    00BE9 E010      LDI	R17,0
    00BEA 940E 02F5 CALL	_CheckMotor
(0807) 		 T_dat=Uart0RxData[3];
    00BEC 9020 02E5 LDS	R2,Uart0RxData+3
    00BEE 2433      CLR	R3
    00BEF 9230 02CE STS	T_dat+1,R3
    00BF1 9220 02CD STS	T_dat,R2
(0808) 		 T_dat<<=8;
    00BF3 9020 02CD LDS	R2,T_dat
    00BF5 9030 02CE LDS	R3,T_dat+1
    00BF7 2C32      MOV	R3,R2
    00BF8 2422      CLR	R2
    00BF9 9230 02CE STS	T_dat+1,R3
    00BFB 9220 02CD STS	T_dat,R2
(0809) 		 T_dat|=Uart0RxData[2];
    00BFD 9020 02E4 LDS	R2,Uart0RxData+2
    00BFF 2433      CLR	R3
    00C00 9040 02CD LDS	R4,T_dat
    00C02 9050 02CE LDS	R5,T_dat+1
    00C04 2842      OR	R4,R2
    00C05 2853      OR	R5,R3
    00C06 9250 02CE STS	T_dat+1,R5
    00C08 9240 02CD STS	T_dat,R4
(0810) 		 SendManchester();//温度
    00C0A 940E 1AA5 CALL	_SendManchester
(0811) 	break;
    00C0C 940C 181A JMP	0x181A
(0812) 	
(0813) 	case 0x50://流量采样	    	          	  	   	  	 
(0814) 		  /*	
(0815) 		  CheckMotor(40); //40ms定时		
(0816) 		  myFIB.f=123.456; 
(0817) 		  T_dat=myFIB.i[1];
(0818) 		  SendManchester();
(0819) 		  CheckMotor(40);
(0820) 		  T_dat=myFIB.i[0];
(0821) 		  SendManchester();
(0822) 		  CheckMotor(40);
(0823) 		  myFIB.f=789.012; 
(0824) 		  T_dat=myFIB.i[1];
(0825) 		  SendManchester();
(0826) 		  CheckMotor(40);
(0827) 		  T_dat=myFIB.i[0];
(0828) 		  SendManchester();
(0829) 		  CheckMotor(40);
(0830) 		  */
(0831) 		  Uart0TxData[0]=0xE8;
    00C0E EE88      LDI	R24,0xE8
    00C0F 9380 011F STS	Uart0TxData,R24
(0832) 		Uart0TxData[1]=0x40;
    00C11 E480      LDI	R24,0x40
    00C12 9380 0120 STS	Uart0TxData+1,R24
(0833) 		Uart0TxData[2]=0x89;
    00C14 E889      LDI	R24,0x89
    00C15 9380 0121 STS	Uart0TxData+2,R24
(0834) 		Uart0TxData[3]=9;
    00C17 E089      LDI	R24,0x9
    00C18 9380 0122 STS	Uart0TxData+3,R24
(0835) 		SendUart0_2(9,50);//流量板直读检测，超时400ms
    00C1A E322      LDI	R18,0x32
    00C1B E030      LDI	R19,0
    00C1C E009      LDI	R16,0x9
    00C1D 940E 00B7 CALL	_SendUart0_2
(0836) 		
(0837) 		  lfib=Uart0RxData[5];
    00C1F 9020 02E7 LDS	R2,Uart0RxData+5
    00C21 2433      CLR	R3
    00C22 2444      CLR	R4
    00C23 2455      CLR	R5
    00C24 9230 0113 STS	lfib+1,R3
    00C26 9220 0112 STS	lfib,R2
    00C28 9250 0115 STS	lfib+3,R5
    00C2A 9240 0114 STS	lfib+2,R4
(0838) 		  lfib<<=8;
    00C2C E088      LDI	R24,0x8
    00C2D E090      LDI	R25,0
    00C2E 9120 0114 LDS	R18,lfib+2
    00C30 9130 0115 LDS	R19,lfib+3
    00C32 9100 0112 LDS	R16,lfib
    00C34 9110 0113 LDS	R17,lfib+1
    00C36 938A      ST	-Y,R24
    00C37 940E 1F5B CALL	lsl32
    00C39 9310 0113 STS	lfib+1,R17
    00C3B 9300 0112 STS	lfib,R16
    00C3D 9330 0115 STS	lfib+3,R19
    00C3F 9320 0114 STS	lfib+2,R18
(0839) 		  lfib|=Uart0RxData[4];
    00C41 9020 02E6 LDS	R2,Uart0RxData+4
    00C43 2433      CLR	R3
    00C44 2444      CLR	R4
    00C45 2455      CLR	R5
    00C46 0138      MOVW	R6,R16
    00C47 0149      MOVW	R8,R18
    00C48 2862      OR	R6,R2
    00C49 2873      OR	R7,R3
    00C4A 2884      OR	R8,R4
    00C4B 2895      OR	R9,R5
    00C4C 9270 0113 STS	lfib+1,R7
    00C4E 9260 0112 STS	lfib,R6
    00C50 9290 0115 STS	lfib+3,R9
    00C52 9280 0114 STS	lfib+2,R8
(0840) 		  lfib&=0x0000ffff;
    00C54 EF4F      LDI	R20,0xFF
    00C55 EF5F      LDI	R21,0xFF
    00C56 E060      LDI	R22,0
    00C57 E070      LDI	R23,0
    00C58 0113      MOVW	R2,R6
    00C59 0124      MOVW	R4,R8
    00C5A 2224      AND	R2,R20
    00C5B 2235      AND	R3,R21
    00C5C 2246      AND	R4,R22
    00C5D 2257      AND	R5,R23
    00C5E 9230 0113 STS	lfib+1,R3
    00C60 9220 0112 STS	lfib,R2
    00C62 9250 0115 STS	lfib+3,R5
    00C64 9240 0114 STS	lfib+2,R4
(0841) 		  myFIB.f=(unsigned long)lfib; 
    00C66 0181      MOVW	R16,R2
    00C67 0192      MOVW	R18,R4
    00C68 940E 1FB7 CALL	ulong2fp
    00C6A 9310 0336 STS	myFIB+1,R17
    00C6C 9300 0335 STS	myFIB,R16
    00C6E 9330 0338 STS	myFIB+3,R19
    00C70 9320 0337 STS	myFIB+2,R18
(0842) 		  
(0843) 		  T_dat=myFIB.i[1];
    00C72 9020 0337 LDS	R2,myFIB+2
    00C74 9030 0338 LDS	R3,myFIB+3
    00C76 9230 02CE STS	T_dat+1,R3
    00C78 9220 02CD STS	T_dat,R2
(0844) 		  SendManchester();//流量-时间
    00C7A 940E 1AA5 CALL	_SendManchester
(0845) 		  
(0846) 		  CheckMotor(30);	
    00C7C E10E      LDI	R16,0x1E
    00C7D E010      LDI	R17,0
    00C7E 940E 02F5 CALL	_CheckMotor
(0847) 		  T_dat=myFIB.i[0];
    00C80 9020 0335 LDS	R2,myFIB
    00C82 9030 0336 LDS	R3,myFIB+1
    00C84 9230 02CE STS	T_dat+1,R3
    00C86 9220 02CD STS	T_dat,R2
(0848) 		  SendManchester();//流量-时间
    00C88 940E 1AA5 CALL	_SendManchester
(0849) 	  
(0850) 		  CheckMotor(30);	
    00C8A E10E      LDI	R16,0x1E
    00C8B E010      LDI	R17,0
    00C8C 940E 02F5 CALL	_CheckMotor
(0851) 		  
(0852) 		  lfib=Uart0RxData[7];
    00C8E 9020 02E9 LDS	R2,Uart0RxData+7
    00C90 2433      CLR	R3
    00C91 2444      CLR	R4
    00C92 2455      CLR	R5
    00C93 9230 0113 STS	lfib+1,R3
    00C95 9220 0112 STS	lfib,R2
    00C97 9250 0115 STS	lfib+3,R5
    00C99 9240 0114 STS	lfib+2,R4
(0853) 		  lfib<<=8;
    00C9B E088      LDI	R24,0x8
    00C9C E090      LDI	R25,0
    00C9D 9120 0114 LDS	R18,lfib+2
    00C9F 9130 0115 LDS	R19,lfib+3
    00CA1 9100 0112 LDS	R16,lfib
    00CA3 9110 0113 LDS	R17,lfib+1
    00CA5 938A      ST	-Y,R24
    00CA6 940E 1F5B CALL	lsl32
    00CA8 9310 0113 STS	lfib+1,R17
    00CAA 9300 0112 STS	lfib,R16
    00CAC 9330 0115 STS	lfib+3,R19
    00CAE 9320 0114 STS	lfib+2,R18
(0854) 		  lfib|=Uart0RxData[6];
    00CB0 9020 02E8 LDS	R2,Uart0RxData+6
    00CB2 2433      CLR	R3
    00CB3 2444      CLR	R4
    00CB4 2455      CLR	R5
    00CB5 0138      MOVW	R6,R16
    00CB6 0149      MOVW	R8,R18
    00CB7 2862      OR	R6,R2
    00CB8 2873      OR	R7,R3
    00CB9 2884      OR	R8,R4
    00CBA 2895      OR	R9,R5
    00CBB 9270 0113 STS	lfib+1,R7
    00CBD 9260 0112 STS	lfib,R6
    00CBF 9290 0115 STS	lfib+3,R9
    00CC1 9280 0114 STS	lfib+2,R8
(0855) 		  lfib&=0x0000ffff;
    00CC3 EF4F      LDI	R20,0xFF
    00CC4 EF5F      LDI	R21,0xFF
    00CC5 E060      LDI	R22,0
    00CC6 E070      LDI	R23,0
    00CC7 0113      MOVW	R2,R6
    00CC8 0124      MOVW	R4,R8
    00CC9 2224      AND	R2,R20
    00CCA 2235      AND	R3,R21
    00CCB 2246      AND	R4,R22
    00CCC 2257      AND	R5,R23
    00CCD 9230 0113 STS	lfib+1,R3
    00CCF 9220 0112 STS	lfib,R2
    00CD1 9250 0115 STS	lfib+3,R5
    00CD3 9240 0114 STS	lfib+2,R4
(0856) 		  myFIB.f=(unsigned long)lfib; 
    00CD5 0181      MOVW	R16,R2
    00CD6 0192      MOVW	R18,R4
    00CD7 940E 1FB7 CALL	ulong2fp
    00CD9 9310 0336 STS	myFIB+1,R17
    00CDB 9300 0335 STS	myFIB,R16
    00CDD 9330 0338 STS	myFIB+3,R19
    00CDF 9320 0337 STS	myFIB+2,R18
(0857) 		  
(0858) 		  T_dat=myFIB.i[1];
    00CE1 9020 0337 LDS	R2,myFIB+2
    00CE3 9030 0338 LDS	R3,myFIB+3
    00CE5 9230 02CE STS	T_dat+1,R3
    00CE7 9220 02CD STS	T_dat,R2
(0859) 		  SendManchester();//流量-相位1
    00CE9 940E 1AA5 CALL	_SendManchester
(0860) 
(0861) 
(0862) 		  CheckMotor(30);	
    00CEB E10E      LDI	R16,0x1E
    00CEC E010      LDI	R17,0
    00CED 940E 02F5 CALL	_CheckMotor
(0863) 		  T_dat=myFIB.i[0];
    00CEF 9020 0335 LDS	R2,myFIB
    00CF1 9030 0336 LDS	R3,myFIB+1
    00CF3 9230 02CE STS	T_dat+1,R3
    00CF5 9220 02CD STS	T_dat,R2
(0864) 		  SendManchester();//流量-相位2
    00CF7 940E 1AA5 CALL	_SendManchester
(0865) 	break;
    00CF9 940C 181A JMP	0x181A
(0866)  
(0867)   case 0x60://收放电机   
(0868)     if( !(((R_dat)==0x61)  || ((R_dat)==0x62) ) )//既不是正转，也不是反转，则立即返回且不响应上位机
    00CFB 90A0 02CB LDS	R10,R_dat
    00CFD 90B0 02CC LDS	R11,R_dat+1
    00CFF 01C5      MOVW	R24,R10
    00D00 3681      CPI	R24,0x61
    00D01 E0E0      LDI	R30,0
    00D02 079E      CPC	R25,R30
    00D03 F031      BEQ	0x0D0A
    00D04 3682      CPI	R24,0x62
    00D05 E0E0      LDI	R30,0
    00D06 079E      CPC	R25,R30
    00D07 F011      BEQ	0x0D0A
(0869) 	 break;
    00D08 940C 181A JMP	0x181A
(0870) 	
(0871)     if(PWM2_PIN==1)//调节电机正在运行
    00D0A B180      IN	R24,0x00
    00D0B 7084      ANDI	R24,4
    00D0C 9586      LSR	R24
    00D0D 9586      LSR	R24
    00D0E 3081      CPI	R24,1
    00D0F F471      BNE	0x0D1E
(0872) 	 {
(0873) 	       Motor1Status.s.StartResult=3;//另一电机正在运行
    00D10 9180 0333 LDS	R24,Motor1Status
    00D12 9190 0334 LDS	R25,Motor1Status+1
    00D14 6C80      ORI	R24,0xC0
    00D15 9390 0334 STS	Motor1Status+1,R25
    00D17 9380 0333 STS	Motor1Status,R24
(0874) 		   CheckMotor(100);//很快响应上位机
    00D19 E604      LDI	R16,0x64
    00D1A E010      LDI	R17,0
    00D1B 940E 02F5 CALL	_CheckMotor
(0875) 	 }
    00D1D C0A2      RJMP	0x0DC0
(0876)     else if(PWM1_PIN==1)//收放电机正在运行
    00D1E B389      IN	R24,0x19
    00D1F 7082      ANDI	R24,2
    00D20 9586      LSR	R24
    00D21 3081      CPI	R24,1
    00D22 F009      BEQ	0x0D24
    00D23 C050      RJMP	0x0D74
(0877) 	 { 
(0878) 	   if( ((DIR1_PIN==0) && (R_dat==0x61)) || ((DIR1_PIN==1) && (R_dat==0x62)) )
    00D24 B389      IN	R24,0x19
    00D25 7084      ANDI	R24,4
    00D26 9586      LSR	R24
    00D27 9586      LSR	R24
    00D28 F441      BNE	0x0D31
    00D29 9180 02CB LDS	R24,R_dat
    00D2B 9190 02CC LDS	R25,R_dat+1
    00D2D 3681      CPI	R24,0x61
    00D2E E0E0      LDI	R30,0
    00D2F 079E      CPC	R25,R30
    00D30 F071      BEQ	0x0D3F
    00D31 B389      IN	R24,0x19
    00D32 7084      ANDI	R24,4
    00D33 9586      LSR	R24
    00D34 9586      LSR	R24
    00D35 3081      CPI	R24,1
    00D36 F499      BNE	0x0D4A
    00D37 9180 02CB LDS	R24,R_dat
    00D39 9190 02CC LDS	R25,R_dat+1
    00D3B 3682      CPI	R24,0x62
    00D3C E0E0      LDI	R30,0
    00D3D 079E      CPC	R25,R30
    00D3E F459      BNE	0x0D4A
(0879) 	    { 
(0880) 		   Motor1Status.s.StartResult=1;//本电机正在同向运行
    00D3F 9180 0333 LDS	R24,Motor1Status
    00D41 9190 0334 LDS	R25,Motor1Status+1
    00D43 738F      ANDI	R24,0x3F
    00D44 6480      ORI	R24,0x40
    00D45 9390 0334 STS	Motor1Status+1,R25
    00D47 9380 0333 STS	Motor1Status,R24
(0881) 		}
    00D49 C025      RJMP	0x0D6F
(0882) 		else if( ((DIR1_PIN==0) && (R_dat==0x62)) || ((DIR1_PIN==1) && (R_dat==0x61)) ) 
    00D4A B389      IN	R24,0x19
    00D4B 7084      ANDI	R24,4
    00D4C 9586      LSR	R24
    00D4D 9586      LSR	R24
    00D4E F441      BNE	0x0D57
    00D4F 9180 02CB LDS	R24,R_dat
    00D51 9190 02CC LDS	R25,R_dat+1
    00D53 3682      CPI	R24,0x62
    00D54 E0E0      LDI	R30,0
    00D55 079E      CPC	R25,R30
    00D56 F071      BEQ	0x0D65
    00D57 B389      IN	R24,0x19
    00D58 7084      ANDI	R24,4
    00D59 9586      LSR	R24
    00D5A 9586      LSR	R24
    00D5B 3081      CPI	R24,1
    00D5C F491      BNE	0x0D6F
    00D5D 9180 02CB LDS	R24,R_dat
    00D5F 9190 02CC LDS	R25,R_dat+1
    00D61 3681      CPI	R24,0x61
    00D62 E0E0      LDI	R30,0
    00D63 079E      CPC	R25,R30
    00D64 F451      BNE	0x0D6F
(0883) 		{
(0884) 		    Motor1Status.s.StartResult=2;//本电机正在反向运行
    00D65 9180 0333 LDS	R24,Motor1Status
    00D67 9190 0334 LDS	R25,Motor1Status+1
    00D69 738F      ANDI	R24,0x3F
    00D6A 6880      ORI	R24,0x80
    00D6B 9390 0334 STS	Motor1Status+1,R25
    00D6D 9380 0333 STS	Motor1Status,R24
(0885) 		}
(0886) 		CheckMotor(100); //很快响应上位机
    00D6F E604      LDI	R16,0x64
    00D70 E010      LDI	R17,0
    00D71 940E 02F5 CALL	_CheckMotor
(0887) 	 }
    00D73 C04C      RJMP	0x0DC0
(0888) 	else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
(0889) 	 {  
(0890) 	    //全部电机状态置初值，上一次停止原因全部清除
(0891) 		Motor1Status.s.BrokenStop=0;
    00D74 9180 0333 LDS	R24,Motor1Status
    00D76 9190 0334 LDS	R25,Motor1Status+1
    00D78 7F8B      ANDI	R24,0xFB
    00D79 9390 0334 STS	Motor1Status+1,R25
    00D7B 9380 0333 STS	Motor1Status,R24
(0892)  	    Motor1Status.s.CommandStop=0;
    00D7D 7F87      ANDI	R24,0xF7
    00D7E 9390 0334 STS	Motor1Status+1,R25
    00D80 9380 0333 STS	Motor1Status,R24
(0893)  	    Motor1Status.s.OverCurrent=0;
    00D82 7E8F      ANDI	R24,0xEF
    00D83 9390 0334 STS	Motor1Status+1,R25
    00D85 9380 0333 STS	Motor1Status,R24
(0894)  	    Motor1Status.s.UnderVoltage=0;
    00D87 7D8F      ANDI	R24,0xDF
    00D88 9390 0334 STS	Motor1Status+1,R25
    00D8A 9380 0333 STS	Motor1Status,R24
(0895) 		Motor1Status.s.StartResult=0;//正常启动
    00D8C 738F      ANDI	R24,0x3F
    00D8D 9390 0334 STS	Motor1Status+1,R25
    00D8F 9380 0333 STS	Motor1Status,R24
(0896)  	   	
(0897) 		VM_H//开电机电源
    00D91 9ABF      SBI	0x17,7
    00D92 9AC7      SBI	0x18,7
(0898) 		
(0899) 		CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定
    00D93 EF04      LDI	R16,0xF4
    00D94 E011      LDI	R17,1
    00D95 940E 02F5 CALL	_CheckMotor
(0900) 		 
(0901) 	    if((R_dat)==0x61)//张开命令
    00D97 9180 02CB LDS	R24,R_dat
    00D99 9190 02CC LDS	R25,R_dat+1
    00D9B 3681      CPI	R24,0x61
    00D9C E0E0      LDI	R30,0
    00D9D 079E      CPC	R25,R30
    00D9E F419      BNE	0x0DA2
(0902) 		  { 
(0903) 		   DIR1_H       //张开
    00D9F 9AD2      SBI	0x1A,2
    00DA0 9ADA      SBI	0x1B,2
(0904) 		  }
    00DA1 C004      RJMP	0x0DA6
(0905) 		else          //收拢命令
(0906) 		 { 
(0907) 		   DIR1_L      //收拢
    00DA2 9AD2      SBI	0x1A,2
    00DA3 B38B      IN	R24,0x1B
    00DA4 7F8B      ANDI	R24,0xFB
    00DA5 BB8B      OUT	0x1B,R24
(0908) 		 }
(0909) 			
(0910) 		//CompCounter=0; //电流监测计数器清0
(0911) 		//EIFR|=0x01;//清INT0中断标志
(0912) 		//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
(0913) 		
(0914) 		TCCR1B = 0x00; //stop
    00DA6 2422      CLR	R2
    00DA7 BC2E      OUT	0x2E,R2
(0915)     	TCNT1 = 61629;   //定时500ms
    00DA8 EB8D      LDI	R24,0xBD
    00DA9 EF90      LDI	R25,0xF0
    00DAA BD9D      OUT	0x2D,R25
    00DAB BD8C      OUT	0x2C,R24
(0916) 		TIFR|=0x04; //清定时器1中断标志
    00DAC B786      IN	R24,0x36
    00DAD 6084      ORI	R24,4
    00DAE BF86      OUT	0x36,R24
(0917)  		TCCR1B = 0x05; //1024分频
    00DAF E085      LDI	R24,5
    00DB0 BD8E      OUT	0x2E,R24
(0918) 		TIFR|=0x04; //清定时器1中断标志
    00DB1 B786      IN	R24,0x36
    00DB2 6084      ORI	R24,4
    00DB3 BF86      OUT	0x36,R24
(0919) 		
(0920) 		Pwm_startup(1);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测		
    00DB4 E001      LDI	R16,1
    00DB5 940E 015D CALL	_Pwm_startup
(0921) 			  
(0922) 		while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
    00DB7 B626      IN	R2,0x36
    00DB8 FE22      SBRS	R2,2
    00DB9 CFFD      RJMP	0x0DB7
(0923) 		TCCR1B = 0x00; //stop
    00DBA 2422      CLR	R2
    00DBB BC2E      OUT	0x2E,R2
(0924) 		
(0925) 		//EIFR|=0x01;//清INT0中断标志
(0926) 		//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
(0927) 
(0928) 		CheckMotor(500);//延时保证总线电压稳定		
    00DBC EF04      LDI	R16,0xF4
    00DBD E011      LDI	R17,1
    00DBE 940E 02F5 CALL	_CheckMotor
(0929)      }
(0930) 	  T_dat=Motor1Status.i;
    00DC0 9020 0333 LDS	R2,Motor1Status
    00DC2 9030 0334 LDS	R3,Motor1Status+1
    00DC4 9230 02CE STS	T_dat+1,R3
    00DC6 9220 02CD STS	T_dat,R2
(0931) 	  SendManchester();	 
    00DC8 940E 1AA5 CALL	_SendManchester
(0932) 	break;
    00DCA 940C 181A JMP	0x181A
(0933) 	
(0934) 	case 0x70://调节电机   
(0935)     if( !(((R_dat)==0x71)  || ((R_dat)==0x72) ) )//既不是调大，也不是调小，则立即返回且不响应上位机
    00DCC 90A0 02CB LDS	R10,R_dat
    00DCE 90B0 02CC LDS	R11,R_dat+1
    00DD0 01C5      MOVW	R24,R10
    00DD1 3781      CPI	R24,0x71
    00DD2 E0E0      LDI	R30,0
    00DD3 079E      CPC	R25,R30
    00DD4 F031      BEQ	0x0DDB
    00DD5 3782      CPI	R24,0x72
    00DD6 E0E0      LDI	R30,0
    00DD7 079E      CPC	R25,R30
    00DD8 F011      BEQ	0x0DDB
(0936) 	 break;
    00DD9 940C 181A JMP	0x181A
(0937) 
(0938)     if(PWM1_PIN==1)//收放电机正在运行
    00DDB B389      IN	R24,0x19
    00DDC 7082      ANDI	R24,2
    00DDD 9586      LSR	R24
    00DDE 3081      CPI	R24,1
    00DDF F471      BNE	0x0DEE
(0939) 	 {
(0940) 	      Motor2Status.s.StartResult=3;//另一电机正在运行
    00DE0 9180 0331 LDS	R24,Motor2Status
    00DE2 9190 0332 LDS	R25,Motor2Status+1
    00DE4 6C80      ORI	R24,0xC0
    00DE5 9390 0332 STS	Motor2Status+1,R25
    00DE7 9380 0331 STS	Motor2Status,R24
(0941) 		  CheckMotor(100);//很快响应上位机
    00DE9 E604      LDI	R16,0x64
    00DEA E010      LDI	R17,0
    00DEB 940E 02F5 CALL	_CheckMotor
(0942) 	 }
    00DED C0A7      RJMP	0x0E95
(0943)     else if(PWM2_PIN==1)//调节电机正在运行
    00DEE B180      IN	R24,0x00
    00DEF 7084      ANDI	R24,4
    00DF0 9586      LSR	R24
    00DF1 9586      LSR	R24
    00DF2 3081      CPI	R24,1
    00DF3 F009      BEQ	0x0DF5
    00DF4 C046      RJMP	0x0E3B
(0944) 	 { 
(0945) 	   if( ((DIR2_PIN==0) && (R_dat==0x71)) || ((DIR2_PIN==1) && (R_dat==0x72)) )
    00DF5 9900      SBIC	0x00,0
    00DF6 C008      RJMP	0x0DFF
    00DF7 9180 02CB LDS	R24,R_dat
    00DF9 9190 02CC LDS	R25,R_dat+1
    00DFB 3781      CPI	R24,0x71
    00DFC E0E0      LDI	R30,0
    00DFD 079E      CPC	R25,R30
    00DFE F061      BEQ	0x0E0B
    00DFF B180      IN	R24,0x00
    00E00 7081      ANDI	R24,1
    00E01 3081      CPI	R24,1
    00E02 F499      BNE	0x0E16
    00E03 9180 02CB LDS	R24,R_dat
    00E05 9190 02CC LDS	R25,R_dat+1
    00E07 3782      CPI	R24,0x72
    00E08 E0E0      LDI	R30,0
    00E09 079E      CPC	R25,R30
    00E0A F459      BNE	0x0E16
(0946) 	    { 
(0947) 		   Motor2Status.s.StartResult=1;//本电机正在同向运行
    00E0B 9180 0331 LDS	R24,Motor2Status
    00E0D 9190 0332 LDS	R25,Motor2Status+1
    00E0F 738F      ANDI	R24,0x3F
    00E10 6480      ORI	R24,0x40
    00E11 9390 0332 STS	Motor2Status+1,R25
    00E13 9380 0331 STS	Motor2Status,R24
(0948) 		}
    00E15 C020      RJMP	0x0E36
(0949) 		else if( ((DIR2_PIN==0) && (R_dat==0x72)) || ((DIR2_PIN==1) && (R_dat==0x71)) ) 
    00E16 9900      SBIC	0x00,0
    00E17 C008      RJMP	0x0E20
    00E18 9180 02CB LDS	R24,R_dat
    00E1A 9190 02CC LDS	R25,R_dat+1
    00E1C 3782      CPI	R24,0x72
    00E1D E0E0      LDI	R30,0
    00E1E 079E      CPC	R25,R30
    00E1F F061      BEQ	0x0E2C
    00E20 B180      IN	R24,0x00
    00E21 7081      ANDI	R24,1
    00E22 3081      CPI	R24,1
    00E23 F491      BNE	0x0E36
    00E24 9180 02CB LDS	R24,R_dat
    00E26 9190 02CC LDS	R25,R_dat+1
    00E28 3781      CPI	R24,0x71
    00E29 E0E0      LDI	R30,0
    00E2A 079E      CPC	R25,R30
    00E2B F451      BNE	0x0E36
(0950) 		{
(0951) 		   Motor2Status.s.StartResult=2;//本电机正在反向运行
    00E2C 9180 0331 LDS	R24,Motor2Status
    00E2E 9190 0332 LDS	R25,Motor2Status+1
    00E30 738F      ANDI	R24,0x3F
    00E31 6880      ORI	R24,0x80
    00E32 9390 0332 STS	Motor2Status+1,R25
    00E34 9380 0331 STS	Motor2Status,R24
(0952) 		}	 
(0953) 		CheckMotor(100); //很快响应上位机
    00E36 E604      LDI	R16,0x64
    00E37 E010      LDI	R17,0
    00E38 940E 02F5 CALL	_CheckMotor
(0954) 	 }
    00E3A C05A      RJMP	0x0E95
(0955) 	else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
(0956) 	 {  
(0957)  	    //全部电机状态置初值，上一次停止原因全部清除
(0958) 		Motor2Status.s.BrokenStop=0;
    00E3B 9180 0331 LDS	R24,Motor2Status
    00E3D 9190 0332 LDS	R25,Motor2Status+1
    00E3F 7F8B      ANDI	R24,0xFB
    00E40 9390 0332 STS	Motor2Status+1,R25
    00E42 9380 0331 STS	Motor2Status,R24
(0959)  	    Motor2Status.s.CommandStop=0;
    00E44 7F87      ANDI	R24,0xF7
    00E45 9390 0332 STS	Motor2Status+1,R25
    00E47 9380 0331 STS	Motor2Status,R24
(0960)  	    Motor2Status.s.OverCurrent=0;
    00E49 7E8F      ANDI	R24,0xEF
    00E4A 9390 0332 STS	Motor2Status+1,R25
    00E4C 9380 0331 STS	Motor2Status,R24
(0961)  	    Motor2Status.s.UnderVoltage=0;
    00E4E 7D8F      ANDI	R24,0xDF
    00E4F 9390 0332 STS	Motor2Status+1,R25
    00E51 9380 0331 STS	Motor2Status,R24
(0962) 		Motor2Status.s.StartResult=0;//正常启动
    00E53 738F      ANDI	R24,0x3F
    00E54 9390 0332 STS	Motor2Status+1,R25
    00E56 9380 0331 STS	Motor2Status,R24
(0963) 		
(0964) 		VM_H//开电机电源
    00E58 9ABF      SBI	0x17,7
    00E59 9AC7      SBI	0x18,7
(0965) 		CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定
    00E5A EF04      LDI	R16,0xF4
    00E5B E011      LDI	R17,1
    00E5C 940E 02F5 CALL	_CheckMotor
(0966) 		
(0967) 	    if((R_dat)==0x71)//张开命令
    00E5E 9180 02CB LDS	R24,R_dat
    00E60 9190 02CC LDS	R25,R_dat+1
    00E62 3781      CPI	R24,0x71
    00E63 E0E0      LDI	R30,0
    00E64 079E      CPC	R25,R30
    00E65 F459      BNE	0x0E71
(0968) 		  { 
(0969) 		   DIR2_H       //张开
    00E66 9180 0061 LDS	R24,0x61
    00E68 6081      ORI	R24,1
    00E69 9380 0061 STS	0x61,R24
    00E6B 9180 0062 LDS	R24,0x62
    00E6D 6081      ORI	R24,1
    00E6E 9380 0062 STS	0x62,R24
(0970) 		  }
    00E70 C00A      RJMP	0x0E7B
(0971) 		else          //收拢命令
(0972) 		 { 
(0973) 		   DIR2_L      //收拢
    00E71 9180 0061 LDS	R24,0x61
    00E73 6081      ORI	R24,1
    00E74 9380 0061 STS	0x61,R24
    00E76 9180 0062 LDS	R24,0x62
    00E78 7F8E      ANDI	R24,0xFE
    00E79 9380 0062 STS	0x62,R24
(0974) 		 }
(0975) 			
(0976) 		//CompCounter=0; //电流监测计数器清0
(0977) 		//EIFR|=0x01;//清INT0中断标志
(0978) 		//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
(0979) 		
(0980) 		TCCR1B = 0x00; //stop
    00E7B 2422      CLR	R2
    00E7C BC2E      OUT	0x2E,R2
(0981)     	TCNT1 = 61629;   //定时500ms
    00E7D EB8D      LDI	R24,0xBD
    00E7E EF90      LDI	R25,0xF0
    00E7F BD9D      OUT	0x2D,R25
    00E80 BD8C      OUT	0x2C,R24
(0982) 		TIFR|=0x04; //清定时器1中断标志
    00E81 B786      IN	R24,0x36
    00E82 6084      ORI	R24,4
    00E83 BF86      OUT	0x36,R24
(0983)  		TCCR1B = 0x05; //1024分频
    00E84 E085      LDI	R24,5
    00E85 BD8E      OUT	0x2E,R24
(0984) 		TIFR|=0x04; //清定时器1中断标志
    00E86 B786      IN	R24,0x36
    00E87 6084      ORI	R24,4
    00E88 BF86      OUT	0x36,R24
(0985) 
(0986) 		Pwm_startup(2);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测					
    00E89 E002      LDI	R16,2
    00E8A 940E 015D CALL	_Pwm_startup
(0987) 			  
(0988) 		while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
    00E8C B626      IN	R2,0x36
    00E8D FE22      SBRS	R2,2
    00E8E CFFD      RJMP	0x0E8C
(0989) 		TCCR1B = 0x00; //stop
    00E8F 2422      CLR	R2
    00E90 BC2E      OUT	0x2E,R2
(0990) 		
(0991) 		//EIFR|=0x01;//清INT0中断标志
(0992) 		//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
(0993) 					
(0994) 		CheckMotor(500);//延时保证总线电压稳定		 	 
    00E91 EF04      LDI	R16,0xF4
    00E92 E011      LDI	R17,1
    00E93 940E 02F5 CALL	_CheckMotor
(0995)      }
(0996) 	  T_dat=Motor2Status.i;
    00E95 9020 0331 LDS	R2,Motor2Status
    00E97 9030 0332 LDS	R3,Motor2Status+1
    00E99 9230 02CE STS	T_dat+1,R3
    00E9B 9220 02CD STS	T_dat,R2
(0997) 	  SendManchester();		 
    00E9D 940E 1AA5 CALL	_SendManchester
(0998) 	break;
    00E9F 940C 181A JMP	0x181A
(0999)  
(1000)     case 0x80://电机相关命令
(1001) 	   if(R_dat==0x80)//只开电机电源，不开电机
    00EA1 9180 02CB LDS	R24,R_dat
    00EA3 9190 02CC LDS	R25,R_dat+1
    00EA5 3880      CPI	R24,0x80
    00EA6 E0E0      LDI	R30,0
    00EA7 079E      CPC	R25,R30
    00EA8 F4A1      BNE	0x0EBD
(1002) 		{        	  
(1003) 	      CheckMotor(30);//延迟10ms  
    00EA9 E10E      LDI	R16,0x1E
    00EAA E010      LDI	R17,0
    00EAB 940E 02F5 CALL	_CheckMotor
(1004) 		  VM_H//开电机电源
    00EAD 9ABF      SBI	0x17,7
    00EAE 9AC7      SBI	0x18,7
(1005) 		  CheckMotor(30);//延迟10ms  
    00EAF E10E      LDI	R16,0x1E
    00EB0 E010      LDI	R17,0
    00EB1 940E 02F5 CALL	_CheckMotor
(1006) 		  T_dat=0x0000;   
    00EB3 2422      CLR	R2
    00EB4 2433      CLR	R3
    00EB5 9230 02CE STS	T_dat+1,R3
    00EB7 9220 02CD STS	T_dat,R2
(1007) 	      SendManchester();
    00EB9 940E 1AA5 CALL	_SendManchester
(1008) 		}	  
    00EBB 940C 181A JMP	0x181A
(1009) 		else if(R_dat==0x81)//获取电机状态	
    00EBD 9180 02CB LDS	R24,R_dat
    00EBF 9190 02CC LDS	R25,R_dat+1
    00EC1 3881      CPI	R24,0x81
    00EC2 E0E0      LDI	R30,0
    00EC3 079E      CPC	R25,R30
    00EC4 F4F1      BNE	0x0EE3
(1010) 		{ 
(1011)          //先处理收放电机
(1012) 	      CheckMotor(30);//延迟10ms  
    00EC5 E10E      LDI	R16,0x1E
    00EC6 E010      LDI	R17,0
    00EC7 940E 02F5 CALL	_CheckMotor
(1013) 		  T_dat=Motor1Status.i;	   
    00EC9 9020 0333 LDS	R2,Motor1Status
    00ECB 9030 0334 LDS	R3,Motor1Status+1
    00ECD 9230 02CE STS	T_dat+1,R3
    00ECF 9220 02CD STS	T_dat,R2
(1014) 	      SendManchester();
    00ED1 940E 1AA5 CALL	_SendManchester
(1015) 		  
(1016) 		  //再处理调节电机 
(1017) 	      CheckMotor(30);//延迟10ms  
    00ED3 E10E      LDI	R16,0x1E
    00ED4 E010      LDI	R17,0
    00ED5 940E 02F5 CALL	_CheckMotor
(1018) 		  T_dat=Motor2Status.i;	    
    00ED7 9020 0331 LDS	R2,Motor2Status
    00ED9 9030 0332 LDS	R3,Motor2Status+1
    00EDB 9230 02CE STS	T_dat+1,R3
    00EDD 9220 02CD STS	T_dat,R2
(1019) 	      SendManchester();
    00EDF 940E 1AA5 CALL	_SendManchester
(1020) 		}	  
    00EE1 940C 181A JMP	0x181A
(1021)        else if(R_dat==0x82)//电机停止，同时停止二个电机
    00EE3 9180 02CB LDS	R24,R_dat
    00EE5 9190 02CC LDS	R25,R_dat+1
    00EE7 3882      CPI	R24,0x82
    00EE8 E0E0      LDI	R30,0
    00EE9 079E      CPC	R25,R30
    00EEA F009      BEQ	0x0EEC
    00EEB C047      RJMP	0x0F33
(1022) 		{	 
(1023) 		   if(PWM1_PIN==1)//收放电机正在运行
    00EEC B389      IN	R24,0x19
    00EED 7082      ANDI	R24,2
    00EEE 9586      LSR	R24
    00EEF 3081      CPI	R24,1
    00EF0 F449      BNE	0x0EFA
(1024)    		   {
(1025)  		   Motor1Status.s.CommandStop=1;
    00EF1 9180 0333 LDS	R24,Motor1Status
    00EF3 9190 0334 LDS	R25,Motor1Status+1
    00EF5 6088      ORI	R24,0x8
    00EF6 9390 0334 STS	Motor1Status+1,R25
    00EF8 9380 0333 STS	Motor1Status,R24
(1026)    		   }
(1027)  		   if(PWM2_PIN==1)//调节电机正在运行
    00EFA B180      IN	R24,0x00
    00EFB 7084      ANDI	R24,4
    00EFC 9586      LSR	R24
    00EFD 9586      LSR	R24
    00EFE 3081      CPI	R24,1
    00EFF F449      BNE	0x0F09
(1028)    		   { 
(1029)  		   Motor2Status.s.CommandStop=1;
    00F00 9180 0331 LDS	R24,Motor2Status
    00F02 9190 0332 LDS	R25,Motor2Status+1
    00F04 6088      ORI	R24,0x8
    00F05 9390 0332 STS	Motor2Status+1,R25
    00F07 9380 0331 STS	Motor2Status,R24
(1030)    		   }
(1031)  	 	   MOTORSTOP  //关电机
    00F09 B38A      IN	R24,0x1A
    00F0A 6087      ORI	R24,7
    00F0B BB8A      OUT	0x1A,R24
    00F0C B38B      IN	R24,0x1B
    00F0D 7F8D      ANDI	R24,0xFD
    00F0E BB8B      OUT	0x1B,R24
    00F0F B38B      IN	R24,0x1B
    00F10 7F88      ANDI	R24,0xF8
    00F11 BB8B      OUT	0x1B,R24
    00F12 9180 0061 LDS	R24,0x61
    00F14 6087      ORI	R24,7
    00F15 9380 0061 STS	0x61,R24
    00F17 9180 0062 LDS	R24,0x62
    00F19 7F8B      ANDI	R24,0xFB
    00F1A 9380 0062 STS	0x62,R24
    00F1C 9180 0062 LDS	R24,0x62
    00F1E 7F88      ANDI	R24,0xF8
    00F1F 9380 0062 STS	0x62,R24
    00F21 9ABF      SBI	0x17,7
    00F22 B388      IN	R24,0x18
    00F23 778F      ANDI	R24,0x7F
    00F24 BB88      OUT	0x18,R24
(1032) 		   CheckMotor(200);
    00F25 EC08      LDI	R16,0xC8
    00F26 E010      LDI	R17,0
    00F27 940E 02F5 CALL	_CheckMotor
(1033) 		   T_dat=0x0000;	
    00F29 2422      CLR	R2
    00F2A 2433      CLR	R3
    00F2B 9230 02CE STS	T_dat+1,R3
    00F2D 9220 02CD STS	T_dat,R2
(1034) 		   SendManchester();	 
    00F2F 940E 1AA5 CALL	_SendManchester
(1035) 		}
    00F31 940C 181A JMP	0x181A
(1036) 		else if(R_dat==0x83)//读取电机堵转电流阈值
    00F33 9180 02CB LDS	R24,R_dat
    00F35 9190 02CC LDS	R25,R_dat+1
    00F37 3883      CPI	R24,0x83
    00F38 E0E0      LDI	R30,0
    00F39 079E      CPC	R25,R30
    00F3A F5A1      BNE	0x0F6F
(1037) 	    {
(1038) 		  Motor1Thr=EEPROM_read(0);//收放电机
    00F3B 2700      CLR	R16
    00F3C 2711      CLR	R17
    00F3D 940E 1EB0 CALL	_EEPROM_read
    00F3F 2EA0      MOV	R10,R16
    00F40 92A0 0330 STS	Motor1Thr,R10
(1039) 		  Motor2Thr=EEPROM_read(1);//调节电机
    00F42 E001      LDI	R16,1
    00F43 E010      LDI	R17,0
    00F44 940E 1EB0 CALL	_EEPROM_read
    00F46 2EA0      MOV	R10,R16
    00F47 92A0 032F STS	Motor2Thr,R10
(1040) 		  CheckMotor(30);//延迟30ms  	
    00F49 E10E      LDI	R16,0x1E
    00F4A E010      LDI	R17,0
    00F4B 940E 02F5 CALL	_CheckMotor
(1041) 		  T_dat=Motor2Thr;	 
    00F4D 9020 032F LDS	R2,Motor2Thr
    00F4F 2433      CLR	R3
    00F50 9230 02CE STS	T_dat+1,R3
    00F52 9220 02CD STS	T_dat,R2
(1042) 		  T_dat<<=8;
    00F54 9020 02CD LDS	R2,T_dat
    00F56 9030 02CE LDS	R3,T_dat+1
    00F58 2C32      MOV	R3,R2
    00F59 2422      CLR	R2
    00F5A 9230 02CE STS	T_dat+1,R3
    00F5C 9220 02CD STS	T_dat,R2
(1043) 		  T_dat|=Motor1Thr; 
    00F5E 9020 0330 LDS	R2,Motor1Thr
    00F60 2433      CLR	R3
    00F61 9040 02CD LDS	R4,T_dat
    00F63 9050 02CE LDS	R5,T_dat+1
    00F65 2842      OR	R4,R2
    00F66 2853      OR	R5,R3
    00F67 9250 02CE STS	T_dat+1,R5
    00F69 9240 02CD STS	T_dat,R4
(1044) 	      SendManchester();
    00F6B 940E 1AA5 CALL	_SendManchester
(1045) 	    }	
    00F6D 940C 181A JMP	0x181A
(1046) 		else if(R_dat>0x83)//还剩12档，用于设置电机堵转电流, 收放电机和调节电机各6档，每档差值30mA,7.721/10mA
    00F6F E883      LDI	R24,0x83
    00F70 E090      LDI	R25,0
    00F71 9020 02CB LDS	R2,R_dat
    00F73 9030 02CC LDS	R3,R_dat+1
    00F75 1582      CP	R24,R2
    00F76 0593      CPC	R25,R3
    00F77 F014      BLT	0x0F7A
    00F78 940C 181A JMP	0x181A
(1047) 		{
(1048) 		  if(R_dat==0x84)
    00F7A 01C1      MOVW	R24,R2
    00F7B 3884      CPI	R24,0x84
    00F7C E0E0      LDI	R30,0
    00F7D 079E      CPC	R25,R30
    00F7E F449      BNE	0x0F88
(1049) 		  {
(1050) 		    Motor1Thr=77;//100mA
    00F7F E48D      LDI	R24,0x4D
    00F80 9380 0330 STS	Motor1Thr,R24
(1051) 			EEPROM_write(0,Motor1Thr);
    00F82 2F28      MOV	R18,R24
    00F83 2700      CLR	R16
    00F84 2711      CLR	R17
    00F85 940E 1EA8 CALL	_EEPROM_write
(1052) 		  }
    00F87 C0BA      RJMP	0x1042
(1053) 		  else if(R_dat==0x85)
    00F88 9180 02CB LDS	R24,R_dat
    00F8A 9190 02CC LDS	R25,R_dat+1
    00F8C 3885      CPI	R24,0x85
    00F8D E0E0      LDI	R30,0
    00F8E 079E      CPC	R25,R30
    00F8F F449      BNE	0x0F99
(1054) 		  {
(1055) 		    Motor1Thr=93;//120mA
    00F90 E58D      LDI	R24,0x5D
    00F91 9380 0330 STS	Motor1Thr,R24
(1056) 			EEPROM_write(0,Motor1Thr);
    00F93 2F28      MOV	R18,R24
    00F94 2700      CLR	R16
    00F95 2711      CLR	R17
    00F96 940E 1EA8 CALL	_EEPROM_write
(1057) 		  }
    00F98 C0A9      RJMP	0x1042
(1058) 		  else if(R_dat==0x86)
    00F99 9180 02CB LDS	R24,R_dat
    00F9B 9190 02CC LDS	R25,R_dat+1
    00F9D 3886      CPI	R24,0x86
    00F9E E0E0      LDI	R30,0
    00F9F 079E      CPC	R25,R30
    00FA0 F449      BNE	0x0FAA
(1059) 		  {
(1060) 		    Motor1Thr=108;//140mA
    00FA1 E68C      LDI	R24,0x6C
    00FA2 9380 0330 STS	Motor1Thr,R24
(1061) 			EEPROM_write(0,Motor1Thr);
    00FA4 2F28      MOV	R18,R24
    00FA5 2700      CLR	R16
    00FA6 2711      CLR	R17
    00FA7 940E 1EA8 CALL	_EEPROM_write
(1062) 		  }
    00FA9 C098      RJMP	0x1042
(1063) 		  else if(R_dat==0x87)
    00FAA 9180 02CB LDS	R24,R_dat
    00FAC 9190 02CC LDS	R25,R_dat+1
    00FAE 3887      CPI	R24,0x87
    00FAF E0E0      LDI	R30,0
    00FB0 079E      CPC	R25,R30
    00FB1 F449      BNE	0x0FBB
(1064) 		  {
(1065) 		    Motor1Thr=123;//160mA
    00FB2 E78B      LDI	R24,0x7B
    00FB3 9380 0330 STS	Motor1Thr,R24
(1066) 			EEPROM_write(0,Motor1Thr);
    00FB5 2F28      MOV	R18,R24
    00FB6 2700      CLR	R16
    00FB7 2711      CLR	R17
    00FB8 940E 1EA8 CALL	_EEPROM_write
(1067) 		  }
    00FBA C087      RJMP	0x1042
(1068) 		  else if(R_dat==0x88)
    00FBB 9180 02CB LDS	R24,R_dat
    00FBD 9190 02CC LDS	R25,R_dat+1
    00FBF 3888      CPI	R24,0x88
    00FC0 E0E0      LDI	R30,0
    00FC1 079E      CPC	R25,R30
    00FC2 F449      BNE	0x0FCC
(1069) 		  {
(1070) 		    Motor1Thr=139;//180mA
    00FC3 E88B      LDI	R24,0x8B
    00FC4 9380 0330 STS	Motor1Thr,R24
(1071) 			EEPROM_write(0,Motor1Thr);
    00FC6 2F28      MOV	R18,R24
    00FC7 2700      CLR	R16
    00FC8 2711      CLR	R17
    00FC9 940E 1EA8 CALL	_EEPROM_write
(1072) 		  }
    00FCB C076      RJMP	0x1042
(1073) 		  else if(R_dat==0x89)
    00FCC 9180 02CB LDS	R24,R_dat
    00FCE 9190 02CC LDS	R25,R_dat+1
    00FD0 3889      CPI	R24,0x89
    00FD1 E0E0      LDI	R30,0
    00FD2 079E      CPC	R25,R30
    00FD3 F449      BNE	0x0FDD
(1074) 		  {
(1075) 		    Motor1Thr=154;//200mA
    00FD4 E98A      LDI	R24,0x9A
    00FD5 9380 0330 STS	Motor1Thr,R24
(1076) 			EEPROM_write(0,Motor1Thr);
    00FD7 2F28      MOV	R18,R24
    00FD8 2700      CLR	R16
    00FD9 2711      CLR	R17
    00FDA 940E 1EA8 CALL	_EEPROM_write
(1077) 		  }
    00FDC C065      RJMP	0x1042
(1078) 		  else if(R_dat==0x8a)
    00FDD 9180 02CB LDS	R24,R_dat
    00FDF 9190 02CC LDS	R25,R_dat+1
    00FE1 388A      CPI	R24,0x8A
    00FE2 E0E0      LDI	R30,0
    00FE3 079E      CPC	R25,R30
    00FE4 F449      BNE	0x0FEE
(1079) 		  {
(1080) 		    Motor2Thr=77;//100mA
    00FE5 E48D      LDI	R24,0x4D
    00FE6 9380 032F STS	Motor2Thr,R24
(1081) 			EEPROM_write(1,Motor2Thr);
    00FE8 2F28      MOV	R18,R24
    00FE9 E001      LDI	R16,1
    00FEA E010      LDI	R17,0
    00FEB 940E 1EA8 CALL	_EEPROM_write
(1082) 		  }
    00FED C054      RJMP	0x1042
(1083) 		  else if(R_dat==0x8b)
    00FEE 9180 02CB LDS	R24,R_dat
    00FF0 9190 02CC LDS	R25,R_dat+1
    00FF2 388B      CPI	R24,0x8B
    00FF3 E0E0      LDI	R30,0
    00FF4 079E      CPC	R25,R30
    00FF5 F449      BNE	0x0FFF
(1084) 		  {
(1085) 		    Motor2Thr=93;//120mA
    00FF6 E58D      LDI	R24,0x5D
    00FF7 9380 032F STS	Motor2Thr,R24
(1086) 			EEPROM_write(1,Motor2Thr);
    00FF9 2F28      MOV	R18,R24
    00FFA E001      LDI	R16,1
    00FFB E010      LDI	R17,0
    00FFC 940E 1EA8 CALL	_EEPROM_write
(1087) 		  }
    00FFE C043      RJMP	0x1042
(1088) 		  else if(R_dat==0x8c)
    00FFF 9180 02CB LDS	R24,R_dat
    01001 9190 02CC LDS	R25,R_dat+1
    01003 388C      CPI	R24,0x8C
    01004 E0E0      LDI	R30,0
    01005 079E      CPC	R25,R30
    01006 F449      BNE	0x1010
(1089) 		  {
(1090) 		    Motor2Thr=108;//140mA
    01007 E68C      LDI	R24,0x6C
    01008 9380 032F STS	Motor2Thr,R24
(1091) 			EEPROM_write(1,Motor2Thr);
    0100A 2F28      MOV	R18,R24
    0100B E001      LDI	R16,1
    0100C E010      LDI	R17,0
    0100D 940E 1EA8 CALL	_EEPROM_write
(1092) 		  }
    0100F C032      RJMP	0x1042
(1093) 		  else if(R_dat==0x8d)
    01010 9180 02CB LDS	R24,R_dat
    01012 9190 02CC LDS	R25,R_dat+1
    01014 388D      CPI	R24,0x8D
    01015 E0E0      LDI	R30,0
    01016 079E      CPC	R25,R30
    01017 F449      BNE	0x1021
(1094) 		  {
(1095) 		    Motor2Thr=123;//160mA
    01018 E78B      LDI	R24,0x7B
    01019 9380 032F STS	Motor2Thr,R24
(1096) 			EEPROM_write(1,Motor2Thr);
    0101B 2F28      MOV	R18,R24
    0101C E001      LDI	R16,1
    0101D E010      LDI	R17,0
    0101E 940E 1EA8 CALL	_EEPROM_write
(1097) 		  }
    01020 C021      RJMP	0x1042
(1098) 		  else if(R_dat==0x8e)
    01021 9180 02CB LDS	R24,R_dat
    01023 9190 02CC LDS	R25,R_dat+1
    01025 388E      CPI	R24,0x8E
    01026 E0E0      LDI	R30,0
    01027 079E      CPC	R25,R30
    01028 F449      BNE	0x1032
(1099) 		  {
(1100) 		    Motor2Thr=139;//180mA
    01029 E88B      LDI	R24,0x8B
    0102A 9380 032F STS	Motor2Thr,R24
(1101) 			EEPROM_write(1,Motor2Thr);
    0102C 2F28      MOV	R18,R24
    0102D E001      LDI	R16,1
    0102E E010      LDI	R17,0
    0102F 940E 1EA8 CALL	_EEPROM_write
(1102) 		  }
    01031 C010      RJMP	0x1042
(1103) 		  else if(R_dat==0x8f)
    01032 9180 02CB LDS	R24,R_dat
    01034 9190 02CC LDS	R25,R_dat+1
    01036 388F      CPI	R24,0x8F
    01037 E0E0      LDI	R30,0
    01038 079E      CPC	R25,R30
    01039 F441      BNE	0x1042
(1104) 		  {
(1105) 		    Motor2Thr=154;//200mA
    0103A E98A      LDI	R24,0x9A
    0103B 9380 032F STS	Motor2Thr,R24
(1106) 			EEPROM_write(1,Motor2Thr);
    0103D 2F28      MOV	R18,R24
    0103E E001      LDI	R16,1
    0103F E010      LDI	R17,0
    01040 940E 1EA8 CALL	_EEPROM_write
(1107) 		  }	  
(1108) 		  CheckMotor(30);//延迟30ms  	
    01042 E10E      LDI	R16,0x1E
    01043 E010      LDI	R17,0
    01044 940E 02F5 CALL	_CheckMotor
(1109) 		  T_dat=0;	    
    01046 2422      CLR	R2
    01047 2433      CLR	R3
    01048 9230 02CE STS	T_dat+1,R3
    0104A 9220 02CD STS	T_dat,R2
(1110) 	      SendManchester(); 
    0104C 940E 1AA5 CALL	_SendManchester
(1111) 		}	  
(1112) 	break;
    0104E C7CB      RJMP	0x181A
(1113)  
(1114) 	
(1115) 	 
(1116) 	case 0x90: //标定数据
(1117) 	  if(R_dat==0x90)//提取测试信息
    0104F 9180 02CB LDS	R24,R_dat
    01051 9190 02CC LDS	R25,R_dat+1
    01053 3980      CPI	R24,0x90
    01054 E0E0      LDI	R30,0
    01055 079E      CPC	R25,R30
    01056 F009      BEQ	0x1058
    01057 C115      RJMP	0x116D
(1118) 	  {
(1119) 	     Uart0TxData[0]=0xE8;
    01058 EE88      LDI	R24,0xE8
    01059 9380 011F STS	Uart0TxData,R24
(1120) 		 Uart0TxData[1]=0x40;
    0105B E480      LDI	R24,0x40
    0105C 9380 0120 STS	Uart0TxData+1,R24
(1121) 		 Uart0TxData[2]=0xc8;
    0105E EC88      LDI	R24,0xC8
    0105F 9380 0121 STS	Uart0TxData+2,R24
(1122) 		 Uart0TxData[3]=0;//测试信息包0
    01061 2422      CLR	R2
    01062 9220 0122 STS	Uart0TxData+3,R2
(1123) 		 SendUart0_2(9,4);// 超时32ms	 
    01064 E024      LDI	R18,4
    01065 E030      LDI	R19,0
    01066 E009      LDI	R16,0x9
    01067 940E 00B7 CALL	_SendUart0_2
(1124) 		 for(i=0;i<32;i++)
    01069 24AA      CLR	R10
    0106A C02F      RJMP	0x109A
(1125) 		 {
(1126) 		 CheckMotor(20);
    0106B E104      LDI	R16,0x14
    0106C E010      LDI	R17,0
    0106D 940E 02F5 CALL	_CheckMotor
(1127) 		 T_dat=Uart0RxData[i*2+1];//高字节
    0106F EE83      LDI	R24,0xE3
    01070 E092      LDI	R25,2
    01071 2DEA      MOV	R30,R10
    01072 27FF      CLR	R31
    01073 0FEE      LSL	R30
    01074 1FFF      ROL	R31
    01075 0FE8      ADD	R30,R24
    01076 1FF9      ADC	R31,R25
    01077 8020      LD	R2,Z
    01078 2433      CLR	R3
    01079 9230 02CE STS	T_dat+1,R3
    0107B 9220 02CD STS	T_dat,R2
(1128) 		 T_dat<<=8;
    0107D 2C32      MOV	R3,R2
    0107E 2422      CLR	R2
    0107F 9230 02CE STS	T_dat+1,R3
    01081 9220 02CD STS	T_dat,R2
(1129) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    01083 EE82      LDI	R24,0xE2
    01084 E092      LDI	R25,2
    01085 2DEA      MOV	R30,R10
    01086 27FF      CLR	R31
    01087 0FEE      LSL	R30
    01088 1FFF      ROL	R31
    01089 0FE8      ADD	R30,R24
    0108A 1FF9      ADC	R31,R25
    0108B 8020      LD	R2,Z
    0108C 2433      CLR	R3
    0108D 9040 02CD LDS	R4,T_dat
    0108F 9050 02CE LDS	R5,T_dat+1
    01091 2842      OR	R4,R2
    01092 2853      OR	R5,R3
    01093 9250 02CE STS	T_dat+1,R5
    01095 9240 02CD STS	T_dat,R4
(1130) 		 SendManchester();		 
    01097 940E 1AA5 CALL	_SendManchester
    01099 94A3      INC	R10
    0109A 2D8A      MOV	R24,R10
    0109B 3280      CPI	R24,0x20
    0109C F270      BCS	0x106B
(1131) 		 }		
(1132) 
(1133) 		 Uart0TxData[0]=0xE8;
    0109D EE88      LDI	R24,0xE8
    0109E 9380 011F STS	Uart0TxData,R24
(1134) 		 Uart0TxData[1]=0x40;
    010A0 E480      LDI	R24,0x40
    010A1 9380 0120 STS	Uart0TxData+1,R24
(1135) 		 Uart0TxData[2]=0xc8;
    010A3 EC88      LDI	R24,0xC8
    010A4 9380 0121 STS	Uart0TxData+2,R24
(1136) 		 Uart0TxData[3]=1;//测试信息包1
    010A6 E081      LDI	R24,1
    010A7 9380 0122 STS	Uart0TxData+3,R24
(1137) 		 SendUart0_2(9,4);// 超时32ms	 
    010A9 E024      LDI	R18,4
    010AA E030      LDI	R19,0
    010AB E009      LDI	R16,0x9
    010AC 940E 00B7 CALL	_SendUart0_2
(1138) 		 for(i=0;i<32;i++)
    010AE 24AA      CLR	R10
    010AF C02F      RJMP	0x10DF
(1139) 		 {
(1140) 		 T_dat=Uart0RxData[i*2+1];//高字节
    010B0 EE83      LDI	R24,0xE3
    010B1 E092      LDI	R25,2
    010B2 2DEA      MOV	R30,R10
    010B3 27FF      CLR	R31
    010B4 0FEE      LSL	R30
    010B5 1FFF      ROL	R31
    010B6 0FE8      ADD	R30,R24
    010B7 1FF9      ADC	R31,R25
    010B8 8020      LD	R2,Z
    010B9 2433      CLR	R3
    010BA 9230 02CE STS	T_dat+1,R3
    010BC 9220 02CD STS	T_dat,R2
(1141) 		 T_dat<<=8;
    010BE 2C32      MOV	R3,R2
    010BF 2422      CLR	R2
    010C0 9230 02CE STS	T_dat+1,R3
    010C2 9220 02CD STS	T_dat,R2
(1142) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    010C4 EE82      LDI	R24,0xE2
    010C5 E092      LDI	R25,2
    010C6 2DEA      MOV	R30,R10
    010C7 27FF      CLR	R31
    010C8 0FEE      LSL	R30
    010C9 1FFF      ROL	R31
    010CA 0FE8      ADD	R30,R24
    010CB 1FF9      ADC	R31,R25
    010CC 8020      LD	R2,Z
    010CD 2433      CLR	R3
    010CE 9040 02CD LDS	R4,T_dat
    010D0 9050 02CE LDS	R5,T_dat+1
    010D2 2842      OR	R4,R2
    010D3 2853      OR	R5,R3
    010D4 9250 02CE STS	T_dat+1,R5
    010D6 9240 02CD STS	T_dat,R4
(1143) 		 SendManchester();
    010D8 940E 1AA5 CALL	_SendManchester
(1144) 		 CheckMotor(20);
    010DA E104      LDI	R16,0x14
    010DB E010      LDI	R17,0
    010DC 940E 02F5 CALL	_CheckMotor
    010DE 94A3      INC	R10
    010DF 2D8A      MOV	R24,R10
    010E0 3280      CPI	R24,0x20
    010E1 F270      BCS	0x10B0
(1145) 		 }	
(1146) 		 
(1147) 		 Uart0TxData[0]=0xE8;
    010E2 EE88      LDI	R24,0xE8
    010E3 9380 011F STS	Uart0TxData,R24
(1148) 		 Uart0TxData[1]=0x40;
    010E5 E480      LDI	R24,0x40
    010E6 9380 0120 STS	Uart0TxData+1,R24
(1149) 		 Uart0TxData[2]=0xc8;
    010E8 EC88      LDI	R24,0xC8
    010E9 9380 0121 STS	Uart0TxData+2,R24
(1150) 		 Uart0TxData[3]=2;//测试信息包2
    010EB E082      LDI	R24,2
    010EC 9380 0122 STS	Uart0TxData+3,R24
(1151) 		 SendUart0_2(9,4);// 超时32ms	 
    010EE E024      LDI	R18,4
    010EF E030      LDI	R19,0
    010F0 E009      LDI	R16,0x9
    010F1 940E 00B7 CALL	_SendUart0_2
(1152) 		 for(i=0;i<32;i++)
    010F3 24AA      CLR	R10
    010F4 C02F      RJMP	0x1124
(1153) 		 {
(1154) 		 T_dat=Uart0RxData[i*2+1];//高字节
    010F5 EE83      LDI	R24,0xE3
    010F6 E092      LDI	R25,2
    010F7 2DEA      MOV	R30,R10
    010F8 27FF      CLR	R31
    010F9 0FEE      LSL	R30
    010FA 1FFF      ROL	R31
    010FB 0FE8      ADD	R30,R24
    010FC 1FF9      ADC	R31,R25
    010FD 8020      LD	R2,Z
    010FE 2433      CLR	R3
    010FF 9230 02CE STS	T_dat+1,R3
    01101 9220 02CD STS	T_dat,R2
(1155) 		 T_dat<<=8;
    01103 2C32      MOV	R3,R2
    01104 2422      CLR	R2
    01105 9230 02CE STS	T_dat+1,R3
    01107 9220 02CD STS	T_dat,R2
(1156) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    01109 EE82      LDI	R24,0xE2
    0110A E092      LDI	R25,2
    0110B 2DEA      MOV	R30,R10
    0110C 27FF      CLR	R31
    0110D 0FEE      LSL	R30
    0110E 1FFF      ROL	R31
    0110F 0FE8      ADD	R30,R24
    01110 1FF9      ADC	R31,R25
    01111 8020      LD	R2,Z
    01112 2433      CLR	R3
    01113 9040 02CD LDS	R4,T_dat
    01115 9050 02CE LDS	R5,T_dat+1
    01117 2842      OR	R4,R2
    01118 2853      OR	R5,R3
    01119 9250 02CE STS	T_dat+1,R5
    0111B 9240 02CD STS	T_dat,R4
(1157) 		 SendManchester();
    0111D 940E 1AA5 CALL	_SendManchester
(1158) 		 CheckMotor(20);
    0111F E104      LDI	R16,0x14
    01120 E010      LDI	R17,0
    01121 940E 02F5 CALL	_CheckMotor
    01123 94A3      INC	R10
    01124 2D8A      MOV	R24,R10
    01125 3280      CPI	R24,0x20
    01126 F270      BCS	0x10F5
(1159) 		 }		
(1160) 		 
(1161) 		 Uart0TxData[0]=0xE8;
    01127 EE88      LDI	R24,0xE8
    01128 9380 011F STS	Uart0TxData,R24
(1162) 		 Uart0TxData[1]=0x40;
    0112A E480      LDI	R24,0x40
    0112B 9380 0120 STS	Uart0TxData+1,R24
(1163) 		 Uart0TxData[2]=0xc8;
    0112D EC88      LDI	R24,0xC8
    0112E 9380 0121 STS	Uart0TxData+2,R24
(1164) 		 Uart0TxData[3]=3;//测试信息包3
    01130 E083      LDI	R24,3
    01131 9380 0122 STS	Uart0TxData+3,R24
(1165) 		 SendUart0_2(9,4);// 超时32ms	 
    01133 E024      LDI	R18,4
    01134 E030      LDI	R19,0
    01135 E009      LDI	R16,0x9
    01136 940E 00B7 CALL	_SendUart0_2
(1166) 		 for(i=0;i<32;i++)
    01138 24AA      CLR	R10
    01139 C02F      RJMP	0x1169
(1167) 		 {
(1168) 		 T_dat=Uart0RxData[i*2+1];//高字节
    0113A EE83      LDI	R24,0xE3
    0113B E092      LDI	R25,2
    0113C 2DEA      MOV	R30,R10
    0113D 27FF      CLR	R31
    0113E 0FEE      LSL	R30
    0113F 1FFF      ROL	R31
    01140 0FE8      ADD	R30,R24
    01141 1FF9      ADC	R31,R25
    01142 8020      LD	R2,Z
    01143 2433      CLR	R3
    01144 9230 02CE STS	T_dat+1,R3
    01146 9220 02CD STS	T_dat,R2
(1169) 		 T_dat<<=8;
    01148 2C32      MOV	R3,R2
    01149 2422      CLR	R2
    0114A 9230 02CE STS	T_dat+1,R3
    0114C 9220 02CD STS	T_dat,R2
(1170) 		 T_dat|=Uart0RxData[i*2+0];//低字节
    0114E EE82      LDI	R24,0xE2
    0114F E092      LDI	R25,2
    01150 2DEA      MOV	R30,R10
    01151 27FF      CLR	R31
    01152 0FEE      LSL	R30
    01153 1FFF      ROL	R31
    01154 0FE8      ADD	R30,R24
    01155 1FF9      ADC	R31,R25
    01156 8020      LD	R2,Z
    01157 2433      CLR	R3
    01158 9040 02CD LDS	R4,T_dat
    0115A 9050 02CE LDS	R5,T_dat+1
    0115C 2842      OR	R4,R2
    0115D 2853      OR	R5,R3
    0115E 9250 02CE STS	T_dat+1,R5
    01160 9240 02CD STS	T_dat,R4
(1171) 		 SendManchester();
    01162 940E 1AA5 CALL	_SendManchester
(1172) 		 CheckMotor(20);
    01164 E104      LDI	R16,0x14
    01165 E010      LDI	R17,0
    01166 940E 02F5 CALL	_CheckMotor
    01168 94A3      INC	R10
    01169 2D8A      MOV	R24,R10
    0116A 3280      CPI	R24,0x20
    0116B F270      BCS	0x113A
(1173) 		 }			
(1174) 	  }
    0116C C6AD      RJMP	0x181A
(1175) 	  else if(R_dat==0x91)//上传压力标定数据,20ms/帧 	
    0116D 9180 02CB LDS	R24,R_dat
    0116F 9190 02CC LDS	R25,R_dat+1
    01171 3981      CPI	R24,0x91
    01172 E0E0      LDI	R30,0
    01173 079E      CPC	R25,R30
    01174 F521      BNE	0x1199
(1176) 	  {
(1177) 	   //先获取总标定点数    
(1178) 	     DataFlag=3;
    01175 E083      LDI	R24,3
    01176 E090      LDI	R25,0
    01177 9390 02B2 STS	DataFlag+1,R25
    01179 9380 02B1 STS	DataFlag,R24
(1179) 		 coeff_len=4;//上位机还需传4字节，分别为首块地址和包数
    0117B E084      LDI	R24,4
    0117C 9390 011D STS	coeff_len+1,R25
    0117E 9380 011C STS	coeff_len,R24
(1180) 	     coeff_count=0;
    01180 2422      CLR	R2
    01181 2433      CLR	R3
    01182 9230 011B STS	coeff_count+1,R3
    01184 9220 011A STS	coeff_count,R2
(1181) 		 TimeOutFlag=0;
    01186 9220 02C9 STS	TimeOutFlag,R2
(1182) 		 Timer0Counter=200;//1.6s定时
    01188 EC88      LDI	R24,0xC8
    01189 9390 032D STS	Timer0Counter+1,R25
    0118B 9380 032C STS	Timer0Counter,R24
(1183) 	     TCNT0=0x06; //8ms
    0118D E086      LDI	R24,6
    0118E BF82      OUT	0x32,R24
(1184) 	     TCCR0|=0x06;//256分频
    0118F B783      IN	R24,0x33
    01190 6086      ORI	R24,6
    01191 BF83      OUT	0x33,R24
(1185) 	     TIFR|=0x01; //清定时器0中断标志
    01192 B786      IN	R24,0x36
    01193 6081      ORI	R24,1
    01194 BF86      OUT	0x36,R24
(1186)          TIMSK|=0x01;//使能定时器0中断		
    01195 B787      IN	R24,0x37
    01196 6081      ORI	R24,1
    01197 BF87      OUT	0x37,R24
(1187) 		}
    01198 C681      RJMP	0x181A
(1188) 	  else if(R_dat==0x92)//清空标定数据,整机格式化  
    01199 9180 02CB LDS	R24,R_dat
    0119B 9190 02CC LDS	R25,R_dat+1
    0119D 3982      CPI	R24,0x92
    0119E E0E0      LDI	R30,0
    0119F 079E      CPC	R25,R30
    011A0 F5E9      BNE	0x11DE
(1189) 	   { 	
(1190) 	     Uart0TxData[0]=0xE8;
    011A1 EE88      LDI	R24,0xE8
    011A2 9380 011F STS	Uart0TxData,R24
(1191) 		 Uart0TxData[1]=0x40;
    011A4 E480      LDI	R24,0x40
    011A5 9380 0120 STS	Uart0TxData+1,R24
(1192) 		 Uart0TxData[2]=0x8c;
    011A7 E88C      LDI	R24,0x8C
    011A8 9380 0121 STS	Uart0TxData+2,R24
(1193) 		 Uart0TxData[3]=8;
    011AA E088      LDI	R24,0x8
    011AB 9380 0122 STS	Uart0TxData+3,R24
(1194) 		 Uart0TxData[4]=0;
    011AD 2422      CLR	R2
    011AE 9220 0123 STS	Uart0TxData+4,R2
(1195) 		 Uart0TxData[5]=0;
    011B0 9220 0124 STS	Uart0TxData+5,R2
(1196) 		 Uart0TxData[6]=0xff;
    011B2 EF8F      LDI	R24,0xFF
    011B3 9380 0125 STS	Uart0TxData+6,R24
(1197) 		 Uart0TxData[7]=0xff;
    011B5 9380 0126 STS	Uart0TxData+7,R24
(1198) 		 SendUart0_3(9,5000,9);// 最大超时40秒
    011B7 E089      LDI	R24,0x9
    011B8 8388      ST	Y,R24
    011B9 E828      LDI	R18,0x88
    011BA E133      LDI	R19,0x13
    011BB E009      LDI	R16,0x9
    011BC 940E 0107 CALL	_SendUart0_3
(1199) 		 if((Uart0RxCounter==9)&&(Uart0RxData[0]==0x55)&&(Uart0RxData[1]==0x40)&&(Uart0RxData[2]==0x8c))
    011BE 9180 02E1 LDS	R24,Uart0RxCounter
    011C0 3089      CPI	R24,0x9
    011C1 F499      BNE	0x11D5
    011C2 9180 02E2 LDS	R24,Uart0RxData
    011C4 3585      CPI	R24,0x55
    011C5 F479      BNE	0x11D5
    011C6 9180 02E3 LDS	R24,Uart0RxData+1
    011C8 3480      CPI	R24,0x40
    011C9 F459      BNE	0x11D5
    011CA 9180 02E4 LDS	R24,Uart0RxData+2
    011CC 388C      CPI	R24,0x8C
    011CD F439      BNE	0x11D5
(1200) 		 {T_dat=0x0000;}
    011CE 2422      CLR	R2
    011CF 2433      CLR	R3
    011D0 9230 02CE STS	T_dat+1,R3
    011D2 9220 02CD STS	T_dat,R2
    011D4 C006      RJMP	0x11DB
(1201) 		 else
(1202) 		 {T_dat=0xffff;}
    011D5 EF8F      LDI	R24,0xFF
    011D6 EF9F      LDI	R25,0xFF
    011D7 9390 02CE STS	T_dat+1,R25
    011D9 9380 02CD STS	T_dat,R24
(1203) 		 SendManchester();	 
    011DB 940E 1AA5 CALL	_SendManchester
(1204) 	  }
    011DD C63C      RJMP	0x181A
(1205) 	   else if(R_dat==0x93)//上传全部系数，共256字节分128帧上传
    011DE 9180 02CB LDS	R24,R_dat
    011E0 9190 02CC LDS	R25,R_dat+1
    011E2 3983      CPI	R24,0x93
    011E3 E0E0      LDI	R30,0
    011E4 079E      CPC	R25,R30
    011E5 F009      BEQ	0x11E7
    011E6 C633      RJMP	0x181A
(1206) 	   {
(1207) 	     Uart0TxData[0]=0xE8;
    011E7 EE88      LDI	R24,0xE8
    011E8 9380 011F STS	Uart0TxData,R24
(1208) 		 Uart0TxData[1]=0x40;
    011EA E480      LDI	R24,0x40
    011EB 9380 0120 STS	Uart0TxData+1,R24
(1209) 		 Uart0TxData[2]=0x87;
    011ED E887      LDI	R24,0x87
    011EE 9380 0121 STS	Uart0TxData+2,R24
(1210) 		 Uart0TxData[3]=0;//系数包0
    011F0 2422      CLR	R2
    011F1 9220 0122 STS	Uart0TxData+3,R2
(1211) 		 SendUart0_2(9,4);// 超时32ms	
    011F3 E024      LDI	R18,4
    011F4 E030      LDI	R19,0
    011F5 E009      LDI	R16,0x9
    011F6 940E 00B7 CALL	_SendUart0_2
(1212) 		 if(Uart0RxCounter==64) 
    011F8 9180 02E1 LDS	R24,Uart0RxCounter
    011FA 3480      CPI	R24,0x40
    011FB F5A1      BNE	0x1230
(1213) 		  {
(1214) 		   for(i=0;i<32;i++)
    011FC 24AA      CLR	R10
    011FD C02F      RJMP	0x122D
(1215) 		   {
(1216) 		   CheckMotor(20);
    011FE E104      LDI	R16,0x14
    011FF E010      LDI	R17,0
    01200 940E 02F5 CALL	_CheckMotor
(1217) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01202 EE83      LDI	R24,0xE3
    01203 E092      LDI	R25,2
    01204 2DEA      MOV	R30,R10
    01205 27FF      CLR	R31
    01206 0FEE      LSL	R30
    01207 1FFF      ROL	R31
    01208 0FE8      ADD	R30,R24
    01209 1FF9      ADC	R31,R25
    0120A 8020      LD	R2,Z
    0120B 2433      CLR	R3
    0120C 9230 02CE STS	T_dat+1,R3
    0120E 9220 02CD STS	T_dat,R2
(1218) 		   T_dat<<=8;
    01210 2C32      MOV	R3,R2
    01211 2422      CLR	R2
    01212 9230 02CE STS	T_dat+1,R3
    01214 9220 02CD STS	T_dat,R2
(1219) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01216 EE82      LDI	R24,0xE2
    01217 E092      LDI	R25,2
    01218 2DEA      MOV	R30,R10
    01219 27FF      CLR	R31
    0121A 0FEE      LSL	R30
    0121B 1FFF      ROL	R31
    0121C 0FE8      ADD	R30,R24
    0121D 1FF9      ADC	R31,R25
    0121E 8020      LD	R2,Z
    0121F 2433      CLR	R3
    01220 9040 02CD LDS	R4,T_dat
    01222 9050 02CE LDS	R5,T_dat+1
    01224 2842      OR	R4,R2
    01225 2853      OR	R5,R3
    01226 9250 02CE STS	T_dat+1,R5
    01228 9240 02CD STS	T_dat,R4
(1220) 		   SendManchester();		 
    0122A 940E 1AA5 CALL	_SendManchester
    0122C 94A3      INC	R10
    0122D 2D8A      MOV	R24,R10
    0122E 3280      CPI	R24,0x20
    0122F F270      BCS	0x11FE
(1221) 		   }	
(1222) 		 }	
(1223) 		 
(1224) 		 Uart0TxData[0]=0xE8;
    01230 EE88      LDI	R24,0xE8
    01231 9380 011F STS	Uart0TxData,R24
(1225) 		 Uart0TxData[1]=0x40;
    01233 E480      LDI	R24,0x40
    01234 9380 0120 STS	Uart0TxData+1,R24
(1226) 		 Uart0TxData[2]=0x87;
    01236 E887      LDI	R24,0x87
    01237 9380 0121 STS	Uart0TxData+2,R24
(1227) 		 Uart0TxData[3]=1;//系数包1
    01239 E081      LDI	R24,1
    0123A 9380 0122 STS	Uart0TxData+3,R24
(1228) 		 SendUart0_2(9,4);// 超时32ms	 
    0123C E024      LDI	R18,4
    0123D E030      LDI	R19,0
    0123E E009      LDI	R16,0x9
    0123F 940E 00B7 CALL	_SendUart0_2
(1229) 		 if(Uart0RxCounter==64) 
    01241 9180 02E1 LDS	R24,Uart0RxCounter
    01243 3480      CPI	R24,0x40
    01244 F5A1      BNE	0x1279
(1230) 		  {
(1231) 		   for(i=0;i<32;i++)
    01245 24AA      CLR	R10
    01246 C02F      RJMP	0x1276
(1232) 		   {
(1233) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01247 EE83      LDI	R24,0xE3
    01248 E092      LDI	R25,2
    01249 2DEA      MOV	R30,R10
    0124A 27FF      CLR	R31
    0124B 0FEE      LSL	R30
    0124C 1FFF      ROL	R31
    0124D 0FE8      ADD	R30,R24
    0124E 1FF9      ADC	R31,R25
    0124F 8020      LD	R2,Z
    01250 2433      CLR	R3
    01251 9230 02CE STS	T_dat+1,R3
    01253 9220 02CD STS	T_dat,R2
(1234) 		   T_dat<<=8;
    01255 2C32      MOV	R3,R2
    01256 2422      CLR	R2
    01257 9230 02CE STS	T_dat+1,R3
    01259 9220 02CD STS	T_dat,R2
(1235) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    0125B EE82      LDI	R24,0xE2
    0125C E092      LDI	R25,2
    0125D 2DEA      MOV	R30,R10
    0125E 27FF      CLR	R31
    0125F 0FEE      LSL	R30
    01260 1FFF      ROL	R31
    01261 0FE8      ADD	R30,R24
    01262 1FF9      ADC	R31,R25
    01263 8020      LD	R2,Z
    01264 2433      CLR	R3
    01265 9040 02CD LDS	R4,T_dat
    01267 9050 02CE LDS	R5,T_dat+1
    01269 2842      OR	R4,R2
    0126A 2853      OR	R5,R3
    0126B 9250 02CE STS	T_dat+1,R5
    0126D 9240 02CD STS	T_dat,R4
(1236) 		   SendManchester();
    0126F 940E 1AA5 CALL	_SendManchester
(1237) 		   CheckMotor(20);
    01271 E104      LDI	R16,0x14
    01272 E010      LDI	R17,0
    01273 940E 02F5 CALL	_CheckMotor
    01275 94A3      INC	R10
    01276 2D8A      MOV	R24,R10
    01277 3280      CPI	R24,0x20
    01278 F270      BCS	0x1247
(1238) 		  }
(1239) 		 }		
(1240) 		 
(1241) 		  Uart0TxData[0]=0xE8;
    01279 EE88      LDI	R24,0xE8
    0127A 9380 011F STS	Uart0TxData,R24
(1242) 		 Uart0TxData[1]=0x40;
    0127C E480      LDI	R24,0x40
    0127D 9380 0120 STS	Uart0TxData+1,R24
(1243) 		 Uart0TxData[2]=0x87;
    0127F E887      LDI	R24,0x87
    01280 9380 0121 STS	Uart0TxData+2,R24
(1244) 		 Uart0TxData[3]=2;//系数包2
    01282 E082      LDI	R24,2
    01283 9380 0122 STS	Uart0TxData+3,R24
(1245) 		 SendUart0_2(9,4);// 超时32ms	
    01285 E024      LDI	R18,4
    01286 E030      LDI	R19,0
    01287 E009      LDI	R16,0x9
    01288 940E 00B7 CALL	_SendUart0_2
(1246) 		 if(Uart0RxCounter==64) 
    0128A 9180 02E1 LDS	R24,Uart0RxCounter
    0128C 3480      CPI	R24,0x40
    0128D F599      BNE	0x12C1
(1247) 		  {
(1248) 		   for(i=0;i<32;i++)
    0128E 24AA      CLR	R10
    0128F C02E      RJMP	0x12BE
(1249) 		   {
(1250) 		   CheckMotor(20);
    01290 E104      LDI	R16,0x14
    01291 E010      LDI	R17,0
    01292 940E 02F5 CALL	_CheckMotor
(1251) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01294 EE83      LDI	R24,0xE3
    01295 E092      LDI	R25,2
    01296 2DEA      MOV	R30,R10
    01297 27FF      CLR	R31
    01298 0FEE      LSL	R30
    01299 1FFF      ROL	R31
    0129A 0FE8      ADD	R30,R24
    0129B 1FF9      ADC	R31,R25
    0129C 8020      LD	R2,Z
    0129D 2433      CLR	R3
    0129E 9230 02CE STS	T_dat+1,R3
    012A0 9220 02CD STS	T_dat,R2
(1252) 		   T_dat<<=8;
    012A2 2C32      MOV	R3,R2
    012A3 2422      CLR	R2
    012A4 9230 02CE STS	T_dat+1,R3
    012A6 9220 02CD STS	T_dat,R2
(1253) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    012A8 EE82      LDI	R24,0xE2
    012A9 E092      LDI	R25,2
    012AA 2DEA      MOV	R30,R10
    012AB 27FF      CLR	R31
    012AC 0FEE      LSL	R30
    012AD 1FFF      ROL	R31
    012AE 0FE8      ADD	R30,R24
    012AF 1FF9      ADC	R31,R25
    012B0 8020      LD	R2,Z
    012B1 2433      CLR	R3
    012B2 9040 02CD LDS	R4,T_dat
    012B4 9050 02CE LDS	R5,T_dat+1
    012B6 2842      OR	R4,R2
    012B7 2853      OR	R5,R3
    012B8 9250 02CE STS	T_dat+1,R5
    012BA 9240 02CD STS	T_dat,R4
(1254) 		   SendManchester();		 
    012BC D7E8      RCALL	_SendManchester
    012BD 94A3      INC	R10
    012BE 2D8A      MOV	R24,R10
    012BF 3280      CPI	R24,0x20
    012C0 F278      BCS	0x1290
(1255) 		   }	
(1256) 		 }	
(1257) 
(1258) 		 Uart0TxData[0]=0xE8;
    012C1 EE88      LDI	R24,0xE8
    012C2 9380 011F STS	Uart0TxData,R24
(1259) 		 Uart0TxData[1]=0x40;
    012C4 E480      LDI	R24,0x40
    012C5 9380 0120 STS	Uart0TxData+1,R24
(1260) 		 Uart0TxData[2]=0x87;
    012C7 E887      LDI	R24,0x87
    012C8 9380 0121 STS	Uart0TxData+2,R24
(1261) 		 Uart0TxData[3]=3;//系数包3
    012CA E083      LDI	R24,3
    012CB 9380 0122 STS	Uart0TxData+3,R24
(1262) 		 SendUart0_2(9,4);// 超时32ms	 
    012CD E024      LDI	R18,4
    012CE E030      LDI	R19,0
    012CF E009      LDI	R16,0x9
    012D0 940E 00B7 CALL	_SendUart0_2
(1263) 		 if(Uart0RxCounter==64) 
    012D2 9180 02E1 LDS	R24,Uart0RxCounter
    012D4 3480      CPI	R24,0x40
    012D5 F009      BEQ	0x12D7
    012D6 C543      RJMP	0x181A
(1264) 		  {
(1265) 		   for(i=0;i<32;i++)
    012D7 24AA      CLR	R10
    012D8 C02E      RJMP	0x1307
(1266) 		   {
(1267) 		   T_dat=Uart0RxData[i*2+1];//高字节
    012D9 EE83      LDI	R24,0xE3
    012DA E092      LDI	R25,2
    012DB 2DEA      MOV	R30,R10
    012DC 27FF      CLR	R31
    012DD 0FEE      LSL	R30
    012DE 1FFF      ROL	R31
    012DF 0FE8      ADD	R30,R24
    012E0 1FF9      ADC	R31,R25
    012E1 8020      LD	R2,Z
    012E2 2433      CLR	R3
    012E3 9230 02CE STS	T_dat+1,R3
    012E5 9220 02CD STS	T_dat,R2
(1268) 		   T_dat<<=8;
    012E7 2C32      MOV	R3,R2
    012E8 2422      CLR	R2
    012E9 9230 02CE STS	T_dat+1,R3
    012EB 9220 02CD STS	T_dat,R2
(1269) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    012ED EE82      LDI	R24,0xE2
    012EE E092      LDI	R25,2
    012EF 2DEA      MOV	R30,R10
    012F0 27FF      CLR	R31
    012F1 0FEE      LSL	R30
    012F2 1FFF      ROL	R31
    012F3 0FE8      ADD	R30,R24
    012F4 1FF9      ADC	R31,R25
    012F5 8020      LD	R2,Z
    012F6 2433      CLR	R3
    012F7 9040 02CD LDS	R4,T_dat
    012F9 9050 02CE LDS	R5,T_dat+1
    012FB 2842      OR	R4,R2
    012FC 2853      OR	R5,R3
    012FD 9250 02CE STS	T_dat+1,R5
    012FF 9240 02CD STS	T_dat,R4
(1270) 		   SendManchester();
    01301 D7A3      RCALL	_SendManchester
(1271) 		   CheckMotor(20);
    01302 E104      LDI	R16,0x14
    01303 E010      LDI	R17,0
    01304 940E 02F5 CALL	_CheckMotor
    01306 94A3      INC	R10
    01307 2D8A      MOV	R24,R10
    01308 3280      CPI	R24,0x20
    01309 F278      BCS	0x12D9
(1272) 		  }
(1273) 		 }		
(1274) 	   }
(1275) 	  
(1276)   break;
    0130A C50F      RJMP	0x181A
(1277)   
(1278) 	case 0xa0://压力标定系数
(1279) 	   if(R_dat==0xa0)//下发全部标定系数，共128字节,20ms/帧，共2560ms   
    0130B 9180 02CB LDS	R24,R_dat
    0130D 9190 02CC LDS	R25,R_dat+1
    0130F 3A80      CPI	R24,0xA0
    01310 E0E0      LDI	R30,0
    01311 079E      CPC	R25,R30
    01312 F529      BNE	0x1338
(1280) 	   { 
(1281) 		 DataFlag=1;
    01313 E081      LDI	R24,1
    01314 E090      LDI	R25,0
    01315 9390 02B2 STS	DataFlag+1,R25
    01317 9380 02B1 STS	DataFlag,R24
(1282) 		 coeff_len=128;
    01319 E880      LDI	R24,0x80
    0131A 9390 011D STS	coeff_len+1,R25
    0131C 9380 011C STS	coeff_len,R24
(1283) 		 coeff_count=0;
    0131E 2422      CLR	R2
    0131F 2433      CLR	R3
    01320 9230 011B STS	coeff_count+1,R3
    01322 9220 011A STS	coeff_count,R2
(1284) 		 TimeOutFlag=0;
    01324 9220 02C9 STS	TimeOutFlag,R2
(1285) 		 Timer0Counter=1000;//8s定时
    01326 EE88      LDI	R24,0xE8
    01327 E093      LDI	R25,3
    01328 9390 032D STS	Timer0Counter+1,R25
    0132A 9380 032C STS	Timer0Counter,R24
(1286) 	     TCNT0=0x06; //8ms
    0132C E086      LDI	R24,6
    0132D BF82      OUT	0x32,R24
(1287) 	     TCCR0|=0x06;//256分频
    0132E B783      IN	R24,0x33
    0132F 6086      ORI	R24,6
    01330 BF83      OUT	0x33,R24
(1288) 	     TIFR|=0x01; //清定时器0中断标志
    01331 B786      IN	R24,0x36
    01332 6081      ORI	R24,1
    01333 BF86      OUT	0x36,R24
(1289)          TIMSK|=0x01;//使能定时器0中断				    
    01334 B787      IN	R24,0x37
    01335 6081      ORI	R24,1
    01336 BF87      OUT	0x37,R24
(1290) 	   }
    01337 C4E2      RJMP	0x181A
(1291) 	  else if(R_dat==0xa1)//上传标定系数,28ms/帧 ，共64帧128字节
    01338 9180 02CB LDS	R24,R_dat
    0133A 9190 02CC LDS	R25,R_dat+1
    0133C 3A81      CPI	R24,0xA1
    0133D E0E0      LDI	R30,0
    0133E 079E      CPC	R25,R30
    0133F F009      BEQ	0x1341
    01340 C4D9      RJMP	0x181A
(1292) 	  {    
(1293) 		 Uart0TxData[0]=0xE8;
    01341 EE88      LDI	R24,0xE8
    01342 9380 011F STS	Uart0TxData,R24
(1294) 		 Uart0TxData[1]=0x40;
    01344 E480      LDI	R24,0x40
    01345 9380 0120 STS	Uart0TxData+1,R24
(1295) 		 Uart0TxData[2]=0x87;
    01347 E887      LDI	R24,0x87
    01348 9380 0121 STS	Uart0TxData+2,R24
(1296) 		 Uart0TxData[3]=0;//系数包0
    0134A 2422      CLR	R2
    0134B 9220 0122 STS	Uart0TxData+3,R2
(1297) 		 SendUart0_2(9,5);// 超时40ms	
    0134D E025      LDI	R18,5
    0134E E030      LDI	R19,0
    0134F E009      LDI	R16,0x9
    01350 940E 00B7 CALL	_SendUart0_2
(1298) 		 if(Uart0RxCounter==64) 
    01352 9180 02E1 LDS	R24,Uart0RxCounter
    01354 3480      CPI	R24,0x40
    01355 F599      BNE	0x1389
(1299) 		  {
(1300) 		   for(i=0;i<32;i++)
    01356 24AA      CLR	R10
    01357 C02E      RJMP	0x1386
(1301) 		   {
(1302) 		   CheckMotor(20);
    01358 E104      LDI	R16,0x14
    01359 E010      LDI	R17,0
    0135A 940E 02F5 CALL	_CheckMotor
(1303) 		   T_dat=Uart0RxData[i*2+1];//高字节
    0135C EE83      LDI	R24,0xE3
    0135D E092      LDI	R25,2
    0135E 2DEA      MOV	R30,R10
    0135F 27FF      CLR	R31
    01360 0FEE      LSL	R30
    01361 1FFF      ROL	R31
    01362 0FE8      ADD	R30,R24
    01363 1FF9      ADC	R31,R25
    01364 8020      LD	R2,Z
    01365 2433      CLR	R3
    01366 9230 02CE STS	T_dat+1,R3
    01368 9220 02CD STS	T_dat,R2
(1304) 		   T_dat<<=8;
    0136A 2C32      MOV	R3,R2
    0136B 2422      CLR	R2
    0136C 9230 02CE STS	T_dat+1,R3
    0136E 9220 02CD STS	T_dat,R2
(1305) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01370 EE82      LDI	R24,0xE2
    01371 E092      LDI	R25,2
    01372 2DEA      MOV	R30,R10
    01373 27FF      CLR	R31
    01374 0FEE      LSL	R30
    01375 1FFF      ROL	R31
    01376 0FE8      ADD	R30,R24
    01377 1FF9      ADC	R31,R25
    01378 8020      LD	R2,Z
    01379 2433      CLR	R3
    0137A 9040 02CD LDS	R4,T_dat
    0137C 9050 02CE LDS	R5,T_dat+1
    0137E 2842      OR	R4,R2
    0137F 2853      OR	R5,R3
    01380 9250 02CE STS	T_dat+1,R5
    01382 9240 02CD STS	T_dat,R4
(1306) 		   SendManchester();		 
    01384 D720      RCALL	_SendManchester
    01385 94A3      INC	R10
    01386 2D8A      MOV	R24,R10
    01387 3280      CPI	R24,0x20
    01388 F278      BCS	0x1358
(1307) 		   }	
(1308) 		 }	
(1309) 
(1310) 		 Uart0TxData[0]=0xE8;
    01389 EE88      LDI	R24,0xE8
    0138A 9380 011F STS	Uart0TxData,R24
(1311) 		 Uart0TxData[1]=0x40;
    0138C E480      LDI	R24,0x40
    0138D 9380 0120 STS	Uart0TxData+1,R24
(1312) 		 Uart0TxData[2]=0x87;
    0138F E887      LDI	R24,0x87
    01390 9380 0121 STS	Uart0TxData+2,R24
(1313) 		 Uart0TxData[3]=1;//系数包1
    01392 E081      LDI	R24,1
    01393 9380 0122 STS	Uart0TxData+3,R24
(1314) 		 SendUart0_2(9,5);// 超时40ms		 
    01395 E025      LDI	R18,5
    01396 E030      LDI	R19,0
    01397 E009      LDI	R16,0x9
    01398 940E 00B7 CALL	_SendUart0_2
(1315) 		 if(Uart0RxCounter==64) 
    0139A 9180 02E1 LDS	R24,Uart0RxCounter
    0139C 3480      CPI	R24,0x40
    0139D F009      BEQ	0x139F
    0139E C47B      RJMP	0x181A
(1316) 		  {
(1317) 		   for(i=0;i<32;i++)
    0139F 24AA      CLR	R10
    013A0 C02E      RJMP	0x13CF
(1318) 		   {
(1319) 		   T_dat=Uart0RxData[i*2+1];//高字节
    013A1 EE83      LDI	R24,0xE3
    013A2 E092      LDI	R25,2
    013A3 2DEA      MOV	R30,R10
    013A4 27FF      CLR	R31
    013A5 0FEE      LSL	R30
    013A6 1FFF      ROL	R31
    013A7 0FE8      ADD	R30,R24
    013A8 1FF9      ADC	R31,R25
    013A9 8020      LD	R2,Z
    013AA 2433      CLR	R3
    013AB 9230 02CE STS	T_dat+1,R3
    013AD 9220 02CD STS	T_dat,R2
(1320) 		   T_dat<<=8;
    013AF 2C32      MOV	R3,R2
    013B0 2422      CLR	R2
    013B1 9230 02CE STS	T_dat+1,R3
    013B3 9220 02CD STS	T_dat,R2
(1321) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    013B5 EE82      LDI	R24,0xE2
    013B6 E092      LDI	R25,2
    013B7 2DEA      MOV	R30,R10
    013B8 27FF      CLR	R31
    013B9 0FEE      LSL	R30
    013BA 1FFF      ROL	R31
    013BB 0FE8      ADD	R30,R24
    013BC 1FF9      ADC	R31,R25
    013BD 8020      LD	R2,Z
    013BE 2433      CLR	R3
    013BF 9040 02CD LDS	R4,T_dat
    013C1 9050 02CE LDS	R5,T_dat+1
    013C3 2842      OR	R4,R2
    013C4 2853      OR	R5,R3
    013C5 9250 02CE STS	T_dat+1,R5
    013C7 9240 02CD STS	T_dat,R4
(1322) 		   SendManchester();
    013C9 D6DB      RCALL	_SendManchester
(1323) 		   CheckMotor(20);
    013CA E104      LDI	R16,0x14
    013CB E010      LDI	R17,0
    013CC 940E 02F5 CALL	_CheckMotor
    013CE 94A3      INC	R10
    013CF 2D8A      MOV	R24,R10
    013D0 3280      CPI	R24,0x20
    013D1 F278      BCS	0x13A1
(1324) 		  }
(1325) 		 }		
(1326) 	  }
(1327) 	break;
    013D2 C447      RJMP	0x181A
(1328) 	
(1329) 	
(1330) 	case 0xB0://流量相关
(1331) 	  if(R_dat==0xb0) //下发流量系数
    013D3 9180 02CB LDS	R24,R_dat
    013D5 9190 02CC LDS	R25,R_dat+1
    013D7 3B80      CPI	R24,0xB0
    013D8 E0E0      LDI	R30,0
    013D9 079E      CPC	R25,R30
    013DA F529      BNE	0x1400
(1332) 	  {
(1333) 	     DataFlag=2;
    013DB E082      LDI	R24,2
    013DC E090      LDI	R25,0
    013DD 9390 02B2 STS	DataFlag+1,R25
    013DF 9380 02B1 STS	DataFlag,R24
(1334) 		 coeff_len=128;
    013E1 E880      LDI	R24,0x80
    013E2 9390 011D STS	coeff_len+1,R25
    013E4 9380 011C STS	coeff_len,R24
(1335) 		 coeff_count=0;
    013E6 2422      CLR	R2
    013E7 2433      CLR	R3
    013E8 9230 011B STS	coeff_count+1,R3
    013EA 9220 011A STS	coeff_count,R2
(1336) 		 TimeOutFlag=0;
    013EC 9220 02C9 STS	TimeOutFlag,R2
(1337) 		 Timer0Counter=1000;//8s定时
    013EE EE88      LDI	R24,0xE8
    013EF E093      LDI	R25,3
    013F0 9390 032D STS	Timer0Counter+1,R25
    013F2 9380 032C STS	Timer0Counter,R24
(1338) 	     TCNT0=0x06; //8ms
    013F4 E086      LDI	R24,6
    013F5 BF82      OUT	0x32,R24
(1339) 	     TCCR0|=0x06;//256分频
    013F6 B783      IN	R24,0x33
    013F7 6086      ORI	R24,6
    013F8 BF83      OUT	0x33,R24
(1340) 	     TIFR|=0x01; //清定时器0中断标志
    013F9 B786      IN	R24,0x36
    013FA 6081      ORI	R24,1
    013FB BF86      OUT	0x36,R24
(1341)          TIMSK|=0x01;//使能定时器0中断		
    013FC B787      IN	R24,0x37
    013FD 6081      ORI	R24,1
    013FE BF87      OUT	0x37,R24
(1342) 	  }
    013FF C41A      RJMP	0x181A
(1343) 	  else  if(R_dat==0xb1)//上提流量系数
    01400 9180 02CB LDS	R24,R_dat
    01402 9190 02CC LDS	R25,R_dat+1
    01404 3B81      CPI	R24,0xB1
    01405 E0E0      LDI	R30,0
    01406 079E      CPC	R25,R30
    01407 F009      BEQ	0x1409
    01408 C411      RJMP	0x181A
(1344) 	  {
(1345) 	     Uart0TxData[0]=0xE8;
    01409 EE88      LDI	R24,0xE8
    0140A 9380 011F STS	Uart0TxData,R24
(1346) 		 Uart0TxData[1]=0x40;
    0140C E480      LDI	R24,0x40
    0140D 9380 0120 STS	Uart0TxData+1,R24
(1347) 		 Uart0TxData[2]=0x87;
    0140F E887      LDI	R24,0x87
    01410 9380 0121 STS	Uart0TxData+2,R24
(1348) 		 Uart0TxData[3]=2;//系数包2
    01412 E082      LDI	R24,2
    01413 9380 0122 STS	Uart0TxData+3,R24
(1349) 		 SendUart0_2(9,5);// 超时40ms	
    01415 E025      LDI	R18,5
    01416 E030      LDI	R19,0
    01417 E009      LDI	R16,0x9
    01418 940E 00B7 CALL	_SendUart0_2
(1350) 		 if(Uart0RxCounter==64) 
    0141A 9180 02E1 LDS	R24,Uart0RxCounter
    0141C 3480      CPI	R24,0x40
    0141D F599      BNE	0x1451
(1351) 		  {
(1352) 		   for(i=0;i<32;i++)
    0141E 24AA      CLR	R10
    0141F C02E      RJMP	0x144E
(1353) 		   {
(1354) 		   CheckMotor(20);
    01420 E104      LDI	R16,0x14
    01421 E010      LDI	R17,0
    01422 940E 02F5 CALL	_CheckMotor
(1355) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01424 EE83      LDI	R24,0xE3
    01425 E092      LDI	R25,2
    01426 2DEA      MOV	R30,R10
    01427 27FF      CLR	R31
    01428 0FEE      LSL	R30
    01429 1FFF      ROL	R31
    0142A 0FE8      ADD	R30,R24
    0142B 1FF9      ADC	R31,R25
    0142C 8020      LD	R2,Z
    0142D 2433      CLR	R3
    0142E 9230 02CE STS	T_dat+1,R3
    01430 9220 02CD STS	T_dat,R2
(1356) 		   T_dat<<=8;
    01432 2C32      MOV	R3,R2
    01433 2422      CLR	R2
    01434 9230 02CE STS	T_dat+1,R3
    01436 9220 02CD STS	T_dat,R2
(1357) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01438 EE82      LDI	R24,0xE2
    01439 E092      LDI	R25,2
    0143A 2DEA      MOV	R30,R10
    0143B 27FF      CLR	R31
    0143C 0FEE      LSL	R30
    0143D 1FFF      ROL	R31
    0143E 0FE8      ADD	R30,R24
    0143F 1FF9      ADC	R31,R25
    01440 8020      LD	R2,Z
    01441 2433      CLR	R3
    01442 9040 02CD LDS	R4,T_dat
    01444 9050 02CE LDS	R5,T_dat+1
    01446 2842      OR	R4,R2
    01447 2853      OR	R5,R3
    01448 9250 02CE STS	T_dat+1,R5
    0144A 9240 02CD STS	T_dat,R4
(1358) 		   SendManchester();		 
    0144C D658      RCALL	_SendManchester
    0144D 94A3      INC	R10
    0144E 2D8A      MOV	R24,R10
    0144F 3280      CPI	R24,0x20
    01450 F278      BCS	0x1420
(1359) 		   }	
(1360) 		 }	
(1361) 
(1362) 		 Uart0TxData[0]=0xE8;
    01451 EE88      LDI	R24,0xE8
    01452 9380 011F STS	Uart0TxData,R24
(1363) 		 Uart0TxData[1]=0x40;
    01454 E480      LDI	R24,0x40
    01455 9380 0120 STS	Uart0TxData+1,R24
(1364) 		 Uart0TxData[2]=0x87;
    01457 E887      LDI	R24,0x87
    01458 9380 0121 STS	Uart0TxData+2,R24
(1365) 		 Uart0TxData[3]=3;//系数包3
    0145A E083      LDI	R24,3
    0145B 9380 0122 STS	Uart0TxData+3,R24
(1366) 		 SendUart0_2(9,5);// 超时40ms	 
    0145D E025      LDI	R18,5
    0145E E030      LDI	R19,0
    0145F E009      LDI	R16,0x9
    01460 940E 00B7 CALL	_SendUart0_2
(1367) 		 if(Uart0RxCounter==64) 
    01462 9180 02E1 LDS	R24,Uart0RxCounter
    01464 3480      CPI	R24,0x40
    01465 F009      BEQ	0x1467
    01466 C3B3      RJMP	0x181A
(1368) 		  {
(1369) 		   for(i=0;i<32;i++)
    01467 24AA      CLR	R10
    01468 C02E      RJMP	0x1497
(1370) 		   {
(1371) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01469 EE83      LDI	R24,0xE3
    0146A E092      LDI	R25,2
    0146B 2DEA      MOV	R30,R10
    0146C 27FF      CLR	R31
    0146D 0FEE      LSL	R30
    0146E 1FFF      ROL	R31
    0146F 0FE8      ADD	R30,R24
    01470 1FF9      ADC	R31,R25
    01471 8020      LD	R2,Z
    01472 2433      CLR	R3
    01473 9230 02CE STS	T_dat+1,R3
    01475 9220 02CD STS	T_dat,R2
(1372) 		   T_dat<<=8;
    01477 2C32      MOV	R3,R2
    01478 2422      CLR	R2
    01479 9230 02CE STS	T_dat+1,R3
    0147B 9220 02CD STS	T_dat,R2
(1373) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    0147D EE82      LDI	R24,0xE2
    0147E E092      LDI	R25,2
    0147F 2DEA      MOV	R30,R10
    01480 27FF      CLR	R31
    01481 0FEE      LSL	R30
    01482 1FFF      ROL	R31
    01483 0FE8      ADD	R30,R24
    01484 1FF9      ADC	R31,R25
    01485 8020      LD	R2,Z
    01486 2433      CLR	R3
    01487 9040 02CD LDS	R4,T_dat
    01489 9050 02CE LDS	R5,T_dat+1
    0148B 2842      OR	R4,R2
    0148C 2853      OR	R5,R3
    0148D 9250 02CE STS	T_dat+1,R5
    0148F 9240 02CD STS	T_dat,R4
(1374) 		   SendManchester();
    01491 D613      RCALL	_SendManchester
(1375) 		   CheckMotor(20);
    01492 E104      LDI	R16,0x14
    01493 E010      LDI	R17,0
    01494 940E 02F5 CALL	_CheckMotor
    01496 94A3      INC	R10
    01497 2D8A      MOV	R24,R10
    01498 3280      CPI	R24,0x20
    01499 F278      BCS	0x1469
(1376) 		  }
(1377) 		 }		
(1378) 	  }
(1379) 	/*   if(R_dat==0xb1)//读幅值
(1380) 	   {
(1381) 		 SendUart0(0xb0,5);//40ms定时
(1382) 		 for(k=0;k<8;k+=2)
(1383) 		  {
(1384) 		  T_dat=Uart0RxData[k];
(1385) 		  T_dat<<=8;
(1386) 		  T_dat|=Uart0RxData[k+1];
(1387) 		  SendManchester();
(1388) 		  CheckMotor(40);
(1389) 		  }
(1390) 		}
(1391) 		else  if((R_dat>0xb0) && (R_dat<0xb5) )//1800点提取,连续提取流量测试数据，4个通道分别提取，命令为0xB1-0xB4
(1392)         {   
(1393) 		  SendUart0(R_dat,125);//1s定时	 
(1394) 		  for(k=0;k<1800;k++)//共1800帧数据，全部提取
(1395) 		  {
(1396) 		  SendUart0(0xFF,1);//8ms定时	   
(1397) 		  T_dat=Uart0RxData[0];
(1398) 		  T_dat<<=8;
(1399) 		  T_dat|=Uart0RxData[1];
(1400) 		  SendManchester();
(1401) 		  CheckMotor(42);
(1402) 		  }
(1403) 		} */  
(1404) 	break;
    0149A C37F      RJMP	0x181A
(1405) 
(1406)     case 0xc0://所有参数全采，上传16字节共8帧
(1407) 		 if(R_dat==0xc0)
    0149B 9180 02CB LDS	R24,R_dat
    0149D 9190 02CC LDS	R25,R_dat+1
    0149F 3C80      CPI	R24,0xC0
    014A0 E0E0      LDI	R30,0
    014A1 079E      CPC	R25,R30
    014A2 F009      BEQ	0x14A4
    014A3 C1D6      RJMP	0x167A
(1408) 	 {
(1409) 		Uart0TxData[0]=0xE8;
    014A4 EE88      LDI	R24,0xE8
    014A5 9380 011F STS	Uart0TxData,R24
(1410) 		Uart0TxData[1]=0x40;
    014A7 E480      LDI	R24,0x40
    014A8 9380 0120 STS	Uart0TxData+1,R24
(1411) 		Uart0TxData[2]=0x89;
    014AA E889      LDI	R24,0x89
    014AB 9380 0121 STS	Uart0TxData+2,R24
(1412) 		Uart0TxData[3]=9;
    014AD E089      LDI	R24,0x9
    014AE 9380 0122 STS	Uart0TxData+3,R24
(1413) 		SendUart0_2(9,50);//流量板直读检测，超时400ms
    014B0 E322      LDI	R18,0x32
    014B1 E030      LDI	R19,0
    014B2 E009      LDI	R16,0x9
    014B3 940E 00B7 CALL	_SendUart0_2
(1414) 		if(Uart0RxCounter==64)//成功接收到压力、温度、流量数据，先低字节后高字节
    014B5 9180 02E1 LDS	R24,Uart0RxCounter
    014B7 3480      CPI	R24,0x40
    014B8 F009      BEQ	0x14BA
    014B9 C360      RJMP	0x181A
(1415) 		{
(1416) 		 T_dat=Uart0RxData[1];
    014BA 9020 02E3 LDS	R2,Uart0RxData+1
    014BC 2433      CLR	R3
    014BD 9230 02CE STS	T_dat+1,R3
    014BF 9220 02CD STS	T_dat,R2
(1417) 		 T_dat<<=8;
    014C1 9020 02CD LDS	R2,T_dat
    014C3 9030 02CE LDS	R3,T_dat+1
    014C5 2C32      MOV	R3,R2
    014C6 2422      CLR	R2
    014C7 9230 02CE STS	T_dat+1,R3
    014C9 9220 02CD STS	T_dat,R2
(1418) 		 T_dat|=Uart0RxData[0];
    014CB 9020 02E2 LDS	R2,Uart0RxData
    014CD 2433      CLR	R3
    014CE 9040 02CD LDS	R4,T_dat
    014D0 9050 02CE LDS	R5,T_dat+1
    014D2 2842      OR	R4,R2
    014D3 2853      OR	R5,R3
    014D4 9250 02CE STS	T_dat+1,R5
    014D6 9240 02CD STS	T_dat,R4
(1419) 		 SendManchester();//压力
    014D8 D5CC      RCALL	_SendManchester
(1420) 		 crc16array[0]=(unsigned char)(T_dat);
    014D9 9020 02CD LDS	R2,T_dat
    014DB 9030 02CE LDS	R3,T_dat+1
    014DD 9220 0100 STS	crc16array,R2
(1421) 		 crc16array[1]=(unsigned char)(T_dat>>8);
    014DF 2C23      MOV	R2,R3
    014E0 2433      CLR	R3
    014E1 FC27      SBRC	R2,7
    014E2 9430      COM	R3
    014E3 9220 0101 STS	crc16array+1,R2
(1422) 		 
(1423) 		 
(1424) 		 CheckMotor(30);	
    014E5 E10E      LDI	R16,0x1E
    014E6 E010      LDI	R17,0
    014E7 940E 02F5 CALL	_CheckMotor
(1425) 		 T_dat=Uart0RxData[3];
    014E9 9020 02E5 LDS	R2,Uart0RxData+3
    014EB 2433      CLR	R3
    014EC 9230 02CE STS	T_dat+1,R3
    014EE 9220 02CD STS	T_dat,R2
(1426) 		 T_dat<<=8;
    014F0 9020 02CD LDS	R2,T_dat
    014F2 9030 02CE LDS	R3,T_dat+1
    014F4 2C32      MOV	R3,R2
    014F5 2422      CLR	R2
    014F6 9230 02CE STS	T_dat+1,R3
    014F8 9220 02CD STS	T_dat,R2
(1427) 		 T_dat|=Uart0RxData[2];
    014FA 9020 02E4 LDS	R2,Uart0RxData+2
    014FC 2433      CLR	R3
    014FD 9040 02CD LDS	R4,T_dat
    014FF 9050 02CE LDS	R5,T_dat+1
    01501 2842      OR	R4,R2
    01502 2853      OR	R5,R3
    01503 9250 02CE STS	T_dat+1,R5
    01505 9240 02CD STS	T_dat,R4
(1428) 		 SendManchester();//温度
    01507 D59D      RCALL	_SendManchester
(1429) 		 crc16array[2]=(unsigned char)(T_dat);
    01508 9020 02CD LDS	R2,T_dat
    0150A 9030 02CE LDS	R3,T_dat+1
    0150C 9220 0102 STS	crc16array+2,R2
(1430) 		 crc16array[3]=(unsigned char)(T_dat>>8);
    0150E 2C23      MOV	R2,R3
    0150F 2433      CLR	R3
    01510 FC27      SBRC	R2,7
    01511 9430      COM	R3
    01512 9220 0103 STS	crc16array+3,R2
(1431) 		 
(1432) 		  CheckMotor(30);	
    01514 E10E      LDI	R16,0x1E
    01515 E010      LDI	R17,0
    01516 940E 02F5 CALL	_CheckMotor
(1433) 		  
(1434) 		  lfib=Uart0RxData[5];
    01518 9020 02E7 LDS	R2,Uart0RxData+5
    0151A 2433      CLR	R3
    0151B 2444      CLR	R4
    0151C 2455      CLR	R5
    0151D 9230 0113 STS	lfib+1,R3
    0151F 9220 0112 STS	lfib,R2
    01521 9250 0115 STS	lfib+3,R5
    01523 9240 0114 STS	lfib+2,R4
(1435) 		  lfib<<=8;
    01525 E088      LDI	R24,0x8
    01526 E090      LDI	R25,0
    01527 9120 0114 LDS	R18,lfib+2
    01529 9130 0115 LDS	R19,lfib+3
    0152B 9100 0112 LDS	R16,lfib
    0152D 9110 0113 LDS	R17,lfib+1
    0152F 938A      ST	-Y,R24
    01530 940E 1F5B CALL	lsl32
    01532 9310 0113 STS	lfib+1,R17
    01534 9300 0112 STS	lfib,R16
    01536 9330 0115 STS	lfib+3,R19
    01538 9320 0114 STS	lfib+2,R18
(1436) 		  lfib|=Uart0RxData[4];
    0153A 9020 02E6 LDS	R2,Uart0RxData+4
    0153C 2433      CLR	R3
    0153D 2444      CLR	R4
    0153E 2455      CLR	R5
    0153F 0138      MOVW	R6,R16
    01540 0149      MOVW	R8,R18
    01541 2862      OR	R6,R2
    01542 2873      OR	R7,R3
    01543 2884      OR	R8,R4
    01544 2895      OR	R9,R5
    01545 9270 0113 STS	lfib+1,R7
    01547 9260 0112 STS	lfib,R6
    01549 9290 0115 STS	lfib+3,R9
    0154B 9280 0114 STS	lfib+2,R8
(1437) 		  lfib&=0x0000ffff;
    0154D EF4F      LDI	R20,0xFF
    0154E EF5F      LDI	R21,0xFF
    0154F E060      LDI	R22,0
    01550 E070      LDI	R23,0
    01551 0113      MOVW	R2,R6
    01552 0124      MOVW	R4,R8
    01553 2224      AND	R2,R20
    01554 2235      AND	R3,R21
    01555 2246      AND	R4,R22
    01556 2257      AND	R5,R23
    01557 9230 0113 STS	lfib+1,R3
    01559 9220 0112 STS	lfib,R2
    0155B 9250 0115 STS	lfib+3,R5
    0155D 9240 0114 STS	lfib+2,R4
(1438) 		  myFIB.f=(unsigned long)lfib; 
    0155F 0181      MOVW	R16,R2
    01560 0192      MOVW	R18,R4
    01561 940E 1FB7 CALL	ulong2fp
    01563 9310 0336 STS	myFIB+1,R17
    01565 9300 0335 STS	myFIB,R16
    01567 9330 0338 STS	myFIB+3,R19
    01569 9320 0337 STS	myFIB+2,R18
(1439) 		  
(1440) 		  T_dat=myFIB.i[1];
    0156B 9020 0337 LDS	R2,myFIB+2
    0156D 9030 0338 LDS	R3,myFIB+3
    0156F 9230 02CE STS	T_dat+1,R3
    01571 9220 02CD STS	T_dat,R2
(1441) 		  SendManchester();//流量-时间1
    01573 D531      RCALL	_SendManchester
(1442) 		  crc16array[4]=(unsigned char)(T_dat);
    01574 9020 02CD LDS	R2,T_dat
    01576 9030 02CE LDS	R3,T_dat+1
    01578 9220 0104 STS	crc16array+4,R2
(1443) 		  crc16array[5]=(unsigned char)(T_dat>>8);
    0157A 2C23      MOV	R2,R3
    0157B 2433      CLR	R3
    0157C FC27      SBRC	R2,7
    0157D 9430      COM	R3
    0157E 9220 0105 STS	crc16array+5,R2
(1444) 		  
(1445) 		  CheckMotor(30);	
    01580 E10E      LDI	R16,0x1E
    01581 E010      LDI	R17,0
    01582 940E 02F5 CALL	_CheckMotor
(1446) 		  T_dat=myFIB.i[0];
    01584 9020 0335 LDS	R2,myFIB
    01586 9030 0336 LDS	R3,myFIB+1
    01588 9230 02CE STS	T_dat+1,R3
    0158A 9220 02CD STS	T_dat,R2
(1447) 		  SendManchester();//流量-时间2
    0158C D518      RCALL	_SendManchester
(1448) 		  crc16array[6]=(unsigned char)(T_dat);
    0158D 9020 02CD LDS	R2,T_dat
    0158F 9030 02CE LDS	R3,T_dat+1
    01591 9220 0106 STS	crc16array+6,R2
(1449) 		  crc16array[7]=(unsigned char)(T_dat>>8);
    01593 2C23      MOV	R2,R3
    01594 2433      CLR	R3
    01595 FC27      SBRC	R2,7
    01596 9430      COM	R3
    01597 9220 0107 STS	crc16array+7,R2
(1450) 		  
(1451) 		  CheckMotor(30);	
    01599 E10E      LDI	R16,0x1E
    0159A E010      LDI	R17,0
    0159B 940E 02F5 CALL	_CheckMotor
(1452) 		  
(1453) 		  lfib=Uart0RxData[7];
    0159D 9020 02E9 LDS	R2,Uart0RxData+7
    0159F 2433      CLR	R3
    015A0 2444      CLR	R4
    015A1 2455      CLR	R5
    015A2 9230 0113 STS	lfib+1,R3
    015A4 9220 0112 STS	lfib,R2
    015A6 9250 0115 STS	lfib+3,R5
    015A8 9240 0114 STS	lfib+2,R4
(1454) 		  lfib<<=8;
    015AA E088      LDI	R24,0x8
    015AB E090      LDI	R25,0
    015AC 9120 0114 LDS	R18,lfib+2
    015AE 9130 0115 LDS	R19,lfib+3
    015B0 9100 0112 LDS	R16,lfib
    015B2 9110 0113 LDS	R17,lfib+1
    015B4 938A      ST	-Y,R24
    015B5 940E 1F5B CALL	lsl32
    015B7 9310 0113 STS	lfib+1,R17
    015B9 9300 0112 STS	lfib,R16
    015BB 9330 0115 STS	lfib+3,R19
    015BD 9320 0114 STS	lfib+2,R18
(1455) 		  lfib|=Uart0RxData[6];
    015BF 9020 02E8 LDS	R2,Uart0RxData+6
    015C1 2433      CLR	R3
    015C2 2444      CLR	R4
    015C3 2455      CLR	R5
    015C4 0138      MOVW	R6,R16
    015C5 0149      MOVW	R8,R18
    015C6 2862      OR	R6,R2
    015C7 2873      OR	R7,R3
    015C8 2884      OR	R8,R4
    015C9 2895      OR	R9,R5
    015CA 9270 0113 STS	lfib+1,R7
    015CC 9260 0112 STS	lfib,R6
    015CE 9290 0115 STS	lfib+3,R9
    015D0 9280 0114 STS	lfib+2,R8
(1456) 		  lfib&=0x0000ffff;
    015D2 EF4F      LDI	R20,0xFF
    015D3 EF5F      LDI	R21,0xFF
    015D4 E060      LDI	R22,0
    015D5 E070      LDI	R23,0
    015D6 0113      MOVW	R2,R6
    015D7 0124      MOVW	R4,R8
    015D8 2224      AND	R2,R20
    015D9 2235      AND	R3,R21
    015DA 2246      AND	R4,R22
    015DB 2257      AND	R5,R23
    015DC 9230 0113 STS	lfib+1,R3
    015DE 9220 0112 STS	lfib,R2
    015E0 9250 0115 STS	lfib+3,R5
    015E2 9240 0114 STS	lfib+2,R4
(1457) 		  myFIB.f=(unsigned long)lfib; 
    015E4 0181      MOVW	R16,R2
    015E5 0192      MOVW	R18,R4
    015E6 940E 1FB7 CALL	ulong2fp
    015E8 9310 0336 STS	myFIB+1,R17
    015EA 9300 0335 STS	myFIB,R16
    015EC 9330 0338 STS	myFIB+3,R19
    015EE 9320 0337 STS	myFIB+2,R18
(1458) 		  
(1459) 		  T_dat=myFIB.i[1];
    015F0 9020 0337 LDS	R2,myFIB+2
    015F2 9030 0338 LDS	R3,myFIB+3
    015F4 9230 02CE STS	T_dat+1,R3
    015F6 9220 02CD STS	T_dat,R2
(1460) 		  SendManchester();//流量-相位1
    015F8 D4AC      RCALL	_SendManchester
(1461) 		  crc16array[8]=(unsigned char)(T_dat);
    015F9 9020 02CD LDS	R2,T_dat
    015FB 9030 02CE LDS	R3,T_dat+1
    015FD 9220 0108 STS	crc16array+8,R2
(1462) 		  crc16array[9]=(unsigned char)(T_dat>>8);
    015FF 2C23      MOV	R2,R3
    01600 2433      CLR	R3
    01601 FC27      SBRC	R2,7
    01602 9430      COM	R3
    01603 9220 0109 STS	crc16array+9,R2
(1463) 		  
(1464) 		  CheckMotor(30);	
    01605 E10E      LDI	R16,0x1E
    01606 E010      LDI	R17,0
    01607 940E 02F5 CALL	_CheckMotor
(1465) 		  T_dat=myFIB.i[0];
    01609 9020 0335 LDS	R2,myFIB
    0160B 9030 0336 LDS	R3,myFIB+1
    0160D 9230 02CE STS	T_dat+1,R3
    0160F 9220 02CD STS	T_dat,R2
(1466) 		  SendManchester();//流量-相位2
    01611 D493      RCALL	_SendManchester
(1467) 		  crc16array[10]=(unsigned char)(T_dat);
    01612 9020 02CD LDS	R2,T_dat
    01614 9030 02CE LDS	R3,T_dat+1
    01616 9220 010A STS	crc16array+10,R2
(1468) 		  crc16array[11]=(unsigned char)(T_dat>>8);
    01618 2C23      MOV	R2,R3
    01619 2433      CLR	R3
    0161A FC27      SBRC	R2,7
    0161B 9430      COM	R3
    0161C 9220 010B STS	crc16array+11,R2
(1469) 		  
(1470) 		  CheckMotor(30);	 
    0161E E10E      LDI	R16,0x1E
    0161F E010      LDI	R17,0
    01620 940E 02F5 CALL	_CheckMotor
(1471) 		  T_dat=Motor1Status.i;
    01622 9020 0333 LDS	R2,Motor1Status
    01624 9030 0334 LDS	R3,Motor1Status+1
    01626 9230 02CE STS	T_dat+1,R3
    01628 9220 02CD STS	T_dat,R2
(1472) 		  SendManchester();//收放电机状态
    0162A D47A      RCALL	_SendManchester
(1473) 		  crc16array[12]=(unsigned char)(T_dat);
    0162B 9020 02CD LDS	R2,T_dat
    0162D 9030 02CE LDS	R3,T_dat+1
    0162F 9220 010C STS	crc16array+12,R2
(1474) 		  crc16array[13]=(unsigned char)(T_dat>>8);
    01631 2C23      MOV	R2,R3
    01632 2433      CLR	R3
    01633 FC27      SBRC	R2,7
    01634 9430      COM	R3
    01635 9220 010D STS	crc16array+13,R2
(1475) 		  
(1476) 		  CheckMotor(30);	 
    01637 E10E      LDI	R16,0x1E
    01638 E010      LDI	R17,0
    01639 940E 02F5 CALL	_CheckMotor
(1477) 		  T_dat=Motor2Status.i;
    0163B 9020 0331 LDS	R2,Motor2Status
    0163D 9030 0332 LDS	R3,Motor2Status+1
    0163F 9230 02CE STS	T_dat+1,R3
    01641 9220 02CD STS	T_dat,R2
(1478) 		  SendManchester();//调节电机状态
    01643 D461      RCALL	_SendManchester
(1479) 		  crc16array[14]=(unsigned char)(T_dat);
    01644 9020 02CD LDS	R2,T_dat
    01646 9030 02CE LDS	R3,T_dat+1
    01648 9220 010E STS	crc16array+14,R2
(1480) 		  crc16array[15]=(unsigned char)(T_dat>>8);
    0164A 2C23      MOV	R2,R3
    0164B 2433      CLR	R3
    0164C FC27      SBRC	R2,7
    0164D 9430      COM	R3
    0164E 9220 010F STS	crc16array+15,R2
(1481) 		  
(1482) 		  CheckMotor(30);	
    01650 E10E      LDI	R16,0x1E
    01651 E010      LDI	R17,0
    01652 940E 02F5 CALL	_CheckMotor
(1483) 		  crc16(crc16array,16);//0.75ms
    01654 E120      LDI	R18,0x10
    01655 E030      LDI	R19,0
    01656 E000      LDI	R16,0
    01657 E011      LDI	R17,1
    01658 940E 1EB7 CALL	_crc16
(1484) 		  T_dat=crc16hi;
    0165A 9020 0111 LDS	R2,crc16hi
    0165C 2433      CLR	R3
    0165D 9230 02CE STS	T_dat+1,R3
    0165F 9220 02CD STS	T_dat,R2
(1485) 		  T_dat<<=8;
    01661 9020 02CD LDS	R2,T_dat
    01663 9030 02CE LDS	R3,T_dat+1
    01665 2C32      MOV	R3,R2
    01666 2422      CLR	R2
    01667 9230 02CE STS	T_dat+1,R3
    01669 9220 02CD STS	T_dat,R2
(1486) 		  T_dat|=crc16lo;	  
    0166B 9020 0110 LDS	R2,crc16lo
    0166D 2433      CLR	R3
    0166E 9040 02CD LDS	R4,T_dat
    01670 9050 02CE LDS	R5,T_dat+1
    01672 2842      OR	R4,R2
    01673 2853      OR	R5,R3
    01674 9250 02CE STS	T_dat+1,R5
    01676 9240 02CD STS	T_dat,R4
(1487)           SendManchester();//上传CRC校验共2字节
    01678 D42C      RCALL	_SendManchester
(1488) 		 }	
(1489) 		}
    01679 C1A0      RJMP	0x181A
(1490) 		else  if(R_dat==0xc5) //读仪器信息,共320字节，分5次从流量板中提取，每包64字节
    0167A 9180 02CB LDS	R24,R_dat
    0167C 9190 02CC LDS	R25,R_dat+1
    0167E 3C85      CPI	R24,0xC5
    0167F E0E0      LDI	R30,0
    01680 079E      CPC	R25,R30
    01681 F009      BEQ	0x1683
    01682 C16A      RJMP	0x17ED
(1491) 		{
(1492) 		 Uart0TxData[0]=0xE8;
    01683 EE88      LDI	R24,0xE8
    01684 9380 011F STS	Uart0TxData,R24
(1493) 		 Uart0TxData[1]=0x40;
    01686 E480      LDI	R24,0x40
    01687 9380 0120 STS	Uart0TxData+1,R24
(1494) 		 Uart0TxData[2]=0x83;
    01689 E883      LDI	R24,0x83
    0168A 9380 0121 STS	Uart0TxData+2,R24
(1495) 		 Uart0TxData[3]=0;//包0
    0168C 2422      CLR	R2
    0168D 9220 0122 STS	Uart0TxData+3,R2
(1496) 		 SendUart0_2(9,5);// 超时40ms	
    0168F E025      LDI	R18,5
    01690 E030      LDI	R19,0
    01691 E009      LDI	R16,0x9
    01692 940E 00B7 CALL	_SendUart0_2
(1497) 		 if(Uart0RxCounter==64) 
    01694 9180 02E1 LDS	R24,Uart0RxCounter
    01696 3480      CPI	R24,0x40
    01697 F599      BNE	0x16CB
(1498) 		  {
(1499) 		   for(i=0;i<32;i++)
    01698 24AA      CLR	R10
    01699 C02E      RJMP	0x16C8
(1500) 		   {
(1501) 		   CheckMotor(20);
    0169A E104      LDI	R16,0x14
    0169B E010      LDI	R17,0
    0169C 940E 02F5 CALL	_CheckMotor
(1502) 		   T_dat=Uart0RxData[i*2+1];//高字节
    0169E EE83      LDI	R24,0xE3
    0169F E092      LDI	R25,2
    016A0 2DEA      MOV	R30,R10
    016A1 27FF      CLR	R31
    016A2 0FEE      LSL	R30
    016A3 1FFF      ROL	R31
    016A4 0FE8      ADD	R30,R24
    016A5 1FF9      ADC	R31,R25
    016A6 8020      LD	R2,Z
    016A7 2433      CLR	R3
    016A8 9230 02CE STS	T_dat+1,R3
    016AA 9220 02CD STS	T_dat,R2
(1503) 		   T_dat<<=8;
    016AC 2C32      MOV	R3,R2
    016AD 2422      CLR	R2
    016AE 9230 02CE STS	T_dat+1,R3
    016B0 9220 02CD STS	T_dat,R2
(1504) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    016B2 EE82      LDI	R24,0xE2
    016B3 E092      LDI	R25,2
    016B4 2DEA      MOV	R30,R10
    016B5 27FF      CLR	R31
    016B6 0FEE      LSL	R30
    016B7 1FFF      ROL	R31
    016B8 0FE8      ADD	R30,R24
    016B9 1FF9      ADC	R31,R25
    016BA 8020      LD	R2,Z
    016BB 2433      CLR	R3
    016BC 9040 02CD LDS	R4,T_dat
    016BE 9050 02CE LDS	R5,T_dat+1
    016C0 2842      OR	R4,R2
    016C1 2853      OR	R5,R3
    016C2 9250 02CE STS	T_dat+1,R5
    016C4 9240 02CD STS	T_dat,R4
(1505) 		   SendManchester();		 
    016C6 D3DE      RCALL	_SendManchester
    016C7 94A3      INC	R10
    016C8 2D8A      MOV	R24,R10
    016C9 3280      CPI	R24,0x20
    016CA F278      BCS	0x169A
(1506) 		   }	
(1507) 		 }	
(1508) 
(1509) 		 Uart0TxData[0]=0xE8;
    016CB EE88      LDI	R24,0xE8
    016CC 9380 011F STS	Uart0TxData,R24
(1510) 		 Uart0TxData[1]=0x40;
    016CE E480      LDI	R24,0x40
    016CF 9380 0120 STS	Uart0TxData+1,R24
(1511) 		 Uart0TxData[2]=0x83;
    016D1 E883      LDI	R24,0x83
    016D2 9380 0121 STS	Uart0TxData+2,R24
(1512) 		 Uart0TxData[3]=1;//包1
    016D4 E081      LDI	R24,1
    016D5 9380 0122 STS	Uart0TxData+3,R24
(1513) 		 SendUart0_2(9,5);// 超时40ms	 
    016D7 E025      LDI	R18,5
    016D8 E030      LDI	R19,0
    016D9 E009      LDI	R16,0x9
    016DA 940E 00B7 CALL	_SendUart0_2
(1514) 		 if(Uart0RxCounter==64) 
    016DC 9180 02E1 LDS	R24,Uart0RxCounter
    016DE 3480      CPI	R24,0x40
    016DF F599      BNE	0x1713
(1515) 		  {
(1516) 		   for(i=0;i<32;i++)
    016E0 24AA      CLR	R10
    016E1 C02E      RJMP	0x1710
(1517) 		   {
(1518) 		   T_dat=Uart0RxData[i*2+1];//高字节
    016E2 EE83      LDI	R24,0xE3
    016E3 E092      LDI	R25,2
    016E4 2DEA      MOV	R30,R10
    016E5 27FF      CLR	R31
    016E6 0FEE      LSL	R30
    016E7 1FFF      ROL	R31
    016E8 0FE8      ADD	R30,R24
    016E9 1FF9      ADC	R31,R25
    016EA 8020      LD	R2,Z
    016EB 2433      CLR	R3
    016EC 9230 02CE STS	T_dat+1,R3
    016EE 9220 02CD STS	T_dat,R2
(1519) 		   T_dat<<=8;
    016F0 2C32      MOV	R3,R2
    016F1 2422      CLR	R2
    016F2 9230 02CE STS	T_dat+1,R3
    016F4 9220 02CD STS	T_dat,R2
(1520) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    016F6 EE82      LDI	R24,0xE2
    016F7 E092      LDI	R25,2
    016F8 2DEA      MOV	R30,R10
    016F9 27FF      CLR	R31
    016FA 0FEE      LSL	R30
    016FB 1FFF      ROL	R31
    016FC 0FE8      ADD	R30,R24
    016FD 1FF9      ADC	R31,R25
    016FE 8020      LD	R2,Z
    016FF 2433      CLR	R3
    01700 9040 02CD LDS	R4,T_dat
    01702 9050 02CE LDS	R5,T_dat+1
    01704 2842      OR	R4,R2
    01705 2853      OR	R5,R3
    01706 9250 02CE STS	T_dat+1,R5
    01708 9240 02CD STS	T_dat,R4
(1521) 		   SendManchester();
    0170A D39A      RCALL	_SendManchester
(1522) 		   CheckMotor(20);
    0170B E104      LDI	R16,0x14
    0170C E010      LDI	R17,0
    0170D 940E 02F5 CALL	_CheckMotor
    0170F 94A3      INC	R10
    01710 2D8A      MOV	R24,R10
    01711 3280      CPI	R24,0x20
    01712 F278      BCS	0x16E2
(1523) 		  }
(1524) 		 }	
(1525) 		 	
(1526) 		 Uart0TxData[0]=0xE8;
    01713 EE88      LDI	R24,0xE8
    01714 9380 011F STS	Uart0TxData,R24
(1527) 		 Uart0TxData[1]=0x40;
    01716 E480      LDI	R24,0x40
    01717 9380 0120 STS	Uart0TxData+1,R24
(1528) 		 Uart0TxData[2]=0x83;
    01719 E883      LDI	R24,0x83
    0171A 9380 0121 STS	Uart0TxData+2,R24
(1529) 		 Uart0TxData[3]=2;//包2
    0171C E082      LDI	R24,2
    0171D 9380 0122 STS	Uart0TxData+3,R24
(1530) 		 SendUart0_2(9,5);// 超时40ms	 
    0171F E025      LDI	R18,5
    01720 E030      LDI	R19,0
    01721 E009      LDI	R16,0x9
    01722 940E 00B7 CALL	_SendUart0_2
(1531) 		 if(Uart0RxCounter==64) 
    01724 9180 02E1 LDS	R24,Uart0RxCounter
    01726 3480      CPI	R24,0x40
    01727 F599      BNE	0x175B
(1532) 		  {
(1533) 		   for(i=0;i<32;i++)
    01728 24AA      CLR	R10
    01729 C02E      RJMP	0x1758
(1534) 		   {
(1535) 		   T_dat=Uart0RxData[i*2+1];//高字节
    0172A EE83      LDI	R24,0xE3
    0172B E092      LDI	R25,2
    0172C 2DEA      MOV	R30,R10
    0172D 27FF      CLR	R31
    0172E 0FEE      LSL	R30
    0172F 1FFF      ROL	R31
    01730 0FE8      ADD	R30,R24
    01731 1FF9      ADC	R31,R25
    01732 8020      LD	R2,Z
    01733 2433      CLR	R3
    01734 9230 02CE STS	T_dat+1,R3
    01736 9220 02CD STS	T_dat,R2
(1536) 		   T_dat<<=8;
    01738 2C32      MOV	R3,R2
    01739 2422      CLR	R2
    0173A 9230 02CE STS	T_dat+1,R3
    0173C 9220 02CD STS	T_dat,R2
(1537) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    0173E EE82      LDI	R24,0xE2
    0173F E092      LDI	R25,2
    01740 2DEA      MOV	R30,R10
    01741 27FF      CLR	R31
    01742 0FEE      LSL	R30
    01743 1FFF      ROL	R31
    01744 0FE8      ADD	R30,R24
    01745 1FF9      ADC	R31,R25
    01746 8020      LD	R2,Z
    01747 2433      CLR	R3
    01748 9040 02CD LDS	R4,T_dat
    0174A 9050 02CE LDS	R5,T_dat+1
    0174C 2842      OR	R4,R2
    0174D 2853      OR	R5,R3
    0174E 9250 02CE STS	T_dat+1,R5
    01750 9240 02CD STS	T_dat,R4
(1538) 		   SendManchester();
    01752 D352      RCALL	_SendManchester
(1539) 		   CheckMotor(20);
    01753 E104      LDI	R16,0x14
    01754 E010      LDI	R17,0
    01755 940E 02F5 CALL	_CheckMotor
    01757 94A3      INC	R10
    01758 2D8A      MOV	R24,R10
    01759 3280      CPI	R24,0x20
    0175A F278      BCS	0x172A
(1540) 		  }
(1541) 		 }	
(1542) 		 
(1543) 		 Uart0TxData[0]=0xE8;
    0175B EE88      LDI	R24,0xE8
    0175C 9380 011F STS	Uart0TxData,R24
(1544) 		 Uart0TxData[1]=0x40;
    0175E E480      LDI	R24,0x40
    0175F 9380 0120 STS	Uart0TxData+1,R24
(1545) 		 Uart0TxData[2]=0x83;
    01761 E883      LDI	R24,0x83
    01762 9380 0121 STS	Uart0TxData+2,R24
(1546) 		 Uart0TxData[3]=3;//包3
    01764 E083      LDI	R24,3
    01765 9380 0122 STS	Uart0TxData+3,R24
(1547) 		 SendUart0_2(9,5);// 超时40ms	 
    01767 E025      LDI	R18,5
    01768 E030      LDI	R19,0
    01769 E009      LDI	R16,0x9
    0176A 940E 00B7 CALL	_SendUart0_2
(1548) 		 if(Uart0RxCounter==64) 
    0176C 9180 02E1 LDS	R24,Uart0RxCounter
    0176E 3480      CPI	R24,0x40
    0176F F599      BNE	0x17A3
(1549) 		  {
(1550) 		   for(i=0;i<32;i++)
    01770 24AA      CLR	R10
    01771 C02E      RJMP	0x17A0
(1551) 		   {
(1552) 		   T_dat=Uart0RxData[i*2+1];//高字节
    01772 EE83      LDI	R24,0xE3
    01773 E092      LDI	R25,2
    01774 2DEA      MOV	R30,R10
    01775 27FF      CLR	R31
    01776 0FEE      LSL	R30
    01777 1FFF      ROL	R31
    01778 0FE8      ADD	R30,R24
    01779 1FF9      ADC	R31,R25
    0177A 8020      LD	R2,Z
    0177B 2433      CLR	R3
    0177C 9230 02CE STS	T_dat+1,R3
    0177E 9220 02CD STS	T_dat,R2
(1553) 		   T_dat<<=8;
    01780 2C32      MOV	R3,R2
    01781 2422      CLR	R2
    01782 9230 02CE STS	T_dat+1,R3
    01784 9220 02CD STS	T_dat,R2
(1554) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    01786 EE82      LDI	R24,0xE2
    01787 E092      LDI	R25,2
    01788 2DEA      MOV	R30,R10
    01789 27FF      CLR	R31
    0178A 0FEE      LSL	R30
    0178B 1FFF      ROL	R31
    0178C 0FE8      ADD	R30,R24
    0178D 1FF9      ADC	R31,R25
    0178E 8020      LD	R2,Z
    0178F 2433      CLR	R3
    01790 9040 02CD LDS	R4,T_dat
    01792 9050 02CE LDS	R5,T_dat+1
    01794 2842      OR	R4,R2
    01795 2853      OR	R5,R3
    01796 9250 02CE STS	T_dat+1,R5
    01798 9240 02CD STS	T_dat,R4
(1555) 		   SendManchester();
    0179A D30A      RCALL	_SendManchester
(1556) 		   CheckMotor(20);
    0179B E104      LDI	R16,0x14
    0179C E010      LDI	R17,0
    0179D 940E 02F5 CALL	_CheckMotor
    0179F 94A3      INC	R10
    017A0 2D8A      MOV	R24,R10
    017A1 3280      CPI	R24,0x20
    017A2 F278      BCS	0x1772
(1557) 		  }
(1558) 		 }	
(1559) 		 
(1560) 		 Uart0TxData[0]=0xE8;
    017A3 EE88      LDI	R24,0xE8
    017A4 9380 011F STS	Uart0TxData,R24
(1561) 		 Uart0TxData[1]=0x40;
    017A6 E480      LDI	R24,0x40
    017A7 9380 0120 STS	Uart0TxData+1,R24
(1562) 		 Uart0TxData[2]=0x83;
    017A9 E883      LDI	R24,0x83
    017AA 9380 0121 STS	Uart0TxData+2,R24
(1563) 		 Uart0TxData[3]=4;//包4
    017AC E084      LDI	R24,4
    017AD 9380 0122 STS	Uart0TxData+3,R24
(1564) 		 SendUart0_2(9,5);// 超时40ms	 
    017AF E025      LDI	R18,5
    017B0 E030      LDI	R19,0
    017B1 E009      LDI	R16,0x9
    017B2 940E 00B7 CALL	_SendUart0_2
(1565) 		 if(Uart0RxCounter==64) 
    017B4 9180 02E1 LDS	R24,Uart0RxCounter
    017B6 3480      CPI	R24,0x40
    017B7 F009      BEQ	0x17B9
    017B8 C061      RJMP	0x181A
(1566) 		  {
(1567) 		   for(i=0;i<32;i++)
    017B9 24AA      CLR	R10
    017BA C02E      RJMP	0x17E9
(1568) 		   {
(1569) 		   T_dat=Uart0RxData[i*2+1];//高字节
    017BB EE83      LDI	R24,0xE3
    017BC E092      LDI	R25,2
    017BD 2DEA      MOV	R30,R10
    017BE 27FF      CLR	R31
    017BF 0FEE      LSL	R30
    017C0 1FFF      ROL	R31
    017C1 0FE8      ADD	R30,R24
    017C2 1FF9      ADC	R31,R25
    017C3 8020      LD	R2,Z
    017C4 2433      CLR	R3
    017C5 9230 02CE STS	T_dat+1,R3
    017C7 9220 02CD STS	T_dat,R2
(1570) 		   T_dat<<=8;
    017C9 2C32      MOV	R3,R2
    017CA 2422      CLR	R2
    017CB 9230 02CE STS	T_dat+1,R3
    017CD 9220 02CD STS	T_dat,R2
(1571) 		   T_dat|=Uart0RxData[i*2+0];//低字节
    017CF EE82      LDI	R24,0xE2
    017D0 E092      LDI	R25,2
    017D1 2DEA      MOV	R30,R10
    017D2 27FF      CLR	R31
    017D3 0FEE      LSL	R30
    017D4 1FFF      ROL	R31
    017D5 0FE8      ADD	R30,R24
    017D6 1FF9      ADC	R31,R25
    017D7 8020      LD	R2,Z
    017D8 2433      CLR	R3
    017D9 9040 02CD LDS	R4,T_dat
    017DB 9050 02CE LDS	R5,T_dat+1
    017DD 2842      OR	R4,R2
    017DE 2853      OR	R5,R3
    017DF 9250 02CE STS	T_dat+1,R5
    017E1 9240 02CD STS	T_dat,R4
(1572) 		   SendManchester();
    017E3 D2C1      RCALL	_SendManchester
(1573) 		   CheckMotor(20);
    017E4 E104      LDI	R16,0x14
    017E5 E010      LDI	R17,0
    017E6 940E 02F5 CALL	_CheckMotor
    017E8 94A3      INC	R10
    017E9 2D8A      MOV	R24,R10
    017EA 3280      CPI	R24,0x20
    017EB F278      BCS	0x17BB
(1574) 		  }
(1575) 		 }	
(1576) 		 
(1577) 		}
    017EC C02D      RJMP	0x181A
(1578) 		else  if(R_dat==0xca) //写仪器信息
    017ED 9180 02CB LDS	R24,R_dat
    017EF 9190 02CC LDS	R25,R_dat+1
    017F1 3C8A      CPI	R24,0xCA
    017F2 E0E0      LDI	R30,0
    017F3 079E      CPC	R25,R30
    017F4 F529      BNE	0x181A
(1579) 		{
(1580) 		 DataFlag=4;
    017F5 E084      LDI	R24,4
    017F6 E090      LDI	R25,0
    017F7 9390 02B2 STS	DataFlag+1,R25
    017F9 9380 02B1 STS	DataFlag,R24
(1581) 		 coeff_len=320;
    017FB E480      LDI	R24,0x40
    017FC E091      LDI	R25,1
    017FD 9390 011D STS	coeff_len+1,R25
    017FF 9380 011C STS	coeff_len,R24
(1582) 		 coeff_count=0;
    01801 2422      CLR	R2
    01802 2433      CLR	R3
    01803 9230 011B STS	coeff_count+1,R3
    01805 9220 011A STS	coeff_count,R2
(1583) 		 TimeOutFlag=0;
    01807 9220 02C9 STS	TimeOutFlag,R2
(1584) 		 Timer0Counter=2000;//16s定时
    01809 ED80      LDI	R24,0xD0
    0180A E097      LDI	R25,7
    0180B 9390 032D STS	Timer0Counter+1,R25
    0180D 9380 032C STS	Timer0Counter,R24
(1585) 	     TCNT0=0x06; //8ms
    0180F E086      LDI	R24,6
    01810 BF82      OUT	0x32,R24
(1586) 	     TCCR0|=0x06;//256分频
    01811 B783      IN	R24,0x33
    01812 6086      ORI	R24,6
    01813 BF83      OUT	0x33,R24
(1587) 	     TIFR|=0x01; //清定时器0中断标志
    01814 B786      IN	R24,0x36
    01815 6081      ORI	R24,1
    01816 BF86      OUT	0x36,R24
(1588)          TIMSK|=0x01;//使能定时器0中断		
    01817 B787      IN	R24,0x37
    01818 6081      ORI	R24,1
    01819 BF87      OUT	0x37,R24
(1589) 		}
(1590) 	break;
(1591)     default: 
(1592) 	break;	
(1593)    }
(1594)   }
(1595) RDataEnd:
(1596) 	IntFlag=0;
    0181A 2422      CLR	R2
    0181B 9220 02AF STS	IntFlag,R2
(1597)     EIFR|=0x08;//清INT3中断标志
    0181D B788      IN	R24,0x38
    0181E 6088      ORI	R24,0x8
    0181F BF88      OUT	0x38,R24
(1598)     EIMSK|=0x08;//使能INT3中断 
    01820 B789      IN	R24,0x39
    01821 6088      ORI	R24,0x8
    01822 BF89      OUT	0x39,R24
    01823 940C 0597 JMP	0x597
    01825 9625      ADIW	R28,5
    01826 9508      RET
_E_comp:
    01827 921A      ST	-Y,R1
    01828 922A      ST	-Y,R2
    01829 938A      ST	-Y,R24
    0182A 939A      ST	-Y,R25
    0182B B61F      IN	R1,0x3F
    0182C 921A      ST	-Y,R1
(1599)   }  
(1600)   }
(1601) }
(1602) 
(1603) #pragma interrupt_handler E_comp:24
(1604) void E_comp(void)  //模拟比较器中断,总线电压被拉低到28.5V后，立即停电机
(1605) {   
(1606)   if(PWM1_PIN==1)//收放电机欠压堵转
    0182D B389      IN	R24,0x19
    0182E 7082      ANDI	R24,2
    0182F 9586      LSR	R24
    01830 3081      CPI	R24,1
    01831 F449      BNE	0x183B
(1607)    {
(1608)  	 Motor1Status.s.UnderVoltage=1;
    01832 9180 0333 LDS	R24,Motor1Status
    01834 9190 0334 LDS	R25,Motor1Status+1
    01836 6280      ORI	R24,0x20
    01837 9390 0334 STS	Motor1Status+1,R25
    01839 9380 0333 STS	Motor1Status,R24
(1609)    }
(1610)   if(PWM2_PIN==1)//调节电机欠压堵转
    0183B B180      IN	R24,0x00
    0183C 7084      ANDI	R24,4
    0183D 9586      LSR	R24
    0183E 9586      LSR	R24
    0183F 3081      CPI	R24,1
    01840 F449      BNE	0x184A
(1611)    { 
(1612)  	Motor2Status.s.UnderVoltage=1;
    01841 9180 0331 LDS	R24,Motor2Status
    01843 9190 0332 LDS	R25,Motor2Status+1
    01845 6280      ORI	R24,0x20
    01846 9390 0332 STS	Motor2Status+1,R25
    01848 9380 0331 STS	Motor2Status,R24
(1613)    } 
(1614)    MOTORSTOP  //关电机 
    0184A B38A      IN	R24,0x1A
    0184B 6087      ORI	R24,7
    0184C BB8A      OUT	0x1A,R24
    0184D B38B      IN	R24,0x1B
    0184E 7F8D      ANDI	R24,0xFD
    0184F BB8B      OUT	0x1B,R24
    01850 B38B      IN	R24,0x1B
    01851 7F88      ANDI	R24,0xF8
    01852 BB8B      OUT	0x1B,R24
    01853 9180 0061 LDS	R24,0x61
    01855 6087      ORI	R24,7
    01856 9380 0061 STS	0x61,R24
    01858 9180 0062 LDS	R24,0x62
    0185A 7F8B      ANDI	R24,0xFB
    0185B 9380 0062 STS	0x62,R24
    0185D 9180 0062 LDS	R24,0x62
    0185F 7F88      ANDI	R24,0xF8
    01860 9380 0062 STS	0x62,R24
    01862 9ABF      SBI	0x17,7
    01863 B388      IN	R24,0x18
    01864 778F      ANDI	R24,0x7F
    01865 BB88      OUT	0x18,R24
    01866 9019      LD	R1,Y+
    01867 BE1F      OUT	0x3F,R1
    01868 9199      LD	R25,Y+
    01869 9189      LD	R24,Y+
    0186A 9029      LD	R2,Y+
    0186B 9019      LD	R1,Y+
    0186C 9518      RETI
_usart0_isr:
    0186D 922A      ST	-Y,R2
    0186E 938A      ST	-Y,R24
    0186F 939A      ST	-Y,R25
    01870 93EA      ST	-Y,R30
    01871 93FA      ST	-Y,R31
    01872 B62F      IN	R2,0x3F
    01873 922A      ST	-Y,R2
(1615) }
(1616) 
(1617) /*
(1618) #pragma interrupt_handler int0_isr:2
(1619) void int0_isr(void)//外部中断0，过流堵转
(1620) {
(1621)   CompCounter++; 
(1622)   if(CompCounter>1000)
(1623)   {
(1624)    MOTORSTOP  //关电机
(1625)   
(1626)    if(Motor1Status.s.ThisRun>0)//收放电机过流堵转
(1627)     {
(1628) 	 Motor1Status.s.ThisRun=0;
(1629) 	 Motor1Status.s.CommandStop=0;
(1630)  	 Motor1Status.s.OverCurrent=1;
(1631)  	 Motor1Status.s.UnderVoltage=0;
(1632) 	}
(1633)    if(Motor2Status.s.ThisRun>0)//调节电机过流堵转
(1634)     {
(1635) 	  Motor2Status.s.ThisRun=0;
(1636) 	  Motor2Status.s.CommandStop=0;
(1637)  	  Motor2Status.s.OverCurrent=1;
(1638)  	  Motor2Status.s.UnderVoltage=0;
(1639) 	}
(1640)   }
(1641) }
(1642) */
(1643) #pragma interrupt_handler usart0_isr:19
(1644) void usart0_isr(void) //串口接收中断
(1645) {
(1646)     if(Uart0RxCounter<74)
    01874 9180 02E1 LDS	R24,Uart0RxCounter
    01876 348A      CPI	R24,0x4A
    01877 F470      BCC	0x1886
(1647) 	{
(1648)     Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
    01878 EE82      LDI	R24,0xE2
    01879 E092      LDI	R25,2
    0187A 91E0 02E1 LDS	R30,Uart0RxCounter
    0187C 27FF      CLR	R31
    0187D 0FE8      ADD	R30,R24
    0187E 1FF9      ADC	R31,R25
    0187F B02C      IN	R2,0x0C
    01880 8220      ST	Z,R2
(1649)  	Uart0RxCounter++;
    01881 9180 02E1 LDS	R24,Uart0RxCounter
    01883 5F8F      SUBI	R24,0xFF
    01884 9380 02E1 STS	Uart0RxCounter,R24
(1650) 	}
    01886 9029      LD	R2,Y+
    01887 BE2F      OUT	0x3F,R2
    01888 91F9      LD	R31,Y+
    01889 91E9      LD	R30,Y+
    0188A 9199      LD	R25,Y+
    0188B 9189      LD	R24,Y+
    0188C 9029      LD	R2,Y+
    0188D 9518      RETI
_int3_isr:
    0188E 922A      ST	-Y,R2
    0188F 923A      ST	-Y,R3
    01890 930A      ST	-Y,R16
    01891 931A      ST	-Y,R17
    01892 938A      ST	-Y,R24
    01893 939A      ST	-Y,R25
    01894 93AA      ST	-Y,R26
    01895 93EA      ST	-Y,R30
    01896 93FA      ST	-Y,R31
    01897 B62F      IN	R2,0x3F
    01898 922A      ST	-Y,R2
(1651) }
(1652) 
(1653) /*
(1654) #pragma interrupt_handler ad_isr:22
(1655) void ad_isr(void)  //ad转换中断
(1656) {
(1657)   ADCData[ADCCn]=ADCH;
(1658)   ADCData[ADCCn]<<=8;
(1659)   ADCData[ADCCn]|=ADCL;//读AD转换结果
(1660)   ADCCn++;
(1661)   ADCData[ADCCn]&=0x03ff;//10位有效转换结果
(1662)   if(ADCCn==129)
(1663)    { 
(1664)    ADCSRA&=0xF7;//关AD中断
(1665)    ADCSRA|=0x10;//清AD中断标志
(1666)    ADCSRA=0;//关ADC
(1667)    }
(1668) }
(1669) */
(1670) 
(1671) #pragma interrupt_handler int3_isr:iv_INT3
(1672) void int3_isr(void)//外部中断3
(1673) { 
(1674)    SREG&=0x7f;//关总中断
    01899 B78F      IN	R24,0x3F
    0189A 778F      ANDI	R24,0x7F
    0189B BF8F      OUT	0x3F,R24
(1675)    EIMSK&=0xF7;//关INT3  
    0189C B789      IN	R24,0x39
    0189D 7F87      ANDI	R24,0xF7
    0189E BF89      OUT	0x39,R24
(1676)    TCCR2 = 0x00; //stop
    0189F 2422      CLR	R2
    018A0 BC25      OUT	0x25,R2
(1677)   
(1678)   DELAY10
    018A1 2433      CLR	R3
    018A2 9230 02AE STS	Tt+1,R3
    018A4 9220 02AD STS	Tt,R2
    018A6 C009      RJMP	0x18B0
    018A7 9180 02AD LDS	R24,Tt
    018A9 9190 02AE LDS	R25,Tt+1
    018AB 9601      ADIW	R24,1
    018AC 9390 02AE STS	Tt+1,R25
    018AE 9380 02AD STS	Tt,R24
    018B0 9180 02AD LDS	R24,Tt
    018B2 9190 02AE LDS	R25,Tt+1
    018B4 3084      CPI	R24,4
    018B5 E0E0      LDI	R30,0
    018B6 079E      CPC	R25,R30
    018B7 F378      BCS	0x18A7
(1679)   EIFR|=0x08;//清INT3中断标志 
    018B8 B788      IN	R24,0x38
    018B9 6088      ORI	R24,0x8
    018BA BF88      OUT	0x38,R24
(1680)   if((PIND&0x08)==0x00)//高脉冲不足10us则直接跳出
    018BB 9983      SBIC	0x10,3
    018BC C001      RJMP	0x18BE
(1681)   {
(1682)    goto End;
    018BD C1CD      RJMP	0x1A8B
(1683)   }
(1684)    
(1685)    TCNT2 = 0x00;  
    018BE 2422      CLR	R2
    018BF BC24      OUT	0x24,R2
(1686)    TCCR2 = 0x03; //64分频,8M时钟，每个CLOCK耗时8us，最大定时2048us，每周期10个计数
    018C0 E083      LDI	R24,3
    018C1 BD85      OUT	0x25,R24
    018C2 C029      RJMP	0x18EC
(1687)    
(1688)    while(1)
(1689)    {
(1690)      T2cn=TCNT2;
    018C3 B424      IN	R2,0x24
    018C4 2433      CLR	R3
    018C5 9230 02AA STS	T2cn+1,R3
    018C7 9220 02A9 STS	T2cn,R2
(1691) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    018C9 E580      LDI	R24,0x50
    018CA E090      LDI	R25,0
    018CB 1582      CP	R24,R2
    018CC 0593      CPC	R25,R3
    018CD F408      BCC	0x18CF
(1692) 	  {
(1693) 	    goto End;
    018CE C1BC      RJMP	0x1A8B
(1694) 	  }
(1695)      if((PIND&0x08)==0x00)
    018CF 9983      SBIC	0x10,3
    018D0 C01B      RJMP	0x18EC
(1696) 	 {
(1697) 	   DELAY20
    018D1 2422      CLR	R2
    018D2 2433      CLR	R3
    018D3 9230 02AE STS	Tt+1,R3
    018D5 9220 02AD STS	Tt,R2
    018D7 C009      RJMP	0x18E1
    018D8 9180 02AD LDS	R24,Tt
    018DA 9190 02AE LDS	R25,Tt+1
    018DC 9601      ADIW	R24,1
    018DD 9390 02AE STS	Tt+1,R25
    018DF 9380 02AD STS	Tt,R24
    018E1 9180 02AD LDS	R24,Tt
    018E3 9190 02AE LDS	R25,Tt+1
    018E5 3084      CPI	R24,4
    018E6 E0E0      LDI	R30,0
    018E7 079E      CPC	R25,R30
    018E8 F378      BCS	0x18D8
(1698) 	   if((PIND&0x08)==0x00)
    018E9 9983      SBIC	0x10,3
    018EA C001      RJMP	0x18EC
(1699) 	    {
(1700) 	      break;
    018EB C031      RJMP	0x191D
    018EC CFD6      RJMP	0x18C3
(1701) 	    }
(1702) 	 }
(1703)    }
(1704)      		   
(1705)     //开始判断同步头	
(1706) 	while(1)//还没有上升沿到来,死等
(1707) 	{
(1708) 	  T2cn=TCNT2;
    018ED B424      IN	R2,0x24
    018EE 2433      CLR	R3
    018EF 9230 02AA STS	T2cn+1,R3
    018F1 9220 02A9 STS	T2cn,R2
(1709) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    018F3 E580      LDI	R24,0x50
    018F4 E090      LDI	R25,0
    018F5 1582      CP	R24,R2
    018F6 0593      CPC	R25,R3
    018F7 F408      BCC	0x18F9
(1710) 	  {
(1711) 	    goto End;
    018F8 C192      RJMP	0x1A8B
(1712) 	  }
(1713) 	  if((EIFR&0x08)==0x08)
    018F9 B788      IN	R24,0x38
    018FA 7088      ANDI	R24,0x8
    018FB 3088      CPI	R24,0x8
    018FC F501      BNE	0x191D
(1714) 	  {
(1715) 	   DELAY10
    018FD 2422      CLR	R2
    018FE 2433      CLR	R3
    018FF 9230 02AE STS	Tt+1,R3
    01901 9220 02AD STS	Tt,R2
    01903 C009      RJMP	0x190D
    01904 9180 02AD LDS	R24,Tt
    01906 9190 02AE LDS	R25,Tt+1
    01908 9601      ADIW	R24,1
    01909 9390 02AE STS	Tt+1,R25
    0190B 9380 02AD STS	Tt,R24
    0190D 9180 02AD LDS	R24,Tt
    0190F 9190 02AE LDS	R25,Tt+1
    01911 3084      CPI	R24,4
    01912 E0E0      LDI	R30,0
    01913 079E      CPC	R25,R30
    01914 F378      BCS	0x1904
(1716) 	   EIFR|=0x08;//清INT3中断标志 
    01915 B788      IN	R24,0x38
    01916 6088      ORI	R24,0x8
    01917 BF88      OUT	0x38,R24
(1717) 	   if((PIND&0x08)==0x08)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    01918 B380      IN	R24,0x10
    01919 7088      ANDI	R24,0x8
    0191A 3088      CPI	R24,0x8
    0191B F409      BNE	0x191D
(1718) 	     {
(1719)    	     break;
    0191C C001      RJMP	0x191E
    0191D CFCF      RJMP	0x18ED
(1720) 		 }
(1721) 	  }  
(1722) 	}
(1723) 	T2cn=TCNT2;
    0191E B424      IN	R2,0x24
    0191F 2433      CLR	R3
    01920 9230 02AA STS	T2cn+1,R3
    01922 9220 02A9 STS	T2cn,R2
(1724) 	TCNT2=0;
    01924 2422      CLR	R2
    01925 BC24      OUT	0x24,R2
(1725) 	if((T2cn<60)||(T2cn>80))//同步头本应是7个周期，但收到的结果为6~8个周期内都认可
    01926 9020 02A9 LDS	R2,T2cn
    01928 9030 02AA LDS	R3,T2cn+1
    0192A 01C1      MOVW	R24,R2
    0192B 338C      CPI	R24,0x3C
    0192C E0E0      LDI	R30,0
    0192D 079E      CPC	R25,R30
    0192E F028      BCS	0x1934
    0192F E580      LDI	R24,0x50
    01930 E090      LDI	R25,0
    01931 1582      CP	R24,R2
    01932 0593      CPC	R25,R3
    01933 F408      BCC	0x1935
(1726) 	{
(1727) 	 goto End;//没有收到正确的同步头，直接跳出
    01934 C156      RJMP	0x1A8B
(1728) 	}
(1729) 	
(1730) Start:	//同步头解码正确，下面开始接收9位数据位	//按位从高到低接收数据位，8位数据加1位校验共9位 		      	
(1731)   for(Int_count=9;Int_count>0;Int_count--)
    01935 E089      LDI	R24,0x9
    01936 9380 02B0 STS	Int_count,R24
    01938 C0B3      RJMP	0x19EC
(1732)   {	
(1733)    while(1)
(1734)    {
(1735)      T2cn=TCNT2;
    01939 B424      IN	R2,0x24
    0193A 2433      CLR	R3
    0193B 9230 02AA STS	T2cn+1,R3
    0193D 9220 02A9 STS	T2cn,R2
(1736) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    0193F E580      LDI	R24,0x50
    01940 E090      LDI	R25,0
    01941 1582      CP	R24,R2
    01942 0593      CPC	R25,R3
    01943 F408      BCC	0x1945
(1737) 	  {
(1738) 	    goto End;
    01944 C146      RJMP	0x1A8B
(1739) 	  }
(1740)      if((PIND&0x08)==0x00)
    01945 9983      SBIC	0x10,3
    01946 C01B      RJMP	0x1962
(1741) 	 {
(1742) 	   DELAY20
    01947 2422      CLR	R2
    01948 2433      CLR	R3
    01949 9230 02AE STS	Tt+1,R3
    0194B 9220 02AD STS	Tt,R2
    0194D C009      RJMP	0x1957
    0194E 9180 02AD LDS	R24,Tt
    01950 9190 02AE LDS	R25,Tt+1
    01952 9601      ADIW	R24,1
    01953 9390 02AE STS	Tt+1,R25
    01955 9380 02AD STS	Tt,R24
    01957 9180 02AD LDS	R24,Tt
    01959 9190 02AE LDS	R25,Tt+1
    0195B 3084      CPI	R24,4
    0195C E0E0      LDI	R30,0
    0195D 079E      CPC	R25,R30
    0195E F378      BCS	0x194E
(1743) 	   if((PIND&0x08)==0x00)
    0195F 9983      SBIC	0x10,3
    01960 C001      RJMP	0x1962
(1744) 	    {
(1745) 	      break;
    01961 C031      RJMP	0x1993
    01962 CFD6      RJMP	0x1939
(1746) 	    }
(1747) 	 }
(1748)    } 
(1749)    while(1)//还没有上升沿到来,死等
(1750) 	{
(1751) 	  T2cn=TCNT2;
    01963 B424      IN	R2,0x24
    01964 2433      CLR	R3
    01965 9230 02AA STS	T2cn+1,R3
    01967 9220 02A9 STS	T2cn,R2
(1752) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    01969 E580      LDI	R24,0x50
    0196A E090      LDI	R25,0
    0196B 1582      CP	R24,R2
    0196C 0593      CPC	R25,R3
    0196D F408      BCC	0x196F
(1753) 	  {
(1754) 	    goto End;
    0196E C11C      RJMP	0x1A8B
(1755) 	  }
(1756) 	  if((EIFR&0x08)==0x08)
    0196F B788      IN	R24,0x38
    01970 7088      ANDI	R24,0x8
    01971 3088      CPI	R24,0x8
    01972 F501      BNE	0x1993
(1757) 	  {
(1758) 	   DELAY10
    01973 2422      CLR	R2
    01974 2433      CLR	R3
    01975 9230 02AE STS	Tt+1,R3
    01977 9220 02AD STS	Tt,R2
    01979 C009      RJMP	0x1983
    0197A 9180 02AD LDS	R24,Tt
    0197C 9190 02AE LDS	R25,Tt+1
    0197E 9601      ADIW	R24,1
    0197F 9390 02AE STS	Tt+1,R25
    01981 9380 02AD STS	Tt,R24
    01983 9180 02AD LDS	R24,Tt
    01985 9190 02AE LDS	R25,Tt+1
    01987 3084      CPI	R24,4
    01988 E0E0      LDI	R30,0
    01989 079E      CPC	R25,R30
    0198A F378      BCS	0x197A
(1759) 	   EIFR|=0x08;//清INT3中断标志 
    0198B B788      IN	R24,0x38
    0198C 6088      ORI	R24,0x8
    0198D BF88      OUT	0x38,R24
(1760) 	   if((PIND&0x08)==0x08)//高脉冲维持了10us，则认为是下一个有效上升沿到来
    0198E B380      IN	R24,0x10
    0198F 7088      ANDI	R24,0x8
    01990 3088      CPI	R24,0x8
    01991 F409      BNE	0x1993
(1761) 	     {
(1762)    	     break;
    01992 C001      RJMP	0x1994
    01993 CFCF      RJMP	0x1963
(1763) 		 }
(1764) 	  }  
(1765) 	}
(1766) 	T2cn=TCNT2;
    01994 B424      IN	R2,0x24
    01995 2433      CLR	R3
    01996 9230 02AA STS	T2cn+1,R3
    01998 9220 02A9 STS	T2cn,R2
(1767) 	TCNT2=0;
    0199A 2422      CLR	R2
    0199B BC24      OUT	0x24,R2
(1768) 	if(T2cn<20)//数据位最小是3位，可放宽到2位
    0199C 9180 02A9 LDS	R24,T2cn
    0199E 9190 02AA LDS	R25,T2cn+1
    019A0 3184      CPI	R24,0x14
    019A1 E0E0      LDI	R30,0
    019A2 079E      CPC	R25,R30
    019A3 F420      BCC	0x19A8
(1769) 	{
(1770) 	 IntFlag=3;//接收数据位不完整
    019A4 E083      LDI	R24,3
    019A5 9380 02AF STS	IntFlag,R24
(1771) 	 goto End;//数据位来得太早，退出
    019A7 C0E3      RJMP	0x1A8B
(1772) 	}
(1773) 	else if((T2cn>=20)&&(T2cn<40))//数据位1本应是3个周期，在此我们认为2~4个周期都是可以的
    019A8 9020 02A9 LDS	R2,T2cn
    019AA 9030 02AA LDS	R3,T2cn+1
    019AC 01C1      MOVW	R24,R2
    019AD 3184      CPI	R24,0x14
    019AE E0E0      LDI	R30,0
    019AF 079E      CPC	R25,R30
    019B0 F070      BCS	0x19BF
    019B1 3288      CPI	R24,0x28
    019B2 E0E0      LDI	R30,0
    019B3 079E      CPC	R25,R30
    019B4 F450      BCC	0x19BF
(1774) 	{
(1775) 	 Rx[Int_count]=1;
    019B5 EC8F      LDI	R24,0xCF
    019B6 E092      LDI	R25,2
    019B7 91E0 02B0 LDS	R30,Int_count
    019B9 27FF      CLR	R31
    019BA 0FE8      ADD	R30,R24
    019BB 1FF9      ADC	R31,R25
    019BC E081      LDI	R24,1
    019BD 8380      ST	Z,R24
(1776) 	}
    019BE C028      RJMP	0x19E7
(1777) 	else if((T2cn>=40)&&(T2cn<60))//数据位0本应是5个周期，在此我们认为4~6个周期都是可以的
    019BF 9100 02A9 LDS	R16,T2cn
    019C1 9110 02AA LDS	R17,T2cn+1
    019C3 3208      CPI	R16,0x28
    019C4 E0E0      LDI	R30,0
    019C5 071E      CPC	R17,R30
    019C6 F070      BCS	0x19D5
    019C7 330C      CPI	R16,0x3C
    019C8 E0E0      LDI	R30,0
    019C9 071E      CPC	R17,R30
    019CA F450      BCC	0x19D5
(1778) 	{
(1779) 	 Rx[Int_count]=0;
    019CB EC8F      LDI	R24,0xCF
    019CC E092      LDI	R25,2
    019CD 91E0 02B0 LDS	R30,Int_count
    019CF 27FF      CLR	R31
    019D0 0FE8      ADD	R30,R24
    019D1 1FF9      ADC	R31,R25
    019D2 2422      CLR	R2
    019D3 8220      ST	Z,R2
(1780) 	}
    019D4 C012      RJMP	0x19E7
(1781) 	else if((T2cn>=60)&&(T2cn<=80))//同步位本应是7周期，在此我们认为6~8周期都是可以的
    019D5 9100 02A9 LDS	R16,T2cn
    019D7 9110 02AA LDS	R17,T2cn+1
    019D9 330C      CPI	R16,0x3C
    019DA E0E0      LDI	R30,0
    019DB 071E      CPC	R17,R30
    019DC F030      BCS	0x19E3
    019DD E580      LDI	R24,0x50
    019DE E090      LDI	R25,0
    019DF 1780      CP	R24,R16
    019E0 0791      CPC	R25,R17
    019E1 F008      BCS	0x19E3
(1782) 	{
(1783) 	 goto Start;//在接收数据位时收到了同步位，跳到数据位解码起始位处
    019E2 CF52      RJMP	0x1935
(1784) 	}
(1785) 	else 
(1786) 	{
(1787) 	 IntFlag=3;//接收数据位不完整
    019E3 E083      LDI	R24,3
    019E4 9380 02AF STS	IntFlag,R24
(1788) 	 goto End;//数据位来得太迟，退出
    019E6 C0A4      RJMP	0x1A8B
    019E7 9180 02B0 LDS	R24,Int_count
    019E9 5081      SUBI	R24,1
    019EA 9380 02B0 STS	Int_count,R24
    019EC E080      LDI	R24,0
    019ED 9020 02B0 LDS	R2,Int_count
    019EF 1582      CP	R24,R2
    019F0 F408      BCC	0x19F2
    019F1 CF70      RJMP	0x1962
(1789) 	}
(1790)   }   
(1791) 	
(1792)     R_dat=0;
    019F2 2422      CLR	R2
    019F3 2433      CLR	R3
    019F4 9230 02CC STS	R_dat+1,R3
    019F6 9220 02CB STS	R_dat,R2
(1793)     if(Rx[2])
    019F8 9020 02D1 LDS	R2,Rx+2
    019FA 2022      TST	R2
    019FB F049      BEQ	0x1A05
(1794)           R_dat|=0x01;
    019FC 9180 02CB LDS	R24,R_dat
    019FE 9190 02CC LDS	R25,R_dat+1
    01A00 6081      ORI	R24,1
    01A01 9390 02CC STS	R_dat+1,R25
    01A03 9380 02CB STS	R_dat,R24
(1795)     if(Rx[3])
    01A05 9020 02D2 LDS	R2,Rx+3
    01A07 2022      TST	R2
    01A08 F049      BEQ	0x1A12
(1796)           R_dat|=0x02;
    01A09 9180 02CB LDS	R24,R_dat
    01A0B 9190 02CC LDS	R25,R_dat+1
    01A0D 6082      ORI	R24,2
    01A0E 9390 02CC STS	R_dat+1,R25
    01A10 9380 02CB STS	R_dat,R24
(1797)     if(Rx[4])
    01A12 9020 02D3 LDS	R2,Rx+4
    01A14 2022      TST	R2
    01A15 F049      BEQ	0x1A1F
(1798)           R_dat|=0x04;
    01A16 9180 02CB LDS	R24,R_dat
    01A18 9190 02CC LDS	R25,R_dat+1
    01A1A 6084      ORI	R24,4
    01A1B 9390 02CC STS	R_dat+1,R25
    01A1D 9380 02CB STS	R_dat,R24
(1799)     if(Rx[5])
    01A1F 9020 02D4 LDS	R2,Rx+5
    01A21 2022      TST	R2
    01A22 F049      BEQ	0x1A2C
(1800)           R_dat|=0x08;
    01A23 9180 02CB LDS	R24,R_dat
    01A25 9190 02CC LDS	R25,R_dat+1
    01A27 6088      ORI	R24,0x8
    01A28 9390 02CC STS	R_dat+1,R25
    01A2A 9380 02CB STS	R_dat,R24
(1801)     if(Rx[6])
    01A2C 9020 02D5 LDS	R2,Rx+6
    01A2E 2022      TST	R2
    01A2F F049      BEQ	0x1A39
(1802)           R_dat|=0x10;
    01A30 9180 02CB LDS	R24,R_dat
    01A32 9190 02CC LDS	R25,R_dat+1
    01A34 6180      ORI	R24,0x10
    01A35 9390 02CC STS	R_dat+1,R25
    01A37 9380 02CB STS	R_dat,R24
(1803)     if(Rx[7])
    01A39 9020 02D6 LDS	R2,Rx+7
    01A3B 2022      TST	R2
    01A3C F049      BEQ	0x1A46
(1804)           R_dat|=0x20;
    01A3D 9180 02CB LDS	R24,R_dat
    01A3F 9190 02CC LDS	R25,R_dat+1
    01A41 6280      ORI	R24,0x20
    01A42 9390 02CC STS	R_dat+1,R25
    01A44 9380 02CB STS	R_dat,R24
(1805)     if(Rx[8])
    01A46 9020 02D7 LDS	R2,Rx+8
    01A48 2022      TST	R2
    01A49 F049      BEQ	0x1A53
(1806)           R_dat|=0x40;
    01A4A 9180 02CB LDS	R24,R_dat
    01A4C 9190 02CC LDS	R25,R_dat+1
    01A4E 6480      ORI	R24,0x40
    01A4F 9390 02CC STS	R_dat+1,R25
    01A51 9380 02CB STS	R_dat,R24
(1807)     if(Rx[9])
    01A53 9020 02D8 LDS	R2,Rx+9
    01A55 2022      TST	R2
    01A56 F049      BEQ	0x1A60
(1808)           R_dat|=0x80;
    01A57 9180 02CB LDS	R24,R_dat
    01A59 9190 02CC LDS	R25,R_dat+1
    01A5B 6880      ORI	R24,0x80
    01A5C 9390 02CC STS	R_dat+1,R25
    01A5E 9380 02CB STS	R_dat,R24
(1809) 	
(1810) 	Rx[0]=1;  
    01A60 E081      LDI	R24,1
    01A61 9380 02CF STS	Rx,R24
(1811) 	for(Int_count=2;Int_count<10;Int_count++)  
    01A63 E082      LDI	R24,2
    01A64 9380 02B0 STS	Int_count,R24
    01A66 C012      RJMP	0x1A79
(1812)        Rx[0]^=Rx[Int_count];  
    01A67 EC8F      LDI	R24,0xCF
    01A68 E092      LDI	R25,2
    01A69 91E0 02B0 LDS	R30,Int_count
    01A6B 27FF      CLR	R31
    01A6C 0FE8      ADD	R30,R24
    01A6D 1FF9      ADC	R31,R25
    01A6E 8020      LD	R2,Z
    01A6F 9030 02CF LDS	R3,Rx
    01A71 2432      EOR	R3,R2
    01A72 9230 02CF STS	Rx,R3
    01A74 9180 02B0 LDS	R24,Int_count
    01A76 5F8F      SUBI	R24,0xFF
    01A77 9380 02B0 STS	Int_count,R24
    01A79 9180 02B0 LDS	R24,Int_count
    01A7B 308A      CPI	R24,0xA
    01A7C F350      BCS	0x1A67
(1813) 	   
(1814) 	if(Rx[0]==Rx[1])
    01A7D 9020 02D0 LDS	R2,Rx+1
    01A7F 9030 02CF LDS	R3,Rx
    01A81 1432      CP	R3,R2
    01A82 F421      BNE	0x1A87
(1815) 	 {
(1816) 		 IntFlag=1;//接收帧正常	
    01A83 E081      LDI	R24,1
    01A84 9380 02AF STS	IntFlag,R24
(1817) 	 }
    01A86 C00F      RJMP	0x1A96
(1818) 	else           
(1819) 	 {
(1820) 		 IntFlag=2;//接收帧校验错
    01A87 E082      LDI	R24,2
    01A88 9380 02AF STS	IntFlag,R24
(1821) 	 }
(1822) 	   
(1823)    goto End1;//只要接收到正常的同步头，不管校验位是对是错，都暂时不开放INT0中断
    01A8A C00B      RJMP	0x1A96
(1824)      
(1825) End:
(1826)  EIFR|=0x08;//清INT3中断标志 
    01A8B B788      IN	R24,0x38
    01A8C 6088      ORI	R24,0x8
    01A8D BF88      OUT	0x38,R24
(1827)  EICRA|=0xc0; //INT3上升沿触发 
    01A8E 9180 006A LDS	R24,0x6A
    01A90 6C80      ORI	R24,0xC0
    01A91 9380 006A STS	0x6A,R24
(1828)  EIMSK|=0x08;//使能INT3中断 
    01A93 B789      IN	R24,0x39
    01A94 6088      ORI	R24,0x8
    01A95 BF89      OUT	0x39,R24
(1829) End1:
(1830)    TCCR2 = 0x00; //stop
    01A96 2422      CLR	R2
    01A97 BC25      OUT	0x25,R2
(1831)    SREG|=0x80;//总中断使能;  
    01A98 9478      BSET	7
    01A99 9029      LD	R2,Y+
    01A9A BE2F      OUT	0x3F,R2
    01A9B 91F9      LD	R31,Y+
    01A9C 91E9      LD	R30,Y+
    01A9D 91A9      LD	R26,Y+
    01A9E 9199      LD	R25,Y+
    01A9F 9189      LD	R24,Y+
    01AA0 9119      LD	R17,Y+
    01AA1 9109      LD	R16,Y+
    01AA2 9039      LD	R3,Y+
    01AA3 9029      LD	R2,Y+
    01AA4 9518      RETI
_SendManchester:
  L                    --> R20
    01AA5 934A      ST	-Y,R20
(1832) }
(1833) 
(1834) void SendManchester(void) //曼码发送程序,总耗时最大约120+560+8400+720=9800us，最小约120+560+5040+720=6440us
(1835) { //每位80us
(1836)  //同步：1高6低
(1837)  //1:    1高2低
(1838)  //0：   1高4低  
(1839)   unsigned char L;
(1840)   SREG&=0x7f;//关总中断 
    01AA6 B78F      IN	R24,0x3F
    01AA7 778F      ANDI	R24,0x7F
    01AA8 BF8F      OUT	0x3F,R24
(1841)   
(1842)     M1_H //先给总线放电，耗时约120us
    01AA9 9A92      SBI	0x12,2
(1843) 	
(1844)   //模拟同步头数据
(1845) 	//4位命令
(1846) 	T_dat_buf[21]=(T_com&0x08)>>3;
    01AAA 9180 02CA LDS	R24,T_com
    01AAC 7088      ANDI	R24,0x8
    01AAD 9586      LSR	R24
    01AAE 9586      LSR	R24
    01AAF 9586      LSR	R24
    01AB0 9380 02C8 STS	T_dat_buf+21,R24
(1847) 	T_dat_buf[20]=(T_com&0x04)>>2;
    01AB2 9180 02CA LDS	R24,T_com
    01AB4 7084      ANDI	R24,4
    01AB5 9586      LSR	R24
    01AB6 9586      LSR	R24
    01AB7 9380 02C7 STS	T_dat_buf+20,R24
(1848) 	T_dat_buf[19]=(T_com&0x02)>>1;
    01AB9 9180 02CA LDS	R24,T_com
    01ABB 7082      ANDI	R24,2
    01ABC 9586      LSR	R24
    01ABD 9380 02C6 STS	T_dat_buf+19,R24
(1849) 	T_dat_buf[18]=T_com&0x01;
    01ABF 9180 02CA LDS	R24,T_com
    01AC1 7081      ANDI	R24,1
    01AC2 9380 02C5 STS	T_dat_buf+18,R24
(1850) 	//16位数据
(1851) 	T_dat_buf[17]=(T_dat&0x8000)>>15;
    01AC4 E02F      LDI	R18,0xF
    01AC5 E030      LDI	R19,0
    01AC6 9100 02CD LDS	R16,T_dat
    01AC8 9110 02CE LDS	R17,T_dat+1
    01ACA 7000      ANDI	R16,0
    01ACB 7810      ANDI	R17,0x80
    01ACC 940E 1F67 CALL	lsr16
    01ACE 9300 02C4 STS	T_dat_buf+17,R16
(1852) 	T_dat_buf[16]=(T_dat&0x4000)>>14;
    01AD0 E02E      LDI	R18,0xE
    01AD1 E030      LDI	R19,0
    01AD2 9100 02CD LDS	R16,T_dat
    01AD4 9110 02CE LDS	R17,T_dat+1
    01AD6 7000      ANDI	R16,0
    01AD7 7410      ANDI	R17,0x40
    01AD8 940E 1F0F CALL	asr16
    01ADA 9300 02C3 STS	T_dat_buf+16,R16
(1853) 	T_dat_buf[15]=(T_dat&0x2000)>>13;
    01ADC E02D      LDI	R18,0xD
    01ADD E030      LDI	R19,0
    01ADE 9100 02CD LDS	R16,T_dat
    01AE0 9110 02CE LDS	R17,T_dat+1
    01AE2 7000      ANDI	R16,0
    01AE3 7210      ANDI	R17,0x20
    01AE4 940E 1F0F CALL	asr16
    01AE6 9300 02C2 STS	T_dat_buf+15,R16
(1854) 	T_dat_buf[14]=(T_dat&0x1000)>>12;
    01AE8 E02C      LDI	R18,0xC
    01AE9 E030      LDI	R19,0
    01AEA 9100 02CD LDS	R16,T_dat
    01AEC 9110 02CE LDS	R17,T_dat+1
    01AEE 7000      ANDI	R16,0
    01AEF 7110      ANDI	R17,0x10
    01AF0 940E 1F0F CALL	asr16
    01AF2 9300 02C1 STS	T_dat_buf+14,R16
(1855) 	T_dat_buf[13]=(T_dat&0x0800)>>11;
    01AF4 E02B      LDI	R18,0xB
    01AF5 E030      LDI	R19,0
    01AF6 9100 02CD LDS	R16,T_dat
    01AF8 9110 02CE LDS	R17,T_dat+1
    01AFA 7000      ANDI	R16,0
    01AFB 7018      ANDI	R17,0x8
    01AFC 940E 1F0F CALL	asr16
    01AFE 9300 02C0 STS	T_dat_buf+13,R16
(1856)     T_dat_buf[12]=(T_dat&0x0400)>>10;
    01B00 E02A      LDI	R18,0xA
    01B01 E030      LDI	R19,0
    01B02 9100 02CD LDS	R16,T_dat
    01B04 9110 02CE LDS	R17,T_dat+1
    01B06 7000      ANDI	R16,0
    01B07 7014      ANDI	R17,4
    01B08 940E 1F0F CALL	asr16
    01B0A 9300 02BF STS	T_dat_buf+12,R16
(1857)     T_dat_buf[11]=(T_dat&0x0200)>>9;
    01B0C E029      LDI	R18,0x9
    01B0D E030      LDI	R19,0
    01B0E 9100 02CD LDS	R16,T_dat
    01B10 9110 02CE LDS	R17,T_dat+1
    01B12 7000      ANDI	R16,0
    01B13 7012      ANDI	R17,2
    01B14 940E 1F0F CALL	asr16
    01B16 9300 02BE STS	T_dat_buf+11,R16
(1858) 	T_dat_buf[10]=(T_dat&0x0100)>>8;
    01B18 9180 02CD LDS	R24,T_dat
    01B1A 9190 02CE LDS	R25,T_dat+1
    01B1C 7080      ANDI	R24,0
    01B1D 7091      ANDI	R25,1
    01B1E 011C      MOVW	R2,R24
    01B1F 2C23      MOV	R2,R3
    01B20 2433      CLR	R3
    01B21 FC27      SBRC	R2,7
    01B22 9430      COM	R3
    01B23 9220 02BD STS	T_dat_buf+10,R2
(1859) 	T_dat_buf[9]=(T_dat&0x0080)>>7;
    01B25 E027      LDI	R18,7
    01B26 E030      LDI	R19,0
    01B27 9100 02CD LDS	R16,T_dat
    01B29 9110 02CE LDS	R17,T_dat+1
    01B2B 7800      ANDI	R16,0x80
    01B2C 7010      ANDI	R17,0
    01B2D 940E 1F0F CALL	asr16
    01B2F 9300 02BC STS	T_dat_buf+9,R16
(1860) 	T_dat_buf[8]=(T_dat&0x0040)>>6;
    01B31 E026      LDI	R18,6
    01B32 E030      LDI	R19,0
    01B33 9100 02CD LDS	R16,T_dat
    01B35 9110 02CE LDS	R17,T_dat+1
    01B37 7400      ANDI	R16,0x40
    01B38 7010      ANDI	R17,0
    01B39 940E 1F0F CALL	asr16
    01B3B 9300 02BB STS	T_dat_buf+8,R16
(1861) 	T_dat_buf[7]=(T_dat&0x0020)>>5;
    01B3D E025      LDI	R18,5
    01B3E E030      LDI	R19,0
    01B3F 9100 02CD LDS	R16,T_dat
    01B41 9110 02CE LDS	R17,T_dat+1
    01B43 7200      ANDI	R16,0x20
    01B44 7010      ANDI	R17,0
    01B45 940E 1F0F CALL	asr16
    01B47 9300 02BA STS	T_dat_buf+7,R16
(1862) 	T_dat_buf[6]=(T_dat&0x0010)>>4;
    01B49 9180 02CD LDS	R24,T_dat
    01B4B 9190 02CE LDS	R25,T_dat+1
    01B4D 7180      ANDI	R24,0x10
    01B4E 7090      ANDI	R25,0
    01B4F 011C      MOVW	R2,R24
    01B50 9435      ASR	R3
    01B51 9427      ROR	R2
    01B52 9435      ASR	R3
    01B53 9427      ROR	R2
    01B54 9435      ASR	R3
    01B55 9427      ROR	R2
    01B56 9435      ASR	R3
    01B57 9427      ROR	R2
    01B58 9220 02B9 STS	T_dat_buf+6,R2
(1863) 	T_dat_buf[5]=(T_dat&0x0008)>>3;
    01B5A 9180 02CD LDS	R24,T_dat
    01B5C 9190 02CE LDS	R25,T_dat+1
    01B5E 7088      ANDI	R24,0x8
    01B5F 7090      ANDI	R25,0
    01B60 011C      MOVW	R2,R24
    01B61 9435      ASR	R3
    01B62 9427      ROR	R2
    01B63 9435      ASR	R3
    01B64 9427      ROR	R2
    01B65 9435      ASR	R3
    01B66 9427      ROR	R2
    01B67 9220 02B8 STS	T_dat_buf+5,R2
(1864) 	T_dat_buf[4]=(T_dat&0x0004)>>2;
    01B69 9180 02CD LDS	R24,T_dat
    01B6B 9190 02CE LDS	R25,T_dat+1
    01B6D 7084      ANDI	R24,4
    01B6E 7090      ANDI	R25,0
    01B6F 011C      MOVW	R2,R24
    01B70 9435      ASR	R3
    01B71 9427      ROR	R2
    01B72 9435      ASR	R3
    01B73 9427      ROR	R2
    01B74 9220 02B7 STS	T_dat_buf+4,R2
(1865) 	T_dat_buf[3]=(T_dat&0x0002)>>1;
    01B76 9180 02CD LDS	R24,T_dat
    01B78 9190 02CE LDS	R25,T_dat+1
    01B7A 7082      ANDI	R24,2
    01B7B 7090      ANDI	R25,0
    01B7C 011C      MOVW	R2,R24
    01B7D 9435      ASR	R3
    01B7E 9427      ROR	R2
    01B7F 9220 02B6 STS	T_dat_buf+3,R2
(1866) 	T_dat_buf[2]=T_dat&0x0001;
    01B81 9180 02CD LDS	R24,T_dat
    01B83 9190 02CE LDS	R25,T_dat+1
    01B85 7081      ANDI	R24,1
    01B86 7090      ANDI	R25,0
    01B87 9380 02B5 STS	T_dat_buf+2,R24
(1867) 	//计算校验位，奇校验
(1868) 	T_dat_buf[1]=1;
    01B89 E081      LDI	R24,1
    01B8A 9380 02B4 STS	T_dat_buf+1,R24
(1869)   	for(L=2;L<22;L++)
    01B8C E042      LDI	R20,2
    01B8D C00D      RJMP	0x1B9B
(1870) 		{T_dat_buf[1]^=T_dat_buf[L];}
    01B8E EB83      LDI	R24,0xB3
    01B8F E092      LDI	R25,2
    01B90 2FE4      MOV	R30,R20
    01B91 27FF      CLR	R31
    01B92 0FE8      ADD	R30,R24
    01B93 1FF9      ADC	R31,R25
    01B94 8020      LD	R2,Z
    01B95 9030 02B4 LDS	R3,T_dat_buf+1
    01B97 2432      EOR	R3,R2
    01B98 9230 02B4 STS	T_dat_buf+1,R3
    01B9A 9543      INC	R20
    01B9B 3146      CPI	R20,0x16
    01B9C F388      BCS	0x1B8E
(1871)     DELAY80
    01B9D 2422      CLR	R2
    01B9E 2433      CLR	R3
    01B9F 9230 02AE STS	Tt+1,R3
    01BA1 9220 02AD STS	Tt,R2
    01BA3 C009      RJMP	0x1BAD
    01BA4 9180 02AD LDS	R24,Tt
    01BA6 9190 02AE LDS	R25,Tt+1
    01BA8 9601      ADIW	R24,1
    01BA9 9390 02AE STS	Tt+1,R25
    01BAB 9380 02AD STS	Tt,R24
    01BAD 9180 02AD LDS	R24,Tt
    01BAF 9190 02AE LDS	R25,Tt+1
    01BB1 3280      CPI	R24,0x20
    01BB2 E0E0      LDI	R30,0
    01BB3 079E      CPC	R25,R30
    01BB4 F378      BCS	0x1BA4
(1872)     M1_L
    01BB5 B382      IN	R24,0x12
    01BB6 7F8B      ANDI	R24,0xFB
    01BB7 BB82      OUT	0x12,R24
(1873) 	DELAY40
    01BB8 2422      CLR	R2
    01BB9 2433      CLR	R3
    01BBA 9230 02AE STS	Tt+1,R3
    01BBC 9220 02AD STS	Tt,R2
    01BBE C009      RJMP	0x1BC8
    01BBF 9180 02AD LDS	R24,Tt
    01BC1 9190 02AE LDS	R25,Tt+1
    01BC3 9601      ADIW	R24,1
    01BC4 9390 02AE STS	Tt+1,R25
    01BC6 9380 02AD STS	Tt,R24
    01BC8 9180 02AD LDS	R24,Tt
    01BCA 9190 02AE LDS	R25,Tt+1
    01BCC 3180      CPI	R24,0x10
    01BCD E0E0      LDI	R30,0
    01BCE 079E      CPC	R25,R30
    01BCF F378      BCS	0x1BBF
(1874)    
(1875)    
(1876) 	//同步头,560us
(1877) 	//充电开始，高80us	 
(1878) 	M2_H 	
    01BD0 9A91      SBI	0x12,1
(1879) 	DELAY80
    01BD1 2422      CLR	R2
    01BD2 2433      CLR	R3
    01BD3 9230 02AE STS	Tt+1,R3
    01BD5 9220 02AD STS	Tt,R2
    01BD7 C009      RJMP	0x1BE1
    01BD8 9180 02AD LDS	R24,Tt
    01BDA 9190 02AE LDS	R25,Tt+1
    01BDC 9601      ADIW	R24,1
    01BDD 9390 02AE STS	Tt+1,R25
    01BDF 9380 02AD STS	Tt,R24
    01BE1 9180 02AD LDS	R24,Tt
    01BE3 9190 02AE LDS	R25,Tt+1
    01BE5 3280      CPI	R24,0x20
    01BE6 E0E0      LDI	R30,0
    01BE7 079E      CPC	R25,R30
    01BE8 F378      BCS	0x1BD8
(1880) 	M2_L   //充电结束	
    01BE9 B382      IN	R24,0x12
    01BEA 7F8D      ANDI	R24,0xFD
    01BEB BB82      OUT	0x12,R24
(1881) 	//放电开始，低80*6=480us
(1882) 	DELAY40
    01BEC 2422      CLR	R2
    01BED 2433      CLR	R3
    01BEE 9230 02AE STS	Tt+1,R3
    01BF0 9220 02AD STS	Tt,R2
    01BF2 C009      RJMP	0x1BFC
    01BF3 9180 02AD LDS	R24,Tt
    01BF5 9190 02AE LDS	R25,Tt+1
    01BF7 9601      ADIW	R24,1
    01BF8 9390 02AE STS	Tt+1,R25
    01BFA 9380 02AD STS	Tt,R24
    01BFC 9180 02AD LDS	R24,Tt
    01BFE 9190 02AE LDS	R25,Tt+1
    01C00 3180      CPI	R24,0x10
    01C01 E0E0      LDI	R30,0
    01C02 079E      CPC	R25,R30
    01C03 F378      BCS	0x1BF3
(1883) 	M1_H    
    01C04 9A92      SBI	0x12,2
(1884)     DELAY80
    01C05 2422      CLR	R2
    01C06 2433      CLR	R3
    01C07 9230 02AE STS	Tt+1,R3
    01C09 9220 02AD STS	Tt,R2
    01C0B C009      RJMP	0x1C15
    01C0C 9180 02AD LDS	R24,Tt
    01C0E 9190 02AE LDS	R25,Tt+1
    01C10 9601      ADIW	R24,1
    01C11 9390 02AE STS	Tt+1,R25
    01C13 9380 02AD STS	Tt,R24
    01C15 9180 02AD LDS	R24,Tt
    01C17 9190 02AE LDS	R25,Tt+1
    01C19 3280      CPI	R24,0x20
    01C1A E0E0      LDI	R30,0
    01C1B 079E      CPC	R25,R30
    01C1C F378      BCS	0x1C0C
(1885) 	DELAY80
    01C1D 2422      CLR	R2
    01C1E 2433      CLR	R3
    01C1F 9230 02AE STS	Tt+1,R3
    01C21 9220 02AD STS	Tt,R2
    01C23 C009      RJMP	0x1C2D
    01C24 9180 02AD LDS	R24,Tt
    01C26 9190 02AE LDS	R25,Tt+1
    01C28 9601      ADIW	R24,1
    01C29 9390 02AE STS	Tt+1,R25
    01C2B 9380 02AD STS	Tt,R24
    01C2D 9180 02AD LDS	R24,Tt
    01C2F 9190 02AE LDS	R25,Tt+1
    01C31 3280      CPI	R24,0x20
    01C32 E0E0      LDI	R30,0
    01C33 079E      CPC	R25,R30
    01C34 F378      BCS	0x1C24
(1886) 	DELAY80
    01C35 2422      CLR	R2
    01C36 2433      CLR	R3
    01C37 9230 02AE STS	Tt+1,R3
    01C39 9220 02AD STS	Tt,R2
    01C3B C009      RJMP	0x1C45
    01C3C 9180 02AD LDS	R24,Tt
    01C3E 9190 02AE LDS	R25,Tt+1
    01C40 9601      ADIW	R24,1
    01C41 9390 02AE STS	Tt+1,R25
    01C43 9380 02AD STS	Tt,R24
    01C45 9180 02AD LDS	R24,Tt
    01C47 9190 02AE LDS	R25,Tt+1
    01C49 3280      CPI	R24,0x20
    01C4A E0E0      LDI	R30,0
    01C4B 079E      CPC	R25,R30
    01C4C F378      BCS	0x1C3C
(1887) 	DELAY80
    01C4D 2422      CLR	R2
    01C4E 2433      CLR	R3
    01C4F 9230 02AE STS	Tt+1,R3
    01C51 9220 02AD STS	Tt,R2
    01C53 C009      RJMP	0x1C5D
    01C54 9180 02AD LDS	R24,Tt
    01C56 9190 02AE LDS	R25,Tt+1
    01C58 9601      ADIW	R24,1
    01C59 9390 02AE STS	Tt+1,R25
    01C5B 9380 02AD STS	Tt,R24
    01C5D 9180 02AD LDS	R24,Tt
    01C5F 9190 02AE LDS	R25,Tt+1
    01C61 3280      CPI	R24,0x20
    01C62 E0E0      LDI	R30,0
    01C63 079E      CPC	R25,R30
    01C64 F378      BCS	0x1C54
(1888) 	DELAY80
    01C65 2422      CLR	R2
    01C66 2433      CLR	R3
    01C67 9230 02AE STS	Tt+1,R3
    01C69 9220 02AD STS	Tt,R2
    01C6B C009      RJMP	0x1C75
    01C6C 9180 02AD LDS	R24,Tt
    01C6E 9190 02AE LDS	R25,Tt+1
    01C70 9601      ADIW	R24,1
    01C71 9390 02AE STS	Tt+1,R25
    01C73 9380 02AD STS	Tt,R24
    01C75 9180 02AD LDS	R24,Tt
    01C77 9190 02AE LDS	R25,Tt+1
    01C79 3280      CPI	R24,0x20
    01C7A E0E0      LDI	R30,0
    01C7B 079E      CPC	R25,R30
    01C7C F378      BCS	0x1C6C
(1889) 	M1_L    
    01C7D B382      IN	R24,0x12
    01C7E 7F8B      ANDI	R24,0xFB
    01C7F BB82      OUT	0x12,R24
(1890) 	DELAY40  //放电结束
    01C80 2422      CLR	R2
    01C81 2433      CLR	R3
    01C82 9230 02AE STS	Tt+1,R3
    01C84 9220 02AD STS	Tt,R2
    01C86 C009      RJMP	0x1C90
    01C87 9180 02AD LDS	R24,Tt
    01C89 9190 02AE LDS	R25,Tt+1
    01C8B 9601      ADIW	R24,1
    01C8C 9390 02AE STS	Tt+1,R25
    01C8E 9380 02AD STS	Tt,R24
    01C90 9180 02AD LDS	R24,Tt
    01C92 9190 02AE LDS	R25,Tt+1
    01C94 3180      CPI	R24,0x10
    01C95 E0E0      LDI	R30,0
    01C96 079E      CPC	R25,R30
    01C97 F378      BCS	0x1C87
(1891) 	
(1892)      //连续发送 ,全0时每位400us，共8400us，全1时每位240us，共5040us
(1893)  	for(L=21;L>0;L--)
    01C98 E145      LDI	R20,0x15
    01C99 C10C      RJMP	0x1DA6
(1894) 	{   
(1895) 	  if(T_dat_buf[L])//1，一高二低
    01C9A EB83      LDI	R24,0xB3
    01C9B E092      LDI	R25,2
    01C9C 2FE4      MOV	R30,R20
    01C9D 27FF      CLR	R31
    01C9E 0FE8      ADD	R30,R24
    01C9F 1FF9      ADC	R31,R25
    01CA0 8020      LD	R2,Z
    01CA1 2022      TST	R2
    01CA2 F409      BNE	0x1CA4
    01CA3 C069      RJMP	0x1D0D
(1896)         {         	 		
(1897) 	        M2_H 
    01CA4 9A91      SBI	0x12,1
(1898) 	        DELAY80
    01CA5 2422      CLR	R2
    01CA6 2433      CLR	R3
    01CA7 9230 02AE STS	Tt+1,R3
    01CA9 9220 02AD STS	Tt,R2
    01CAB C009      RJMP	0x1CB5
    01CAC 9180 02AD LDS	R24,Tt
    01CAE 9190 02AE LDS	R25,Tt+1
    01CB0 9601      ADIW	R24,1
    01CB1 9390 02AE STS	Tt+1,R25
    01CB3 9380 02AD STS	Tt,R24
    01CB5 9180 02AD LDS	R24,Tt
    01CB7 9190 02AE LDS	R25,Tt+1
    01CB9 3280      CPI	R24,0x20
    01CBA E0E0      LDI	R30,0
    01CBB 079E      CPC	R25,R30
    01CBC F378      BCS	0x1CAC
(1899) 	        M2_L
    01CBD B382      IN	R24,0x12
    01CBE 7F8D      ANDI	R24,0xFD
    01CBF BB82      OUT	0x12,R24
(1900) 			DELAY40
    01CC0 2422      CLR	R2
    01CC1 2433      CLR	R3
    01CC2 9230 02AE STS	Tt+1,R3
    01CC4 9220 02AD STS	Tt,R2
    01CC6 C009      RJMP	0x1CD0
    01CC7 9180 02AD LDS	R24,Tt
    01CC9 9190 02AE LDS	R25,Tt+1
    01CCB 9601      ADIW	R24,1
    01CCC 9390 02AE STS	Tt+1,R25
    01CCE 9380 02AD STS	Tt,R24
    01CD0 9180 02AD LDS	R24,Tt
    01CD2 9190 02AE LDS	R25,Tt+1
    01CD4 3180      CPI	R24,0x10
    01CD5 E0E0      LDI	R30,0
    01CD6 079E      CPC	R25,R30
    01CD7 F378      BCS	0x1CC7
(1901) 	        M1_H       
    01CD8 9A92      SBI	0x12,2
(1902)          	DELAY80
    01CD9 2422      CLR	R2
    01CDA 2433      CLR	R3
    01CDB 9230 02AE STS	Tt+1,R3
    01CDD 9220 02AD STS	Tt,R2
    01CDF C009      RJMP	0x1CE9
    01CE0 9180 02AD LDS	R24,Tt
    01CE2 9190 02AE LDS	R25,Tt+1
    01CE4 9601      ADIW	R24,1
    01CE5 9390 02AE STS	Tt+1,R25
    01CE7 9380 02AD STS	Tt,R24
    01CE9 9180 02AD LDS	R24,Tt
    01CEB 9190 02AE LDS	R25,Tt+1
    01CED 3280      CPI	R24,0x20
    01CEE E0E0      LDI	R30,0
    01CEF 079E      CPC	R25,R30
    01CF0 F378      BCS	0x1CE0
(1903) 			M1_L
    01CF1 B382      IN	R24,0x12
    01CF2 7F8B      ANDI	R24,0xFB
    01CF3 BB82      OUT	0x12,R24
(1904) 			DELAY40
    01CF4 2422      CLR	R2
    01CF5 2433      CLR	R3
    01CF6 9230 02AE STS	Tt+1,R3
    01CF8 9220 02AD STS	Tt,R2
    01CFA C009      RJMP	0x1D04
    01CFB 9180 02AD LDS	R24,Tt
    01CFD 9190 02AE LDS	R25,Tt+1
    01CFF 9601      ADIW	R24,1
    01D00 9390 02AE STS	Tt+1,R25
    01D02 9380 02AD STS	Tt,R24
    01D04 9180 02AD LDS	R24,Tt
    01D06 9190 02AE LDS	R25,Tt+1
    01D08 3180      CPI	R24,0x10
    01D09 E0E0      LDI	R30,0
    01D0A 079E      CPC	R25,R30
    01D0B F378      BCS	0x1CFB
(1905) 		} 
    01D0C C098      RJMP	0x1DA5
(1906)        else 		//0，一高四低 				                
(1907)         {
(1908) 		 	M2_H 
    01D0D 9A91      SBI	0x12,1
(1909) 	        DELAY80
    01D0E 2422      CLR	R2
    01D0F 2433      CLR	R3
    01D10 9230 02AE STS	Tt+1,R3
    01D12 9220 02AD STS	Tt,R2
    01D14 C009      RJMP	0x1D1E
    01D15 9180 02AD LDS	R24,Tt
    01D17 9190 02AE LDS	R25,Tt+1
    01D19 9601      ADIW	R24,1
    01D1A 9390 02AE STS	Tt+1,R25
    01D1C 9380 02AD STS	Tt,R24
    01D1E 9180 02AD LDS	R24,Tt
    01D20 9190 02AE LDS	R25,Tt+1
    01D22 3280      CPI	R24,0x20
    01D23 E0E0      LDI	R30,0
    01D24 079E      CPC	R25,R30
    01D25 F378      BCS	0x1D15
(1910) 	        M2_L
    01D26 B382      IN	R24,0x12
    01D27 7F8D      ANDI	R24,0xFD
    01D28 BB82      OUT	0x12,R24
(1911) 			DELAY40
    01D29 2422      CLR	R2
    01D2A 2433      CLR	R3
    01D2B 9230 02AE STS	Tt+1,R3
    01D2D 9220 02AD STS	Tt,R2
    01D2F C009      RJMP	0x1D39
    01D30 9180 02AD LDS	R24,Tt
    01D32 9190 02AE LDS	R25,Tt+1
    01D34 9601      ADIW	R24,1
    01D35 9390 02AE STS	Tt+1,R25
    01D37 9380 02AD STS	Tt,R24
    01D39 9180 02AD LDS	R24,Tt
    01D3B 9190 02AE LDS	R25,Tt+1
    01D3D 3180      CPI	R24,0x10
    01D3E E0E0      LDI	R30,0
    01D3F 079E      CPC	R25,R30
    01D40 F378      BCS	0x1D30
(1912) 	        M1_H       
    01D41 9A92      SBI	0x12,2
(1913)          	DELAY80
    01D42 2422      CLR	R2
    01D43 2433      CLR	R3
    01D44 9230 02AE STS	Tt+1,R3
    01D46 9220 02AD STS	Tt,R2
    01D48 C009      RJMP	0x1D52
    01D49 9180 02AD LDS	R24,Tt
    01D4B 9190 02AE LDS	R25,Tt+1
    01D4D 9601      ADIW	R24,1
    01D4E 9390 02AE STS	Tt+1,R25
    01D50 9380 02AD STS	Tt,R24
    01D52 9180 02AD LDS	R24,Tt
    01D54 9190 02AE LDS	R25,Tt+1
    01D56 3280      CPI	R24,0x20
    01D57 E0E0      LDI	R30,0
    01D58 079E      CPC	R25,R30
    01D59 F378      BCS	0x1D49
(1914) 			DELAY80
    01D5A 2422      CLR	R2
    01D5B 2433      CLR	R3
    01D5C 9230 02AE STS	Tt+1,R3
    01D5E 9220 02AD STS	Tt,R2
    01D60 C009      RJMP	0x1D6A
    01D61 9180 02AD LDS	R24,Tt
    01D63 9190 02AE LDS	R25,Tt+1
    01D65 9601      ADIW	R24,1
    01D66 9390 02AE STS	Tt+1,R25
    01D68 9380 02AD STS	Tt,R24
    01D6A 9180 02AD LDS	R24,Tt
    01D6C 9190 02AE LDS	R25,Tt+1
    01D6E 3280      CPI	R24,0x20
    01D6F E0E0      LDI	R30,0
    01D70 079E      CPC	R25,R30
    01D71 F378      BCS	0x1D61
(1915) 			DELAY80
    01D72 2422      CLR	R2
    01D73 2433      CLR	R3
    01D74 9230 02AE STS	Tt+1,R3
    01D76 9220 02AD STS	Tt,R2
    01D78 C009      RJMP	0x1D82
    01D79 9180 02AD LDS	R24,Tt
    01D7B 9190 02AE LDS	R25,Tt+1
    01D7D 9601      ADIW	R24,1
    01D7E 9390 02AE STS	Tt+1,R25
    01D80 9380 02AD STS	Tt,R24
    01D82 9180 02AD LDS	R24,Tt
    01D84 9190 02AE LDS	R25,Tt+1
    01D86 3280      CPI	R24,0x20
    01D87 E0E0      LDI	R30,0
    01D88 079E      CPC	R25,R30
    01D89 F378      BCS	0x1D79
(1916) 			M1_L
    01D8A B382      IN	R24,0x12
    01D8B 7F8B      ANDI	R24,0xFB
    01D8C BB82      OUT	0x12,R24
(1917) 			DELAY40
    01D8D 2422      CLR	R2
    01D8E 2433      CLR	R3
    01D8F 9230 02AE STS	Tt+1,R3
    01D91 9220 02AD STS	Tt,R2
    01D93 C009      RJMP	0x1D9D
    01D94 9180 02AD LDS	R24,Tt
    01D96 9190 02AE LDS	R25,Tt+1
    01D98 9601      ADIW	R24,1
    01D99 9390 02AE STS	Tt+1,R25
    01D9B 9380 02AD STS	Tt,R24
    01D9D 9180 02AD LDS	R24,Tt
    01D9F 9190 02AE LDS	R25,Tt+1
    01DA1 3180      CPI	R24,0x10
    01DA2 E0E0      LDI	R30,0
    01DA3 079E      CPC	R25,R30
    01DA4 F378      BCS	0x1D94
    01DA5 954A      DEC	R20
    01DA6 E080      LDI	R24,0
    01DA7 1784      CP	R24,R20
    01DA8 F408      BCC	0x1DAA
    01DA9 CEF0      RJMP	0x1C9A
(1918) 		}
(1919)     }	       	   
(1920) 		   //结束位，一高八低，720us
(1921)  	 	    M2_H 
    01DAA 9A91      SBI	0x12,1
(1922) 		    DELAY80
    01DAB 2422      CLR	R2
    01DAC 2433      CLR	R3
    01DAD 9230 02AE STS	Tt+1,R3
    01DAF 9220 02AD STS	Tt,R2
    01DB1 C009      RJMP	0x1DBB
    01DB2 9180 02AD LDS	R24,Tt
    01DB4 9190 02AE LDS	R25,Tt+1
    01DB6 9601      ADIW	R24,1
    01DB7 9390 02AE STS	Tt+1,R25
    01DB9 9380 02AD STS	Tt,R24
    01DBB 9180 02AD LDS	R24,Tt
    01DBD 9190 02AE LDS	R25,Tt+1
    01DBF 3280      CPI	R24,0x20
    01DC0 E0E0      LDI	R30,0
    01DC1 079E      CPC	R25,R30
    01DC2 F378      BCS	0x1DB2
(1923) 	        M2_L
    01DC3 B382      IN	R24,0x12
    01DC4 7F8D      ANDI	R24,0xFD
    01DC5 BB82      OUT	0x12,R24
(1924) 			DELAY40
    01DC6 2422      CLR	R2
    01DC7 2433      CLR	R3
    01DC8 9230 02AE STS	Tt+1,R3
    01DCA 9220 02AD STS	Tt,R2
    01DCC C009      RJMP	0x1DD6
    01DCD 9180 02AD LDS	R24,Tt
    01DCF 9190 02AE LDS	R25,Tt+1
    01DD1 9601      ADIW	R24,1
    01DD2 9390 02AE STS	Tt+1,R25
    01DD4 9380 02AD STS	Tt,R24
    01DD6 9180 02AD LDS	R24,Tt
    01DD8 9190 02AE LDS	R25,Tt+1
    01DDA 3180      CPI	R24,0x10
    01DDB E0E0      LDI	R30,0
    01DDC 079E      CPC	R25,R30
    01DDD F378      BCS	0x1DCD
(1925) 	        M1_H       
    01DDE 9A92      SBI	0x12,2
(1926)          	DELAY80
    01DDF 2422      CLR	R2
    01DE0 2433      CLR	R3
    01DE1 9230 02AE STS	Tt+1,R3
    01DE3 9220 02AD STS	Tt,R2
    01DE5 C009      RJMP	0x1DEF
    01DE6 9180 02AD LDS	R24,Tt
    01DE8 9190 02AE LDS	R25,Tt+1
    01DEA 9601      ADIW	R24,1
    01DEB 9390 02AE STS	Tt+1,R25
    01DED 9380 02AD STS	Tt,R24
    01DEF 9180 02AD LDS	R24,Tt
    01DF1 9190 02AE LDS	R25,Tt+1
    01DF3 3280      CPI	R24,0x20
    01DF4 E0E0      LDI	R30,0
    01DF5 079E      CPC	R25,R30
    01DF6 F378      BCS	0x1DE6
(1927) 			DELAY80
    01DF7 2422      CLR	R2
    01DF8 2433      CLR	R3
    01DF9 9230 02AE STS	Tt+1,R3
    01DFB 9220 02AD STS	Tt,R2
    01DFD C009      RJMP	0x1E07
    01DFE 9180 02AD LDS	R24,Tt
    01E00 9190 02AE LDS	R25,Tt+1
    01E02 9601      ADIW	R24,1
    01E03 9390 02AE STS	Tt+1,R25
    01E05 9380 02AD STS	Tt,R24
    01E07 9180 02AD LDS	R24,Tt
    01E09 9190 02AE LDS	R25,Tt+1
    01E0B 3280      CPI	R24,0x20
    01E0C E0E0      LDI	R30,0
    01E0D 079E      CPC	R25,R30
    01E0E F378      BCS	0x1DFE
(1928) 			DELAY80
    01E0F 2422      CLR	R2
    01E10 2433      CLR	R3
    01E11 9230 02AE STS	Tt+1,R3
    01E13 9220 02AD STS	Tt,R2
    01E15 C009      RJMP	0x1E1F
    01E16 9180 02AD LDS	R24,Tt
    01E18 9190 02AE LDS	R25,Tt+1
    01E1A 9601      ADIW	R24,1
    01E1B 9390 02AE STS	Tt+1,R25
    01E1D 9380 02AD STS	Tt,R24
    01E1F 9180 02AD LDS	R24,Tt
    01E21 9190 02AE LDS	R25,Tt+1
    01E23 3280      CPI	R24,0x20
    01E24 E0E0      LDI	R30,0
    01E25 079E      CPC	R25,R30
    01E26 F378      BCS	0x1E16
(1929) 			DELAY80
    01E27 2422      CLR	R2
    01E28 2433      CLR	R3
    01E29 9230 02AE STS	Tt+1,R3
    01E2B 9220 02AD STS	Tt,R2
    01E2D C009      RJMP	0x1E37
    01E2E 9180 02AD LDS	R24,Tt
    01E30 9190 02AE LDS	R25,Tt+1
    01E32 9601      ADIW	R24,1
    01E33 9390 02AE STS	Tt+1,R25
    01E35 9380 02AD STS	Tt,R24
    01E37 9180 02AD LDS	R24,Tt
    01E39 9190 02AE LDS	R25,Tt+1
    01E3B 3280      CPI	R24,0x20
    01E3C E0E0      LDI	R30,0
    01E3D 079E      CPC	R25,R30
    01E3E F378      BCS	0x1E2E
(1930) 			DELAY80
    01E3F 2422      CLR	R2
    01E40 2433      CLR	R3
    01E41 9230 02AE STS	Tt+1,R3
    01E43 9220 02AD STS	Tt,R2
    01E45 C009      RJMP	0x1E4F
    01E46 9180 02AD LDS	R24,Tt
    01E48 9190 02AE LDS	R25,Tt+1
    01E4A 9601      ADIW	R24,1
    01E4B 9390 02AE STS	Tt+1,R25
    01E4D 9380 02AD STS	Tt,R24
    01E4F 9180 02AD LDS	R24,Tt
    01E51 9190 02AE LDS	R25,Tt+1
    01E53 3280      CPI	R24,0x20
    01E54 E0E0      LDI	R30,0
    01E55 079E      CPC	R25,R30
    01E56 F378      BCS	0x1E46
(1931) 			DELAY80
    01E57 2422      CLR	R2
    01E58 2433      CLR	R3
    01E59 9230 02AE STS	Tt+1,R3
    01E5B 9220 02AD STS	Tt,R2
    01E5D C009      RJMP	0x1E67
    01E5E 9180 02AD LDS	R24,Tt
    01E60 9190 02AE LDS	R25,Tt+1
    01E62 9601      ADIW	R24,1
    01E63 9390 02AE STS	Tt+1,R25
    01E65 9380 02AD STS	Tt,R24
    01E67 9180 02AD LDS	R24,Tt
    01E69 9190 02AE LDS	R25,Tt+1
    01E6B 3280      CPI	R24,0x20
    01E6C E0E0      LDI	R30,0
    01E6D 079E      CPC	R25,R30
    01E6E F378      BCS	0x1E5E
(1932) 			DELAY80
    01E6F 2422      CLR	R2
    01E70 2433      CLR	R3
    01E71 9230 02AE STS	Tt+1,R3
    01E73 9220 02AD STS	Tt,R2
    01E75 C009      RJMP	0x1E7F
    01E76 9180 02AD LDS	R24,Tt
    01E78 9190 02AE LDS	R25,Tt+1
    01E7A 9601      ADIW	R24,1
    01E7B 9390 02AE STS	Tt+1,R25
    01E7D 9380 02AD STS	Tt,R24
    01E7F 9180 02AD LDS	R24,Tt
    01E81 9190 02AE LDS	R25,Tt+1
    01E83 3280      CPI	R24,0x20
    01E84 E0E0      LDI	R30,0
    01E85 079E      CPC	R25,R30
    01E86 F378      BCS	0x1E76
(1933) 			M1_L
    01E87 B382      IN	R24,0x12
    01E88 7F8B      ANDI	R24,0xFB
    01E89 BB82      OUT	0x12,R24
(1934) 			DELAY40
    01E8A 2422      CLR	R2
    01E8B 2433      CLR	R3
    01E8C 9230 02AE STS	Tt+1,R3
    01E8E 9220 02AD STS	Tt,R2
    01E90 C009      RJMP	0x1E9A
    01E91 9180 02AD LDS	R24,Tt
    01E93 9190 02AE LDS	R25,Tt+1
    01E95 9601      ADIW	R24,1
    01E96 9390 02AE STS	Tt+1,R25
    01E98 9380 02AD STS	Tt,R24
    01E9A 9180 02AD LDS	R24,Tt
    01E9C 9190 02AE LDS	R25,Tt+1
    01E9E 3180      CPI	R24,0x10
    01E9F E0E0      LDI	R30,0
    01EA0 079E      CPC	R25,R30
    01EA1 F378      BCS	0x1E91
(1935) 	
(1936)  	EIFR|=0x08;//清INT3中断标志 
    01EA2 B788      IN	R24,0x38
    01EA3 6088      ORI	R24,0x8
    01EA4 BF88      OUT	0x38,R24
(1937)  	SREG|=0x80; //开总中断
    01EA5 9478      BSET	7
    01EA6 9149      LD	R20,Y+
    01EA7 9508      RET
(1938) }
(1939) 
(1940) 
(1941) 
(1942) void EEPROM_write(unsigned int Address,unsigned char Data)  	//内部EEPROM写
(1943) {//时钟频率为1MHz，典型的EEPROM字节写耗时约8.5ms
(1944)     while(EECR&0x02);                   // 等待上一次写操作结束
_EEPROM_write:
  Data                 --> R18
  Address              --> R16
    01EA8 99E1      SBIC	0x1C,1
    01EA9 CFFE      RJMP	_EEPROM_write
(1945)     EEAR=Address;
    01EAA BB1F      OUT	0x1F,R17
    01EAB BB0E      OUT	0x1E,R16
(1946)     EEDR=Data;                        	// 设置地址和数据寄存器
    01EAC BB2D      OUT	0x1D,R18
(1947)     EECR|=0x04;                         //置位EEMWE
    01EAD 9AE2      SBI	0x1C,2
(1948)     EECR|=0x02;                         //置位EEWE 以启动写操作
    01EAE 9AE1      SBI	0x1C,1
    01EAF 9508      RET
(1949) }
(1950) 
(1951) unsigned char EEPROM_read(unsigned int Address)  				//内部EEPROM读
(1952) {
(1953)     while(EECR&0x02);      				//等待上一次操作结束
_EEPROM_read:
  Address              --> R16
    01EB0 99E1      SBIC	0x1C,1
    01EB1 CFFE      RJMP	_EEPROM_read
(1954)     EEAR = Address;                     //设置地址寄存器						
    01EB2 BB1F      OUT	0x1F,R17
    01EB3 BB0E      OUT	0x1E,R16
(1955) 	EECR|=0x01;             			//设置EERE 以启动读操作
    01EB4 9AE0      SBI	0x1C,0
(1956)     return EEDR;                   		//自数据寄存器返回数据
    01EB5 B30D      IN	R16,0x1D
    01EB6 9508      RET
_crc16:
  ii                   --> R20
  ch                   --> R10
  cl                   --> R22
  savelo               --> R14
  savehi               --> Y,+0
  flag                 --> R12
  length               --> R18
  r_data               --> Y,+11
    01EB7 940E 1F0A CALL	push_arg4
    01EB9 940E 1F35 CALL	push_xgsetF0FC
    01EBB 9721      SBIW	R28,1
(1957) }    
(1958) 
(1959) void crc16(unsigned char r_data[],unsigned int length)
(1960) {
(1961)         unsigned char cl,ch;
(1962)         unsigned char savehi,savelo;
(1963)         int ii,flag;
(1964)         crc16hi=0xFF;
    01EBC EF8F      LDI	R24,0xFF
    01EBD 9380 0111 STS	crc16hi,R24
(1965)         crc16lo=0xFF;
    01EBF 9380 0110 STS	crc16lo,R24
(1966)         cl=0x1;
    01EC1 E061      LDI	R22,1
(1967)         ch=0xA0;
    01EC2 EA80      LDI	R24,0xA0
    01EC3 2EA8      MOV	R10,R24
(1968)         for (ii=0;ii<length-2;ii++)
    01EC4 2744      CLR	R20
    01EC5 2755      CLR	R21
    01EC6 C038      RJMP	0x1EFF
(1969)         {
(1970)             crc16lo=(crc16lo ^ r_data[ii]);
    01EC7 01FA      MOVW	R30,R20
    01EC8 840B      LDD	R0,Y+11
    01EC9 841C      LDD	R1,Y+12
    01ECA 0DE0      ADD	R30,R0
    01ECB 1DF1      ADC	R31,R1
    01ECC 8020      LD	R2,Z
    01ECD 9030 0110 LDS	R3,crc16lo
    01ECF 2432      EOR	R3,R2
    01ED0 9230 0110 STS	crc16lo,R3
(1971)                 for (flag=0;flag<8;flag++)
    01ED2 24CC      CLR	R12
    01ED3 24DD      CLR	R13
(1972)                 {
(1973)                        savehi=crc16hi;
    01ED4 9020 0111 LDS	R2,crc16hi
    01ED6 8228      ST	Y,R2
(1974)                         savelo=crc16lo;
    01ED7 90E0 0110 LDS	R14,crc16lo
(1975)                        crc16hi=(crc16hi>>1);
    01ED9 9426      LSR	R2
    01EDA 9220 0111 STS	crc16hi,R2
(1976)                        crc16lo=(crc16lo>>1);
    01EDC 2C2E      MOV	R2,R14
    01EDD 9426      LSR	R2
    01EDE 9220 0110 STS	crc16lo,R2
(1977)                         if ((savehi & 0x01)==0x01)
    01EE0 8188      LD	R24,Y
    01EE1 7081      ANDI	R24,1
    01EE2 3081      CPI	R24,1
    01EE3 F421      BNE	0x1EE8
(1978)                                 crc16lo=(crc16lo | 0x80);
    01EE4 2D82      MOV	R24,R2
    01EE5 6880      ORI	R24,0x80
    01EE6 9380 0110 STS	crc16lo,R24
(1979)                         if        ((savelo & 0x01)==0x01)
    01EE8 2D8E      MOV	R24,R14
    01EE9 7081      ANDI	R24,1
    01EEA 3081      CPI	R24,1
    01EEB F451      BNE	0x1EF6
(1980)                         {
(1981)                                 crc16hi = (crc16hi ^ ch);
    01EEC 9020 0111 LDS	R2,crc16hi
    01EEE 242A      EOR	R2,R10
    01EEF 9220 0111 STS	crc16hi,R2
(1982) 								crc16lo = (crc16lo ^ cl);
FILE: <library>
    01EF1 9020 0110 LDS	R2,crc16lo
    01EF3 2626      EOR	R2,R22
    01EF4 9220 0110 STS	crc16lo,R2
    01EF6 01C6      MOVW	R24,R12
    01EF7 9601      ADIW	R24,1
    01EF8 016C      MOVW	R12,R24
    01EF9 3088      CPI	R24,0x8
    01EFA E0E0      LDI	R30,0
    01EFB 079E      CPC	R25,R30
    01EFC F2BC      BLT	0x1ED4
    01EFD 5F4F      SUBI	R20,0xFF
    01EFE 4F5F      SBCI	R21,0xFF
    01EFF 01C9      MOVW	R24,R18
    01F00 9702      SBIW	R24,2
    01F01 1748      CP	R20,R24
    01F02 0759      CPC	R21,R25
    01F03 F408      BCC	0x1F05
    01F04 CFC2      RJMP	0x1EC7
    01F05 9621      ADIW	R28,1
    01F06 940E 1F2A CALL	pop_xgsetF0FC
    01F08 9624      ADIW	R28,4
    01F09 9508      RET
push_arg4:
    01F0A 933A      ST	-Y,R19
    01F0B 932A      ST	-Y,R18
push_arg2:
    01F0C 931A      ST	-Y,R17
    01F0D 930A      ST	-Y,R16
    01F0E 9508      RET
asr16:
    01F0F 2322      TST	R18
    01F10 F021      BEQ	0x1F15
    01F11 9515      ASR	R17
    01F12 9507      ROR	R16
    01F13 952A      DEC	R18
    01F14 CFFA      RJMP	asr16
    01F15 9508      RET
elpm32:
    01F16 93EA      ST	-Y,R30
    01F17 93FA      ST	-Y,R31
    01F18 920A      ST	-Y,R0
    01F19 2FE0      MOV	R30,R16
    01F1A 2FF1      MOV	R31,R17
    01F1B 95D8      ELPM
    01F1C 2D00      MOV	R16,R0
    01F1D 9631      ADIW	R30,1
    01F1E 95D8      ELPM
    01F1F 2D10      MOV	R17,R0
    01F20 9631      ADIW	R30,1
    01F21 95D8      ELPM
    01F22 2D20      MOV	R18,R0
    01F23 9631      ADIW	R30,1
    01F24 95D8      ELPM
    01F25 2D30      MOV	R19,R0
    01F26 9009      LD	R0,Y+
    01F27 91F9      LD	R31,Y+
    01F28 91E9      LD	R30,Y+
    01F29 9508      RET
pop_xgsetF0FC:
    01F2A 90A9      LD	R10,Y+
    01F2B 90B9      LD	R11,Y+
    01F2C 90C9      LD	R12,Y+
    01F2D 90D9      LD	R13,Y+
    01F2E 90E9      LD	R14,Y+
    01F2F 90F9      LD	R15,Y+
    01F30 9149      LD	R20,Y+
    01F31 9159      LD	R21,Y+
    01F32 9169      LD	R22,Y+
    01F33 9179      LD	R23,Y+
    01F34 9508      RET
push_xgsetF0FC:
    01F35 937A      ST	-Y,R23
    01F36 936A      ST	-Y,R22
push_xgset30FC:
    01F37 935A      ST	-Y,R21
    01F38 934A      ST	-Y,R20
push_xgset00FC:
    01F39 92FA      ST	-Y,R15
    01F3A 92EA      ST	-Y,R14
push_xgset003C:
    01F3B 92DA      ST	-Y,R13
    01F3C 92CA      ST	-Y,R12
    01F3D 92BA      ST	-Y,R11
    01F3E 92AA      ST	-Y,R10
    01F3F 9508      RET
push_xgsetF03C:
    01F40 937A      ST	-Y,R23
    01F41 936A      ST	-Y,R22
    01F42 935A      ST	-Y,R21
    01F43 934A      ST	-Y,R20
    01F44 92DA      ST	-Y,R13
    01F45 92CA      ST	-Y,R12
    01F46 92BA      ST	-Y,R11
    01F47 92AA      ST	-Y,R10
    01F48 9508      RET
pop_xgsetF03C:
    01F49 90A9      LD	R10,Y+
    01F4A 90B9      LD	R11,Y+
    01F4B 90C9      LD	R12,Y+
    01F4C 90D9      LD	R13,Y+
    01F4D 9149      LD	R20,Y+
    01F4E 9159      LD	R21,Y+
    01F4F 9169      LD	R22,Y+
    01F50 9179      LD	R23,Y+
    01F51 9508      RET
neg32:
    01F52 9500      COM	R16
    01F53 9510      COM	R17
    01F54 9520      COM	R18
    01F55 9530      COM	R19
    01F56 5F0F      SUBI	R16,0xFF
    01F57 4F1F      SBCI	R17,0xFF
    01F58 4F2F      SBCI	R18,0xFF
    01F59 4F3F      SBCI	R19,0xFF
    01F5A 9508      RET
lsl32:
    01F5B 920F      PUSH	R0
    01F5C 9009      LD	R0,Y+
    01F5D 2000      TST	R0
    01F5E F031      BEQ	0x1F65
    01F5F 0F00      LSL	R16
    01F60 1F11      ROL	R17
    01F61 1F22      ROL	R18
    01F62 1F33      ROL	R19
    01F63 940A      DEC	R0
    01F64 CFF8      RJMP	0x1F5D
    01F65 900F      POP	R0
    01F66 9508      RET
lsr16:
    01F67 2322      TST	R18
    01F68 F021      BEQ	0x1F6D
    01F69 9516      LSR	R17
    01F6A 9507      ROR	R16
    01F6B 952A      DEC	R18
    01F6C CFFA      RJMP	lsr16
    01F6D 9508      RET
lsr32:
    01F6E 920F      PUSH	R0
    01F6F 9009      LD	R0,Y+
    01F70 2000      TST	R0
    01F71 F031      BEQ	0x1F78
    01F72 9536      LSR	R19
    01F73 9527      ROR	R18
    01F74 9517      ROR	R17
    01F75 9507      ROR	R16
    01F76 940A      DEC	R0
    01F77 CFF8      RJMP	0x1F70
    01F78 900F      POP	R0
    01F79 9508      RET
fpint:
    01F7A 924A      ST	-Y,R4
    01F7B 925A      ST	-Y,R5
    01F7C 926A      ST	-Y,R6
    01F7D 938A      ST	-Y,R24
    01F7E 940E 1FE0 CALL	unpacku
    01F80 F111      BEQ	0x1FA3
    01F81 2055      TST	R5
    01F82 F0E2      BMI	0x1F9F
    01F83 E18F      LDI	R24,0x1F
    01F84 1648      CP	R4,R24
    01F85 F4C0      BCC	0x1F9E
    01F86 E187      LDI	R24,0x17
    01F87 1648      CP	R4,R24
    01F88 F0D1      BEQ	0x1FA3
    01F89 F458      BCC	0x1F95
    01F8A 9441      NEG	R4
    01F8B EE89      LDI	R24,0xE9
    01F8C 1A48      SUB	R4,R24
    01F8D C005      RJMP	0x1F93
    01F8E 9535      ASR	R19
    01F8F 9527      ROR	R18
    01F90 9517      ROR	R17
    01F91 9507      ROR	R16
    01F92 944A      DEC	R4
    01F93 F7D1      BNE	0x1F8E
    01F94 C00E      RJMP	0x1FA3
    01F95 E187      LDI	R24,0x17
    01F96 1A48      SUB	R4,R24
    01F97 0F00      LSL	R16
    01F98 1F11      ROL	R17
    01F99 1F22      ROL	R18
    01F9A 1F33      ROL	R19
    01F9B 944A      DEC	R4
    01F9C F7D1      BNE	0x1F97
    01F9D C005      RJMP	0x1FA3
    01F9E E73F      LDI	R19,0x7F
    01F9F 2F23      MOV	R18,R19
    01FA0 2F13      MOV	R17,R19
    01FA1 2F03      MOV	R16,R19
    01FA2 C004      RJMP	0x1FA7
    01FA3 2066      TST	R6
    01FA4 F011      BEQ	0x1FA7
    01FA5 940E 1F52 CALL	neg32
    01FA7 9189      LD	R24,Y+
    01FA8 9069      LD	R6,Y+
    01FA9 9059      LD	R5,Y+
    01FAA 9049      LD	R4,Y+
    01FAB 9508      RET
uint2fp:
    01FAC 9468      BSET	6
    01FAD C001      RJMP	0x1FAF
int2fp:
    01FAE 94E8      BCLR	6
    01FAF 2722      CLR	R18
    01FB0 2733      CLR	R19
    01FB1 F046      BRTS	0x1FBA
    01FB2 FD17      SBRC	R17,7
    01FB3 9520      COM	R18
    01FB4 FD17      SBRC	R17,7
    01FB5 9530      COM	R19
    01FB6 C003      RJMP	0x1FBA
ulong2fp:
    01FB7 9468      BSET	6
    01FB8 C001      RJMP	0x1FBA
long2fp:
    01FB9 94E8      BCLR	6
    01FBA 924A      ST	-Y,R4
    01FBB 925A      ST	-Y,R5
    01FBC 926A      ST	-Y,R6
    01FBD 938A      ST	-Y,R24
    01FBE E187      LDI	R24,0x17
    01FBF 2E48      MOV	R4,R24
    01FC0 2455      CLR	R5
    01FC1 2466      CLR	R6
    01FC2 F036      BRTS	0x1FC9
    01FC3 2333      TST	R19
    01FC4 F422      BPL	0x1FC9
    01FC5 940E 1F52 CALL	neg32
    01FC7 E880      LDI	R24,0x80
    01FC8 2E68      MOV	R6,R24
    01FC9 940E 1FF9 CALL	normalize_and_pack
    01FCB 9189      LD	R24,Y+
    01FCC 9069      LD	R6,Y+
    01FCD 9059      LD	R5,Y+
    01FCE 9049      LD	R4,Y+
    01FCF 9508      RET
unpacks:
    01FD0 D00F      RCALL	unpacku
    01FD1 F029      BEQ	0x1FD7
    01FD2 2066      TST	R6
    01FD3 F011      BEQ	0x1FD6
    01FD4 940E 1F52 CALL	neg32
    01FD6 9498      BCLR	1
    01FD7 9508      RET
tstR16_R19:
    01FD8 2300      TST	R16
    01FD9 F429      BNE	0x1FDF
    01FDA 2311      TST	R17
    01FDB F419      BNE	0x1FDF
    01FDC 2322      TST	R18
    01FDD F409      BNE	0x1FDF
    01FDE 2333      TST	R19
    01FDF 9508      RET
unpacku:
    01FE0 DFF7      RCALL	tstR16_R19
    01FE1 F099      BEQ	0x1FF5
    01FE2 938A      ST	-Y,R24
    01FE3 2E63      MOV	R6,R19
    01FE4 E880      LDI	R24,0x80
    01FE5 2268      AND	R6,R24
    01FE6 0F22      LSL	R18
    01FE7 1F33      ROL	R19
    01FE8 2E43      MOV	R4,R19
    01FE9 E78F      LDI	R24,0x7F
    01FEA 1A48      SUB	R4,R24
    01FEB 2455      CLR	R5
    01FEC 2788      CLR	R24
    01FED 0A58      SBC	R5,R24
    01FEE 9526      LSR	R18
    01FEF E830      LDI	R19,0x80
    01FF0 2B23      OR	R18,R19
    01FF1 2733      CLR	R19
    01FF2 9189      LD	R24,Y+
    01FF3 9498      BCLR	1
    01FF4 9508      RET
    01FF5 2444      CLR	R4
    01FF6 2455      CLR	R5
    01FF7 2466      CLR	R6
    01FF8 9508      RET
normalize_and_pack:
    01FF9 DFDE      RCALL	tstR16_R19
    01FFA F409      BNE	0x1FFC
    01FFB 9508      RET
    01FFC 93AA      ST	-Y,R26
    01FFD 93BA      ST	-Y,R27
    01FFE 01D2      MOVW	R26,R4
    01FFF 939A      ST	-Y,R25
    02000 938A      ST	-Y,R24
    02001 E78E      LDI	R24,0x7E
    02002 E090      LDI	R25,0
    02003 2333      TST	R19
    02004 F049      BEQ	0x200E
    02005 9536      LSR	R19
    02006 9527      ROR	R18
    02007 9517      ROR	R17
    02008 9507      ROR	R16
    02009 17A8      CP	R26,R24
    0200A 07B9      CPC	R27,R25
    0200B F4CC      BGE	0x2025
    0200C 9611      ADIW	R26,1
    0200D CFF5      RJMP	0x2003
    0200E 9580      COM	R24
    0200F 9590      COM	R25
    02010 9601      ADIW	R24,1
    02011 2322      TST	R18
    02012 F0BA      BMI	0x202A
    02013 0F00      LSL	R16
    02014 1F11      ROL	R17
    02015 1F22      ROL	R18
    02016 17A8      CP	R26,R24
    02017 07B9      CPC	R27,R25
    02018 F014      BLT	0x201B
    02019 9711      SBIW	R26,1
    0201A CFF6      RJMP	0x2011
    0201B 2700      CLR	R16
    0201C 2711      CLR	R17
    0201D 2722      CLR	R18
    0201E 2733      CLR	R19
    0201F 9189      LD	R24,Y+
    02020 9199      LD	R25,Y+
    02021 012D      MOVW	R4,R26
    02022 91B9      LD	R27,Y+
    02023 91A9      LD	R26,Y+
    02024 9508      RET
    02025 2733      CLR	R19
    02026 EF0F      LDI	R16,0xFF
    02027 2F10      MOV	R17,R16
    02028 E72F      LDI	R18,0x7F
    02029 2F32      MOV	R19,R18
    0202A 9189      LD	R24,Y+
    0202B 9199      LD	R25,Y+
    0202C 012D      MOVW	R4,R26
    0202D C002      RJMP	0x2030
pack:
    0202E 93AA      ST	-Y,R26
    0202F 93BA      ST	-Y,R27
    02030 DFA7      RCALL	tstR16_R19
    02031 F049      BEQ	0x203B
    02032 01D2      MOVW	R26,R4
    02033 58A1      SUBI	R26,0x81
    02034 4FBF      SBCI	R27,0xFF
    02035 012D      MOVW	R4,R26
    02036 2D34      MOV	R19,R4
    02037 0F22      LSL	R18
    02038 9536      LSR	R19
    02039 9527      ROR	R18
    0203A 2936      OR	R19,R6
    0203B 91B9      LD	R27,Y+
    0203C 91A9      LD	R26,Y+
    0203D 9508      RET
saveFPRegs:
    0203E 924A      ST	-Y,R4
    0203F 925A      ST	-Y,R5
    02040 926A      ST	-Y,R6
    02041 927A      ST	-Y,R7
    02042 928A      ST	-Y,R8
    02043 929A      ST	-Y,R9
    02044 92AA      ST	-Y,R10
    02045 92BA      ST	-Y,R11
    02046 92CA      ST	-Y,R12
    02047 92DA      ST	-Y,R13
    02048 92EA      ST	-Y,R14
    02049 92FA      ST	-Y,R15
    0204A 938A      ST	-Y,R24
    0204B 939A      ST	-Y,R25
    0204C 9508      RET
restoreFPRegs:
    0204D 9199      LD	R25,Y+
    0204E 9189      LD	R24,Y+
    0204F 90F9      LD	R15,Y+
    02050 90E9      LD	R14,Y+
    02051 90D9      LD	R13,Y+
    02052 90C9      LD	R12,Y+
    02053 90B9      LD	R11,Y+
    02054 90A9      LD	R10,Y+
    02055 9099      LD	R9,Y+
    02056 9089      LD	R8,Y+
    02057 9079      LD	R7,Y+
    02058 9069      LD	R6,Y+
    02059 9059      LD	R5,Y+
    0205A 9049      LD	R4,Y+
    0205B 9508      RET
fpmule:
    0205C 940E 203E CALL	saveFPRegs
    0205E 93AA      ST	-Y,R26
    0205F 93BA      ST	-Y,R27
    02060 940E 1FE0 CALL	unpacku
    02062 F1E1      BEQ	0x209F
    02063 2CE6      MOV	R14,R6
    02064 2CD5      MOV	R13,R5
    02065 2CC4      MOV	R12,R4
    02066 2EB3      MOV	R11,R19
    02067 2EA2      MOV	R10,R18
    02068 2E91      MOV	R9,R17
    02069 2E80      MOV	R8,R16
    0206A 8100      LD	R16,Z
    0206B 8111      LDD	R17,Z+1
    0206C 8122      LDD	R18,Z+2
    0206D 8133      LDD	R19,Z+3
    0206E 940E 1FE0 CALL	unpacku
    02070 F171      BEQ	0x209F
    02071 246E      EOR	R6,R14
    02072 0C4C      ADD	R4,R12
    02073 1C5D      ADC	R5,R13
    02074 E880      LDI	R24,0x80
    02075 1648      CP	R4,R24
    02076 0653      CPC	R5,R19
    02077 F564      BGE	0x20A4
    02078 E881      LDI	R24,0x81
    02079 1648      CP	R4,R24
    0207A EF8F      LDI	R24,0xFF
    0207B 0658      CPC	R5,R24
    0207C F16C      BLT	0x20AA
    0207D 9EA2      MUL	R10,R18
    0207E 2DB1      MOV	R27,R1
    0207F 2DA0      MOV	R26,R0
    02080 9E91      MUL	R9,R17
    02081 2D91      MOV	R25,R1
    02082 2D80      MOV	R24,R0
    02083 9EA0      MUL	R10,R16
    02084 0D80      ADD	R24,R0
    02085 1D91      ADC	R25,R1
    02086 1FA3      ADC	R26,R19
    02087 1FB3      ADC	R27,R19
    02088 9E82      MUL	R8,R18
    02089 0D80      ADD	R24,R0
    0208A 1D91      ADC	R25,R1
    0208B 1FA3      ADC	R26,R19
    0208C 1FB3      ADC	R27,R19
    0208D 9E92      MUL	R9,R18
    0208E 0D90      ADD	R25,R0
    0208F 1DA1      ADC	R26,R1
    02090 1FB3      ADC	R27,R19
    02091 9EA1      MUL	R10,R17
    02092 0D90      ADD	R25,R0
    02093 1DA1      ADC	R26,R1
    02094 1FB3      ADC	R27,R19
    02095 2F2B      MOV	R18,R27
    02096 2F1A      MOV	R17,R26
    02097 2F09      MOV	R16,R25
    02098 0F88      LSL	R24
    02099 1F00      ROL	R16
    0209A 1F11      ROL	R17
    0209B 1F22      ROL	R18
    0209C 1F33      ROL	R19
    0209D 940E 1FF9 CALL	normalize_and_pack
    0209F 91B9      LD	R27,Y+
    020A0 91A9      LD	R26,Y+
    020A1 940E 204D CALL	restoreFPRegs
    020A3 9508      RET
    020A4 EF0F      LDI	R16,0xFF
    020A5 2F10      MOV	R17,R16
    020A6 E72F      LDI	R18,0x7F
    020A7 E78F      LDI	R24,0x7F
    020A8 2E48      MOV	R4,R24
    020A9 CFF5      RJMP	0x209F
    020AA 2700      CLR	R16
    020AB 2F10      MOV	R17,R16
    020AC 2F20      MOV	R18,R16
    020AD 2F30      MOV	R19,R16
    020AE CFF0      RJMP	0x209F
fpmule1:
    020AF 93FA      ST	-Y,R31
    020B0 93EA      ST	-Y,R30
    020B1 81EA      LDD	R30,Y+2
    020B2 81FB      LDD	R31,Y+3
    020B3 940E 205C CALL	fpmule
    020B5 91E9      LD	R30,Y+
    020B6 91F9      LD	R31,Y+
    020B7 9622      ADIW	R28,2
    020B8 9508      RET

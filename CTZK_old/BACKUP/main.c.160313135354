 /**************************************************
CTZK
**************************************************/
#include <iom128v.h>								   	
#include <macros.h>
#include <stdio.h>

#define  BB     0x10        //固件版本号

#define M1_L    PORTD&=0xfb;
#define M1_H    PORTD|=0x04;
#define M2_L    PORTD&=0xfd;
#define M2_H    PORTD|=0x02;

#define DIR1_PIN    (PINA&0x04)
#define BREAKE1_PIN (PINA&0x02)
#define PWM1_PIN    (PINA&0x01)

#define DIR2_PIN    (PINF&0x04)
#define BREAKE2_PIN (PINF&0x02)
#define PWM2_PIN    (PINF&0x01)

#define DIR1_H      {DDRA|=0x04;PORTA|=0x04;}
#define BREAKE1_H   {DDRA|=0x02;PORTA|=0x02;}
#define PWM1_H      {DDRA|=0x01;PORTA|=0x01;}

#define DIR2_H      {DDRF|=0x04;PORTF|=0x04;}
#define BREAKE2_H   {DDRF|=0x02;PORTF|=0x02;}
#define PWM2_H      {DDRF|=0x01;PORTF|=0x01;}

#define DIR1_L      {DDRA|=0x04;PORTA&=0xfb;}
#define BREAKE1_L   {DDRA|=0x02;PORTA&=0xFD;}
#define PWM1_L      {DDRA|=0x01;PORTA&=0xFE;}

#define DIR2_L      {DDRF|=0x04;PORTF&=0xfb;}
#define BREAKE2_L   {DDRF|=0x02;PORTF&=0xFD;}
#define PWM2_L      {DDRF|=0x01;PORTF&=0xFE;}

#define VM_H        {DDRB|=0x80;PORTB|=0x80;}

//同时关二个电机，把方向位置低，关INT0，清INT0中断标志
#define MOTORSTOP   {DDRA|=0x02;PORTA&=0xFD;PORTA&=0xFE;PORTA&=0xfb;DDRF|=0x02;PORTF&=0xFD;PORTF&=0xFE;PORTF&=0xfb;EIMSK&=0xfe;EIFR|=0x01;DDRB|=0x80;PORTB&=0x7f;}


#define DELAY40 for(Tt=0;Tt<16;Tt++); 
#define DELAY50 for(Tt=0;Tt<21;Tt++); 
#define DELAY89 for(Tt=0;Tt<36;Tt++); 
#define DELAY100 for(Tt=0;Tt<42;Tt++); 
#define DELAY170 for(Tt=0;Tt<72;Tt++);
#define DELAY268 for(Tt=0;Tt<113;Tt++);
#define DELAY397 for(Tt=0;Tt<165;Tt++);
#define DELAY400 for(Tt=0;Tt<168;Tt++);

union MotorStatus
{
 unsigned int i;
 struct 
 { 
   unsigned int ThisRun:2;//正在运行或停止(0：停止，1：正向运行，2：反向运行,3：二支电机同时运行)
   unsigned int UnderVoltage:1;//欠压停
   unsigned int OverCurrent:1;//过流停
   unsigned int CommandStop:1;//按命令停
   unsigned int InPhase:1;//电机启动返回：本电机正在同相运行,电机状态返回：DIR_PIN
   unsigned int OutofPhase:1;//电机启动返回：本电机正在反向运行,电机状态返回：BREAKE_PIN
   unsigned int OtheRun:1;//电机启动返回：另一个电机正在运行,电机状态返回：PWM_PIN
   unsigned int ThisCurrent:8;//本电机电流
 }s;
}Motor1Status,Motor2Status;//电机状态


unsigned int ADCData[129];
unsigned char ADCCn;

unsigned char T_Flag;

unsigned int Timer0Counter;//定时器0超过4ms时的计数
 
unsigned char Uart0RxData[16];//串口接收数据缓存
unsigned char Uart0RxCounter;

unsigned char Rx[18];//解码接收9位共18个半位
int  T_dat,R_dat;//曼码发送数据
unsigned char T_com;//曼码发送命令

unsigned char TimeOutFlag;//发送超时标志

unsigned char T_dat_buf[22];//曼码发送缓冲 

unsigned int DataFlag;//下发标定系数开始标志
unsigned Int_count;
unsigned IntFlag;//接收帧状态

unsigned int Tt,k;

unsigned char coeffdata[216];
 
unsigned char EEPAdd,coeff_len,coeff_count;//接收系数存放地址索引，接收系数长度，接收系数计数
unsigned int CompCounter;


void InitialIO(void);
void init_USART0(void);
void SendUart0(unsigned char c,unsigned int s);
void Pwm_startup(void);
void Start(void);
void SendManchester(void); 
void DelayMs(unsigned int t);
unsigned char SampleADC(unsigned char ch);
//void EEPROM_write(unsigned int Address,unsigned char Data);
//unsigned char EEPROM_read(unsigned int Address);



void InitialIO(void)
{//1输出，0输入
 PORTA=0x00;
 DDRA=0x07; //PA0=DIR1 PA1=BREAKE1 PA2=PWM1

 PORTB=0x00; 
 DDRB=0x80; //PB7=VM_CTRL
 
 PORTC=0x00;
 DDRC=0x00; 
 
 PORTD=0x00; 
 DDRD=0x06;//PD1=M2 PD2=M1
 
 PORTE=0x00; 
 DDRE=0x00;
 
 PORTF=0x00; 
 DDRF=0x07;//PF0=DIR2 PF1=BREAKE2 PF2=PWM2
 
 PORTG=0x00; 
 DDRG=0x00; 
}

void init_USART0(void)  //USART0 初始化
{
	UCSR0B=0X00;
	UCSR0A=0X20;
	UCSR0C=0X06;
	UBRR0L=0X0C;
	UBRR0H=0X00;
	UCSR0B=0X18;
}

#pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
void timer0_ovf_isr(void)
{
 TCNT0=0;
 TimeOutFlag=1;
 TIMSK&=0xFE;//关定时器0中断
 UCSR0B&=0x7f;//关串口接收中断
}

void SendUart0(unsigned char c,unsigned int s)   //串口发送数据
{//要求流量板在s个8ms内通过串口返回数据
unsigned char t; 	
for(t=0;t<16;t++)
  Uart0RxData[t]=0xff;
Uart0RxCounter=0; //清串口接受计数  
while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
UDR0=c;   
                   // 将数据放入缓冲器，发送数据
if(s>0)
{
 //超时设定
TimeOutFlag=0; //超时标志置0
Timer0Counter=s; //8ms定时循环次数
TCNT0=0x6;//定时8ms
TCCR0|=0x06;//256分频
TIFR|=0x01; //清定时器0中断标志
TIMSK|=0x01;//使能定时器0中断
t=UDR0;//开串口接收中断前读空缓存
UCSR0B|=0x80;//开串口接收中断
while(TimeOutFlag==0);
TIMSK&=0xFE;//关定时器0中断
UCSR0B&=0x7f;//关串口接收中断
}
}

void DelayMs(unsigned int t)//最大定时8388
{   float f;
    unsigned int n;
    TCCR1B = 0x00; //stop
	if(t>8388)
	   t=8388;
	f=t;
	f*=7.8125;
	n=f;
    TCNT1 = 65536-n;   
 	TCCR1B = 0x05; //1024分频
	TIFR|=0x04; //清定时器1中断标志
	while((TIFR&0x04)==0x00); 
	TCCR1B = 0x00; //stop
}


void Pwm_startup(void)
{	unsigned char c,b;

    if( (Motor1Status.s.ThisRun>0) && (Motor1Status.s.ThisRun>0))
	{
	     return;
	}
	else if(Motor1Status.s.ThisRun>0)
	{    
	     VM_H//开电机电源
		 DelayMs(100);
	     BREAKE1_H
	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
		 {
		  PWM1_H
		  DELAY100
		  PWM1_L
		  DELAY100
		 }
 
    	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
		 {
	       PWM1_L
		   for(b=0;b<(200-c);b++)
		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
			
	       if( (Motor1Status.s.CommandStop==0) && (Motor1Status.s.OverCurrent==0) && (Motor1Status.s.UnderVoltage==0) )//如意启动没有发生任何形式的停止
		   {PWM1_H}
		   else {BREAKE1_L}
		   
	       for(b=0;b<(c+50);b++)
		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
		 }	
	} 
	else if(Motor2Status.s.ThisRun>0)
	{
	     VM_H//开电机电源
	     DelayMs(100);
	     BREAKE2_H
	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
		 {
		  PWM2_H
		  DELAY100
		  PWM2_L
		  DELAY100
		 }
 
    	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
		 {
	       PWM2_L
		   for(b=0;b<(200-c);b++)
		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
			
	       if( (Motor1Status.s.CommandStop==0) && (Motor1Status.s.OverCurrent==0) && (Motor1Status.s.UnderVoltage==0) )//如意启动没有发生任何形式的停止
		   {PWM2_H}
		   else {BREAKE2_L}
		   
	       for(b=0;b<(c+50);b++)
		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
		 }	
	}
}

unsigned char SampleADC(unsigned char ch)
{     unsigned char i;
      unsigned long adcl;
 	  ADCCn=0;
	  ADMUX=(0xC0+(ch&0x07));//选择 单端输入通道0xC0~0xC7对应通道ADC0~ADC7
	  ADCSRA|=0x10;//清AD中断标志
	  ADCSRA|=0x08;//AD转换中断使能
	  ADCSRA|=0xE3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
	  while((ADCCn<129));//等待129次转换完成
	  adcl=0;
	  for(i=0;i<128;i++)//128次值取平均
	  {
	   adcl+=ADCData[i+1];//第一次采样值不要
	  }
	  adcl>>=9;//除以128，再除以4，相当于8位AD
	  return (adcl&0x000000ff);//取8位有效位
}

 

void Start(void)
{
 InitialIO();
 init_USART0();
 
 MOTORSTOP//关电机
 
 Motor1Status.s.ThisRun=0;
 Motor1Status.s.CommandStop=0;
 Motor1Status.s.OverCurrent=0;
 Motor1Status.s.UnderVoltage=0;
 Motor1Status.s.InPhase=0;
 Motor1Status.s.OutofPhase=0;
 Motor1Status.s.OtheRun=0;
 Motor1Status.s.ThisCurrent=0;
 
 Motor2Status.s.ThisRun=0;
 Motor2Status.s.CommandStop=0;
 Motor2Status.s.OverCurrent=0;
 Motor2Status.s.UnderVoltage=0;
 Motor2Status.s.InPhase=0;
 Motor2Status.s.OutofPhase=0;
 Motor2Status.s.OtheRun=0;
 Motor2Status.s.ThisCurrent=0;
 
 IntFlag=0;//无接收帧中断
 DataFlag=0;//无标定系数下发 
 coeff_len=0;
 coeff_count=0;//标定系数计数
 
 ACSR|=0x10;//清模拟比较器中断标志
 ACSR=0x03;//开模拟比较器    
 ACSR|=0x08;//开模拟比较器中断，任何时候都要进行欠压监测	
 ACSR|=0x10;//清模拟比较器中断标志	
	

 EIFR|=0x08;//清INT3中断标志,每位控制一个中断，可控制8个中断
 EICRA|=0xc0; //INT3上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发
 EIMSK|=0x08;//使能INT3中断 ,每位控制一个中断，可控制8个中断
 
 SREG=0x80;//总中断使能
 
 M1_H
 DelayMs(160);
 M1_L
 
}

void main(void)
{ 
  unsigned char i;
  unsigned int add,at,mk,pt;
  unsigned long l;
 
  Start();
  
  
  DelayMs(250); 
  
  //采集总线电压，判断是否进入存储状态  
  if(SampleADC(5)<112)//Cable端的电压低于30V,上电后开始发低功耗命令，每160ms发一次 
	{	 
	     i=0;
		 while(i!=0x00)
		  { 
		    SendUart0(0x00,20); //让流量板进入IDLE模式，以节省压力温度标检时的电流消耗，进而降低电路板自身发热对标检的影响	 
		    i=Uart0RxData[0];
		  }	  
        while(1)
	     {
	       SendUart0(0x00,250); //每2秒发一次
	     }
	}
	
	  
	   
while(1)//若Cable端为高电压，则进入正常的通讯状态
{ 
   if(IntFlag==2)//校验位错误，不上传任何响应，上位机按超时处理
   { 
	IntFlag=0;//无命令帧
	EIFR|=0x08;//清INT3中断标志
    EIMSK|=0x08;//使能INT3中断
	 
   }
   else if(IntFlag==1)//接收到了正常命令帧
   {
 
	if(DataFlag)//下发标定系数程序
     { 		  
	  coeffdata[coeff_count]=R_dat;
	  coeff_count++;	  
 
	  if(coeff_count==coeff_len)
	  {
		//DataFlag=0;
   	    T_com=0x0B;
	    Uart0RxData[0]=0xff;
		Uart0RxData[1]=0xff;
		Uart0RxCounter=0;
		while(!(UCSR0A&(1<<UDRE0))); // 等待发送缓冲器为空
		
		if(DataFlag==1)
   	    UDR0=0xB0; 
		else if(DataFlag==2)
		UDR0=0xB1;	
		
		UCSR0B|=0x80;//开串口接收中断 	 	 
		TCCR1B = 0x00; //stop
 		TCNT1H = 0x85; //setup
 		TCNT1L = 0xEE;		
 		TCCR1B = 0x05; //start Timer
		TIFR|=0x04; //清定时器1中断标志
        while(Uart0RxCounter<2)
		{
		 if((TIFR&0x04)==0x04) 
		   break;
		}
		TCCR1B = 0x00; //stop
		UCSR0B&=0x7f;//关串口接收中断
		
		 // 将数据放入缓冲器，发送数据 	 	
		if((Uart0RxData[0]==0x00)&&(Uart0RxData[1]==0x00))
		{	
		  for(k=0;k<coeff_len;k++)
		   {while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
		    UDR0=coeffdata[k];                      // 将数据放入缓冲器，发送数据
			for(Tt=0;Tt<1000;Tt++);
			}	
		 DataFlag=0;
		 coeff_len=0;		
		 T_dat=0x0000; 
		 SendManchester(); 
		}	
		else
		{
		 T_dat=0x55aa; 
		 for(k=0;k<5000;k++);
		 SendManchester();	
		}      
	  }	 
	}
	 
   else//若不是下发标定系数，则进入以下各个命令的子语句
	{
 
	T_com=(R_dat>>4);
    switch(R_dat&0xf0)
     { 
	  case 0x10://复位
	    Start(); //主控板初始化  
		SendUart0(0x10,5);//流量板初始化    
		T_dat=Uart0RxData[0];
		T_dat<<=8;
		T_dat|=0x00;
		SendManchester();	
	  break;
	  
	  case 0x20://读版本号
	    SendUart0(0x20,5);//流量板提取固件版本号	    
		T_dat=Uart0RxData[0];
		T_dat<<=8;
		T_dat|=BB;
		SendManchester();	
	  break;
	  
	  case 0x30://Cable电压,VIN电压
	   DelayMs(40);
	   T_dat=SampleADC(5); //Cable 
	   T_dat<<=8;
	   T_dat|=SampleADC(4); //VIN  
	   SendManchester();   
	  break;
	  
	  case 0x40: //采集板压力和温度
		SendUart0(0x40,5);//40ms定时		        
		T_dat=Uart0RxData[0];
		T_dat<<=8;
		T_dat|=Uart0RxData[1];
		SendManchester();
        DelayMs(40); //40ms定时		 
		T_dat=Uart0RxData[2];
		T_dat<<=8;
		T_dat|=Uart0RxData[3];
		SendManchester();
	break;
	
	case 0x50://流量采样	    	          	  	   	  	 
		  SendUart0(0x50,5);//40ms定时	 
		  for(k=0;k<8;k+=2)//返回二个浮点数共8字节，分四帧上传
		  {
		  T_dat=Uart0RxData[k];
		  T_dat<<=8;
		  T_dat|=Uart0RxData[k+1];
		  SendManchester();
		  DelayMs(40);
		  }
	break;
 
  case 0x60://收放电机   
    if( !(((R_dat)==0x61)  || ((R_dat)==0x62) ) )//既不是正转，也不是反转，则立即返回且不响应上位机
	 break;
	
	if( (Motor1Status.s.ThisRun>0) && (Motor2Status.s.ThisRun>0) )
	 {
	 	   Motor1Status.s.ThisRun=3;					   
	 }  
    else if(Motor2Status.s.ThisRun>0)//调节电机正在运行
	 {
	       Motor1Status.s.InPhase=0;
		   Motor1Status.s.OutofPhase=0;
		   Motor1Status.s.OtheRun=1;
	 }
    else if(Motor1Status.s.ThisRun>0)//收放电机正在运行
	 { 
	   if((Motor1Status.s.ThisRun==1) && (R_dat==0x61) )//收放电机正在张开，且是张开命令
	    { 
		   Motor1Status.s.InPhase=1;
		   Motor1Status.s.OutofPhase=0;
		   Motor1Status.s.OtheRun=0;
		}
		else if((Motor1Status.s.ThisRun==2) && (R_dat==0x62) )//收放电机正在收拢，且是收拢命令
		{
		   Motor1Status.s.InPhase=1;
		   Motor1Status.s.OutofPhase=0;
		   Motor1Status.s.OtheRun=0;
		}
		else if((Motor1Status.s.ThisRun==1) && (R_dat==0x62) )//收放电机正在张开,且是收拢命令
		{
		   Motor1Status.s.InPhase=0;
		   Motor1Status.s.OutofPhase=1;
		   Motor1Status.s.OtheRun=0;
		}
		else if((Motor1Status.s.ThisRun==2) && (R_dat==0x61) )//收放电机正在收拢,且是张开命令
		{
		   Motor1Status.s.InPhase=0;
		   Motor1Status.s.OutofPhase=1;
		   Motor1Status.s.OtheRun=0;
		}
		DelayMs(900); 
	 }
	else //二个电机都是停止状态，按命令要求启动电机
	 {  
 	    Motor1Status.s.CommandStop=0;
 	    Motor1Status.s.OverCurrent=0;
 	    Motor1Status.s.UnderVoltage=0;
 	    Motor1Status.s.InPhase=0;
 	    Motor1Status.s.OutofPhase=0;
 	    Motor1Status.s.OtheRun=0;
 	    Motor1Status.s.ThisCurrent=0;
		
	    if((R_dat)==0x61)//张开命令
		  { 
		   Motor1Status.s.ThisRun=1;//张开
		   DIR1_H       //张开
		  }
		else          //收拢命令
		 { 
		   Motor1Status.s.ThisRun=2;//反转
		   DIR1_L      //收拢
		 }
			
		CompCounter=0; //电流监测计数器清0
		EIFR|=0x01;//清INT0中断标志
		EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
		
		TCCR1B = 0x00; //stop
    	TCNT1 = 61629;   //定时500ms
		TIFR|=0x04; //清定时器1中断标志
 		TCCR1B = 0x05; //1024分频
		TIFR|=0x04; //清定时器1中断标志

		Pwm_startup();//PWM启动，耗时约200ms			
			  
		while((TIFR&0x04)==0x00); //等待500ms定时到，期间可能有欠压中断发生
		TCCR1B = 0x00; //stop
		
		EIFR|=0x01;//清INT0中断标志
		EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
			
		DelayMs(400);//延时保证总线电压稳定	
     }
	  T_dat=Motor1Status.i;
	  SendManchester();	 
	break;
	
	case 0x70://调节电机   
    if( !(((R_dat)==0x71)  || ((R_dat)==0x72) ) )//既不是调大，也不是调小，则立即返回且不响应上位机
	 break;
	
	if( (Motor2Status.s.ThisRun>0) && (Motor2Status.s.ThisRun>0) )
	 {
	 	   Motor2Status.s.ThisRun=3;					   
	 }  
    else if(Motor1Status.s.ThisRun>0)//收放电机正在运行
	 {
	       Motor2Status.s.InPhase=0;
		   Motor2Status.s.OutofPhase=0;
		   Motor2Status.s.OtheRun=1;
	 }
    else if(Motor2Status.s.ThisRun>0)//调节电机正在运行
	 { 
	   if((Motor2Status.s.ThisRun==1) && (R_dat==0x71) )//收放电机正在张开，且是张开命令
	    { 
		   Motor2Status.s.InPhase=1;
		   Motor2Status.s.OutofPhase=0;
		   Motor2Status.s.OtheRun=0;
		}
		else if((Motor2Status.s.ThisRun==2) && (R_dat==0x72) )//收放电机正在收拢，且是收拢命令
		{
		   Motor2Status.s.InPhase=1;
		   Motor2Status.s.OutofPhase=0;
		   Motor2Status.s.OtheRun=0;
		}
		else if((Motor2Status.s.ThisRun==1) && (R_dat==0x72) )//收放电机正在张开,且是收拢命令
		{
		   Motor2Status.s.InPhase=0;
		   Motor2Status.s.OutofPhase=1;
		   Motor2Status.s.OtheRun=0;
		}
		else if((Motor2Status.s.ThisRun==2) && (R_dat==0x71) )//收放电机正在收拢,且是张开命令
		{
		   Motor2Status.s.InPhase=0;
		   Motor2Status.s.OutofPhase=1;
		   Motor2Status.s.OtheRun=0;
		}
		DelayMs(900); 
	 }
	else //二个电机都是停止状态，按命令要求启动电机
	 {  
 	    Motor2Status.s.CommandStop=0;
 	    Motor2Status.s.OverCurrent=0;
 	    Motor2Status.s.UnderVoltage=0;
 	    Motor2Status.s.InPhase=0;
 	    Motor2Status.s.OutofPhase=0;
 	    Motor2Status.s.OtheRun=0;
 	    Motor2Status.s.ThisCurrent=0;
		
	    if((R_dat)==0x71)//张开命令
		  { 
		   Motor2Status.s.ThisRun=1;//张开
		   DIR2_H       //张开
		  }
		else          //收拢命令
		 { 
		   Motor2Status.s.ThisRun=2;//反转
		   DIR2_L      //收拢
		 }
			
		CompCounter=0; //电流监测计数器清0
		EIFR|=0x01;//清INT0中断标志
		EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况
		
		TCCR1B = 0x00; //stop
    	TCNT1 = 61629;   //定时500ms
		TIFR|=0x04; //清定时器1中断标志
 		TCCR1B = 0x05; //1024分频
		TIFR|=0x04; //清定时器1中断标志

		Pwm_startup();//PWM启动，耗时约200ms			
			  
		while((TIFR&0x04)==0x00); //等待500ms定时到，期间可能有欠压中断发生
		TCCR1B = 0x00; //stop
		
		EIFR|=0x01;//清INT0中断标志
		EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况
			
		DelayMs(400);//延时保证总线电压稳定	
     }
	  T_dat=Motor2Status.i;
	  SendManchester();		 
	break;
	
	 Motor1Status.s.InPhase=0;
 Motor1Status.s.OutofPhase=0;
 Motor1Status.s.OtheRun=0;
 
    case 0x80://电机状态或电机停止	 
		if(R_dat==0x81)//获取电机状态	
		{ 
         //先处理收放电机
          Motor1Status.s.ThisCurrent=(SampleADC(7)&0x00ff); 
		  Motor1Status.s.InPhase=DIR1_PIN;
		  Motor1Status.s.OutofPhase=BREAKE1_PIN;
		  Motor1Status.s.OtheRun=PWM1_PIN;  
	      DelayMs(30);//延迟30ms  	   
	      SendManchester();
		  //再处理调节电机
          Motor2Status.s.ThisCurrent=(SampleADC(6)&0x00ff);  
		  Motor2Status.s.InPhase=DIR2_PIN;
		  Motor2Status.s.OutofPhase=BREAKE2_PIN;
		  Motor2Status.s.OtheRun=PWM2_PIN;   
	      DelayMs(30);//延迟30ms  	   
	      SendManchester();
		}		  
       else if(R_dat==0x82)//电机停止，同时停止二个电机
		{
		  MOTORSTOP  //关电机
 
  		  if(Motor1Status.s.ThisRun>0)//收放电机正在运行
   		  {
		   Motor1Status.s.ThisRun=0;
 		   Motor1Status.s.CommandStop=1;
 		   Motor1Status.s.OverCurrent=0;
 		   Motor1Status.s.UnderVoltage=0;
   		   }
  		   if(Motor2Status.s.ThisRun>0)//调节电机正在运行
   		   { 
    	   Motor2Status.s.ThisRun=0;
 		   Motor2Status.s.CommandStop=1;
 		   Motor2Status.s.OverCurrent=0;
 		   Motor2Status.s.UnderVoltage=0;
   		   }
		  T_dat=0x0000;	
		  DelayMs(200);
		  SendManchester();	 
		}	  
	break;
	
	 
	case 0x90: //标定数据
	  if(R_dat==0x91)//上传标定数据,47ms/帧 	
	  {
	   //先获取总标定点数    
	    SendUart0(0x90,5);//40ms定时	         
		mk=Uart0RxData[0];
		mk<<=8;
		mk|=Uart0RxData[1];		
		T_dat=(mk);
		SendManchester();				 
		while(mk>0)//每点4字节 
		{
		 SendUart0(0x91,5);//40ms定时	        	 
		 T_dat=Uart0RxData[0];
		 T_dat<<=8;
		 T_dat|=Uart0RxData[1];
		 SendManchester();		 
		 T_dat=Uart0RxData[2];
		 T_dat<<=8;
		 T_dat|=Uart0RxData[3];
		 DelayMs(40);
		 SendManchester();		 		 
		 mk--; 
		} 
		}
	  if(R_dat==0x92)//清空标定数据  
	   { 	
	    SendUart0(0x92,255);//2s定时		 	 
		T_dat=Uart0RxData[0];//正常情况下采集板返回0x0000
		T_dat<<=8;
		T_dat|=Uart0RxData[1];
		SendManchester();	
	  }
  break;
  
	case 0xa0://标定系数
	   if(R_dat==0xa1)//下发全部标定系数，共216字节,42ms/帧，共9072ms   
	   { 
	     //EEPAdd=0;
		 DataFlag=1;
		 coeff_len=216;
		 coeff_count=0;
		 TimeOutFlag=0;
		 Timer0Counter=2500;
	     TCNT0=0x44; //15s定时
	     TCCR0|=0x06;//256分频
	     TIFR|=0x01; //清定时器0中断标志
         TIMSK|=0x01;//使能定时器0中断				    
	   }
	  else if(R_dat==0xa2)//上传标定系数,114ms/帧,共12.5s
	  {    
		// MD5_coeff();//进行标定系数的MD5校验		
		SendUart0(0xa2,1);//8ms定时 
		 
		 for(i=0;i<216;)
		 {
		 SendUart0(0xa2,13);//104ms定时 
		  
		 T_dat=Uart0RxData[0];//高字节
		 T_dat<<=8;
		 T_dat|=Uart0RxData[1];//低字节
		 i+=2;
		 SendManchester();
		 }		 
		T_dat=0x0000;	 
		DelayMs(13);
	    SendManchester();
	  }
	break;
	
	
	case 0xB0://换能器相关
	   if(R_dat==0xb1)//读幅值
	   {
		 SendUart0(0xb0,5);//40ms定时
		 for(k=0;k<8;k+=2)
		  {
		  T_dat=Uart0RxData[k];
		  T_dat<<=8;
		  T_dat|=Uart0RxData[k+1];
		  SendManchester();
		  DelayMs(40);
		  }
		}
		else  if((R_dat>0xb0) && (R_dat<0xb5) )//1800点提取,连续提取流量测试数据，4个通道分别提取，命令为0xB1-0xB4
        {   
		  SendUart0(R_dat,125);//1s定时	 
		  for(k=0;k<1800;k++)//共1800帧数据，全部提取
		  {
		  SendUart0(0xFF,1);//8ms定时	   
		  T_dat=Uart0RxData[0];
		  T_dat<<=8;
		  T_dat|=Uart0RxData[1];
		  SendManchester();
		  DelayMs(42);
		  }
		}   
	break;

    default: 
	break;	
   }
  }

	IntFlag=0;
    EIFR|=0x08;//清INT3中断标志
    EIMSK|=0x08;//使能INT3中断 
  }  
  }
}

#pragma interrupt_handler E_comp:24
void E_comp(void)  //模拟比较器中断,总线电压被拉低到28.5V后，立即停电机
{ 
  MOTORSTOP  //关电机
 
  if(Motor1Status.s.ThisRun>0)//收放电机欠压堵转
   {
	 Motor1Status.s.ThisRun=0;
	 Motor1Status.s.CommandStop=0;
 	 Motor1Status.s.OverCurrent=0;
 	 Motor1Status.s.UnderVoltage=1;
   }
  if(Motor2Status.s.ThisRun>0)//调节电机欠压堵转
   { 
    Motor2Status.s.ThisRun=0;
	Motor2Status.s.CommandStop=0;
 	Motor2Status.s.OverCurrent=0;
 	Motor2Status.s.UnderVoltage=1;
   }
 
}

#pragma interrupt_handler int0_isr:2
void int0_isr(void)//外部中断0，过流堵转
{
  CompCounter++; 
  if(CompCounter>1000)
  {
   MOTORSTOP  //关电机
  
   if(Motor1Status.s.ThisRun>0)//收放电机过流堵转
    {
	 Motor1Status.s.ThisRun=0;
	 Motor1Status.s.CommandStop=0;
 	 Motor1Status.s.OverCurrent=1;
 	 Motor1Status.s.UnderVoltage=0;
	}
   if(Motor2Status.s.ThisRun>0)//调节电机过流堵转
    {
	  Motor2Status.s.ThisRun=0;
	  Motor2Status.s.CommandStop=0;
 	  Motor2Status.s.OverCurrent=1;
 	  Motor2Status.s.UnderVoltage=0;
	}
  }
}

#pragma interrupt_handler usart0_isr:19
void usart0_isr(void) //串口接收中断
{
    Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
 	Uart0RxCounter++;
}

#pragma interrupt_handler ad_isr:22
void ad_isr(void)  //ad转换中断
{
  ADCData[ADCCn]=ADCH;
  ADCData[ADCCn]<<=8;
  ADCData[ADCCn]|=ADCL;//读AD转换结果
  ADCCn++;
  ADCData[ADCCn]&=0x03ff;//10位有效转换结果
  if(ADCCn==129)
   { 
   ADCSRA&=0xF7;//关AD中断
   ADCSRA|=0x10;//清AD中断标志
   ADCSRA=0;//关ADC
   }
}

#pragma interrupt_handler int3_isr:iv_INT3
void int3_isr(void)//外部中断3
{ 
  unsigned int r;
  EIMSK&=0xF7;//关INT3
  
  DELAY50  
  if((PIND&0x04)==0x00)//1
  goto End;
  
  DELAY100
  if((PIND&0x04)==0x04)//0
  r=r;
  
  DELAY100
  if((PIND&0x04)==0x04)//0
  goto End;
  
  DELAY100
  if((PIND&0x04)==0x00)//1
  goto End;
  
  DELAY100
  if((PIND&0x04)==0x04)//0
  //goto End;
  r=r;
  
  DELAY100
  if((PIND&0x04)==0x04)//0
  goto End;

   
  DELAY100   
  for(Int_count=9;Int_count>0;Int_count--)
  {
  if((PIND&0x04)==0x04)
    Rx[Int_count]=1;
  else
    Rx[Int_count]=0;
  DELAY397
  }   
   
    R_dat=0;
    if(Rx[2])
          R_dat|=0x01;
    if(Rx[3])
          R_dat|=0x02;
    if(Rx[4])
          R_dat|=0x04;
    if(Rx[5])
          R_dat|=0x08;
    if(Rx[6])
          R_dat|=0x10;
    if(Rx[7])
          R_dat|=0x20;
    if(Rx[8])
          R_dat|=0x40;
    if(Rx[9])
          R_dat|=0x80;
	
	Rx[0]=1;  
	for(r=2;r<10;r++)  
       Rx[0]^=Rx[r];  
	   
	if(Rx[0]==Rx[1])//接收帧正常	
		IntFlag=1;
	else           //接收帧校验错
		IntFlag=2;
		 
   goto End1;//只要接收到正常的同步头，不管校验位是对是错，都暂时不开放INT0中断
     
End:
 EIFR|=0x08;//清INT3中断标志 
 EICRA|=0xc0; //INT3上升沿触发 
 EIMSK|=0x08;//使能INT3中断 
End1:
   ;
   while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
   UDR0=0x55;  
   
}

void SendManchester(void) //曼码发送程序
{   
  unsigned int L;
  SREG=0x00;//关总中断 

  //模拟同步头数据
	//4位命令
	T_dat_buf[21]=(T_com&0x08)>>3;
	T_dat_buf[20]=(T_com&0x04)>>2;
	T_dat_buf[19]=(T_com&0x02)>>1;
	T_dat_buf[18]=T_com&0x01;
	//16位数据
	T_dat_buf[17]=(T_dat&0x8000)>>15;
	T_dat_buf[16]=(T_dat&0x4000)>>14;
	T_dat_buf[15]=(T_dat&0x2000)>>13;
	T_dat_buf[14]=(T_dat&0x1000)>>12;
	T_dat_buf[13]=(T_dat&0x0800)>>11;
    T_dat_buf[12]=(T_dat&0x0400)>>10;
    T_dat_buf[11]=(T_dat&0x0200)>>9;
	T_dat_buf[10]=(T_dat&0x0100)>>8;
	T_dat_buf[9]=(T_dat&0x0080)>>7;
	T_dat_buf[8]=(T_dat&0x0040)>>6;
	T_dat_buf[7]=(T_dat&0x0020)>>5;
	T_dat_buf[6]=(T_dat&0x0010)>>4;
	T_dat_buf[5]=(T_dat&0x0008)>>3;
	T_dat_buf[4]=(T_dat&0x0004)>>2;
	T_dat_buf[3]=(T_dat&0x0002)>>1;
	T_dat_buf[2]=T_dat&0x0001;
	
	
	//计算校验位，奇校验
	T_dat_buf[1]=1;
  	for(L=2;L<22;L++)
		{T_dat_buf[1]^=T_dat_buf[L];}

	//同步头
	M1_L
	M2_H 		 
	DELAY89//高100us
	M2_L
	DELAY40
	M1_H 
	DELAY170
	M1_L
	M2_H 
	DELAY89//高100us
	M2_L
	DELAY40
	M1_H    
    //DELAY200//低200us
	for(Tt=0;Tt<68;Tt++);

     //连续发送16位,每位400us
 	for(L=21;L>0;L--)
	{   
	  if(T_dat_buf[L])//1
        {         	 		
         	M1_L
	        M2_H 
	        DELAY89//高100us
	        M2_L
			DELAY40
	        M1_H       
         	DELAY268//低300us
		} 
       else 		//0 				                
        DELAY397//低400us	
    }
 DELAY400
 DELAY400
 DELAY400
 DELAY400
 DELAY400    
 EIFR|=0x08;//清INT3中断标志  
 SREG=0x80; //开总中断
 M1_L
}

/*
void EEPROM_write(unsigned int Address,unsigned char Data)  	//内部EEPROM写
{//时钟频率为1MHz，典型的EEPROM字节写耗时约8.5ms
    while(EECR&0x02);                   // 等待上一次写操作结束
    EEAR=Address;
    EEDR=Data;                        	// 设置地址和数据寄存器
    EECR|=0x04;                         //置位EEMWE
    EECR|=0x02;                         //置位EEWE 以启动写操作
}

unsigned char EEPROM_read(unsigned int Address)  				//内部EEPROM读
{
    while(EECR&0x02);      				//等待上一次操作结束
    EEAR = Address;                     //设置地址寄存器						
	EECR|=0x01;             			//设置EERE 以启动读操作
    return EEDR;                   		//自数据寄存器返回数据
}    
*/

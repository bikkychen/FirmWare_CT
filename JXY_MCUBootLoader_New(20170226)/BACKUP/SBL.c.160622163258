#include <iom128v.h>								   	
#include <macros.h>
#include <stdio.h>

//最后修订:20160622

#define  BB     0x00        //固件版本号

#define M1_L    PORTD&=0xfb;
#define M1_H    PORTD|=0x04;
#define M2_L    PORTD&=0xfd;
#define M2_H    PORTD|=0x02;
 
//同时关二个电机，先紧急停车，再把三个口线全置低， 最后关电机电源
#define MOTORSTOP   {DDRA|=0x07;PORTA|=0x01;PORTA&=0xFD;PORTA&=0xF8;   DDRF|=0x07;PORTF|=0x02;PORTF&=0xFB;PORTF&=0xF8;     DDRB|=0x80;PORTB&=0x7f;}


#define DELAY40 for(Tt=0;Tt<16;Tt++); 
#define DELAY50 for(Tt=0;Tt<21;Tt++); 
#define DELAY89 for(Tt=0;Tt<36;Tt++); 
#define DELAY100 for(Tt=0;Tt<42;Tt++); 
#define DELAY170 for(Tt=0;Tt<72;Tt++);
#define DELAY268 for(Tt=0;Tt<113;Tt++);
#define DELAY397 for(Tt=0;Tt<165;Tt++);
#define DELAY400 for(Tt=0;Tt<168;Tt++);
 
union MotorStatus
{
 unsigned int i;
 struct 
 { 
   unsigned int ThisRun:2;//bit0-bit1,正在运行或停止(0：停止，1：正向运行，2：反向运行)
   unsigned int UnderVoltage:1;//bit2,欠压停
   unsigned int OverCurrent:1;//bit3,过流停
   unsigned int CommandStop:1;//bit4,按命令停
   unsigned int InPhase_DIR:1;//bit5,电机启动返回：本电机正在同相运行,电机状态返回：DIR_PIN
   unsigned int OutofPhase_BREAKE:1;//bit6,电机启动返回：本电机正在反向运行,电机状态返回：BREAKE_PIN
   unsigned int OtheRun_PWM:1;//bit7,电机启动返回：另一个电机正在运行,电机状态返回：PWM_PIN
   unsigned int ThisCurrent:8;//bit8-bit15 ,本电机电流
 }s;
}Motor1Status,Motor2Status;//电机状态

unsigned char Rx[18];//解码接收9位共18个半位
unsigned int  T_dat,R_dat;//曼码发送数据
unsigned char T_com;//曼码发送命令
unsigned char T_dat_buf[22];//曼码发送缓冲 
unsigned Int_count;
unsigned IntFlag;//接收帧状态
 
unsigned int Tt;

unsigned char UpdateBegin;//接收主程序数据开始标志
unsigned int DataReCn;
unsigned char crc16hi,crc16lo,DownloadSpeed;
unsigned int Timer3Cn;
unsigned char DSP_PageCn;//DSP程序页计数

unsigned char Uart0RxCounter;
unsigned char Uart0RxData[2];
unsigned int Timer0Counter;
unsigned char TimeOutFlag;

char flash_buf[258]; //FALSH页缓冲区,M128的一个Flash页为256字节(128字) //暂只支持64K地址编程
long address = 0; 

void Start(void);

void SendManchester(void); 
 
void Delay30Ms();

//void EEPROM_write(unsigned int Address,unsigned char Data);
//unsigned char EEPROM_read(unsigned int Address) ;




//擦除(code=0x03)和写入(code=0x05)一个Flash页 
void boot_page_ew(long p_address,char code) 
{ 
    asm("mov r30,r16\n" 
        "mov r31,r17\n" 
        "out 0x3b,r18\n");            //将页地址放入Z寄存器和RAMPZ的Bit0中 
    SPMCSR = code;                //寄存器SPMCSR中为操作码 
    asm("spm\n");                    //对指定Flash页进行操作 
}         
//填充Flash缓冲页中的一个字 
void boot_page_fill(unsigned int address,int data) 
{ 
    asm("mov r30,r16\n" 
        "mov r31,r17\n"             //Z寄存器中为填冲页内地址 
        "mov r0,r18\n" 
        "mov r1,r19\n");            //R0R1中为一个指令字 
    SPMCSR = 0x01; 
    asm("spm\n"); 
} 
//等待一个Flash页的写完成 
void wait_page_rw_ok(void) 
{ 
      while(SPMCSR & 0x40) 
     { 
         while(SPMCSR & 0x01); 
         SPMCSR = 0x11; 
         asm("spm\n"); 
     } 
} 
//更新一个Flash页的完整处理 
void write_one_page(void) 
{ 
    int i; 
    boot_page_ew(address,0x03);                    //擦除一个Flash页 
    
    wait_page_rw_ok();                            //等待擦除完成 
    for(i=0;i<256;i+=2)                //将数据填入Flash缓冲页中 
    { 
        boot_page_fill(i, flash_buf[i+2]+(flash_buf[i+3]<<8)); 
    } 
    boot_page_ew(address,0x05);                    //将缓冲页数据写入一个Flash页 
   
   
    wait_page_rw_ok();                            //等待写入完成 
}        


void InitialIO(void)
{//1输出，0输入
 PORTA=0x00;
 DDRA=0x07; //PA0=BREAKE1 PA1=PWM1 PA2=DIR1

 PORTB=0x00; 
 DDRB=0x80; //PB7=VM_CTRL
 
 PORTC=0x00;
 DDRC=0x00; 
 
 PORTD=0x00; 
 DDRD=0x06;//PD1=M2 PD2=M1
 
 PORTE=0x00; 
 DDRE=0x00;
 
 PORTF=0x00; 
 DDRF=0x07;//PF0=DIR2 PF1=BREAKE2 PF2=PWM2
 
 PORTG=0x00; 
 DDRG=0x00; 
}

void init_USART0(void)  //USART0 初始化
{
	UCSR0B=0X00;
	UCSR0A=0X20;
	UCSR0C=0X06;
	UBRR0L=0X0C;
	UBRR0H=0X00;
	UCSR0B=0X18;
}

void quit(void) 
{
    MCUCR = 0x01; 
    MCUCR = 0x00;       //将中断向量表迁移到应用程序区头部 
    RAMPZ = 0x00;       //RAMPZ清零初始化 
    asm("jmp 0x0000\n");//跳转到Flash的0x0000处，执行用户的应用程序 
} 

void Start(void)
{
 InitialIO(); 
 
 init_USART0();
 
 MOTORSTOP//关电机
  
 ACSR|=0x10;//清模拟比较器中断标志
 ACSR=0x03;//开模拟比较器    
 ACSR|=0x08;//开模拟比较器中断，任何时候都要进行欠压监测	
 ACSR|=0x10;//清模拟比较器中断标志	
	

 EIFR|=0x08;//清INT3中断标志,每位控制一个中断，可控制8个中断
 EICRA|=0xc0; //INT3上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发
 EIMSK|=0x08;//使能INT3中断 ,每位控制一个中断，可控制8个中断
 
 SREG=0x80;//总中断使能
 
 M1_H
 Delay30Ms();
 Delay30Ms();
 Delay30Ms();
 Delay30Ms();
 Delay30Ms();
 Delay30Ms();
 Delay30Ms();
 M1_L
 
 Motor1Status.s.ThisRun=0;
 Motor1Status.s.CommandStop=0;
 Motor1Status.s.OverCurrent=0;
 Motor1Status.s.UnderVoltage=0;
 Motor1Status.s.InPhase_DIR=0;
 Motor1Status.s.OutofPhase_BREAKE=0;
 Motor1Status.s.OtheRun_PWM=0;
 Motor1Status.s.ThisCurrent=0;
 
 Motor2Status.s.ThisRun=0;
 Motor2Status.s.CommandStop=0;
 Motor2Status.s.OverCurrent=0;
 Motor2Status.s.UnderVoltage=0;
 Motor2Status.s.InPhase_DIR=0;
 Motor2Status.s.OutofPhase_BREAKE=0;
 Motor2Status.s.OtheRun_PWM=0;
 Motor2Status.s.ThisCurrent=0;
}

void crc16(unsigned char r_data[],unsigned int length)
{
        unsigned char cl,ch;
        unsigned char savehi,savelo;
        int ii,flag;
        crc16hi=0xFF;
        crc16lo=0xFF;
        cl=0x1;
        ch=0xA0;
        for (ii=0;ii<length-2;ii++)
        {
            crc16lo=(crc16lo ^ r_data[ii]);
                for (flag=0;flag<8;flag++)
                {
                       savehi=crc16hi;
                        savelo=crc16lo;
                       crc16hi=(crc16hi>>1);
                       crc16lo=(crc16lo>>1);
                        if ((savehi & 0x01)==0x01)
                                crc16lo=(crc16lo | 0x80);
                        if        ((savelo & 0x01)==0x01)
                        {
                                crc16hi = (crc16hi ^ ch);
								crc16lo = (crc16lo ^ cl);
                        }        
                }
        }
}

#pragma interrupt_handler timer3_ovf_isr:iv_TIM3_OVF
void timer3_ovf_isr(void)
{
  UpdateBegin=0;//回到待命状态
  TCCR3B = 0x00; //stop  
  ETIMSK &= 0xfb;//关定时器3中断
  ETIFR|=0x04; //清定时器3中断标志 
}

	
void SendUart0(unsigned char c,unsigned char s)   //串口发送数据
{//要求流量板在s个8ms内通过串口返回数据
unsigned char t; 	

  Uart0RxData[0]=0xff;
  Uart0RxData[1]=0xff;
  Uart0RxCounter=0; //清串口接受计数  
  
   t=UDR0;//开串口接收中断前读空缓存
   
  while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
  UDR0=c;   // 将数据放入缓冲器，发送数据
                   
   t=UDR0;//开串口接收中断前读空缓存
   UCSR0B|=0x80;//开串口接收中断
   
   //超时设定
	TCCR1B = 0x00; //stop
	if(s==0)
	 {
       TCNT1 = 22576;//5500ms 
	   TCCR1B = 0x05; //1024分频
	 }
	 else
	 {
	   TCNT1 = 1536;//8ms 
	   TCCR1B = 0x01; //1分频
	 }
 	
	TIFR|=0x04; //清定时器1中断标志
	while((TIFR&0x04)==0x00); 
	TCCR1B = 0x00; //stop
	TIFR|=0x04; //清定时器1中断标志 
	UCSR0B&=0x7f;//关串口接收中断
}


void SetTimer3(void)//页写开始后，如果有500ms时间内一个字节也没收到，则退出页写状态，回到待命状态
{  
    TCCR3B = 0x00; //stop    
    TCNT3H = 0xF0; //8M,500ms
    TCNT3L = 0xBE; //8M,500ms
	ETIFR|=0x04; //清定时器3中断标志
 	TCCR3B = 0x05; //1024分频
	ETIFR|=0x04; //清定时器3中断标志
	ETIMSK |= 0x04; //开定时器3中断
}

void main(void)
{
 	 unsigned int i,j,k;
	 unsigned char t; 	
     Delay30Ms();
	 
	 IntFlag=0;//无接收帧中断
     UpdateBegin=0;//无标定系数下发
	 T_dat=0;
	 R_dat=0;
	 DSP_PageCn=0;
	 
 	 Start();
	 
	 Delay30Ms();
	 Delay30Ms();
	 Delay30Ms();
	 Delay30Ms();
	 Delay30Ms();
	 Delay30Ms();
	 Delay30Ms();
	   
	TCCR3B = 0x00; //stop    
	TCNT3H = 0xa4; ////8M,3s
    TCNT3L = 0x72; ////8M,3s
	ETIFR|=0x04; //清定时器3中断标志
	ETIMSK &= 0xfb;//关定时器3中断
 	TCCR3B = 0x05; //1024分频
	ETIFR|=0x04; //清定时器3中断标志
	    
	 UpdateBegin=0;
	while( ((ETIFR&0x04)==0x00) && (UpdateBegin==0) )
	{
	 if((IntFlag==1))//3秒内收到开始更新命令
	 {  
	  if(R_dat==0xfa) 
	   {
	    UpdateBegin=1;
		SendUart0(0xb5,1);
	    T_com=0x0f;
	    T_dat=0xe7fa;	
		Delay30Ms();
		SendManchester();  
		IntFlag=0;//无命令帧
	    EIFR|=0x08;//清INT3中断标志 
 		EICRA|=0xc0; //INT3上升沿触发 
 		EIMSK|=0x08;//使能INT3中断 
	   }  	
	   else if(R_dat==0xfb)
	   {
	    UpdateBegin=1;
	  	SendUart0(0xb5,1);  
		T_com=0x0f;
		T_dat=Uart0RxData[0];//成功的话应返回0xe7fb
		T_dat<<=8; 	
		T_dat|=Uart0RxData[1];
	  	Delay30Ms();
      	SendManchester(); 
		IntFlag=0;//无命令帧
	    EIFR|=0x08;//清INT3中断标志 
 		EICRA|=0xc0; //INT3上升沿触发 
 		EIMSK|=0x08;//使能INT3中断 
	   }
	   else //其它命令均视为退出更新
	   {
	     TCCR3B = 0x00; //stop    
	     ETIFR|=0x04; //清定时器3中断标志
	     ETIMSK &= 0xfb;//关定时器3中断
	     SendUart0(0xb8,1);
		 T_dat=Uart0RxData[0];//成功的话应返回0xe7
		 T_dat<<=8; 
		 T_dat|=0xff;
		 T_com=0x0f;
		 Delay30Ms();
		 SendManchester();	 
		 quit();
	   }   
	 }		
	 if(IntFlag==2)//校验位错误处理程序
   	 { 
	   IntFlag=0;//无命令帧
	   EIFR|=0x08;//清INT3中断标志 
 	   EICRA|=0xc0; //INT3上升沿触发 
 	   EIMSK|=0x08;//使能INT3中断 
   	 }									
	} 
	
	TCCR3B = 0x00; //stop    
	ETIFR|=0x04; //清定时器3中断标志
	ETIMSK &= 0xfb;//关定时器3中断
	
	if(UpdateBegin==0)//3秒内没收到开始更新命令，则直接跳到主程序
	{
	 quit();
	}
	
	UpdateBegin=0;
	while(1)
	{
 	 if(IntFlag==2)//校验位错误处理程序
   	 { 
	   IntFlag=0;//无命令帧
	   EIFR|=0x08;//清INT3中断标志 
 	   EICRA|=0xc0; //INT3上升沿触发 
 	   EIMSK|=0x08;//使能INT3中断 
   	 }
   	else if(IntFlag==1)//接收到了正常命令帧
   	{
	 	 if(UpdateBegin>0)//接收主程序二进制数据
     	 { 	  
		      SetTimer3();	 //每收到一字节就重新开始定时500ms，超时后回到待命状态
			  
		      flash_buf[DataReCn]=R_dat;
			  DataReCn++;
			  
			  if(UpdateBegin==2)//如果是采集板页写准备了，直接把这个字节丢给采集板
			  {
			    while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
			    UDR0=R_dat; 
			  }	 
			   
		 	 if(DataReCn==258)//2字节页索引，256字节页数据
		   	 {
			   TCCR3B = 0x00; //stop  
  			   ETIMSK &= 0xfb;//关定时器3中断
  			   ETIFR|=0x04; //清定时器3中断标志 
  			   
			   
  			   if(UpdateBegin==1)//如果是主控板页写准备了，则此时写入一页
				{
                  address=flash_buf[0]*256+flash_buf[1];  
			      address*=256;	 
				  
			      if(address<0)
			          address=0;
				 
			     if(address>0xff00)//对应页索引为255，这是最后一页能写的页，目前限制固件大小为64K字节
			         address=0xff00;
				
		          write_one_page();	//约20ms    
			    }   
				
			   UpdateBegin=0;//一页写完了，下一页又从页写准备开始
			   
	 		   T_com=0x0f;	      
			   crc16(flash_buf,258);//12ms
		       T_dat=crc16hi;
			   T_dat<<=8;
			   T_dat|=crc16lo;
		       Delay30Ms();
               SendManchester();	//将这一页的校验码上传给上位机，上位机判断后决定是继续烧写一页还是重烧这一页	   		        
			 }	 	 
	     }
  		 else//若不是下发标定系数，则进入以下各个命令的子语句
		 {
    		switch(R_dat)
     		{
			
			   case 0xfa://主控板握手，进入更新状态
	  			     SendUart0(0xb5,1);
					 T_com=0x0f;
	  			     T_dat=0xe7fa;//上位机实收到的数,不用高低换位				       
	  			     Delay30Ms();
      			     SendManchester();  
				break;
				
			   case 0xfb://DSP握手，进入更新状态
					 T_com=0x0f;
	  			 	 SendUart0(0xb5,1);  
					 T_dat=Uart0RxData[0];//成功的话应返回0xe7fb
		 			 T_dat<<=8; 	
					 T_dat|=Uart0RxData[1];
	  			 	 Delay30Ms();
      			 	 SendManchester(); 
				break;	
				 		   			
				case 0xfc://主控板页写准备			     
					 T_com=0x0f;
	  			     T_dat=0xe7fc;//上位机实收到的数,不用高低换位
	  			     Delay30Ms();
      			     SendManchester(); 
					 UpdateBegin=1;//页写准备，主控板从页索引0开始烧写，最大页索引255，共64K字节程序空间
					 DataReCn=0;
				     SetTimer3();//开始计时，每500ms内至少要有一个字节收到
				break;
											
				case 0xfd://采集板页写准备			     
					 T_com=0x0f;
					 SendUart0(0xb7,1);//块写FLASHE准备 		
	  			     T_dat=Uart0RxData[0];//高字节，正常情况下应是0xe7
		 			 T_dat<<=8;
		 			 T_dat|=Uart0RxData[1];//低字节,正常情况下应是0xfd   
	  			     Delay30Ms();
      			     SendManchester(); 
					 UpdateBegin=2;//页写准备，采集板从页索引479开始往前烧写，最小页索引224，共64K字节程序空间
					 DataReCn=0;
				     SetTimer3();
				break;
				
				case 0xfe://采集板FLASH擦除，上位机设总超时6秒			     
					  SendUart0(0xb6,0);//擦除FLASHE,2秒超时 ,擦除FLASHD,2秒超时 ，共5.5秒超时				 
					  T_dat=Uart0RxData[0];//擦除成功的话应返回0xe7
		 			  T_dat<<=8; 				  	 
		 			  T_dat|=Uart0RxData[1];//擦除成功的话应返回0xfe				   
					  T_com=0x0f;
      			 	  SendManchester();	//上传擦除结果				 					
				break;	
				
				case 0xff://退出更新状态，运行正常程序
				 SendUart0(0xb8,1);
				 T_dat=Uart0RxData[0];//成功的话应返回0xe7
		 		 T_dat<<=8; 
				 T_dat|=0xff;
				 T_com=0x0f;
				 Delay30Ms();
				 SendManchester();	//上传擦除结果		
				 quit();
				break;

				default:
				break;
	  	    }//switch(R_dat&0xf0)
	     }//UpdateBegin
		 IntFlag=0;
    	 EIFR|=0x08;//清INT3中断标志 
 		 EICRA|=0xc0; //INT3上升沿触发 
 		 EIMSK|=0x08;//使能INT3中断 
	 }//IntFlag
    }//while(1)
 
}



#pragma interrupt_handler int3_isr:iv_INT3
void int3_isr(void)//外部中断3
{ 
  unsigned int r;
  SREG&=0x7f;//关总中断
  EIMSK&=0xF7;//关INT3
  
  DELAY50  
  if((PIND&0x08)==0x00)//1
  goto End;
  
  DELAY100
  if((PIND&0x08)==0x08)//0
  r=r;
  
  DELAY100
  if((PIND&0x08)==0x08)//0
  goto End;
  
  DELAY100
  if((PIND&0x08)==0x00)//1
  goto End;
  
  DELAY100
  if((PIND&0x08)==0x08)//0
  //goto End;
  r=r;
  
  DELAY100
  if((PIND&0x08)==0x08)//0
  goto End;

   
  DELAY100   
  for(Int_count=9;Int_count>0;Int_count--)
  {
  if((PIND&0x08)==0x08)
    Rx[Int_count]=1;
  else
    Rx[Int_count]=0;
  DELAY397
  }   
   
    R_dat=0;
    if(Rx[2])
          R_dat|=0x01;
    if(Rx[3])
          R_dat|=0x02;
    if(Rx[4])
          R_dat|=0x04;
    if(Rx[5])
          R_dat|=0x08;
    if(Rx[6])
          R_dat|=0x10;
    if(Rx[7])
          R_dat|=0x20;
    if(Rx[8])
          R_dat|=0x40;
    if(Rx[9])
          R_dat|=0x80;
	
	Rx[0]=1;  
	for(r=2;r<10;r++)  
       Rx[0]^=Rx[r];  
	   
	if(Rx[0]==Rx[1])//接收帧正常	
		IntFlag=1;
	else           //接收帧校验错
		IntFlag=2;
		 
   goto End1;//只要接收到正常的同步头，不管校验位是对是错，都暂时不开放INT0中断
     
End:
 EIFR|=0x08;//清INT3中断标志 
 EICRA|=0xc0; //INT3上升沿触发 
 EIMSK|=0x08;//使能INT3中断 
End1:
   SREG|=0x80;//总中断使能;  
}

#pragma interrupt_handler E_comp:24
void E_comp(void)  //模拟比较器中断,总线电压被拉低到28.5V后，立即停电机
{ 
  MOTORSTOP  //关电机
 
  if(Motor1Status.s.ThisRun>0)//收放电机欠压堵转
   {
	 Motor1Status.s.ThisRun=0;
	 Motor1Status.s.CommandStop=0;
 	 Motor1Status.s.OverCurrent=0;
 	 Motor1Status.s.UnderVoltage=1;
   }
  if(Motor2Status.s.ThisRun>0)//调节电机欠压堵转
   { 
    Motor2Status.s.ThisRun=0;
	Motor2Status.s.CommandStop=0;
 	Motor2Status.s.OverCurrent=0;
 	Motor2Status.s.UnderVoltage=1;
   }
 
}

void SendManchester(void) //曼码发送程序
{   
  unsigned int L;
  SREG=0x00;//关总中断 

  //模拟同步头数据
	//4位命令
	T_dat_buf[21]=(T_com&0x08)>>3;
	T_dat_buf[20]=(T_com&0x04)>>2;
	T_dat_buf[19]=(T_com&0x02)>>1;
	T_dat_buf[18]=T_com&0x01;
	//16位数据
	T_dat_buf[17]=(T_dat&0x8000)>>15;
	T_dat_buf[16]=(T_dat&0x4000)>>14;
	T_dat_buf[15]=(T_dat&0x2000)>>13;
	T_dat_buf[14]=(T_dat&0x1000)>>12;
	T_dat_buf[13]=(T_dat&0x0800)>>11;
    T_dat_buf[12]=(T_dat&0x0400)>>10;
    T_dat_buf[11]=(T_dat&0x0200)>>9;
	T_dat_buf[10]=(T_dat&0x0100)>>8;
	T_dat_buf[9]=(T_dat&0x0080)>>7;
	T_dat_buf[8]=(T_dat&0x0040)>>6;
	T_dat_buf[7]=(T_dat&0x0020)>>5;
	T_dat_buf[6]=(T_dat&0x0010)>>4;
	T_dat_buf[5]=(T_dat&0x0008)>>3;
	T_dat_buf[4]=(T_dat&0x0004)>>2;
	T_dat_buf[3]=(T_dat&0x0002)>>1;
	T_dat_buf[2]=T_dat&0x0001;
	
	
	//计算校验位，奇校验
	T_dat_buf[1]=1;
  	for(L=2;L<22;L++)
		{T_dat_buf[1]^=T_dat_buf[L];}

	//同步头
	M1_L
	M2_H 		 
	DELAY89//高100us
	M2_L
	DELAY40
	M1_H 
	DELAY170
	M1_L
	M2_H 
	DELAY89//高100us
	M2_L
	DELAY40
	M1_H    
    //DELAY200//低200us
	for(Tt=0;Tt<68;Tt++);

     //连续发送16位,每位400us
 	for(L=21;L>0;L--)
	{   
	  if(T_dat_buf[L])//1
        {         	 		
         	M1_L
	        M2_H 
	        DELAY89//高100us
	        M2_L
			DELAY40
	        M1_H       
         	DELAY268//低300us
		} 
       else 		//0 				                
        DELAY397//低400us	
    }
 DELAY400
 DELAY400
 DELAY400
 DELAY400
 DELAY400    
 EIFR|=0x01;//清INT0中断标志
 SREG=0x80; //开总中断*/
 M1_L
}

 

void Delay30Ms()//8M主时钟频率，则最大定时7812.5ms
{
	TCCR1B = 0x00; //stop
    TCNT1 = 65301;//30ms  
 	TCCR1B = 0x05; //1024分频
	TIFR|=0x04; //清定时器1中断标志
	while((TIFR&0x04)==0x00); 
	TCCR1B = 0x00; //stop
	TIFR|=0x04; //清定时器1中断标志
}

#pragma interrupt_handler usart0_isr:19
void usart0_isr(void) //串口接收中断
{
    Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
 	Uart0RxCounter++;
}

/*

void EEPROM_write(unsigned int Address,unsigned char Data)  	//??EEPROM?
{//?????1MHz,???EEPROM??????8.5ms
    while(EECR&0x02);                   // ??????????
    EEAR=Address;
    EEDR=Data;                        	// ??????????
    EECR|=0x04;                         //??EEMWE
    EECR|=0x02;                         //??EEWE ??????
}

unsigned char EEPROM_read(unsigned int Address)  				//??EEPROM?
{
    while(EECR&0x02);      				//?????????
    EEAR = Address;                     //???????						
	EECR|=0x01;             			//??EERE ??????
    return EEDR;                   		//??????????
}   */
Interrupt Vectors

Program Code (text area)
__text_start|__start:
    0F048 E001      LDI	R16,1
    0F049 BF05      OUT	0x35,R16
    0F04A E002      LDI	R16,2
    0F04B BF05      OUT	0x35,R16
    0F04C EFCF      LDI	R28,0xFF
    0F04D E1D0      LDI	R29,0x10
    0F04E BFCD      OUT	0x3D,R28
    0F04F BFDE      OUT	0x3E,R29
    0F050 50C0      SUBI	R28,0
    0F051 40D1      SBCI	R29,1
    0F052 EA0A      LDI	R16,0xAA
    0F053 8308      ST	Y,R16
    0F054 2400      CLR	R0
    0F055 E0E4      LDI	R30,4
    0F056 E0F1      LDI	R31,1
    0F057 E013      LDI	R17,3
    0F058 34E9      CPI	R30,0x49
    0F059 07F1      CPC	R31,R17
    0F05A F011      BEQ	0xF05D
    0F05B 9201      ST	Z+,R0
    0F05C CFFB      RJMP	0xF058
    0F05D 8300      ST	Z,R16
    0F05E E8EC      LDI	R30,0x8C
    0F05F EEF0      LDI	R31,0xE0
    0F060 E0A0      LDI	R26,0
    0F061 E0B1      LDI	R27,1
    0F062 EE10      LDI	R17,0xE0
    0F063 E001      LDI	R16,1
    0F064 BF0B      OUT	0x3B,R16
    0F065 39E0      CPI	R30,0x90
    0F066 07F1      CPC	R31,R17
    0F067 F021      BEQ	0xF06C
    0F068 95D8      ELPM
    0F069 9631      ADIW	R30,1
    0F06A 920D      ST	X+,R0
    0F06B CFF9      RJMP	0xF065
    0F06C 940E F255 CALL	_main
_exit:
    0F06E CFFF      RJMP	_exit
_boot_page_ew:
  code                 --> R16
  p_address            --> Y,+0
    0F06F 940E FBE0 CALL	push_arg4
    0F071 810C      LDD	R16,Y+4
FILE: D:\chen\Core\FirmWare_CT\JXY_MCUBootLoader_MAIN_V30\SBL.c
(0001) #include <iom128v.h>								   	
(0002) #include <macros.h>
(0003) #include <stdio.h>
(0004) 
(0005) //最后修订:20160812
(0006) //20170226 增加PIC单片机在线更新功能，另外还增加了一个引导区握手命令0xf0
(0007) //20170701 适用新主控板CT_MAIN_V30
(0008) 
(0009) #define  BB     0x00        //固件版本号
(0010) 
(0011) #define INIMANIO {PORTG&=0xE7;DDRG|=0x18;}
(0012) #define M1_L     {PORTG&=0xf7;}
(0013) #define M1_H     {PORTG|=0x08;}
(0014) #define M2_L     {PORTG&=0xef;}
(0015) #define M2_H     {PORTG|=0x10;}
(0016)  
(0017) #define IF_MANINTH     if((PIND&0x01)==0x01)
(0018) #define IF_MANINTL     if((PIND&0x01)==0x00)
(0019) #define IF_MANINTF     if((EIFR&0x01)==0x01)
(0020) #define MANINT_CLR	{ EIFR|=0x01; }
(0021) #define MANINT_EN	{ EIMSK |= 0x01; }
(0022) #define MANINT_DIS	{ EIMSK &= 0xFE; }
(0023) #define INT_EN		{ SEI(); }
(0024) #define INT_DIS		{ CLI(); } 
(0025) 
(0026) #define DELAY10 for(Tt=0;Tt<4;Tt++);
(0027) #define DELAY20 for(Tt=0;Tt<4;Tt++);
(0028) #define DELAY40 for(Tt=0;Tt<16;Tt++); 
(0029) #define DELAY50 for(Tt=0;Tt<21;Tt++); 
(0030) #define DELAY80 for(Tt=0;Tt<32;Tt++); 
(0031) #define DELAY89 for(Tt=0;Tt<36;Tt++); 
(0032) #define DELAY100 for(Tt=0;Tt<42;Tt++); 
(0033) #define DELAY170 for(Tt=0;Tt<72;Tt++);
(0034) #define DELAY268 for(Tt=0;Tt<113;Tt++);
(0035) #define DELAY397 for(Tt=0;Tt<165;Tt++);
(0036) #define DELAY400 for(Tt=0;Tt<168;Tt++);
(0037)  
(0038)  
(0039) /*
(0040) unsigned char Rx[18];//解码接收9位共18个半位
(0041) unsigned int  T_dat,R_dat;//曼码发送数据
(0042) unsigned char T_com;//曼码发送命令
(0043) unsigned char T_dat_buf[22];//曼码发送缓冲 
(0044) unsigned char Int_count;
(0045) unsigned char IntFlag;//接收帧状态
(0046)  
(0047) unsigned int Tt;
(0048) 
(0049) unsigned char UpdateBegin;//接收主程序数据开始标志
(0050) unsigned int DataReCn;
(0051) unsigned char crc16hi,crc16lo,DownloadSpeed;
(0052) unsigned int Timer3Cn;
(0053) unsigned char DSP_PageCn;//DSP程序页计数
(0054) 
(0055) unsigned char Uart0RxCounter,Uart1RxCounter;
(0056) unsigned char Uart0RxData[128],Uart1RxData[128];
(0057) unsigned int Timer0Counter;
(0058) unsigned char TimeOutFlag;
(0059) 
(0060) char flash_buf[258]; //FALSH页缓冲区,M128的一个Flash页为256字节(128字) //暂只支持64K地址编程
(0061) long address = 0; 
(0062) unsigned int T2cn;
(0063) 
(0064) void Start(void);
(0065) void SendManchester(void); 
(0066) void Delay30Ms();
(0067) */
(0068) unsigned char Rx[18];//解码接收9位共18个半位
(0069) unsigned int  T_dat,R_dat;//曼码发送数据
(0070) unsigned char T_com;//曼码发送命令
(0071) unsigned char T_dat_buf[22];//曼码发送缓冲 
(0072) unsigned char Int_count;
(0073) unsigned char IntFlag;//接收帧状态
(0074)  
(0075) unsigned int Tt;
(0076) 
(0077) unsigned char UpdateBegin;//接收主程序数据开始标志
(0078) unsigned int DataReCn;
(0079) unsigned char crc16hi,crc16lo,DownloadSpeed;
(0080) unsigned int Timer3Cn;
(0081) unsigned char DSP_PageCn;//DSP程序页计数
(0082) 
(0083) unsigned char Uart0RxCounter,Uart1RxCounter;
(0084) unsigned char Uart0RxData[128],Uart1RxData[128];
(0085) unsigned int Timer0Counter,Timer1Counter;
(0086) unsigned char TimeOutFlag;
(0087) 
(0088) char flash_buf[258]; //FALSH页缓冲区,M128的一个Flash页为256字节(128字) //暂只支持64K地址编程
(0089) long address = 0; 
(0090) unsigned int T2cn;
(0091) 
(0092) void Start(void);
(0093) 
(0094) void SendManchester(void); 
(0095)  
(0096) void Delay30Ms(void);
(0097) 
(0098) 
(0099) //擦除(code=0x03)和写入(code=0x05)一个Flash页 
(0100) void boot_page_ew(long p_address,char code) 
(0101) { 
(0102)     asm("mov r30,r16\n" 
    0F072 2FE0      MOV	R30,R16
    0F073 2FF1      MOV	R31,R17
    0F074 BF2B      OUT	0x3B,R18
(0103)         "mov r31,r17\n" 
(0104)         "out 0x3b,r18\n");            //将页地址放入Z寄存器和RAMPZ的Bit0中 
(0105)     SPMCSR = code;                //寄存器SPMCSR中为操作码 
    0F075 9300 0068 STS	0x68,R16
(0106)     asm("spm\n");                    //对指定Flash页进行操作 
    0F077 95E8      SPM
    0F078 9624      ADIW	R28,4
    0F079 9508      RET
_boot_page_fill:
  data                 --> Y,+2
  address              --> Y,+0
    0F07A 940E FBE0 CALL	push_arg4
(0107) }         
(0108) //填充Flash缓冲页中的一个字 
(0109) void boot_page_fill(unsigned int address,int data) 
(0110) { 
(0111)     asm("mov r30,r16\n" 
    0F07C 2FE0      MOV	R30,R16
    0F07D 2FF1      MOV	R31,R17
    0F07E 2E02      MOV	R0,R18
    0F07F 2E13      MOV	R1,R19
(0112)         "mov r31,r17\n"             //Z寄存器中为填冲页内地址 
(0113)         "mov r0,r18\n" 
(0114)         "mov r1,r19\n");            //R0R1中为一个指令字 
(0115)     SPMCSR = 0x01; 
    0F080 E081      LDI	R24,1
    0F081 9380 0068 STS	0x68,R24
(0116)     asm("spm\n"); 
    0F083 95E8      SPM
    0F084 9624      ADIW	R28,4
    0F085 9508      RET
(0117) } 
(0118) //等待一个Flash页的写完成 
(0119) void wait_page_rw_ok(void) 
(0120) { 
_wait_page_rw_ok:
    0F086 C008      RJMP	0xF08F
(0121)       while(SPMCSR & 0x40) 
(0122)      { 
(0123)          while(SPMCSR & 0x01); 
    0F087 9020 0068 LDS	R2,0x68
    0F089 FC20      SBRC	R2,0
    0F08A CFFC      RJMP	0xF087
(0124)          SPMCSR = 0x11; 
    0F08B E181      LDI	R24,0x11
    0F08C 9380 0068 STS	0x68,R24
(0125)          asm("spm\n"); 
    0F08E 95E8      SPM
    0F08F 9020 0068 LDS	R2,0x68
    0F091 FC26      SBRC	R2,6
    0F092 CFF4      RJMP	0xF087
    0F093 9508      RET
_write_one_page:
  i                    --> R20
    0F094 934A      ST	-Y,R20
    0F095 935A      ST	-Y,R21
    0F096 9721      SBIW	R28,1
(0126)      } 
(0127) } 
(0128) //更新一个Flash页的完整处理 
(0129) void write_one_page(void) 
(0130) { 
(0131)     int i; 
(0132)     boot_page_ew(address,0x03);                    //擦除一个Flash页 
    0F097 E083      LDI	R24,3
    0F098 8388      ST	Y,R24
    0F099 9120 0102 LDS	R18,address+2
    0F09B 9130 0103 LDS	R19,address+3
    0F09D 9100 0100 LDS	R16,address
    0F09F 9110 0101 LDS	R17,address+1
    0F0A1 DFCD      RCALL	_boot_page_ew
(0133)     
(0134)     wait_page_rw_ok();                            //等待擦除完成 
    0F0A2 DFE3      RCALL	_wait_page_rw_ok
(0135)     for(i=0;i<256;i+=2)                //将数据填入Flash缓冲页中 
    0F0A3 2744      CLR	R20
    0F0A4 2755      CLR	R21
(0136)     { 
(0137)         boot_page_fill(i, flash_buf[i+2]+(flash_buf[i+3]<<8)); 
    0F0A5 E089      LDI	R24,0x9
    0F0A6 E091      LDI	R25,1
    0F0A7 01FA      MOVW	R30,R20
    0F0A8 0FE8      ADD	R30,R24
    0F0A9 1FF9      ADC	R31,R25
    0F0AA 8020      LD	R2,Z
    0F0AB 2433      CLR	R3
    0F0AC 2C32      MOV	R3,R2
    0F0AD 2422      CLR	R2
    0F0AE E088      LDI	R24,0x8
    0F0AF E091      LDI	R25,1
    0F0B0 01FA      MOVW	R30,R20
    0F0B1 0FE8      ADD	R30,R24
    0F0B2 1FF9      ADC	R31,R25
    0F0B3 8120      LD	R18,Z
    0F0B4 2733      CLR	R19
    0F0B5 0D22      ADD	R18,R2
    0F0B6 1D33      ADC	R19,R3
    0F0B7 018A      MOVW	R16,R20
    0F0B8 DFC1      RCALL	_boot_page_fill
    0F0B9 5F4E      SUBI	R20,0xFE
    0F0BA 4F5F      SBCI	R21,0xFF
    0F0BB 3040      CPI	R20,0
    0F0BC E0E1      LDI	R30,1
    0F0BD 075E      CPC	R21,R30
    0F0BE F334      BLT	0xF0A5
(0138)     } 
(0139)    boot_page_ew(address,0x05);                    //将缓冲页数据写入一个Flash页 
    0F0BF E085      LDI	R24,5
    0F0C0 8388      ST	Y,R24
    0F0C1 9120 0102 LDS	R18,address+2
    0F0C3 9130 0103 LDS	R19,address+3
    0F0C5 9100 0100 LDS	R16,address
    0F0C7 9110 0101 LDS	R17,address+1
    0F0C9 DFA5      RCALL	_boot_page_ew
(0140)      
(0141)    wait_page_rw_ok();                            //等待写入完成 
    0F0CA DFBB      RCALL	_wait_page_rw_ok
    0F0CB 9621      ADIW	R28,1
    0F0CC 9159      LD	R21,Y+
    0F0CD 9149      LD	R20,Y+
    0F0CE 9508      RET
(0142) }        
(0143)  
(0144) 
(0145) //UART1 initialize
(0146) // desired baud rate: 57600
(0147) // actual: baud rate:58824 (2.1%)
(0148) // char size: 8 bit
(0149) // parity: Disabled
(0150) void uart1_init(void)
(0151) {
(0152)  UCSR1B = 0x00; //disable while setting baud rate
_uart1_init:
    0F0CF 2422      CLR	R2
    0F0D0 9220 009A STS	0x9A,R2
(0153)  UCSR1A = 0x02;
    0F0D2 E082      LDI	R24,2
    0F0D3 9380 009B STS	0x9B,R24
(0154)  UCSR1C = 0x06;
    0F0D5 E086      LDI	R24,6
    0F0D6 9380 009D STS	0x9D,R24
(0155)  UBRR1L = 0x10; //set baud rate lo 57600
    0F0D8 E180      LDI	R24,0x10
    0F0D9 9380 0099 STS	0x99,R24
(0156)  UBRR1H = 0x00; //set baud rate hi
    0F0DB 9220 0098 STS	0x98,R2
(0157)  UCSR1B = 0x98;
    0F0DD E988      LDI	R24,0x98
    0F0DE 9380 009A STS	0x9A,R24
    0F0E0 9508      RET
_uart1_rx_isr:
    0F0E1 922A      ST	-Y,R2
    0F0E2 938A      ST	-Y,R24
    0F0E3 939A      ST	-Y,R25
    0F0E4 93EA      ST	-Y,R30
    0F0E5 93FA      ST	-Y,R31
    0F0E6 B62F      IN	R2,0x3F
    0F0E7 922A      ST	-Y,R2
(0158) }
(0159) 
(0160) #pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
(0161) void uart1_rx_isr(void)//串口1接收中断
(0162) {
(0163)  Uart1RxData[Uart1RxCounter]=UDR1;//接收串口数据,同时清空串口接收中断标志
    0F0E8 E08D      LDI	R24,0xD
    0F0E9 E092      LDI	R25,2
    0F0EA 91E0 030D LDS	R30,Uart1RxCounter
    0F0EC 27FF      CLR	R31
    0F0ED 0FE8      ADD	R30,R24
    0F0EE 1FF9      ADC	R31,R25
    0F0EF 9020 009C LDS	R2,0x9C
    0F0F1 8220      ST	Z,R2
(0164)  Uart1RxCounter++;
    0F0F2 9180 030D LDS	R24,Uart1RxCounter
    0F0F4 5F8F      SUBI	R24,0xFF
    0F0F5 9380 030D STS	Uart1RxCounter,R24
    0F0F7 9029      LD	R2,Y+
    0F0F8 BE2F      OUT	0x3F,R2
    0F0F9 91F9      LD	R31,Y+
    0F0FA 91E9      LD	R30,Y+
    0F0FB 9199      LD	R25,Y+
    0F0FC 9189      LD	R24,Y+
    0F0FD 9029      LD	R2,Y+
    0F0FE 9518      RETI
(0165) }
(0166) 
(0167) //UART0 initialize
(0168) // desired baud rate: 57600
(0169) // actual: baud rate:58824 (2.1%)
(0170) // char size: 8 bit
(0171) // parity: Disabled
(0172) void uart0_init(void)
(0173) {
(0174)  UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    0F0FF 2422      CLR	R2
    0F100 B82A      OUT	0x0A,R2
(0175)  UCSR0A = 0x02;
    0F101 E082      LDI	R24,2
    0F102 B98B      OUT	0x0B,R24
(0176)  UCSR0C = 0x06;
    0F103 E086      LDI	R24,6
    0F104 9380 0095 STS	0x95,R24
(0177)  UBRR0L = 0x10; //set baud rate lo 57600
    0F106 E180      LDI	R24,0x10
    0F107 B989      OUT	0x09,R24
(0178)  UBRR0H = 0x00; //set baud rate hi
    0F108 9220 0090 STS	0x90,R2
(0179)  UCSR0B = 0x98;
    0F10A E988      LDI	R24,0x98
    0F10B B98A      OUT	0x0A,R24
    0F10C 9508      RET
_usart0_isr:
    0F10D 922A      ST	-Y,R2
    0F10E 938A      ST	-Y,R24
    0F10F 939A      ST	-Y,R25
    0F110 93EA      ST	-Y,R30
    0F111 93FA      ST	-Y,R31
    0F112 B62F      IN	R2,0x3F
    0F113 922A      ST	-Y,R2
(0180) }
(0181) 
(0182) #pragma interrupt_handler usart0_isr:19
(0183) void usart0_isr(void) //串口接收中断
(0184) { 
(0185)     Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
    0F114 E88D      LDI	R24,0x8D
    0F115 E092      LDI	R25,2
    0F116 91E0 030E LDS	R30,Uart0RxCounter
    0F118 27FF      CLR	R31
    0F119 0FE8      ADD	R30,R24
    0F11A 1FF9      ADC	R31,R25
    0F11B B02C      IN	R2,0x0C
    0F11C 8220      ST	Z,R2
(0186)  	Uart0RxCounter++;
    0F11D 9180 030E LDS	R24,Uart0RxCounter
    0F11F 5F8F      SUBI	R24,0xFF
    0F120 9380 030E STS	Uart0RxCounter,R24
    0F122 9029      LD	R2,Y+
    0F123 BE2F      OUT	0x3F,R2
    0F124 91F9      LD	R31,Y+
    0F125 91E9      LD	R30,Y+
    0F126 9199      LD	R25,Y+
    0F127 9189      LD	R24,Y+
    0F128 9029      LD	R2,Y+
    0F129 9518      RETI
(0187) }
(0188) 
(0189) 
(0190) 
(0191) 
(0192) void quit(void) 
(0193) {
(0194)     MCUCR = 0x01; 
_quit:
    0F12A E081      LDI	R24,1
    0F12B BF85      OUT	0x35,R24
(0195)     MCUCR = 0x00;       //将中断向量表迁移到应用程序区头部 
    0F12C 2422      CLR	R2
    0F12D BE25      OUT	0x35,R2
(0196)     RAMPZ = 0x00;       //RAMPZ清零初始化 
    0F12E BE2B      OUT	0x3B,R2
(0197)     asm("jmp 0x0000\n");//跳转到Flash的0x0000处，执行用户的应用程序 
    0F12F 940C 0000 JMP	0x0
    0F131 9508      RET
(0198) } 
(0199) 
(0200) void Start(void)
(0201) {
(0202) 	INIMANIO
_Start:
    0F132 9180 0065 LDS	R24,0x65
    0F134 7E87      ANDI	R24,0xE7
    0F135 9380 0065 STS	0x65,R24
    0F137 9180 0064 LDS	R24,0x64
    0F139 6188      ORI	R24,0x18
    0F13A 9380 0064 STS	0x64,R24
(0203) 	uart0_init();
    0F13C DFC2      RCALL	_uart0_init
(0204)     uart1_init();
    0F13D DF91      RCALL	_uart1_init
(0205)  
(0206)     ACSR|=0x10;//清模拟比较器中断标志
    0F13E 9A44      SBI	0x08,4
(0207) 	ACSR&=0xf7;//关模拟比较器中断
    0F13F B188      IN	R24,0x08
    0F140 7F87      ANDI	R24,0xF7
    0F141 B988      OUT	0x08,R24
(0208) 	
(0209) 	EICRA|=0x03; //INT0上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发 
    0F142 9180 006A LDS	R24,0x6A
    0F144 6083      ORI	R24,3
    0F145 9380 006A STS	0x6A,R24
(0210) 	MANINT_CLR
    0F147 B788      IN	R24,0x38
    0F148 6081      ORI	R24,1
    0F149 BF88      OUT	0x38,R24
(0211) 	MANINT_EN
    0F14A B789      IN	R24,0x39
    0F14B 6081      ORI	R24,1
    0F14C BF89      OUT	0x39,R24
(0212) 	INT_EN
    0F14D 9478      BSET	7
(0213)   
(0214) 	 M1_H
    0F14E 9180 0065 LDS	R24,0x65
    0F150 6088      ORI	R24,0x8
    0F151 9380 0065 STS	0x65,R24
(0215) 	 Delay30Ms();
    0F153 940E FBCC CALL	_Delay30Ms
(0216) 	 Delay30Ms();
    0F155 940E FBCC CALL	_Delay30Ms
(0217) 	 Delay30Ms();
    0F157 940E FBCC CALL	_Delay30Ms
(0218) 	 Delay30Ms();
    0F159 940E FBCC CALL	_Delay30Ms
(0219) 	 Delay30Ms();
    0F15B 940E FBCC CALL	_Delay30Ms
(0220) 	 M1_L
    0F15D 9180 0065 LDS	R24,0x65
    0F15F 7F87      ANDI	R24,0xF7
    0F160 9380 0065 STS	0x65,R24
    0F162 9508      RET
_crc16:
  ii                   --> R20
  ch                   --> R10
  cl                   --> R22
  savelo               --> R14
  savehi               --> Y,+0
  flag                 --> R12
  length               --> R18
  r_data               --> Y,+11
    0F163 940E FBE0 CALL	push_arg4
    0F165 940E FC34 CALL	push_xgsetF0FC
    0F167 9721      SBIW	R28,1
(0221) }
(0222) 
(0223) void crc16(unsigned char r_data[],unsigned int length)
(0224) {
(0225)         unsigned char cl,ch;
(0226)         unsigned char savehi,savelo;
(0227)         int ii,flag;
(0228)         crc16hi=0xFF;
    0F168 EF8F      LDI	R24,0xFF
    0F169 9380 0314 STS	crc16hi,R24
(0229)         crc16lo=0xFF;
    0F16B 9380 0313 STS	crc16lo,R24
(0230)         cl=0x1;
    0F16D E061      LDI	R22,1
(0231)         ch=0xA0;
    0F16E EA80      LDI	R24,0xA0
    0F16F 2EA8      MOV	R10,R24
(0232)         for (ii=0;ii<length-2;ii++)
    0F170 2744      CLR	R20
    0F171 2755      CLR	R21
    0F172 C038      RJMP	0xF1AB
(0233)         {
(0234)             crc16lo=(crc16lo ^ r_data[ii]);
    0F173 01FA      MOVW	R30,R20
    0F174 840B      LDD	R0,Y+11
    0F175 841C      LDD	R1,Y+12
    0F176 0DE0      ADD	R30,R0
    0F177 1DF1      ADC	R31,R1
    0F178 8020      LD	R2,Z
    0F179 9030 0313 LDS	R3,crc16lo
    0F17B 2432      EOR	R3,R2
    0F17C 9230 0313 STS	crc16lo,R3
(0235)                 for (flag=0;flag<8;flag++)
    0F17E 24CC      CLR	R12
    0F17F 24DD      CLR	R13
(0236)                 {
(0237)                        savehi=crc16hi;
    0F180 9020 0314 LDS	R2,crc16hi
    0F182 8228      ST	Y,R2
(0238)                         savelo=crc16lo;
    0F183 90E0 0313 LDS	R14,crc16lo
(0239)                        crc16hi=(crc16hi>>1);
    0F185 9426      LSR	R2
    0F186 9220 0314 STS	crc16hi,R2
(0240)                        crc16lo=(crc16lo>>1);
    0F188 2C2E      MOV	R2,R14
    0F189 9426      LSR	R2
    0F18A 9220 0313 STS	crc16lo,R2
(0241)                         if ((savehi & 0x01)==0x01)
    0F18C 8188      LD	R24,Y
    0F18D 7081      ANDI	R24,1
    0F18E 3081      CPI	R24,1
    0F18F F421      BNE	0xF194
(0242)                                 crc16lo=(crc16lo | 0x80);
    0F190 2D82      MOV	R24,R2
    0F191 6880      ORI	R24,0x80
    0F192 9380 0313 STS	crc16lo,R24
(0243)                         if        ((savelo & 0x01)==0x01)
    0F194 2D8E      MOV	R24,R14
    0F195 7081      ANDI	R24,1
    0F196 3081      CPI	R24,1
    0F197 F451      BNE	0xF1A2
(0244)                         {
(0245)                                 crc16hi = (crc16hi ^ ch);
    0F198 9020 0314 LDS	R2,crc16hi
    0F19A 242A      EOR	R2,R10
    0F19B 9220 0314 STS	crc16hi,R2
(0246) 								crc16lo = (crc16lo ^ cl);
    0F19D 9020 0313 LDS	R2,crc16lo
    0F19F 2626      EOR	R2,R22
    0F1A0 9220 0313 STS	crc16lo,R2
    0F1A2 01C6      MOVW	R24,R12
    0F1A3 9601      ADIW	R24,1
    0F1A4 016C      MOVW	R12,R24
    0F1A5 3088      CPI	R24,0x8
    0F1A6 E0E0      LDI	R30,0
    0F1A7 079E      CPC	R25,R30
    0F1A8 F2BC      BLT	0xF180
    0F1A9 5F4F      SUBI	R20,0xFF
    0F1AA 4F5F      SBCI	R21,0xFF
    0F1AB 01C9      MOVW	R24,R18
    0F1AC 9702      SBIW	R24,2
    0F1AD 1748      CP	R20,R24
    0F1AE 0759      CPC	R21,R25
    0F1AF F408      BCC	0xF1B1
    0F1B0 CFC2      RJMP	0xF173
    0F1B1 9621      ADIW	R28,1
    0F1B2 940E FC29 CALL	pop_xgsetF0FC
    0F1B4 9624      ADIW	R28,4
    0F1B5 9508      RET
_timer3_ovf_isr:
    0F1B6 922A      ST	-Y,R2
    0F1B7 938A      ST	-Y,R24
    0F1B8 B62F      IN	R2,0x3F
    0F1B9 922A      ST	-Y,R2
(0247)                         }        
(0248)                 }
(0249)         }
(0250) }
(0251) 
(0252) #pragma interrupt_handler timer3_ovf_isr:iv_TIM3_OVF
(0253) void timer3_ovf_isr(void)
(0254) {
(0255)   UpdateBegin=0;//回到待命状态
    0F1BA 2422      CLR	R2
    0F1BB 9220 0317 STS	UpdateBegin,R2
(0256)   TCCR3B = 0x00; //stop  
    0F1BD 9220 008A STS	0x8A,R2
(0257)   ETIMSK &= 0xfb;//关定时器3中断
    0F1BF 9180 007D LDS	R24,0x7D
    0F1C1 7F8B      ANDI	R24,0xFB
    0F1C2 9380 007D STS	0x7D,R24
(0258)   ETIFR|=0x04; //清定时器3中断标志 
    0F1C4 9180 007C LDS	R24,0x7C
    0F1C6 6084      ORI	R24,4
    0F1C7 9380 007C STS	0x7C,R24
    0F1C9 9029      LD	R2,Y+
    0F1CA BE2F      OUT	0x3F,R2
    0F1CB 9189      LD	R24,Y+
    0F1CC 9029      LD	R2,Y+
    0F1CD 9518      RETI
_SendUart0:
  t                    --> R10
  s                    --> R18
  c                    --> R16
    0F1CE 92AA      ST	-Y,R10
(0259) }
(0260) 
(0261) 	
(0262) void SendUart0(unsigned char c,unsigned char s)   //串口发送数据
(0263) {//要求流量板在s个8ms内通过串口返回数据
(0264) unsigned char t; 	
(0265) 
(0266)   Uart0RxData[0]=0xff;
    0F1CF EF8F      LDI	R24,0xFF
    0F1D0 9380 028D STS	Uart0RxData,R24
(0267)   Uart0RxData[1]=0xff;
    0F1D2 9380 028E STS	Uart0RxData+1,R24
(0268)   Uart0RxCounter=0; //清串口接受计数  
    0F1D4 2422      CLR	R2
    0F1D5 9220 030E STS	Uart0RxCounter,R2
(0269)   
(0270)    t=UDR0;//开串口接收中断前读空缓存
    0F1D7 B0AC      IN	R10,0x0C
(0271)    
(0272)   while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    0F1D8 9B5D      SBIS	0x0B,5
    0F1D9 CFFE      RJMP	0xF1D8
(0273)   UDR0=c;   // 将数据放入缓冲器，发送数据
    0F1DA B90C      OUT	0x0C,R16
(0274)                    
(0275)    t=UDR0;//开串口接收中断前读空缓存
    0F1DB B0AC      IN	R10,0x0C
(0276)    UCSR0B|=0x80;//开串口接收中断
    0F1DC 9A57      SBI	0x0A,7
(0277)    
(0278)    //超时设定
(0279) 	TCCR1B = 0x00; //stop
    0F1DD 2422      CLR	R2
    0F1DE BC2E      OUT	0x2E,R2
(0280) 	if(s==0)
    0F1DF 2322      TST	R18
    0F1E0 F439      BNE	0xF1E8
(0281) 	 {
(0282)        TCNT1 = 22576;//5500ms 
    0F1E1 E380      LDI	R24,0x30
    0F1E2 E598      LDI	R25,0x58
    0F1E3 BD9D      OUT	0x2D,R25
    0F1E4 BD8C      OUT	0x2C,R24
(0283) 	   TCCR1B = 0x05; //1024分频
    0F1E5 E085      LDI	R24,5
    0F1E6 BD8E      OUT	0x2E,R24
(0284) 	 }
    0F1E7 C006      RJMP	0xF1EE
(0285) 	 else
(0286) 	 {
(0287) 	   TCNT1 = 1536;//8ms 
    0F1E8 E080      LDI	R24,0
    0F1E9 E096      LDI	R25,6
    0F1EA BD9D      OUT	0x2D,R25
    0F1EB BD8C      OUT	0x2C,R24
(0288) 	   TCCR1B = 0x01; //1分频
    0F1EC E081      LDI	R24,1
    0F1ED BD8E      OUT	0x2E,R24
(0289) 	 }
(0290)  	
(0291) 	TIFR|=0x04; //清定时器1中断标志
    0F1EE B786      IN	R24,0x36
    0F1EF 6084      ORI	R24,4
    0F1F0 BF86      OUT	0x36,R24
(0292) 	while((TIFR&0x04)==0x00); 
    0F1F1 B626      IN	R2,0x36
    0F1F2 FE22      SBRS	R2,2
    0F1F3 CFFD      RJMP	0xF1F1
(0293) 	TCCR1B = 0x00; //stop
    0F1F4 2422      CLR	R2
    0F1F5 BC2E      OUT	0x2E,R2
(0294) 	TIFR|=0x04; //清定时器1中断标志 
    0F1F6 B786      IN	R24,0x36
    0F1F7 6084      ORI	R24,4
    0F1F8 BF86      OUT	0x36,R24
(0295) 	UCSR0B&=0x7f;//关串口接收中断
    0F1F9 B18A      IN	R24,0x0A
    0F1FA 778F      ANDI	R24,0x7F
    0F1FB B98A      OUT	0x0A,R24
    0F1FC 90A9      LD	R10,Y+
    0F1FD 9508      RET
_SendUart1:
  t                    --> R10
  s                    --> R18
  c                    --> R16
    0F1FE 92AA      ST	-Y,R10
(0296) }
(0297) 
(0298) void SendUart1(unsigned char c,unsigned char s)   //串口发送数据
(0299) {//要求流量板在s个8ms内通过串口返回数据
(0300) unsigned char t; 	
(0301) 
(0302)   Uart1RxData[0]=0xff;
    0F1FF EF8F      LDI	R24,0xFF
    0F200 9380 020D STS	Uart1RxData,R24
(0303)   Uart1RxData[1]=0xff;
    0F202 9380 020E STS	Uart1RxData+1,R24
(0304)   Uart1RxCounter=0; //清串口接受计数  
    0F204 2422      CLR	R2
    0F205 9220 030D STS	Uart1RxCounter,R2
(0305)   
(0306)    t=UDR1;//开串口接收中断前读空缓存
    0F207 90A0 009C LDS	R10,0x9C
(0307)    
(0308)   while(!(UCSR1A&(1<<UDRE1)));   // 等待发送缓冲器为空
    0F209 9020 009B LDS	R2,0x9B
    0F20B FE25      SBRS	R2,5
    0F20C CFFC      RJMP	0xF209
(0309)   UDR1=c;   // 将数据放入缓冲器，发送数据
    0F20D 9300 009C STS	0x9C,R16
(0310)                    
(0311)    t=UDR1;//开串口接收中断前读空缓存
    0F20F 90A0 009C LDS	R10,0x9C
(0312)    UCSR1B|=0x80;//开串口接收中断
    0F211 9180 009A LDS	R24,0x9A
    0F213 6880      ORI	R24,0x80
    0F214 9380 009A STS	0x9A,R24
(0313)    
(0314)    //超时设定
(0315) 	TCCR1B = 0x00; //stop
    0F216 2422      CLR	R2
    0F217 BC2E      OUT	0x2E,R2
(0316) 	if(s==0)
    0F218 2322      TST	R18
    0F219 F439      BNE	0xF221
(0317) 	 {
(0318)        TCNT1 = 22576;//5500ms 
    0F21A E380      LDI	R24,0x30
    0F21B E598      LDI	R25,0x58
    0F21C BD9D      OUT	0x2D,R25
    0F21D BD8C      OUT	0x2C,R24
(0319) 	   TCCR1B = 0x05; //1024分频
    0F21E E085      LDI	R24,5
    0F21F BD8E      OUT	0x2E,R24
(0320) 	 }
    0F220 C006      RJMP	0xF227
(0321) 	 else
(0322) 	 {
(0323) 	   TCNT1 = 1536;//8ms 
    0F221 E080      LDI	R24,0
    0F222 E096      LDI	R25,6
    0F223 BD9D      OUT	0x2D,R25
    0F224 BD8C      OUT	0x2C,R24
(0324) 	   TCCR1B = 0x01; //1分频
    0F225 E081      LDI	R24,1
    0F226 BD8E      OUT	0x2E,R24
(0325) 	 }
(0326)  	
(0327) 	TIFR|=0x04; //清定时器1中断标志
    0F227 B786      IN	R24,0x36
    0F228 6084      ORI	R24,4
    0F229 BF86      OUT	0x36,R24
(0328) 	while((TIFR&0x04)==0x00); 
    0F22A B626      IN	R2,0x36
    0F22B FE22      SBRS	R2,2
    0F22C CFFD      RJMP	0xF22A
(0329) 	TCCR1B = 0x00; //stop
    0F22D 2422      CLR	R2
    0F22E BC2E      OUT	0x2E,R2
(0330) 	TIFR|=0x04; //清定时器1中断标志 
    0F22F B786      IN	R24,0x36
    0F230 6084      ORI	R24,4
    0F231 BF86      OUT	0x36,R24
(0331) 	UCSR1B&=0x7f;//关串口接收中断
    0F232 9180 009A LDS	R24,0x9A
    0F234 778F      ANDI	R24,0x7F
    0F235 9380 009A STS	0x9A,R24
    0F237 90A9      LD	R10,Y+
    0F238 9508      RET
(0332) }
(0333) 
(0334) void SetTimer3(void)//页写开始后，如果有500ms时间内一个字节也没收到，则退出页写状态，回到待命状态
(0335) {  
(0336)     TCCR3B = 0x00; //stop    
_SetTimer3:
    0F239 2422      CLR	R2
    0F23A 9220 008A STS	0x8A,R2
(0337)     TCNT3H = 0xF0; //8M,500ms
    0F23C EF80      LDI	R24,0xF0
    0F23D 9380 0089 STS	0x89,R24
(0338)     TCNT3L = 0xBE; //8M,500ms
    0F23F EB8E      LDI	R24,0xBE
    0F240 9380 0088 STS	0x88,R24
(0339) 	ETIFR|=0x04; //清定时器3中断标志
    0F242 9180 007C LDS	R24,0x7C
    0F244 6084      ORI	R24,4
    0F245 9380 007C STS	0x7C,R24
(0340)  	TCCR3B = 0x05; //1024分频
    0F247 E085      LDI	R24,5
    0F248 9380 008A STS	0x8A,R24
(0341) 	ETIFR|=0x04; //清定时器3中断标志
    0F24A 9180 007C LDS	R24,0x7C
    0F24C 6084      ORI	R24,4
    0F24D 9380 007C STS	0x7C,R24
(0342) 	ETIMSK |= 0x04; //开定时器3中断
    0F24F 9180 007D LDS	R24,0x7D
    0F251 6084      ORI	R24,4
    0F252 9380 007D STS	0x7D,R24
    0F254 9508      RET
(0343) }
(0344) 
(0345) void main(void)
(0346) {
(0347)  	 unsigned int i,j,k;
(0348) 	 unsigned char t; 	
(0349)      Delay30Ms();
_main:
  t                    --> Y,+1
  k                    --> Y,+1
  j                    --> Y,+1
  i                    --> Y,+1
    0F255 940E FBCC CALL	_Delay30Ms
(0350) 	 
(0351) 	 IntFlag=0;//无接收帧中断
    0F257 2422      CLR	R2
    0F258 9220 031A STS	IntFlag,R2
(0352)      UpdateBegin=0;//无标定系数下发
    0F25A 9220 0317 STS	UpdateBegin,R2
(0353) 	 T_dat=0;
    0F25C 2433      CLR	R3
    0F25D 9230 0336 STS	T_dat+1,R3
    0F25F 9220 0335 STS	T_dat,R2
(0354) 	 R_dat=0;
    0F261 9230 0334 STS	R_dat+1,R3
    0F263 9220 0333 STS	R_dat,R2
(0355) 	 DSP_PageCn=0;
    0F265 9220 030F STS	DSP_PageCn,R2
(0356) 	 
(0357)  	 Start();
    0F267 DECA      RCALL	_Start
(0358) 	 
(0359) 	 Delay30Ms();
    0F268 940E FBCC CALL	_Delay30Ms
(0360) 
(0361) 	 
(0362) 	TCCR3B = 0x00; //stop    
    0F26A 2422      CLR	R2
    0F26B 9220 008A STS	0x8A,R2
(0363) 	TCNT3H = 0xd1; ////8M,1.5s
    0F26D ED81      LDI	R24,0xD1
    0F26E 9380 0089 STS	0x89,R24
(0364)     TCNT3L = 0x20; ////8M,1.5s
    0F270 E280      LDI	R24,0x20
    0F271 9380 0088 STS	0x88,R24
(0365) 	ETIFR|=0x04; //清定时器3中断标志
    0F273 9180 007C LDS	R24,0x7C
    0F275 6084      ORI	R24,4
    0F276 9380 007C STS	0x7C,R24
(0366) 	ETIMSK &= 0xfb;//关定时器3中断
    0F278 9180 007D LDS	R24,0x7D
    0F27A 7F8B      ANDI	R24,0xFB
    0F27B 9380 007D STS	0x7D,R24
(0367)  	TCCR3B = 0x05; //1024分频
    0F27D E085      LDI	R24,5
    0F27E 9380 008A STS	0x8A,R24
(0368) 	ETIFR|=0x04; //清定时器3中断标志
    0F280 9180 007C LDS	R24,0x7C
    0F282 6084      ORI	R24,4
    0F283 9380 007C STS	0x7C,R24
(0369) 	    
(0370) 	 UpdateBegin=0;
    0F285 9220 0317 STS	UpdateBegin,R2
    0F287 C0DE      RJMP	0xF366
(0371) 	while( ((ETIFR&0x04)==0x00) && (UpdateBegin==0) )
(0372) 	{
(0373) 	 if((IntFlag==1))//3秒内收到开始更新命令
    0F288 9180 031A LDS	R24,IntFlag
    0F28A 3081      CPI	R24,1
    0F28B F009      BEQ	0xF28D
    0F28C C0CC      RJMP	0xF359
(0374) 	 {  
(0375) 	  if(R_dat==0xfa) //主控板握手
    0F28D 9180 0333 LDS	R24,R_dat
    0F28F 9190 0334 LDS	R25,R_dat+1
    0F291 3F8A      CPI	R24,0xFA
    0F292 E0E0      LDI	R30,0
    0F293 079E      CPC	R25,R30
    0F294 F4C9      BNE	0xF2AE
(0376) 	   {
(0377) 	    UpdateBegin=1;
    0F295 E081      LDI	R24,1
    0F296 9380 0317 STS	UpdateBegin,R24
(0378) 	    T_com=0x0f;
    0F298 E08F      LDI	R24,0xF
    0F299 9380 0332 STS	T_com,R24
(0379) 	    T_dat=0xe7fa;	
    0F29B EF8A      LDI	R24,0xFA
    0F29C EE97      LDI	R25,0xE7
    0F29D 9390 0336 STS	T_dat+1,R25
    0F29F 9380 0335 STS	T_dat,R24
(0380) 		Delay30Ms();
    0F2A1 940E FBCC CALL	_Delay30Ms
(0381) 		SendManchester();  
    0F2A3 D59D      RCALL	_SendManchester
(0382) 		IntFlag=0;//无命令帧
    0F2A4 2422      CLR	R2
    0F2A5 9220 031A STS	IntFlag,R2
(0383) 	    MANINT_CLR
    0F2A7 B788      IN	R24,0x38
    0F2A8 6081      ORI	R24,1
    0F2A9 BF88      OUT	0x38,R24
(0384) 	    MANINT_EN
    0F2AA B789      IN	R24,0x39
    0F2AB 6081      ORI	R24,1
    0F2AC BF89      OUT	0x39,R24
(0385) 	   }  	
    0F2AD C0AB      RJMP	0xF359
(0386) 	   else if(R_dat==0xf5)//电机板握手
    0F2AE 9180 0333 LDS	R24,R_dat
    0F2B0 9190 0334 LDS	R25,R_dat+1
    0F2B2 3F85      CPI	R24,0xF5
    0F2B3 E0E0      LDI	R30,0
    0F2B4 079E      CPC	R25,R30
    0F2B5 F581      BNE	0xF2E6
(0387) 	   {
(0388) 		UpdateBegin=1;
    0F2B6 E081      LDI	R24,1
    0F2B7 9380 0317 STS	UpdateBegin,R24
(0389) 		SendUart1(0xf5,1);  
    0F2B9 E021      LDI	R18,1
    0F2BA EF05      LDI	R16,0xF5
    0F2BB DF42      RCALL	_SendUart1
(0390) 		T_com=0x0f;
    0F2BC E08F      LDI	R24,0xF
    0F2BD 9380 0332 STS	T_com,R24
(0391) 		T_dat=0xe7;
    0F2BF EE87      LDI	R24,0xE7
    0F2C0 E090      LDI	R25,0
    0F2C1 9390 0336 STS	T_dat+1,R25
    0F2C3 9380 0335 STS	T_dat,R24
(0392) 		T_dat<<=8; 	
    0F2C5 011C      MOVW	R2,R24
    0F2C6 2C32      MOV	R3,R2
    0F2C7 2422      CLR	R2
    0F2C8 9230 0336 STS	T_dat+1,R3
    0F2CA 9220 0335 STS	T_dat,R2
(0393) 		T_dat|=Uart0RxData[0];//成功的话应返回0xe7f5
    0F2CC 9020 028D LDS	R2,Uart0RxData
    0F2CE 2433      CLR	R3
    0F2CF 9040 0335 LDS	R4,T_dat
    0F2D1 9050 0336 LDS	R5,T_dat+1
    0F2D3 2842      OR	R4,R2
    0F2D4 2853      OR	R5,R3
    0F2D5 9250 0336 STS	T_dat+1,R5
    0F2D7 9240 0335 STS	T_dat,R4
(0394) 		Delay30Ms();
    0F2D9 940E FBCC CALL	_Delay30Ms
(0395) 		SendManchester(); 
    0F2DB D565      RCALL	_SendManchester
(0396) 		IntFlag=0;//无命令帧
    0F2DC 2422      CLR	R2
    0F2DD 9220 031A STS	IntFlag,R2
(0397) 		MANINT_CLR
    0F2DF B788      IN	R24,0x38
    0F2E0 6081      ORI	R24,1
    0F2E1 BF88      OUT	0x38,R24
(0398) 	    MANINT_EN
    0F2E2 B789      IN	R24,0x39
    0F2E3 6081      ORI	R24,1
    0F2E4 BF89      OUT	0x39,R24
(0399) 		} 	
    0F2E5 C073      RJMP	0xF359
(0400) 	   else if(R_dat==0xfb)//采集板DSP握手
    0F2E6 9180 0333 LDS	R24,R_dat
    0F2E8 9190 0334 LDS	R25,R_dat+1
    0F2EA 3F8B      CPI	R24,0xFB
    0F2EB E0E0      LDI	R30,0
    0F2EC 079E      CPC	R25,R30
    0F2ED F5A1      BNE	0xF322
(0401) 	   {
(0402) 	    UpdateBegin=1;
    0F2EE E081      LDI	R24,1
    0F2EF 9380 0317 STS	UpdateBegin,R24
(0403) 	  	SendUart0(0xb5,1);  
    0F2F1 E021      LDI	R18,1
    0F2F2 EB05      LDI	R16,0xB5
    0F2F3 DEDA      RCALL	_SendUart0
(0404) 		T_com=0x0f;
    0F2F4 E08F      LDI	R24,0xF
    0F2F5 9380 0332 STS	T_com,R24
(0405) 		T_dat=Uart0RxData[0];//成功的话应返回0xe7fb
    0F2F7 9020 028D LDS	R2,Uart0RxData
    0F2F9 2433      CLR	R3
    0F2FA 9230 0336 STS	T_dat+1,R3
    0F2FC 9220 0335 STS	T_dat,R2
(0406) 		T_dat<<=8; 	
    0F2FE 9020 0335 LDS	R2,T_dat
    0F300 9030 0336 LDS	R3,T_dat+1
    0F302 2C32      MOV	R3,R2
    0F303 2422      CLR	R2
    0F304 9230 0336 STS	T_dat+1,R3
    0F306 9220 0335 STS	T_dat,R2
(0407) 		T_dat|=Uart0RxData[1];
    0F308 9020 028E LDS	R2,Uart0RxData+1
    0F30A 2433      CLR	R3
    0F30B 9040 0335 LDS	R4,T_dat
    0F30D 9050 0336 LDS	R5,T_dat+1
    0F30F 2842      OR	R4,R2
    0F310 2853      OR	R5,R3
    0F311 9250 0336 STS	T_dat+1,R5
    0F313 9240 0335 STS	T_dat,R4
(0408) 	  	Delay30Ms();
    0F315 940E FBCC CALL	_Delay30Ms
(0409)       	SendManchester(); 
    0F317 D529      RCALL	_SendManchester
(0410) 		IntFlag=0;//无命令帧
    0F318 2422      CLR	R2
    0F319 9220 031A STS	IntFlag,R2
(0411) 	    MANINT_CLR
    0F31B B788      IN	R24,0x38
    0F31C 6081      ORI	R24,1
    0F31D BF88      OUT	0x38,R24
(0412) 	    MANINT_EN 
    0F31E B789      IN	R24,0x39
    0F31F 6081      ORI	R24,1
    0F320 BF89      OUT	0x39,R24
(0413) 	   }
    0F321 C037      RJMP	0xF359
(0414) 	   else if(R_dat==0xf9)//采集板PIC握手
    0F322 9180 0333 LDS	R24,R_dat
    0F324 9190 0334 LDS	R25,R_dat+1
    0F326 3F89      CPI	R24,0xF9
    0F327 E0E0      LDI	R30,0
    0F328 079E      CPC	R25,R30
    0F329 F579      BNE	0xF359
(0415) 	   {
(0416) 	    UpdateBegin=1;
    0F32A E081      LDI	R24,1
    0F32B 9380 0317 STS	UpdateBegin,R24
(0417) 	  	SendUart0(0xf9,1);  
    0F32D E021      LDI	R18,1
    0F32E EF09      LDI	R16,0xF9
    0F32F DE9E      RCALL	_SendUart0
(0418) 		T_com=0x0f;
    0F330 E08F      LDI	R24,0xF
    0F331 9380 0332 STS	T_com,R24
(0419) 		T_dat=0xe7;
    0F333 EE87      LDI	R24,0xE7
    0F334 E090      LDI	R25,0
    0F335 9390 0336 STS	T_dat+1,R25
    0F337 9380 0335 STS	T_dat,R24
(0420) 		T_dat<<=8; 	
    0F339 011C      MOVW	R2,R24
    0F33A 2C32      MOV	R3,R2
    0F33B 2422      CLR	R2
    0F33C 9230 0336 STS	T_dat+1,R3
    0F33E 9220 0335 STS	T_dat,R2
(0421) 		T_dat|=Uart0RxData[0];//成功的话应返回0xe7f9
    0F340 9020 028D LDS	R2,Uart0RxData
    0F342 2433      CLR	R3
    0F343 9040 0335 LDS	R4,T_dat
    0F345 9050 0336 LDS	R5,T_dat+1
    0F347 2842      OR	R4,R2
    0F348 2853      OR	R5,R3
    0F349 9250 0336 STS	T_dat+1,R5
    0F34B 9240 0335 STS	T_dat,R4
(0422) 	  	Delay30Ms();
    0F34D 940E FBCC CALL	_Delay30Ms
(0423)       	SendManchester(); 
    0F34F D4F1      RCALL	_SendManchester
(0424) 		IntFlag=0;//无命令帧
    0F350 2422      CLR	R2
    0F351 9220 031A STS	IntFlag,R2
(0425) 	    MANINT_CLR
    0F353 B788      IN	R24,0x38
    0F354 6081      ORI	R24,1
    0F355 BF88      OUT	0x38,R24
(0426) 	    MANINT_EN
    0F356 B789      IN	R24,0x39
    0F357 6081      ORI	R24,1
    0F358 BF89      OUT	0x39,R24
(0427) 	   } 
(0428) 	 }		
(0429) 	 if(IntFlag==2)//校验位错误处理程序
    0F359 9180 031A LDS	R24,IntFlag
    0F35B 3082      CPI	R24,2
    0F35C F449      BNE	0xF366
(0430)    	 { 
(0431) 	   IntFlag=0;//无命令帧
    0F35D 2422      CLR	R2
    0F35E 9220 031A STS	IntFlag,R2
(0432) 	   MANINT_CLR
    0F360 B788      IN	R24,0x38
    0F361 6081      ORI	R24,1
    0F362 BF88      OUT	0x38,R24
(0433) 	   MANINT_EN
    0F363 B789      IN	R24,0x39
    0F364 6081      ORI	R24,1
    0F365 BF89      OUT	0x39,R24
    0F366 9020 007C LDS	R2,0x7C
    0F368 FC22      SBRC	R2,2
    0F369 C005      RJMP	0xF36F
    0F36A 9020 0317 LDS	R2,UpdateBegin
    0F36C 2022      TST	R2
    0F36D F409      BNE	0xF36F
    0F36E CF19      RJMP	0xF288
(0434)    	 }									
(0435) 	} 
(0436) 	
(0437) 	TCCR3B = 0x00; //stop    
    0F36F 2422      CLR	R2
    0F370 9220 008A STS	0x8A,R2
(0438) 	ETIFR|=0x04; //清定时器3中断标志
    0F372 9180 007C LDS	R24,0x7C
    0F374 6084      ORI	R24,4
    0F375 9380 007C STS	0x7C,R24
(0439) 	ETIMSK &= 0xfb;//关定时器3中断
    0F377 9180 007D LDS	R24,0x7D
    0F379 7F8B      ANDI	R24,0xFB
    0F37A 9380 007D STS	0x7D,R24
(0440) 	
(0441) 	if(UpdateBegin==0)//3秒内没收到开始更新命令，则直接跳到主程序
    0F37C 9020 0317 LDS	R2,UpdateBegin
    0F37E 2022      TST	R2
    0F37F F409      BNE	0xF381
(0442) 	{
(0443) 	 quit();
    0F380 DDA9      RCALL	_quit
(0444) 	}
(0445) 	
(0446) 	UpdateBegin=0;
    0F381 2422      CLR	R2
    0F382 9220 0317 STS	UpdateBegin,R2
    0F384 C2BB      RJMP	0xF640
(0447) 	while(1)
(0448) 	{
(0449)  	 if(IntFlag==2)//校验位错误处理程序
    0F385 9180 031A LDS	R24,IntFlag
    0F387 3082      CPI	R24,2
    0F388 F451      BNE	0xF393
(0450)    	 { 
(0451) 	   IntFlag=0;//无命令帧
    0F389 2422      CLR	R2
    0F38A 9220 031A STS	IntFlag,R2
(0452) 	   MANINT_CLR
    0F38C B788      IN	R24,0x38
    0F38D 6081      ORI	R24,1
    0F38E BF88      OUT	0x38,R24
(0453) 	   MANINT_EN 
    0F38F B789      IN	R24,0x39
    0F390 6081      ORI	R24,1
    0F391 BF89      OUT	0x39,R24
(0454)    	 }
    0F392 C2AD      RJMP	0xF640
(0455)    	else if(IntFlag==1)//接收到了正常命令帧
    0F393 9180 031A LDS	R24,IntFlag
    0F395 3081      CPI	R24,1
    0F396 F009      BEQ	0xF398
    0F397 C2A8      RJMP	0xF640
(0456)    	{
(0457) 	 	 if(UpdateBegin>0)//接收主程序二进制数据
    0F398 E080      LDI	R24,0
    0F399 9020 0317 LDS	R2,UpdateBegin
    0F39B 1582      CP	R24,R2
    0F39C F008      BCS	0xF39E
    0F39D C0D5      RJMP	0xF473
(0458)      	 { 	  
(0459) 		      SetTimer3();	 //每收到一字节就重新开始定时500ms，超时后回到待命状态
    0F39E DE9A      RCALL	_SetTimer3
(0460) 			  					   
(0461) 		      flash_buf[DataReCn]=R_dat;
    0F39F E086      LDI	R24,6
    0F3A0 E091      LDI	R25,1
    0F3A1 91E0 0315 LDS	R30,DataReCn
    0F3A3 91F0 0316 LDS	R31,DataReCn+1
    0F3A5 0FE8      ADD	R30,R24
    0F3A6 1FF9      ADC	R31,R25
    0F3A7 9020 0333 LDS	R2,R_dat
    0F3A9 9030 0334 LDS	R3,R_dat+1
    0F3AB 8220      ST	Z,R2
(0462) 			  DataReCn++;
    0F3AC 9180 0315 LDS	R24,DataReCn
    0F3AE 9190 0316 LDS	R25,DataReCn+1
    0F3B0 9601      ADIW	R24,1
    0F3B1 9390 0316 STS	DataReCn+1,R25
    0F3B3 9380 0315 STS	DataReCn,R24
(0463) 			  
(0464) 			  if(UpdateBegin==2)//如果是采集板页写准备了，直接把这个字节丢给采集板
    0F3B5 9180 0317 LDS	R24,UpdateBegin
    0F3B7 3082      CPI	R24,2
    0F3B8 F441      BNE	0xF3C1
(0465) 			  {
(0466) 			    while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
    0F3B9 9B5D      SBIS	0x0B,5
    0F3BA CFFE      RJMP	0xF3B9
(0467) 			    UDR0=R_dat; 
    0F3BB 9020 0333 LDS	R2,R_dat
    0F3BD 9030 0334 LDS	R3,R_dat+1
    0F3BF B82C      OUT	0x0C,R2
(0468) 			  }
    0F3C0 C00E      RJMP	0xF3CF
(0469) 			  else if(UpdateBegin==3)//如果是电机板页写准备了，直接把这个字节丢给电机板
    0F3C1 9180 0317 LDS	R24,UpdateBegin
    0F3C3 3083      CPI	R24,3
    0F3C4 F451      BNE	0xF3CF
(0470) 			  {
(0471) 			    while(!(UCSR1A&(1<<UDRE1)));   // 等待发送缓冲器为空
    0F3C5 9020 009B LDS	R2,0x9B
    0F3C7 FE25      SBRS	R2,5
    0F3C8 CFFC      RJMP	0xF3C5
(0472) 			    UDR1=R_dat; 
    0F3C9 9020 0333 LDS	R2,R_dat
    0F3CB 9030 0334 LDS	R3,R_dat+1
    0F3CD 9220 009C STS	0x9C,R2
(0473) 			  }	 
(0474) 			   
(0475) 		 	 if(DataReCn==258)//2字节页索引，256字节页数据
    0F3CF 9180 0315 LDS	R24,DataReCn
    0F3D1 9190 0316 LDS	R25,DataReCn+1
    0F3D3 3082      CPI	R24,2
    0F3D4 E0E1      LDI	R30,1
    0F3D5 079E      CPC	R25,R30
    0F3D6 F009      BEQ	0xF3D8
    0F3D7 C25F      RJMP	0xF637
(0476) 		   	 {
(0477) 			   TCCR3B = 0x00; //stop  
    0F3D8 2422      CLR	R2
    0F3D9 9220 008A STS	0x8A,R2
(0478)   			   ETIMSK &= 0xfb;//关定时器3中断
    0F3DB 9180 007D LDS	R24,0x7D
    0F3DD 7F8B      ANDI	R24,0xFB
    0F3DE 9380 007D STS	0x7D,R24
(0479)   			   ETIFR|=0x04; //清定时器3中断标志 
    0F3E0 9180 007C LDS	R24,0x7C
    0F3E2 6084      ORI	R24,4
    0F3E3 9380 007C STS	0x7C,R24
(0480)   			   		   
(0481)   			   if(UpdateBegin==1)//如果是主控板页写准备了，则此时写入一页
    0F3E5 9180 0317 LDS	R24,UpdateBegin
    0F3E7 3081      CPI	R24,1
    0F3E8 F009      BEQ	0xF3EA
    0F3E9 C05D      RJMP	0xF447
(0482) 				{
(0483)                   address=flash_buf[0]*256+flash_buf[1];  
    0F3EA 9120 0106 LDS	R18,flash_buf
    0F3EC 2733      CLR	R19
    0F3ED E000      LDI	R16,0
    0F3EE E011      LDI	R17,1
    0F3EF 940E FBE5 CALL	empy16s
    0F3F1 0118      MOVW	R2,R16
    0F3F2 9040 0107 LDS	R4,flash_buf+1
    0F3F4 2455      CLR	R5
    0F3F5 0C24      ADD	R2,R4
    0F3F6 1C35      ADC	R3,R5
    0F3F7 2444      CLR	R4
    0F3F8 FC37      SBRC	R3,7
    0F3F9 9440      COM	R4
    0F3FA 2455      CLR	R5
    0F3FB FC47      SBRC	R4,7
    0F3FC 9450      COM	R5
    0F3FD 9230 0101 STS	address+1,R3
    0F3FF 9220 0100 STS	address,R2
    0F401 9250 0103 STS	address+3,R5
    0F403 9240 0102 STS	address+2,R4
(0484) 			      address*=256;	 
    0F405 E040      LDI	R20,0
    0F406 E051      LDI	R21,1
    0F407 E060      LDI	R22,0
    0F408 E070      LDI	R23,0
    0F409 925A      ST	-Y,R5
    0F40A 924A      ST	-Y,R4
    0F40B 923A      ST	-Y,R3
    0F40C 922A      ST	-Y,R2
    0F40D 018A      MOVW	R16,R20
    0F40E 019B      MOVW	R18,R22
    0F40F 940E FBF5 CALL	empy32u|empy32s
    0F411 9310 0101 STS	address+1,R17
    0F413 9300 0100 STS	address,R16
    0F415 9330 0103 STS	address+3,R19
    0F417 9320 0102 STS	address+2,R18
(0485) 				  
(0486) 			      if(address<0)
    0F419 E040      LDI	R20,0
    0F41A E050      LDI	R21,0
    0F41B E060      LDI	R22,0
    0F41C E070      LDI	R23,0
    0F41D 1704      CP	R16,R20
    0F41E 0715      CPC	R17,R21
    0F41F 0726      CPC	R18,R22
    0F420 0737      CPC	R19,R23
    0F421 F44C      BGE	0xF42B
(0487) 			          address=0;
    0F422 E080      LDI	R24,0
    0F423 9380 0100 STS	address,R24
    0F425 9380 0101 STS	address+1,R24
    0F427 9380 0102 STS	address+2,R24
    0F429 9380 0103 STS	address+3,R24
(0488) 				 
(0489) 			     if(address>0xff00)//对应页索引为255，这是最后一页能写的页，目前限制固件大小为64K字节
    0F42B E040      LDI	R20,0
    0F42C EF5F      LDI	R21,0xFF
    0F42D E060      LDI	R22,0
    0F42E E070      LDI	R23,0
    0F42F 9040 0102 LDS	R4,address+2
    0F431 9050 0103 LDS	R5,address+3
    0F433 9020 0100 LDS	R2,address
    0F435 9030 0101 LDS	R3,address+1
    0F437 1542      CP	R20,R2
    0F438 0553      CPC	R21,R3
    0F439 0564      CPC	R22,R4
    0F43A 0575      CPC	R23,R5
    0F43B F454      BGE	0xF446
(0490) 			         address=0xff00;
    0F43C E080      LDI	R24,0
    0F43D 9380 0100 STS	address,R24
    0F43F 9380 0102 STS	address+2,R24
    0F441 9380 0103 STS	address+3,R24
    0F443 EF8F      LDI	R24,0xFF
    0F444 9380 0101 STS	address+1,R24
(0491) 				
(0492) 				  
(0493) 		          write_one_page();	//约20ms  
    0F446 DC4D      RCALL	_write_one_page
(0494) 				  
(0495) 			    }   
(0496) 				  
(0497) 			   UpdateBegin=0;//一页写完了，下一页又从页写准备开始
    0F447 2422      CLR	R2
    0F448 9220 0317 STS	UpdateBegin,R2
(0498) 			   
(0499) 	 		   T_com=0x0f;	      
    0F44A E08F      LDI	R24,0xF
    0F44B 9380 0332 STS	T_com,R24
(0500) 			   crc16(flash_buf,258);//12ms
    0F44D E022      LDI	R18,2
    0F44E E031      LDI	R19,1
    0F44F E006      LDI	R16,6
    0F450 E011      LDI	R17,1
    0F451 DD11      RCALL	_crc16
(0501) 		       T_dat=crc16hi;
    0F452 9020 0314 LDS	R2,crc16hi
    0F454 2433      CLR	R3
    0F455 9230 0336 STS	T_dat+1,R3
    0F457 9220 0335 STS	T_dat,R2
(0502) 			   T_dat<<=8;
    0F459 9020 0335 LDS	R2,T_dat
    0F45B 9030 0336 LDS	R3,T_dat+1
    0F45D 2C32      MOV	R3,R2
    0F45E 2422      CLR	R2
    0F45F 9230 0336 STS	T_dat+1,R3
    0F461 9220 0335 STS	T_dat,R2
(0503) 			   T_dat|=crc16lo;
    0F463 9020 0313 LDS	R2,crc16lo
    0F465 2433      CLR	R3
    0F466 9040 0335 LDS	R4,T_dat
    0F468 9050 0336 LDS	R5,T_dat+1
    0F46A 2842      OR	R4,R2
    0F46B 2853      OR	R5,R3
    0F46C 9250 0336 STS	T_dat+1,R5
    0F46E 9240 0335 STS	T_dat,R4
(0504) 		       Delay30Ms();
    0F470 D75B      RCALL	_Delay30Ms
(0505)                SendManchester();	//将这一页的校验码上传给上位机，上位机判断后决定是继续烧写一页还是重烧这一页	   		        
    0F471 D3CF      RCALL	_SendManchester
(0506) 			 }	 	 
(0507) 	     }
    0F472 C1C4      RJMP	0xF637
(0508)   		 else//若不是下发标定系数，则进入以下各个命令的子语句
(0509) 		 {
(0510)     		switch(R_dat)
    0F473 9020 0333 LDS	R2,R_dat
    0F475 9030 0334 LDS	R3,R_dat+1
    0F477 01C1      MOVW	R24,R2
    0F478 3280      CPI	R24,0x20
    0F479 E0E0      LDI	R30,0
    0F47A 079E      CPC	R25,R30
    0F47B F409      BNE	0xF47D
    0F47C C042      RJMP	0xF4BF
    0F47D 3280      CPI	R24,0x20
    0F47E E0E0      LDI	R30,0
    0F47F 079E      CPC	R25,R30
    0F480 F40C      BGE	0xF482
    0F481 C1B5      RJMP	0xF637
    0F482 9020 0333 LDS	R2,R_dat
    0F484 9030 0334 LDS	R3,R_dat+1
    0F486 01C1      MOVW	R24,R2
    0F487 3F80      CPI	R24,0xF0
    0F488 E0E0      LDI	R30,0
    0F489 079E      CPC	R25,R30
    0F48A F409      BNE	0xF48C
    0F48B C03F      RJMP	0xF4CB
    0F48C 3F84      CPI	R24,0xF4
    0F48D E0E0      LDI	R30,0
    0F48E 079E      CPC	R25,R30
    0F48F F409      BNE	0xF491
    0F490 C069      RJMP	0xF4FA
    0F491 3F85      CPI	R24,0xF5
    0F492 E0E0      LDI	R30,0
    0F493 079E      CPC	R25,R30
    0F494 F409      BNE	0xF496
    0F495 C041      RJMP	0xF4D7
    0F496 3F88      CPI	R24,0xF8
    0F497 E0E0      LDI	R30,0
    0F498 079E      CPC	R25,R30
    0F499 F409      BNE	0xF49B
    0F49A C0AF      RJMP	0xF54A
    0F49B 3F89      CPI	R24,0xF9
    0F49C E0E0      LDI	R30,0
    0F49D 079E      CPC	R25,R30
    0F49E F409      BNE	0xF4A0
    0F49F C087      RJMP	0xF527
    0F4A0 3F8A      CPI	R24,0xFA
    0F4A1 E0E0      LDI	R30,0
    0F4A2 079E      CPC	R25,R30
    0F4A3 F409      BNE	0xF4A5
    0F4A4 C0D2      RJMP	0xF577
    0F4A5 3F8B      CPI	R24,0xFB
    0F4A6 E0E0      LDI	R30,0
    0F4A7 079E      CPC	R25,R30
    0F4A8 F409      BNE	0xF4AA
    0F4A9 C0D9      RJMP	0xF583
    0F4AA 3F8C      CPI	R24,0xFC
    0F4AB E0E0      LDI	R30,0
    0F4AC 079E      CPC	R25,R30
    0F4AD F409      BNE	0xF4AF
    0F4AE C0FB      RJMP	0xF5AA
    0F4AF 3F8D      CPI	R24,0xFD
    0F4B0 E0E0      LDI	R30,0
    0F4B1 079E      CPC	R25,R30
    0F4B2 F409      BNE	0xF4B4
    0F4B3 C10C      RJMP	0xF5C0
    0F4B4 3F8E      CPI	R24,0xFE
    0F4B5 E0E0      LDI	R30,0
    0F4B6 079E      CPC	R25,R30
    0F4B7 F409      BNE	0xF4B9
    0F4B8 C138      RJMP	0xF5F1
    0F4B9 3F8F      CPI	R24,0xFF
    0F4BA E0E0      LDI	R30,0
    0F4BB 079E      CPC	R25,R30
    0F4BC F409      BNE	0xF4BE
    0F4BD C159      RJMP	0xF617
    0F4BE C178      RJMP	0xF637
(0511)      		{			
(0512) 			   case 0x20://读版本号  
(0513) 		 		  	   T_com=0x02;
    0F4BF E082      LDI	R24,2
    0F4C0 9380 0332 STS	T_com,R24
(0514) 					   T_dat=0x00;
    0F4C2 2422      CLR	R2
    0F4C3 2433      CLR	R3
    0F4C4 9230 0336 STS	T_dat+1,R3
    0F4C6 9220 0335 STS	T_dat,R2
(0515) 					   Delay30Ms();
    0F4C8 D703      RCALL	_Delay30Ms
(0516) 					   SendManchester();	
    0F4C9 D377      RCALL	_SendManchester
(0517) 	  		   break;  
    0F4CA C16C      RJMP	0xF637
(0518) 					   
(0519) 				case 0xf0://引导区握手
(0520) 					 T_com=0x0f;
    0F4CB E08F      LDI	R24,0xF
    0F4CC 9380 0332 STS	T_com,R24
(0521) 	  			     T_dat=0xe7ff;//上位机实收到的数,不用高低换位				       
    0F4CE EF8F      LDI	R24,0xFF
    0F4CF EE97      LDI	R25,0xE7
    0F4D0 9390 0336 STS	T_dat+1,R25
    0F4D2 9380 0335 STS	T_dat,R24
(0522) 	  			     Delay30Ms();
    0F4D4 D6F7      RCALL	_Delay30Ms
(0523)       			     SendManchester();  
    0F4D5 D36B      RCALL	_SendManchester
(0524) 				break;
    0F4D6 C160      RJMP	0xF637
(0525) 				
(0526) 				case 0xf5://电机板握手
(0527) 			         T_com=0x0f;
    0F4D7 E08F      LDI	R24,0xF
    0F4D8 9380 0332 STS	T_com,R24
(0528) 	  			 	 SendUart1(0xf5,1);  
    0F4DA E021      LDI	R18,1
    0F4DB EF05      LDI	R16,0xF5
    0F4DC DD21      RCALL	_SendUart1
(0529) 					 T_dat=0xe7;
    0F4DD EE87      LDI	R24,0xE7
    0F4DE E090      LDI	R25,0
    0F4DF 9390 0336 STS	T_dat+1,R25
    0F4E1 9380 0335 STS	T_dat,R24
(0530) 		 			 T_dat<<=8; 	
    0F4E3 011C      MOVW	R2,R24
    0F4E4 2C32      MOV	R3,R2
    0F4E5 2422      CLR	R2
    0F4E6 9230 0336 STS	T_dat+1,R3
    0F4E8 9220 0335 STS	T_dat,R2
(0531) 					 T_dat|=Uart1RxData[0];//成功的话应返回0xf5
    0F4EA 9020 020D LDS	R2,Uart1RxData
    0F4EC 2433      CLR	R3
    0F4ED 9040 0335 LDS	R4,T_dat
    0F4EF 9050 0336 LDS	R5,T_dat+1
    0F4F1 2842      OR	R4,R2
    0F4F2 2853      OR	R5,R3
    0F4F3 9250 0336 STS	T_dat+1,R5
    0F4F5 9240 0335 STS	T_dat,R4
(0532) 	  			 	 Delay30Ms();
    0F4F7 D6D4      RCALL	_Delay30Ms
(0533)       			 	 SendManchester(); 
    0F4F8 D348      RCALL	_SendManchester
(0534) 			   break;	
    0F4F9 C13D      RJMP	0xF637
(0535) 			
(0536) 			   case 0xf4://电机板页写准备			     
(0537) 					 T_com=0x0f;
    0F4FA E08F      LDI	R24,0xF
    0F4FB 9380 0332 STS	T_com,R24
(0538) 					 SendUart1(0xf4,1); 
    0F4FD E021      LDI	R18,1
    0F4FE EF04      LDI	R16,0xF4
    0F4FF DCFE      RCALL	_SendUart1
(0539) 	  			     T_dat=0xe7;
    0F500 EE87      LDI	R24,0xE7
    0F501 E090      LDI	R25,0
    0F502 9390 0336 STS	T_dat+1,R25
    0F504 9380 0335 STS	T_dat,R24
(0540) 		 			 T_dat<<=8;
    0F506 011C      MOVW	R2,R24
    0F507 2C32      MOV	R3,R2
    0F508 2422      CLR	R2
    0F509 9230 0336 STS	T_dat+1,R3
    0F50B 9220 0335 STS	T_dat,R2
(0541) 		 			 T_dat|=Uart1RxData[0];//正常情况下应是0xf4  
    0F50D 9020 020D LDS	R2,Uart1RxData
    0F50F 2433      CLR	R3
    0F510 9040 0335 LDS	R4,T_dat
    0F512 9050 0336 LDS	R5,T_dat+1
    0F514 2842      OR	R4,R2
    0F515 2853      OR	R5,R3
    0F516 9250 0336 STS	T_dat+1,R5
    0F518 9240 0335 STS	T_dat,R4
(0542) 	  			     Delay30Ms();
    0F51A D6B1      RCALL	_Delay30Ms
(0543)       			     SendManchester(); 
    0F51B D325      RCALL	_SendManchester
(0544) 					 UpdateBegin=3;//页写准备，共64K字节程序空间
    0F51C E083      LDI	R24,3
    0F51D 9380 0317 STS	UpdateBegin,R24
(0545) 					 DataReCn=0;
    0F51F 2422      CLR	R2
    0F520 2433      CLR	R3
    0F521 9230 0316 STS	DataReCn+1,R3
    0F523 9220 0315 STS	DataReCn,R2
(0546) 				     SetTimer3();
    0F525 DD13      RCALL	_SetTimer3
(0547) 				break;
    0F526 C110      RJMP	0xF637
(0548) 				
(0549) 				case 0xf9://PIC握手，进入更新状态
(0550) 					 T_com=0x0f;
    0F527 E08F      LDI	R24,0xF
    0F528 9380 0332 STS	T_com,R24
(0551) 	  			 	 SendUart0(0xf9,1);  
    0F52A E021      LDI	R18,1
    0F52B EF09      LDI	R16,0xF9
    0F52C DCA1      RCALL	_SendUart0
(0552) 					 T_dat=0xe7;
    0F52D EE87      LDI	R24,0xE7
    0F52E E090      LDI	R25,0
    0F52F 9390 0336 STS	T_dat+1,R25
    0F531 9380 0335 STS	T_dat,R24
(0553) 		 			 T_dat<<=8; 	
    0F533 011C      MOVW	R2,R24
    0F534 2C32      MOV	R3,R2
    0F535 2422      CLR	R2
    0F536 9230 0336 STS	T_dat+1,R3
    0F538 9220 0335 STS	T_dat,R2
(0554) 					 T_dat|=Uart0RxData[0];//成功的话应返回0xf9
    0F53A 9020 028D LDS	R2,Uart0RxData
    0F53C 2433      CLR	R3
    0F53D 9040 0335 LDS	R4,T_dat
    0F53F 9050 0336 LDS	R5,T_dat+1
    0F541 2842      OR	R4,R2
    0F542 2853      OR	R5,R3
    0F543 9250 0336 STS	T_dat+1,R5
    0F545 9240 0335 STS	T_dat,R4
(0555) 	  			 	 Delay30Ms();
    0F547 D684      RCALL	_Delay30Ms
(0556)       			 	 SendManchester(); 
    0F548 D2F8      RCALL	_SendManchester
(0557) 				break;
    0F549 C0ED      RJMP	0xF637
(0558) 				
(0559) 				case 0xf8://PIC页写准备			     
(0560) 					 T_com=0x0f;
    0F54A E08F      LDI	R24,0xF
    0F54B 9380 0332 STS	T_com,R24
(0561) 					 SendUart0(0xf8,1);//块写FLASHE准备 		
    0F54D E021      LDI	R18,1
    0F54E EF08      LDI	R16,0xF8
    0F54F DC7E      RCALL	_SendUart0
(0562) 	  			     T_dat=0xe7;
    0F550 EE87      LDI	R24,0xE7
    0F551 E090      LDI	R25,0
    0F552 9390 0336 STS	T_dat+1,R25
    0F554 9380 0335 STS	T_dat,R24
(0563) 		 			 T_dat<<=8;
    0F556 011C      MOVW	R2,R24
    0F557 2C32      MOV	R3,R2
    0F558 2422      CLR	R2
    0F559 9230 0336 STS	T_dat+1,R3
    0F55B 9220 0335 STS	T_dat,R2
(0564) 		 			 T_dat|=Uart0RxData[0];//正常情况下应是0xf8  
    0F55D 9020 028D LDS	R2,Uart0RxData
    0F55F 2433      CLR	R3
    0F560 9040 0335 LDS	R4,T_dat
    0F562 9050 0336 LDS	R5,T_dat+1
    0F564 2842      OR	R4,R2
    0F565 2853      OR	R5,R3
    0F566 9250 0336 STS	T_dat+1,R5
    0F568 9240 0335 STS	T_dat,R4
(0565) 	  			     Delay30Ms();
    0F56A D661      RCALL	_Delay30Ms
(0566)       			     SendManchester(); 
    0F56B D2D5      RCALL	_SendManchester
(0567) 					 UpdateBegin=2;//页写准备，共64K字节程序空间
    0F56C E082      LDI	R24,2
    0F56D 9380 0317 STS	UpdateBegin,R24
(0568) 					 DataReCn=0;
    0F56F 2422      CLR	R2
    0F570 2433      CLR	R3
    0F571 9230 0316 STS	DataReCn+1,R3
    0F573 9220 0315 STS	DataReCn,R2
(0569) 				     SetTimer3();
    0F575 DCC3      RCALL	_SetTimer3
(0570) 				break;
    0F576 C0C0      RJMP	0xF637
(0571) 				/*
(0572) 				case 0xf7://PIC版本号
(0573) 					 T_com=0x0f;
(0574) 	  			 	 SendUart0(0xf7,1);  
(0575) 					 T_dat=0xe7;
(0576) 		 			 T_dat<<=8; 	
(0577) 					 T_dat|=Uart0RxData[0];//成功的话应返回0x00
(0578) 	  			 	 Delay30Ms();
(0579)       			 	 SendManchester(); 
(0580) 				break;
(0581) 					
(0582) 				case 0xf6://DSP版本号
(0583) 					 T_com=0x0f;
(0584) 	  			 	 SendUart0(0xf6,1);  
(0585) 					  T_dat=Uart0RxData[0];//成功的话应返回0xe7
(0586) 		 			 T_dat<<=8; 	
(0587) 					 T_dat|=Uart0RxData[1];//成功的话应返回0x00
(0588) 	  			 	 Delay30Ms();
(0589)       			 	 SendManchester(); 
(0590) 				break;
(0591) 				   */
(0592) 			   case 0xfa://主控板握手，进入更新状态
(0593) 	  			    // SendUart0(0xb5,1);
(0594) 					 T_com=0x0f;
    0F577 E08F      LDI	R24,0xF
    0F578 9380 0332 STS	T_com,R24
(0595) 	  			     T_dat=0xe7fa;//上位机实收到的数,不用高低换位				       
    0F57A EF8A      LDI	R24,0xFA
    0F57B EE97      LDI	R25,0xE7
    0F57C 9390 0336 STS	T_dat+1,R25
    0F57E 9380 0335 STS	T_dat,R24
(0596) 	  			     Delay30Ms();
    0F580 D64B      RCALL	_Delay30Ms
(0597)       			     SendManchester();  
    0F581 D2BF      RCALL	_SendManchester
(0598) 				break;
    0F582 C0B4      RJMP	0xF637
(0599) 				
(0600) 			   case 0xfb://DSP握手，进入更新状态
(0601) 					 T_com=0x0f;
    0F583 E08F      LDI	R24,0xF
    0F584 9380 0332 STS	T_com,R24
(0602) 	  			 	 SendUart0(0xb5,1);  
    0F586 E021      LDI	R18,1
    0F587 EB05      LDI	R16,0xB5
    0F588 DC45      RCALL	_SendUart0
(0603) 					 T_dat=Uart0RxData[0];//成功的话应返回0xe7fb
    0F589 9020 028D LDS	R2,Uart0RxData
    0F58B 2433      CLR	R3
    0F58C 9230 0336 STS	T_dat+1,R3
    0F58E 9220 0335 STS	T_dat,R2
(0604) 		 			 T_dat<<=8; 	
    0F590 9020 0335 LDS	R2,T_dat
    0F592 9030 0336 LDS	R3,T_dat+1
    0F594 2C32      MOV	R3,R2
    0F595 2422      CLR	R2
    0F596 9230 0336 STS	T_dat+1,R3
    0F598 9220 0335 STS	T_dat,R2
(0605) 					 T_dat|=Uart0RxData[1];
    0F59A 9020 028E LDS	R2,Uart0RxData+1
    0F59C 2433      CLR	R3
    0F59D 9040 0335 LDS	R4,T_dat
    0F59F 9050 0336 LDS	R5,T_dat+1
    0F5A1 2842      OR	R4,R2
    0F5A2 2853      OR	R5,R3
    0F5A3 9250 0336 STS	T_dat+1,R5
    0F5A5 9240 0335 STS	T_dat,R4
(0606) 	  			 	 Delay30Ms();
    0F5A7 D624      RCALL	_Delay30Ms
(0607)       			 	 SendManchester(); 
    0F5A8 D298      RCALL	_SendManchester
(0608) 				break;	
    0F5A9 C08D      RJMP	0xF637
(0609) 				 		   			
(0610) 				case 0xfc://主控板页写准备			     
(0611) 					 T_com=0x0f;
    0F5AA E08F      LDI	R24,0xF
    0F5AB 9380 0332 STS	T_com,R24
(0612) 	  			     T_dat=0xe7fc;//上位机实收到的数,不用高低换位
    0F5AD EF8C      LDI	R24,0xFC
    0F5AE EE97      LDI	R25,0xE7
    0F5AF 9390 0336 STS	T_dat+1,R25
    0F5B1 9380 0335 STS	T_dat,R24
(0613) 	  			     Delay30Ms();
    0F5B3 D618      RCALL	_Delay30Ms
(0614)       			     SendManchester(); 
    0F5B4 D28C      RCALL	_SendManchester
(0615) 					 UpdateBegin=1;//页写准备，主控板从页索引0开始烧写，最大页索引255，共64K字节程序空间
    0F5B5 E081      LDI	R24,1
    0F5B6 9380 0317 STS	UpdateBegin,R24
(0616) 					 DataReCn=0;
    0F5B8 2422      CLR	R2
    0F5B9 2433      CLR	R3
    0F5BA 9230 0316 STS	DataReCn+1,R3
    0F5BC 9220 0315 STS	DataReCn,R2
(0617) 				     SetTimer3();//开始计时，每500ms内至少要有一个字节收到
    0F5BE DC7A      RCALL	_SetTimer3
(0618) 				break;
    0F5BF C077      RJMP	0xF637
(0619) 											
(0620) 				case 0xfd://DSP页写准备			     
(0621) 					 T_com=0x0f;
    0F5C0 E08F      LDI	R24,0xF
    0F5C1 9380 0332 STS	T_com,R24
(0622) 					 SendUart0(0xb7,1);//块写FLASHE准备 		
    0F5C3 E021      LDI	R18,1
    0F5C4 EB07      LDI	R16,0xB7
    0F5C5 DC08      RCALL	_SendUart0
(0623) 	  			     T_dat=Uart0RxData[0];//高字节，正常情况下应是0xe7
    0F5C6 9020 028D LDS	R2,Uart0RxData
    0F5C8 2433      CLR	R3
    0F5C9 9230 0336 STS	T_dat+1,R3
    0F5CB 9220 0335 STS	T_dat,R2
(0624) 		 			 T_dat<<=8;
    0F5CD 9020 0335 LDS	R2,T_dat
    0F5CF 9030 0336 LDS	R3,T_dat+1
    0F5D1 2C32      MOV	R3,R2
    0F5D2 2422      CLR	R2
    0F5D3 9230 0336 STS	T_dat+1,R3
    0F5D5 9220 0335 STS	T_dat,R2
(0625) 		 			 T_dat|=Uart0RxData[1];//低字节,正常情况下应是0xfd   
    0F5D7 9020 028E LDS	R2,Uart0RxData+1
    0F5D9 2433      CLR	R3
    0F5DA 9040 0335 LDS	R4,T_dat
    0F5DC 9050 0336 LDS	R5,T_dat+1
    0F5DE 2842      OR	R4,R2
    0F5DF 2853      OR	R5,R3
    0F5E0 9250 0336 STS	T_dat+1,R5
    0F5E2 9240 0335 STS	T_dat,R4
(0626) 	  			     Delay30Ms();
    0F5E4 D5E7      RCALL	_Delay30Ms
(0627)       			     SendManchester(); 
    0F5E5 D25B      RCALL	_SendManchester
(0628) 					 UpdateBegin=2;//页写准备，采集板从页索引479开始往前烧写，最小页索引224，共64K字节程序空间
    0F5E6 E082      LDI	R24,2
    0F5E7 9380 0317 STS	UpdateBegin,R24
(0629) 					 DataReCn=0;
    0F5E9 2422      CLR	R2
    0F5EA 2433      CLR	R3
    0F5EB 9230 0316 STS	DataReCn+1,R3
    0F5ED 9220 0315 STS	DataReCn,R2
(0630) 				     SetTimer3();
    0F5EF DC49      RCALL	_SetTimer3
(0631) 				break;
    0F5F0 C046      RJMP	0xF637
(0632) 				
(0633) 				case 0xfe://DSP擦除，上位机设总超时6秒			     
(0634) 					  SendUart0(0xb6,0);//擦除FLASHE,2秒超时 ,擦除FLASHD,2秒超时 ，共5.5秒超时				 
    0F5F1 2722      CLR	R18
    0F5F2 EB06      LDI	R16,0xB6
    0F5F3 DBDA      RCALL	_SendUart0
(0635) 					  T_dat=Uart0RxData[0];//擦除成功的话应返回0xe7
    0F5F4 9020 028D LDS	R2,Uart0RxData
    0F5F6 2433      CLR	R3
    0F5F7 9230 0336 STS	T_dat+1,R3
    0F5F9 9220 0335 STS	T_dat,R2
(0636) 		 			  T_dat<<=8; 				  	 
    0F5FB 9020 0335 LDS	R2,T_dat
    0F5FD 9030 0336 LDS	R3,T_dat+1
    0F5FF 2C32      MOV	R3,R2
    0F600 2422      CLR	R2
    0F601 9230 0336 STS	T_dat+1,R3
    0F603 9220 0335 STS	T_dat,R2
(0637) 		 			  T_dat|=Uart0RxData[1];//擦除成功的话应返回0xfe				   
    0F605 9020 028E LDS	R2,Uart0RxData+1
    0F607 2433      CLR	R3
    0F608 9040 0335 LDS	R4,T_dat
    0F60A 9050 0336 LDS	R5,T_dat+1
    0F60C 2842      OR	R4,R2
    0F60D 2853      OR	R5,R3
    0F60E 9250 0336 STS	T_dat+1,R5
    0F610 9240 0335 STS	T_dat,R4
(0638) 					  T_com=0x0f;
    0F612 E08F      LDI	R24,0xF
    0F613 9380 0332 STS	T_com,R24
(0639)       			 	  SendManchester();	//上传擦除结果				 					
    0F615 D22B      RCALL	_SendManchester
(0640) 				break;	
    0F616 C020      RJMP	0xF637
(0641) 				
(0642) 				case 0xff://退出更新状态，运行正常程序
(0643) 				 SendUart0(0xb8,1);
    0F617 E021      LDI	R18,1
    0F618 EB08      LDI	R16,0xB8
    0F619 DBB4      RCALL	_SendUart0
(0644) 				 T_dat=Uart0RxData[0];//成功的话应返回0xe7
    0F61A 9020 028D LDS	R2,Uart0RxData
    0F61C 2433      CLR	R3
    0F61D 9230 0336 STS	T_dat+1,R3
    0F61F 9220 0335 STS	T_dat,R2
(0645) 		 		 T_dat<<=8; 
    0F621 9020 0335 LDS	R2,T_dat
    0F623 9030 0336 LDS	R3,T_dat+1
    0F625 2C32      MOV	R3,R2
    0F626 2422      CLR	R2
    0F627 9230 0336 STS	T_dat+1,R3
    0F629 9220 0335 STS	T_dat,R2
(0646) 				 T_dat|=0xff;
    0F62B 01C1      MOVW	R24,R2
    0F62C 6F8F      ORI	R24,0xFF
    0F62D 9390 0336 STS	T_dat+1,R25
    0F62F 9380 0335 STS	T_dat,R24
(0647) 				 T_com=0x0f;
    0F631 E08F      LDI	R24,0xF
    0F632 9380 0332 STS	T_com,R24
(0648) 				 Delay30Ms();
    0F634 D597      RCALL	_Delay30Ms
(0649) 				 SendManchester();	//上传擦除结果		
    0F635 D20B      RCALL	_SendManchester
(0650) 				 quit();
    0F636 DAF3      RCALL	_quit
(0651) 				break;
(0652) 
(0653) 				default:
(0654) 				break;
(0655) 	  	    }//switch(R_dat&0xf0)
(0656) 	     }//UpdateBegin
(0657) 		 IntFlag=0;
    0F637 2422      CLR	R2
    0F638 9220 031A STS	IntFlag,R2
(0658)     	 MANINT_CLR
    0F63A B788      IN	R24,0x38
    0F63B 6081      ORI	R24,1
    0F63C BF88      OUT	0x38,R24
(0659) 	     MANINT_EN
    0F63D B789      IN	R24,0x39
    0F63E 6081      ORI	R24,1
    0F63F BF89      OUT	0x39,R24
    0F640 CD44      RJMP	0xF385
    0F641 9508      RET
_int0_isr:
    0F642 922A      ST	-Y,R2
    0F643 923A      ST	-Y,R3
    0F644 938A      ST	-Y,R24
    0F645 939A      ST	-Y,R25
    0F646 93AA      ST	-Y,R26
    0F647 93EA      ST	-Y,R30
    0F648 93FA      ST	-Y,R31
    0F649 B62F      IN	R2,0x3F
    0F64A 922A      ST	-Y,R2
(0660) 	 }//IntFlag
(0661)     }//while(1)
(0662)  
(0663) }
(0664) 
(0665) 
(0666) #pragma interrupt_handler int0_isr:iv_INT0
(0667) void int0_isr(void)//外部中断0
(0668) { 
(0669)    TCCR2 = 0x00; //stop
    0F64B 2422      CLR	R2
    0F64C BC25      OUT	0x25,R2
(0670) 	INT_DIS
    0F64D 94F8      BCLR	7
(0671) 	MANINT_DIS
    0F64E B789      IN	R24,0x39
    0F64F 7F8E      ANDI	R24,0xFE
    0F650 BF89      OUT	0x39,R24
(0672)   
(0673)   DELAY10
    0F651 2433      CLR	R3
    0F652 9230 0319 STS	Tt+1,R3
    0F654 9220 0318 STS	Tt,R2
    0F656 C009      RJMP	0xF660
    0F657 9180 0318 LDS	R24,Tt
    0F659 9190 0319 LDS	R25,Tt+1
    0F65B 9601      ADIW	R24,1
    0F65C 9390 0319 STS	Tt+1,R25
    0F65E 9380 0318 STS	Tt,R24
    0F660 9180 0318 LDS	R24,Tt
    0F662 9190 0319 LDS	R25,Tt+1
    0F664 3084      CPI	R24,4
    0F665 E0E0      LDI	R30,0
    0F666 079E      CPC	R25,R30
    0F667 F378      BCS	0xF657
(0674)   MANINT_CLR
    0F668 B788      IN	R24,0x38
    0F669 6081      ORI	R24,1
    0F66A BF88      OUT	0x38,R24
(0675)   IF_MANINTL//高脉冲不足10us则直接跳出
    0F66B 9980      SBIC	0x10,0
    0F66C C001      RJMP	0xF66E
(0676)   {
(0677)    goto End;
    0F66D C1C0      RJMP	0xF82E
(0678)   }
(0679)    
(0680)    TCNT2 = 0x00;  
    0F66E 2422      CLR	R2
    0F66F BC24      OUT	0x24,R2
(0681)    TCCR2 = 0x03; //64分频,8M时钟，每个CLOCK耗时8us，最大定时2048us，每周期10个计数
    0F670 E083      LDI	R24,3
    0F671 BD85      OUT	0x25,R24
    0F672 C029      RJMP	0xF69C
(0682)    
(0683)    while(1)
(0684)    {
(0685)      T2cn=TCNT2;
    0F673 B424      IN	R2,0x24
    0F674 2433      CLR	R3
    0F675 9230 0105 STS	T2cn+1,R3
    0F677 9220 0104 STS	T2cn,R2
(0686) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    0F679 E580      LDI	R24,0x50
    0F67A E090      LDI	R25,0
    0F67B 1582      CP	R24,R2
    0F67C 0593      CPC	R25,R3
    0F67D F408      BCC	0xF67F
(0687) 	  {
(0688) 	    goto End;
    0F67E C1AF      RJMP	0xF82E
(0689) 	  }
(0690)      IF_MANINTL
    0F67F 9980      SBIC	0x10,0
    0F680 C01B      RJMP	0xF69C
(0691) 	 {
(0692) 	   DELAY20
    0F681 2422      CLR	R2
    0F682 2433      CLR	R3
    0F683 9230 0319 STS	Tt+1,R3
    0F685 9220 0318 STS	Tt,R2
    0F687 C009      RJMP	0xF691
    0F688 9180 0318 LDS	R24,Tt
    0F68A 9190 0319 LDS	R25,Tt+1
    0F68C 9601      ADIW	R24,1
    0F68D 9390 0319 STS	Tt+1,R25
    0F68F 9380 0318 STS	Tt,R24
    0F691 9180 0318 LDS	R24,Tt
    0F693 9190 0319 LDS	R25,Tt+1
    0F695 3084      CPI	R24,4
    0F696 E0E0      LDI	R30,0
    0F697 079E      CPC	R25,R30
    0F698 F378      BCS	0xF688
(0693) 	   IF_MANINTL
    0F699 9980      SBIC	0x10,0
    0F69A C001      RJMP	0xF69C
(0694) 	    {
(0695) 	      break;
    0F69B C031      RJMP	0xF6CD
    0F69C CFD6      RJMP	0xF673
(0696) 	    }
(0697) 	 }
(0698)    }
(0699)    
(0700)   		   
(0701)     //开始判断同步头	
(0702) 	while(1)//还没有上升沿到来,死等
(0703) 	{
(0704) 	  T2cn=TCNT2;
    0F69D B424      IN	R2,0x24
    0F69E 2433      CLR	R3
    0F69F 9230 0105 STS	T2cn+1,R3
    0F6A1 9220 0104 STS	T2cn,R2
(0705) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    0F6A3 E580      LDI	R24,0x50
    0F6A4 E090      LDI	R25,0
    0F6A5 1582      CP	R24,R2
    0F6A6 0593      CPC	R25,R3
    0F6A7 F408      BCC	0xF6A9
(0706) 	  {
(0707) 	    goto End;
    0F6A8 C185      RJMP	0xF82E
(0708) 	  }
(0709) 	  IF_MANINTF
    0F6A9 B788      IN	R24,0x38
    0F6AA 7081      ANDI	R24,1
    0F6AB 3081      CPI	R24,1
    0F6AC F501      BNE	0xF6CD
(0710) 	  {
(0711) 	   DELAY10
    0F6AD 2422      CLR	R2
    0F6AE 2433      CLR	R3
    0F6AF 9230 0319 STS	Tt+1,R3
    0F6B1 9220 0318 STS	Tt,R2
    0F6B3 C009      RJMP	0xF6BD
    0F6B4 9180 0318 LDS	R24,Tt
    0F6B6 9190 0319 LDS	R25,Tt+1
    0F6B8 9601      ADIW	R24,1
    0F6B9 9390 0319 STS	Tt+1,R25
    0F6BB 9380 0318 STS	Tt,R24
    0F6BD 9180 0318 LDS	R24,Tt
    0F6BF 9190 0319 LDS	R25,Tt+1
    0F6C1 3084      CPI	R24,4
    0F6C2 E0E0      LDI	R30,0
    0F6C3 079E      CPC	R25,R30
    0F6C4 F378      BCS	0xF6B4
(0712) 	   MANINT_CLR
    0F6C5 B788      IN	R24,0x38
    0F6C6 6081      ORI	R24,1
    0F6C7 BF88      OUT	0x38,R24
(0713) 	   IF_MANINTH//高脉冲维持了10us，则认为是下一个有效上升沿到来
    0F6C8 B380      IN	R24,0x10
    0F6C9 7081      ANDI	R24,1
    0F6CA 3081      CPI	R24,1
    0F6CB F409      BNE	0xF6CD
(0714) 	     {
(0715)    	     break;
    0F6CC C001      RJMP	0xF6CE
    0F6CD CFCF      RJMP	0xF69D
(0716) 		 }
(0717) 	  }  
(0718) 	}
(0719) 	T2cn=TCNT2;
    0F6CE B424      IN	R2,0x24
    0F6CF 2433      CLR	R3
    0F6D0 9230 0105 STS	T2cn+1,R3
    0F6D2 9220 0104 STS	T2cn,R2
(0720) 	TCNT2=0;
    0F6D4 2422      CLR	R2
    0F6D5 BC24      OUT	0x24,R2
(0721) 	if((T2cn<60)||(T2cn>80))//同步头本应是7个周期，但收到的结果为6~8个周期内都认可
    0F6D6 9020 0104 LDS	R2,T2cn
    0F6D8 9030 0105 LDS	R3,T2cn+1
    0F6DA 01C1      MOVW	R24,R2
    0F6DB 338C      CPI	R24,0x3C
    0F6DC E0E0      LDI	R30,0
    0F6DD 079E      CPC	R25,R30
    0F6DE F028      BCS	0xF6E4
    0F6DF E580      LDI	R24,0x50
    0F6E0 E090      LDI	R25,0
    0F6E1 1582      CP	R24,R2
    0F6E2 0593      CPC	R25,R3
    0F6E3 F408      BCC	0xF6E5
(0722) 	{
(0723) 	 goto End;//没有收到正确的同步头，直接跳出
    0F6E4 C149      RJMP	0xF82E
(0724) 	}
(0725)  
(0726) Start:	//同步头解码正确，下面开始接收9位数据位	//按位从高到低接收数据位，8位数据加1位校验共9位 		      	
(0727)   for(Int_count=9;Int_count>0;Int_count--)
    0F6E5 E089      LDI	R24,0x9
    0F6E6 9380 031B STS	Int_count,R24
    0F6E8 C0A6      RJMP	0xF78F
(0728)   {	
(0729)    while(1)
(0730)    {
(0731)      T2cn=TCNT2;
    0F6E9 B424      IN	R2,0x24
    0F6EA 2433      CLR	R3
    0F6EB 9230 0105 STS	T2cn+1,R3
    0F6ED 9220 0104 STS	T2cn,R2
(0732) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    0F6EF E580      LDI	R24,0x50
    0F6F0 E090      LDI	R25,0
    0F6F1 1582      CP	R24,R2
    0F6F2 0593      CPC	R25,R3
    0F6F3 F408      BCC	0xF6F5
(0733) 	  {
(0734) 	    goto End;
    0F6F4 C139      RJMP	0xF82E
(0735) 	  }
(0736)      IF_MANINTL
    0F6F5 9980      SBIC	0x10,0
    0F6F6 C01B      RJMP	0xF712
(0737) 	 {
(0738) 	   DELAY20
    0F6F7 2422      CLR	R2
    0F6F8 2433      CLR	R3
    0F6F9 9230 0319 STS	Tt+1,R3
    0F6FB 9220 0318 STS	Tt,R2
    0F6FD C009      RJMP	0xF707
    0F6FE 9180 0318 LDS	R24,Tt
    0F700 9190 0319 LDS	R25,Tt+1
    0F702 9601      ADIW	R24,1
    0F703 9390 0319 STS	Tt+1,R25
    0F705 9380 0318 STS	Tt,R24
    0F707 9180 0318 LDS	R24,Tt
    0F709 9190 0319 LDS	R25,Tt+1
    0F70B 3084      CPI	R24,4
    0F70C E0E0      LDI	R30,0
    0F70D 079E      CPC	R25,R30
    0F70E F378      BCS	0xF6FE
(0739) 	   IF_MANINTL
    0F70F 9980      SBIC	0x10,0
    0F710 C001      RJMP	0xF712
(0740) 	    {
(0741) 	      break;
    0F711 C031      RJMP	0xF743
    0F712 CFD6      RJMP	0xF6E9
(0742) 	    }
(0743) 	 }
(0744)    } 
(0745)    while(1)//还没有上升沿到来,死等
(0746) 	{
(0747) 	  T2cn=TCNT2;
    0F713 B424      IN	R2,0x24
    0F714 2433      CLR	R3
    0F715 9230 0105 STS	T2cn+1,R3
    0F717 9220 0104 STS	T2cn,R2
(0748) 	  if(T2cn>80)//设计值最多7个周期，在此多给一个周期，则超过8个周期还没来上升沿中断到来就直接跳出
    0F719 E580      LDI	R24,0x50
    0F71A E090      LDI	R25,0
    0F71B 1582      CP	R24,R2
    0F71C 0593      CPC	R25,R3
    0F71D F408      BCC	0xF71F
(0749) 	  {
(0750) 	    goto End;
    0F71E C10F      RJMP	0xF82E
(0751) 	  }
(0752) 	  IF_MANINTF
    0F71F B788      IN	R24,0x38
    0F720 7081      ANDI	R24,1
    0F721 3081      CPI	R24,1
    0F722 F501      BNE	0xF743
(0753) 	  {
(0754) 	   DELAY10
    0F723 2422      CLR	R2
    0F724 2433      CLR	R3
    0F725 9230 0319 STS	Tt+1,R3
    0F727 9220 0318 STS	Tt,R2
    0F729 C009      RJMP	0xF733
    0F72A 9180 0318 LDS	R24,Tt
    0F72C 9190 0319 LDS	R25,Tt+1
    0F72E 9601      ADIW	R24,1
    0F72F 9390 0319 STS	Tt+1,R25
    0F731 9380 0318 STS	Tt,R24
    0F733 9180 0318 LDS	R24,Tt
    0F735 9190 0319 LDS	R25,Tt+1
    0F737 3084      CPI	R24,4
    0F738 E0E0      LDI	R30,0
    0F739 079E      CPC	R25,R30
    0F73A F378      BCS	0xF72A
(0755) 	   MANINT_CLR
    0F73B B788      IN	R24,0x38
    0F73C 6081      ORI	R24,1
    0F73D BF88      OUT	0x38,R24
(0756) 	   IF_MANINTH//高脉冲维持了10us，则认为是下一个有效上升沿到来
    0F73E B380      IN	R24,0x10
    0F73F 7081      ANDI	R24,1
    0F740 3081      CPI	R24,1
    0F741 F409      BNE	0xF743
(0757) 	     {
(0758)    	     break;
    0F742 C001      RJMP	0xF744
    0F743 CFCF      RJMP	0xF713
(0759) 		 }
(0760) 	  }  
(0761) 	}
(0762) 	T2cn=TCNT2;
    0F744 B424      IN	R2,0x24
    0F745 2433      CLR	R3
    0F746 9230 0105 STS	T2cn+1,R3
    0F748 9220 0104 STS	T2cn,R2
(0763) 	TCNT2=0;
    0F74A 2422      CLR	R2
    0F74B BC24      OUT	0x24,R2
(0764) 	if(T2cn<20)//数据位最小是3位，可放宽到2位
    0F74C 9180 0104 LDS	R24,T2cn
    0F74E 9190 0105 LDS	R25,T2cn+1
    0F750 3184      CPI	R24,0x14
    0F751 E0E0      LDI	R30,0
    0F752 079E      CPC	R25,R30
    0F753 F420      BCC	0xF758
(0765) 	{
(0766) 	 IntFlag=3;//接收数据位不完整
    0F754 E083      LDI	R24,3
    0F755 9380 031A STS	IntFlag,R24
(0767) 	 goto End;//数据位来得太早，退出
    0F757 C0D6      RJMP	0xF82E
(0768) 	}
(0769) 	else if(T2cn<40)//数据位1本应是3个周期，在此我们认为2~4个周期都是可以的
    0F758 9180 0104 LDS	R24,T2cn
    0F75A 9190 0105 LDS	R25,T2cn+1
    0F75C 3288      CPI	R24,0x28
    0F75D E0E0      LDI	R30,0
    0F75E 079E      CPC	R25,R30
    0F75F F450      BCC	0xF76A
(0770) 	{
(0771) 	 Rx[Int_count]=1;
    0F760 E387      LDI	R24,0x37
    0F761 E093      LDI	R25,3
    0F762 91E0 031B LDS	R30,Int_count
    0F764 27FF      CLR	R31
    0F765 0FE8      ADD	R30,R24
    0F766 1FF9      ADC	R31,R25
    0F767 E081      LDI	R24,1
    0F768 8380      ST	Z,R24
(0772) 	}
    0F769 C020      RJMP	0xF78A
(0773) 	else if(T2cn<60)//数据位0本应是5个周期，在此我们认为4~6个周期都是可以的
    0F76A 9180 0104 LDS	R24,T2cn
    0F76C 9190 0105 LDS	R25,T2cn+1
    0F76E 338C      CPI	R24,0x3C
    0F76F E0E0      LDI	R30,0
    0F770 079E      CPC	R25,R30
    0F771 F450      BCC	0xF77C
(0774) 	{
(0775) 	 Rx[Int_count]=0;
    0F772 E387      LDI	R24,0x37
    0F773 E093      LDI	R25,3
    0F774 91E0 031B LDS	R30,Int_count
    0F776 27FF      CLR	R31
    0F777 0FE8      ADD	R30,R24
    0F778 1FF9      ADC	R31,R25
    0F779 2422      CLR	R2
    0F77A 8220      ST	Z,R2
(0776) 	}
    0F77B C00E      RJMP	0xF78A
(0777) 	else if(T2cn<=80)//同步位本应是7周期，在此我们认为6~8周期都是可以的
    0F77C E580      LDI	R24,0x50
    0F77D E090      LDI	R25,0
    0F77E 9020 0104 LDS	R2,T2cn
    0F780 9030 0105 LDS	R3,T2cn+1
    0F782 1582      CP	R24,R2
    0F783 0593      CPC	R25,R3
    0F784 F008      BCS	0xF786
(0778) 	{
(0779) 	 goto Start;//在接收数据位时收到了同步位，跳到数据位解码起始位处
    0F785 CF5F      RJMP	0xF6E5
(0780) 	}
(0781) 	else 
(0782) 	{
(0783) 	 IntFlag=3;//接收数据位不完整
    0F786 E083      LDI	R24,3
    0F787 9380 031A STS	IntFlag,R24
(0784) 	 goto End;//数据位来得太迟，退出
    0F789 C0A4      RJMP	0xF82E
    0F78A 9180 031B LDS	R24,Int_count
    0F78C 5081      SUBI	R24,1
    0F78D 9380 031B STS	Int_count,R24
    0F78F E080      LDI	R24,0
    0F790 9020 031B LDS	R2,Int_count
    0F792 1582      CP	R24,R2
    0F793 F408      BCC	0xF795
    0F794 CF7D      RJMP	0xF712
(0785) 	}
(0786)   }   
(0787) 	
(0788)     R_dat=0;
    0F795 2422      CLR	R2
    0F796 2433      CLR	R3
    0F797 9230 0334 STS	R_dat+1,R3
    0F799 9220 0333 STS	R_dat,R2
(0789)     if(Rx[2])
    0F79B 9020 0339 LDS	R2,Rx+2
    0F79D 2022      TST	R2
    0F79E F049      BEQ	0xF7A8
(0790)           R_dat|=0x01;
    0F79F 9180 0333 LDS	R24,R_dat
    0F7A1 9190 0334 LDS	R25,R_dat+1
    0F7A3 6081      ORI	R24,1
    0F7A4 9390 0334 STS	R_dat+1,R25
    0F7A6 9380 0333 STS	R_dat,R24
(0791)     if(Rx[3])
    0F7A8 9020 033A LDS	R2,Rx+3
    0F7AA 2022      TST	R2
    0F7AB F049      BEQ	0xF7B5
(0792)           R_dat|=0x02;
    0F7AC 9180 0333 LDS	R24,R_dat
    0F7AE 9190 0334 LDS	R25,R_dat+1
    0F7B0 6082      ORI	R24,2
    0F7B1 9390 0334 STS	R_dat+1,R25
    0F7B3 9380 0333 STS	R_dat,R24
(0793)     if(Rx[4])
    0F7B5 9020 033B LDS	R2,Rx+4
    0F7B7 2022      TST	R2
    0F7B8 F049      BEQ	0xF7C2
(0794)           R_dat|=0x04;
    0F7B9 9180 0333 LDS	R24,R_dat
    0F7BB 9190 0334 LDS	R25,R_dat+1
    0F7BD 6084      ORI	R24,4
    0F7BE 9390 0334 STS	R_dat+1,R25
    0F7C0 9380 0333 STS	R_dat,R24
(0795)     if(Rx[5])
    0F7C2 9020 033C LDS	R2,Rx+5
    0F7C4 2022      TST	R2
    0F7C5 F049      BEQ	0xF7CF
(0796)           R_dat|=0x08;
    0F7C6 9180 0333 LDS	R24,R_dat
    0F7C8 9190 0334 LDS	R25,R_dat+1
    0F7CA 6088      ORI	R24,0x8
    0F7CB 9390 0334 STS	R_dat+1,R25
    0F7CD 9380 0333 STS	R_dat,R24
(0797)     if(Rx[6])
    0F7CF 9020 033D LDS	R2,Rx+6
    0F7D1 2022      TST	R2
    0F7D2 F049      BEQ	0xF7DC
(0798)           R_dat|=0x10;
    0F7D3 9180 0333 LDS	R24,R_dat
    0F7D5 9190 0334 LDS	R25,R_dat+1
    0F7D7 6180      ORI	R24,0x10
    0F7D8 9390 0334 STS	R_dat+1,R25
    0F7DA 9380 0333 STS	R_dat,R24
(0799)     if(Rx[7])
    0F7DC 9020 033E LDS	R2,Rx+7
    0F7DE 2022      TST	R2
    0F7DF F049      BEQ	0xF7E9
(0800)           R_dat|=0x20;
    0F7E0 9180 0333 LDS	R24,R_dat
    0F7E2 9190 0334 LDS	R25,R_dat+1
    0F7E4 6280      ORI	R24,0x20
    0F7E5 9390 0334 STS	R_dat+1,R25
    0F7E7 9380 0333 STS	R_dat,R24
(0801)     if(Rx[8])
    0F7E9 9020 033F LDS	R2,Rx+8
    0F7EB 2022      TST	R2
    0F7EC F049      BEQ	0xF7F6
(0802)           R_dat|=0x40;
    0F7ED 9180 0333 LDS	R24,R_dat
    0F7EF 9190 0334 LDS	R25,R_dat+1
    0F7F1 6480      ORI	R24,0x40
    0F7F2 9390 0334 STS	R_dat+1,R25
    0F7F4 9380 0333 STS	R_dat,R24
(0803)     if(Rx[9])
    0F7F6 9020 0340 LDS	R2,Rx+9
    0F7F8 2022      TST	R2
    0F7F9 F049      BEQ	0xF803
(0804)           R_dat|=0x80;
    0F7FA 9180 0333 LDS	R24,R_dat
    0F7FC 9190 0334 LDS	R25,R_dat+1
    0F7FE 6880      ORI	R24,0x80
    0F7FF 9390 0334 STS	R_dat+1,R25
    0F801 9380 0333 STS	R_dat,R24
(0805) 	
(0806) 	Rx[0]=1;  
    0F803 E081      LDI	R24,1
    0F804 9380 0337 STS	Rx,R24
(0807) 	for(Int_count=2;Int_count<10;Int_count++)  
    0F806 E082      LDI	R24,2
    0F807 9380 031B STS	Int_count,R24
    0F809 C012      RJMP	0xF81C
(0808)        Rx[0]^=Rx[Int_count];  
    0F80A E387      LDI	R24,0x37
    0F80B E093      LDI	R25,3
    0F80C 91E0 031B LDS	R30,Int_count
    0F80E 27FF      CLR	R31
    0F80F 0FE8      ADD	R30,R24
    0F810 1FF9      ADC	R31,R25
    0F811 8020      LD	R2,Z
    0F812 9030 0337 LDS	R3,Rx
    0F814 2432      EOR	R3,R2
    0F815 9230 0337 STS	Rx,R3
    0F817 9180 031B LDS	R24,Int_count
    0F819 5F8F      SUBI	R24,0xFF
    0F81A 9380 031B STS	Int_count,R24
    0F81C 9180 031B LDS	R24,Int_count
    0F81E 308A      CPI	R24,0xA
    0F81F F350      BCS	0xF80A
(0809) 	   
(0810) 	if(Rx[0]==Rx[1])
    0F820 9020 0338 LDS	R2,Rx+1
    0F822 9030 0337 LDS	R3,Rx
    0F824 1432      CP	R3,R2
    0F825 F421      BNE	0xF82A
(0811) 	 {
(0812) 		 IntFlag=1;//接收帧正常	
    0F826 E081      LDI	R24,1
    0F827 9380 031A STS	IntFlag,R24
(0813) 	 }
    0F829 C00A      RJMP	0xF834
(0814) 	else           
(0815) 	 {
(0816) 		 IntFlag=2;//接收帧校验错
    0F82A E082      LDI	R24,2
    0F82B 9380 031A STS	IntFlag,R24
(0817) 	 }
(0818)  
(0819)    goto End1;//只要接收到正常的同步头，不管校验位是对是错，都暂时不开放INT0中断
    0F82D C006      RJMP	0xF834
(0820)      
(0821) End:
(0822) 		MANINT_CLR
    0F82E B788      IN	R24,0x38
    0F82F 6081      ORI	R24,1
    0F830 BF88      OUT	0x38,R24
(0823) 		MANINT_EN
    0F831 B789      IN	R24,0x39
    0F832 6081      ORI	R24,1
    0F833 BF89      OUT	0x39,R24
(0824) 		
(0825) End1:
(0826)    TCCR2 = 0x00; //stop
    0F834 2422      CLR	R2
    0F835 BC25      OUT	0x25,R2
(0827)    INT_EN//总中断使能;  
    0F836 9478      BSET	7
    0F837 9029      LD	R2,Y+
    0F838 BE2F      OUT	0x3F,R2
    0F839 91F9      LD	R31,Y+
    0F83A 91E9      LD	R30,Y+
    0F83B 91A9      LD	R26,Y+
    0F83C 9199      LD	R25,Y+
    0F83D 9189      LD	R24,Y+
    0F83E 9039      LD	R3,Y+
    0F83F 9029      LD	R2,Y+
    0F840 9518      RETI
_SendManchester:
  L                    --> R20
    0F841 934A      ST	-Y,R20
(0828) }
(0829) 
(0830)  
(0831) void SendManchester(void) //曼码发送程序,总耗时最大约120+560+8400+720=9800us，最小约120+560+5040+720=6440us
(0832) { //每位80us
(0833)  //同步：1高6低
(0834)  //1:    1高2低
(0835)  //0：   1高4低  
(0836)   unsigned char L;
(0837)   SREG&=0x7f;//关总中断 
    0F842 B78F      IN	R24,0x3F
    0F843 778F      ANDI	R24,0x7F
    0F844 BF8F      OUT	0x3F,R24
(0838)   
(0839)     M1_H //先给总线放电，耗时约120us
    0F845 9180 0065 LDS	R24,0x65
    0F847 6088      ORI	R24,0x8
    0F848 9380 0065 STS	0x65,R24
(0840) 	
(0841)   //模拟同步头数据
(0842) 	//4位命令
(0843) 	T_dat_buf[21]=(T_com&0x08)>>3;
    0F84A 9180 0332 LDS	R24,T_com
    0F84C 7088      ANDI	R24,0x8
    0F84D 9586      LSR	R24
    0F84E 9586      LSR	R24
    0F84F 9586      LSR	R24
    0F850 9380 0331 STS	T_dat_buf+21,R24
(0844) 	T_dat_buf[20]=(T_com&0x04)>>2;
    0F852 9180 0332 LDS	R24,T_com
    0F854 7084      ANDI	R24,4
    0F855 9586      LSR	R24
    0F856 9586      LSR	R24
    0F857 9380 0330 STS	T_dat_buf+20,R24
(0845) 	T_dat_buf[19]=(T_com&0x02)>>1;
    0F859 9180 0332 LDS	R24,T_com
    0F85B 7082      ANDI	R24,2
    0F85C 9586      LSR	R24
    0F85D 9380 032F STS	T_dat_buf+19,R24
(0846) 	T_dat_buf[18]=T_com&0x01;
    0F85F 9180 0332 LDS	R24,T_com
    0F861 7081      ANDI	R24,1
    0F862 9380 032E STS	T_dat_buf+18,R24
(0847) 	//16位数据
(0848) 	T_dat_buf[17]=(T_dat&0x8000)>>15;
    0F864 E02F      LDI	R18,0xF
    0F865 E030      LDI	R19,0
    0F866 9100 0335 LDS	R16,T_dat
    0F868 9110 0336 LDS	R17,T_dat+1
    0F86A 7000      ANDI	R16,0
    0F86B 7810      ANDI	R17,0x80
    0F86C 940E FC64 CALL	lsr16
    0F86E 9300 032D STS	T_dat_buf+17,R16
(0849) 	T_dat_buf[16]=(T_dat&0x4000)>>14;
    0F870 E02E      LDI	R18,0xE
    0F871 E030      LDI	R19,0
    0F872 9100 0335 LDS	R16,T_dat
    0F874 9110 0336 LDS	R17,T_dat+1
    0F876 7000      ANDI	R16,0
    0F877 7410      ANDI	R17,0x40
    0F878 940E FC64 CALL	lsr16
    0F87A 9300 032C STS	T_dat_buf+16,R16
(0850) 	T_dat_buf[15]=(T_dat&0x2000)>>13;
    0F87C E02D      LDI	R18,0xD
    0F87D E030      LDI	R19,0
    0F87E 9100 0335 LDS	R16,T_dat
    0F880 9110 0336 LDS	R17,T_dat+1
    0F882 7000      ANDI	R16,0
    0F883 7210      ANDI	R17,0x20
    0F884 940E FC64 CALL	lsr16
    0F886 9300 032B STS	T_dat_buf+15,R16
(0851) 	T_dat_buf[14]=(T_dat&0x1000)>>12;
    0F888 E02C      LDI	R18,0xC
    0F889 E030      LDI	R19,0
    0F88A 9100 0335 LDS	R16,T_dat
    0F88C 9110 0336 LDS	R17,T_dat+1
    0F88E 7000      ANDI	R16,0
    0F88F 7110      ANDI	R17,0x10
    0F890 940E FC64 CALL	lsr16
    0F892 9300 032A STS	T_dat_buf+14,R16
(0852) 	T_dat_buf[13]=(T_dat&0x0800)>>11;
    0F894 E02B      LDI	R18,0xB
    0F895 E030      LDI	R19,0
    0F896 9100 0335 LDS	R16,T_dat
    0F898 9110 0336 LDS	R17,T_dat+1
    0F89A 7000      ANDI	R16,0
    0F89B 7018      ANDI	R17,0x8
    0F89C 940E FC64 CALL	lsr16
    0F89E 9300 0329 STS	T_dat_buf+13,R16
(0853)     T_dat_buf[12]=(T_dat&0x0400)>>10;
    0F8A0 E02A      LDI	R18,0xA
    0F8A1 E030      LDI	R19,0
    0F8A2 9100 0335 LDS	R16,T_dat
    0F8A4 9110 0336 LDS	R17,T_dat+1
    0F8A6 7000      ANDI	R16,0
    0F8A7 7014      ANDI	R17,4
    0F8A8 940E FC64 CALL	lsr16
    0F8AA 9300 0328 STS	T_dat_buf+12,R16
(0854)     T_dat_buf[11]=(T_dat&0x0200)>>9;
    0F8AC E029      LDI	R18,0x9
    0F8AD E030      LDI	R19,0
    0F8AE 9100 0335 LDS	R16,T_dat
    0F8B0 9110 0336 LDS	R17,T_dat+1
    0F8B2 7000      ANDI	R16,0
    0F8B3 7012      ANDI	R17,2
    0F8B4 940E FC64 CALL	lsr16
    0F8B6 9300 0327 STS	T_dat_buf+11,R16
(0855) 	T_dat_buf[10]=(T_dat&0x0100)>>8;
    0F8B8 9180 0335 LDS	R24,T_dat
    0F8BA 9190 0336 LDS	R25,T_dat+1
    0F8BC 7080      ANDI	R24,0
    0F8BD 7091      ANDI	R25,1
    0F8BE 011C      MOVW	R2,R24
    0F8BF 2C23      MOV	R2,R3
    0F8C0 2433      CLR	R3
    0F8C1 9220 0326 STS	T_dat_buf+10,R2
(0856) 	T_dat_buf[9]=(T_dat&0x0080)>>7;
    0F8C3 E027      LDI	R18,7
    0F8C4 E030      LDI	R19,0
    0F8C5 9100 0335 LDS	R16,T_dat
    0F8C7 9110 0336 LDS	R17,T_dat+1
    0F8C9 7800      ANDI	R16,0x80
    0F8CA 7010      ANDI	R17,0
    0F8CB 940E FC64 CALL	lsr16
    0F8CD 9300 0325 STS	T_dat_buf+9,R16
(0857) 	T_dat_buf[8]=(T_dat&0x0040)>>6;
    0F8CF E026      LDI	R18,6
    0F8D0 E030      LDI	R19,0
    0F8D1 9100 0335 LDS	R16,T_dat
    0F8D3 9110 0336 LDS	R17,T_dat+1
    0F8D5 7400      ANDI	R16,0x40
    0F8D6 7010      ANDI	R17,0
    0F8D7 940E FC64 CALL	lsr16
    0F8D9 9300 0324 STS	T_dat_buf+8,R16
(0858) 	T_dat_buf[7]=(T_dat&0x0020)>>5;
    0F8DB E025      LDI	R18,5
    0F8DC E030      LDI	R19,0
    0F8DD 9100 0335 LDS	R16,T_dat
    0F8DF 9110 0336 LDS	R17,T_dat+1
    0F8E1 7200      ANDI	R16,0x20
    0F8E2 7010      ANDI	R17,0
    0F8E3 940E FC64 CALL	lsr16
    0F8E5 9300 0323 STS	T_dat_buf+7,R16
(0859) 	T_dat_buf[6]=(T_dat&0x0010)>>4;
    0F8E7 9180 0335 LDS	R24,T_dat
    0F8E9 9190 0336 LDS	R25,T_dat+1
    0F8EB 7180      ANDI	R24,0x10
    0F8EC 7090      ANDI	R25,0
    0F8ED 011C      MOVW	R2,R24
    0F8EE 9436      LSR	R3
    0F8EF 9427      ROR	R2
    0F8F0 9436      LSR	R3
    0F8F1 9427      ROR	R2
    0F8F2 9436      LSR	R3
    0F8F3 9427      ROR	R2
    0F8F4 9436      LSR	R3
    0F8F5 9427      ROR	R2
    0F8F6 9220 0322 STS	T_dat_buf+6,R2
(0860) 	T_dat_buf[5]=(T_dat&0x0008)>>3;
    0F8F8 9180 0335 LDS	R24,T_dat
    0F8FA 9190 0336 LDS	R25,T_dat+1
    0F8FC 7088      ANDI	R24,0x8
    0F8FD 7090      ANDI	R25,0
    0F8FE 011C      MOVW	R2,R24
    0F8FF 9436      LSR	R3
    0F900 9427      ROR	R2
    0F901 9436      LSR	R3
    0F902 9427      ROR	R2
    0F903 9436      LSR	R3
    0F904 9427      ROR	R2
    0F905 9220 0321 STS	T_dat_buf+5,R2
(0861) 	T_dat_buf[4]=(T_dat&0x0004)>>2;
    0F907 9180 0335 LDS	R24,T_dat
    0F909 9190 0336 LDS	R25,T_dat+1
    0F90B 7084      ANDI	R24,4
    0F90C 7090      ANDI	R25,0
    0F90D 011C      MOVW	R2,R24
    0F90E 9436      LSR	R3
    0F90F 9427      ROR	R2
    0F910 9436      LSR	R3
    0F911 9427      ROR	R2
    0F912 9220 0320 STS	T_dat_buf+4,R2
(0862) 	T_dat_buf[3]=(T_dat&0x0002)>>1;
    0F914 9180 0335 LDS	R24,T_dat
    0F916 9190 0336 LDS	R25,T_dat+1
    0F918 7082      ANDI	R24,2
    0F919 7090      ANDI	R25,0
    0F91A 011C      MOVW	R2,R24
    0F91B 9436      LSR	R3
    0F91C 9427      ROR	R2
    0F91D 9220 031F STS	T_dat_buf+3,R2
(0863) 	T_dat_buf[2]=T_dat&0x0001;
    0F91F 9180 0335 LDS	R24,T_dat
    0F921 9190 0336 LDS	R25,T_dat+1
    0F923 7081      ANDI	R24,1
    0F924 7090      ANDI	R25,0
    0F925 9380 031E STS	T_dat_buf+2,R24
(0864) 	//计算校验位，奇校验
(0865) 	T_dat_buf[1]=1;
    0F927 E081      LDI	R24,1
    0F928 9380 031D STS	T_dat_buf+1,R24
(0866)   	for(L=2;L<22;L++)
    0F92A E042      LDI	R20,2
    0F92B C00D      RJMP	0xF939
(0867) 		{T_dat_buf[1]^=T_dat_buf[L];}
    0F92C E18C      LDI	R24,0x1C
    0F92D E093      LDI	R25,3
    0F92E 2FE4      MOV	R30,R20
    0F92F 27FF      CLR	R31
    0F930 0FE8      ADD	R30,R24
    0F931 1FF9      ADC	R31,R25
    0F932 8020      LD	R2,Z
    0F933 9030 031D LDS	R3,T_dat_buf+1
    0F935 2432      EOR	R3,R2
    0F936 9230 031D STS	T_dat_buf+1,R3
    0F938 9543      INC	R20
    0F939 3146      CPI	R20,0x16
    0F93A F388      BCS	0xF92C
(0868)     DELAY80
    0F93B 2422      CLR	R2
    0F93C 2433      CLR	R3
    0F93D 9230 0319 STS	Tt+1,R3
    0F93F 9220 0318 STS	Tt,R2
    0F941 C009      RJMP	0xF94B
    0F942 9180 0318 LDS	R24,Tt
    0F944 9190 0319 LDS	R25,Tt+1
    0F946 9601      ADIW	R24,1
    0F947 9390 0319 STS	Tt+1,R25
    0F949 9380 0318 STS	Tt,R24
    0F94B 9180 0318 LDS	R24,Tt
    0F94D 9190 0319 LDS	R25,Tt+1
    0F94F 3280      CPI	R24,0x20
    0F950 E0E0      LDI	R30,0
    0F951 079E      CPC	R25,R30
    0F952 F378      BCS	0xF942
(0869)     M1_L
    0F953 9180 0065 LDS	R24,0x65
    0F955 7F87      ANDI	R24,0xF7
    0F956 9380 0065 STS	0x65,R24
(0870) 	DELAY40
    0F958 2422      CLR	R2
    0F959 2433      CLR	R3
    0F95A 9230 0319 STS	Tt+1,R3
    0F95C 9220 0318 STS	Tt,R2
    0F95E C009      RJMP	0xF968
    0F95F 9180 0318 LDS	R24,Tt
    0F961 9190 0319 LDS	R25,Tt+1
    0F963 9601      ADIW	R24,1
    0F964 9390 0319 STS	Tt+1,R25
    0F966 9380 0318 STS	Tt,R24
    0F968 9180 0318 LDS	R24,Tt
    0F96A 9190 0319 LDS	R25,Tt+1
    0F96C 3180      CPI	R24,0x10
    0F96D E0E0      LDI	R30,0
    0F96E 079E      CPC	R25,R30
    0F96F F378      BCS	0xF95F
(0871)    
(0872)    
(0873) 	//同步头,560us
(0874) 	//充电开始，高80us	 
(0875) 	M2_H 	
    0F970 9180 0065 LDS	R24,0x65
    0F972 6180      ORI	R24,0x10
    0F973 9380 0065 STS	0x65,R24
(0876) 	DELAY80
    0F975 2422      CLR	R2
    0F976 2433      CLR	R3
    0F977 9230 0319 STS	Tt+1,R3
    0F979 9220 0318 STS	Tt,R2
    0F97B C009      RJMP	0xF985
    0F97C 9180 0318 LDS	R24,Tt
    0F97E 9190 0319 LDS	R25,Tt+1
    0F980 9601      ADIW	R24,1
    0F981 9390 0319 STS	Tt+1,R25
    0F983 9380 0318 STS	Tt,R24
    0F985 9180 0318 LDS	R24,Tt
    0F987 9190 0319 LDS	R25,Tt+1
    0F989 3280      CPI	R24,0x20
    0F98A E0E0      LDI	R30,0
    0F98B 079E      CPC	R25,R30
    0F98C F378      BCS	0xF97C
(0877) 	M2_L   //充电结束	
    0F98D 9180 0065 LDS	R24,0x65
    0F98F 7E8F      ANDI	R24,0xEF
    0F990 9380 0065 STS	0x65,R24
(0878) 	//放电开始，低80*6=480us
(0879) 	DELAY40
    0F992 2422      CLR	R2
    0F993 2433      CLR	R3
    0F994 9230 0319 STS	Tt+1,R3
    0F996 9220 0318 STS	Tt,R2
    0F998 C009      RJMP	0xF9A2
    0F999 9180 0318 LDS	R24,Tt
    0F99B 9190 0319 LDS	R25,Tt+1
    0F99D 9601      ADIW	R24,1
    0F99E 9390 0319 STS	Tt+1,R25
    0F9A0 9380 0318 STS	Tt,R24
    0F9A2 9180 0318 LDS	R24,Tt
    0F9A4 9190 0319 LDS	R25,Tt+1
    0F9A6 3180      CPI	R24,0x10
    0F9A7 E0E0      LDI	R30,0
    0F9A8 079E      CPC	R25,R30
    0F9A9 F378      BCS	0xF999
(0880) 	M1_H    
    0F9AA 9180 0065 LDS	R24,0x65
    0F9AC 6088      ORI	R24,0x8
    0F9AD 9380 0065 STS	0x65,R24
(0881)     DELAY80
    0F9AF 2422      CLR	R2
    0F9B0 2433      CLR	R3
    0F9B1 9230 0319 STS	Tt+1,R3
    0F9B3 9220 0318 STS	Tt,R2
    0F9B5 C009      RJMP	0xF9BF
    0F9B6 9180 0318 LDS	R24,Tt
    0F9B8 9190 0319 LDS	R25,Tt+1
    0F9BA 9601      ADIW	R24,1
    0F9BB 9390 0319 STS	Tt+1,R25
    0F9BD 9380 0318 STS	Tt,R24
    0F9BF 9180 0318 LDS	R24,Tt
    0F9C1 9190 0319 LDS	R25,Tt+1
    0F9C3 3280      CPI	R24,0x20
    0F9C4 E0E0      LDI	R30,0
    0F9C5 079E      CPC	R25,R30
    0F9C6 F378      BCS	0xF9B6
(0882) 	DELAY80
    0F9C7 2422      CLR	R2
    0F9C8 2433      CLR	R3
    0F9C9 9230 0319 STS	Tt+1,R3
    0F9CB 9220 0318 STS	Tt,R2
    0F9CD C009      RJMP	0xF9D7
    0F9CE 9180 0318 LDS	R24,Tt
    0F9D0 9190 0319 LDS	R25,Tt+1
    0F9D2 9601      ADIW	R24,1
    0F9D3 9390 0319 STS	Tt+1,R25
    0F9D5 9380 0318 STS	Tt,R24
    0F9D7 9180 0318 LDS	R24,Tt
    0F9D9 9190 0319 LDS	R25,Tt+1
    0F9DB 3280      CPI	R24,0x20
    0F9DC E0E0      LDI	R30,0
    0F9DD 079E      CPC	R25,R30
    0F9DE F378      BCS	0xF9CE
(0883) 	DELAY80
    0F9DF 2422      CLR	R2
    0F9E0 2433      CLR	R3
    0F9E1 9230 0319 STS	Tt+1,R3
    0F9E3 9220 0318 STS	Tt,R2
    0F9E5 C009      RJMP	0xF9EF
    0F9E6 9180 0318 LDS	R24,Tt
    0F9E8 9190 0319 LDS	R25,Tt+1
    0F9EA 9601      ADIW	R24,1
    0F9EB 9390 0319 STS	Tt+1,R25
    0F9ED 9380 0318 STS	Tt,R24
    0F9EF 9180 0318 LDS	R24,Tt
    0F9F1 9190 0319 LDS	R25,Tt+1
    0F9F3 3280      CPI	R24,0x20
    0F9F4 E0E0      LDI	R30,0
    0F9F5 079E      CPC	R25,R30
    0F9F6 F378      BCS	0xF9E6
(0884) 	DELAY80
    0F9F7 2422      CLR	R2
    0F9F8 2433      CLR	R3
    0F9F9 9230 0319 STS	Tt+1,R3
    0F9FB 9220 0318 STS	Tt,R2
    0F9FD C009      RJMP	0xFA07
    0F9FE 9180 0318 LDS	R24,Tt
    0FA00 9190 0319 LDS	R25,Tt+1
    0FA02 9601      ADIW	R24,1
    0FA03 9390 0319 STS	Tt+1,R25
    0FA05 9380 0318 STS	Tt,R24
    0FA07 9180 0318 LDS	R24,Tt
    0FA09 9190 0319 LDS	R25,Tt+1
    0FA0B 3280      CPI	R24,0x20
    0FA0C E0E0      LDI	R30,0
    0FA0D 079E      CPC	R25,R30
    0FA0E F378      BCS	0xF9FE
(0885) 	DELAY80
    0FA0F 2422      CLR	R2
    0FA10 2433      CLR	R3
    0FA11 9230 0319 STS	Tt+1,R3
    0FA13 9220 0318 STS	Tt,R2
    0FA15 C009      RJMP	0xFA1F
    0FA16 9180 0318 LDS	R24,Tt
    0FA18 9190 0319 LDS	R25,Tt+1
    0FA1A 9601      ADIW	R24,1
    0FA1B 9390 0319 STS	Tt+1,R25
    0FA1D 9380 0318 STS	Tt,R24
    0FA1F 9180 0318 LDS	R24,Tt
    0FA21 9190 0319 LDS	R25,Tt+1
    0FA23 3280      CPI	R24,0x20
    0FA24 E0E0      LDI	R30,0
    0FA25 079E      CPC	R25,R30
    0FA26 F378      BCS	0xFA16
(0886) 	M1_L    
    0FA27 9180 0065 LDS	R24,0x65
    0FA29 7F87      ANDI	R24,0xF7
    0FA2A 9380 0065 STS	0x65,R24
(0887) 	DELAY40  //放电结束
    0FA2C 2422      CLR	R2
    0FA2D 2433      CLR	R3
    0FA2E 9230 0319 STS	Tt+1,R3
    0FA30 9220 0318 STS	Tt,R2
    0FA32 C009      RJMP	0xFA3C
    0FA33 9180 0318 LDS	R24,Tt
    0FA35 9190 0319 LDS	R25,Tt+1
    0FA37 9601      ADIW	R24,1
    0FA38 9390 0319 STS	Tt+1,R25
    0FA3A 9380 0318 STS	Tt,R24
    0FA3C 9180 0318 LDS	R24,Tt
    0FA3E 9190 0319 LDS	R25,Tt+1
    0FA40 3180      CPI	R24,0x10
    0FA41 E0E0      LDI	R30,0
    0FA42 079E      CPC	R25,R30
    0FA43 F378      BCS	0xFA33
(0888) 	
(0889)      //连续发送 ,全0时每位400us，共8400us，全1时每位240us，共5040us
(0890)  	for(L=21;L>0;L--)
    0FA44 E145      LDI	R20,0x15
    0FA45 C124      RJMP	0xFB6A
(0891) 	{   
(0892) 	  if(T_dat_buf[L])//1，一高二低
    0FA46 E18C      LDI	R24,0x1C
    0FA47 E093      LDI	R25,3
    0FA48 2FE4      MOV	R30,R20
    0FA49 27FF      CLR	R31
    0FA4A 0FE8      ADD	R30,R24
    0FA4B 1FF9      ADC	R31,R25
    0FA4C 8020      LD	R2,Z
    0FA4D 2022      TST	R2
    0FA4E F409      BNE	0xFA50
    0FA4F C075      RJMP	0xFAC5
(0893)         {         	 		
(0894) 	        M2_H 
    0FA50 9180 0065 LDS	R24,0x65
    0FA52 6180      ORI	R24,0x10
    0FA53 9380 0065 STS	0x65,R24
(0895) 	        DELAY80
    0FA55 2422      CLR	R2
    0FA56 2433      CLR	R3
    0FA57 9230 0319 STS	Tt+1,R3
    0FA59 9220 0318 STS	Tt,R2
    0FA5B C009      RJMP	0xFA65
    0FA5C 9180 0318 LDS	R24,Tt
    0FA5E 9190 0319 LDS	R25,Tt+1
    0FA60 9601      ADIW	R24,1
    0FA61 9390 0319 STS	Tt+1,R25
    0FA63 9380 0318 STS	Tt,R24
    0FA65 9180 0318 LDS	R24,Tt
    0FA67 9190 0319 LDS	R25,Tt+1
    0FA69 3280      CPI	R24,0x20
    0FA6A E0E0      LDI	R30,0
    0FA6B 079E      CPC	R25,R30
    0FA6C F378      BCS	0xFA5C
(0896) 	        M2_L
    0FA6D 9180 0065 LDS	R24,0x65
    0FA6F 7E8F      ANDI	R24,0xEF
    0FA70 9380 0065 STS	0x65,R24
(0897) 			DELAY40
    0FA72 2422      CLR	R2
    0FA73 2433      CLR	R3
    0FA74 9230 0319 STS	Tt+1,R3
    0FA76 9220 0318 STS	Tt,R2
    0FA78 C009      RJMP	0xFA82
    0FA79 9180 0318 LDS	R24,Tt
    0FA7B 9190 0319 LDS	R25,Tt+1
    0FA7D 9601      ADIW	R24,1
    0FA7E 9390 0319 STS	Tt+1,R25
    0FA80 9380 0318 STS	Tt,R24
    0FA82 9180 0318 LDS	R24,Tt
    0FA84 9190 0319 LDS	R25,Tt+1
    0FA86 3180      CPI	R24,0x10
    0FA87 E0E0      LDI	R30,0
    0FA88 079E      CPC	R25,R30
    0FA89 F378      BCS	0xFA79
(0898) 	        M1_H       
    0FA8A 9180 0065 LDS	R24,0x65
    0FA8C 6088      ORI	R24,0x8
    0FA8D 9380 0065 STS	0x65,R24
(0899)          	DELAY80
    0FA8F 2422      CLR	R2
    0FA90 2433      CLR	R3
    0FA91 9230 0319 STS	Tt+1,R3
    0FA93 9220 0318 STS	Tt,R2
    0FA95 C009      RJMP	0xFA9F
    0FA96 9180 0318 LDS	R24,Tt
    0FA98 9190 0319 LDS	R25,Tt+1
    0FA9A 9601      ADIW	R24,1
    0FA9B 9390 0319 STS	Tt+1,R25
    0FA9D 9380 0318 STS	Tt,R24
    0FA9F 9180 0318 LDS	R24,Tt
    0FAA1 9190 0319 LDS	R25,Tt+1
    0FAA3 3280      CPI	R24,0x20
    0FAA4 E0E0      LDI	R30,0
    0FAA5 079E      CPC	R25,R30
    0FAA6 F378      BCS	0xFA96
(0900) 			M1_L
    0FAA7 9180 0065 LDS	R24,0x65
    0FAA9 7F87      ANDI	R24,0xF7
    0FAAA 9380 0065 STS	0x65,R24
(0901) 			DELAY40
    0FAAC 2422      CLR	R2
    0FAAD 2433      CLR	R3
    0FAAE 9230 0319 STS	Tt+1,R3
    0FAB0 9220 0318 STS	Tt,R2
    0FAB2 C009      RJMP	0xFABC
    0FAB3 9180 0318 LDS	R24,Tt
    0FAB5 9190 0319 LDS	R25,Tt+1
    0FAB7 9601      ADIW	R24,1
    0FAB8 9390 0319 STS	Tt+1,R25
    0FABA 9380 0318 STS	Tt,R24
    0FABC 9180 0318 LDS	R24,Tt
    0FABE 9190 0319 LDS	R25,Tt+1
    0FAC0 3180      CPI	R24,0x10
    0FAC1 E0E0      LDI	R30,0
    0FAC2 079E      CPC	R25,R30
    0FAC3 F378      BCS	0xFAB3
(0902) 		} 
    0FAC4 C0A4      RJMP	0xFB69
(0903)        else 		//0，一高四低 				                
(0904)         {
(0905) 		 	M2_H 
    0FAC5 9180 0065 LDS	R24,0x65
    0FAC7 6180      ORI	R24,0x10
    0FAC8 9380 0065 STS	0x65,R24
(0906) 	        DELAY80
    0FACA 2422      CLR	R2
    0FACB 2433      CLR	R3
    0FACC 9230 0319 STS	Tt+1,R3
    0FACE 9220 0318 STS	Tt,R2
    0FAD0 C009      RJMP	0xFADA
    0FAD1 9180 0318 LDS	R24,Tt
    0FAD3 9190 0319 LDS	R25,Tt+1
    0FAD5 9601      ADIW	R24,1
    0FAD6 9390 0319 STS	Tt+1,R25
    0FAD8 9380 0318 STS	Tt,R24
    0FADA 9180 0318 LDS	R24,Tt
    0FADC 9190 0319 LDS	R25,Tt+1
    0FADE 3280      CPI	R24,0x20
    0FADF E0E0      LDI	R30,0
    0FAE0 079E      CPC	R25,R30
    0FAE1 F378      BCS	0xFAD1
(0907) 	        M2_L
    0FAE2 9180 0065 LDS	R24,0x65
    0FAE4 7E8F      ANDI	R24,0xEF
    0FAE5 9380 0065 STS	0x65,R24
(0908) 			DELAY40
    0FAE7 2422      CLR	R2
    0FAE8 2433      CLR	R3
    0FAE9 9230 0319 STS	Tt+1,R3
    0FAEB 9220 0318 STS	Tt,R2
    0FAED C009      RJMP	0xFAF7
    0FAEE 9180 0318 LDS	R24,Tt
    0FAF0 9190 0319 LDS	R25,Tt+1
    0FAF2 9601      ADIW	R24,1
    0FAF3 9390 0319 STS	Tt+1,R25
    0FAF5 9380 0318 STS	Tt,R24
    0FAF7 9180 0318 LDS	R24,Tt
    0FAF9 9190 0319 LDS	R25,Tt+1
    0FAFB 3180      CPI	R24,0x10
    0FAFC E0E0      LDI	R30,0
    0FAFD 079E      CPC	R25,R30
    0FAFE F378      BCS	0xFAEE
(0909) 	        M1_H       
    0FAFF 9180 0065 LDS	R24,0x65
    0FB01 6088      ORI	R24,0x8
    0FB02 9380 0065 STS	0x65,R24
(0910)          	DELAY80
    0FB04 2422      CLR	R2
    0FB05 2433      CLR	R3
    0FB06 9230 0319 STS	Tt+1,R3
    0FB08 9220 0318 STS	Tt,R2
    0FB0A C009      RJMP	0xFB14
    0FB0B 9180 0318 LDS	R24,Tt
    0FB0D 9190 0319 LDS	R25,Tt+1
    0FB0F 9601      ADIW	R24,1
    0FB10 9390 0319 STS	Tt+1,R25
    0FB12 9380 0318 STS	Tt,R24
    0FB14 9180 0318 LDS	R24,Tt
    0FB16 9190 0319 LDS	R25,Tt+1
    0FB18 3280      CPI	R24,0x20
    0FB19 E0E0      LDI	R30,0
    0FB1A 079E      CPC	R25,R30
    0FB1B F378      BCS	0xFB0B
(0911) 			DELAY80
    0FB1C 2422      CLR	R2
    0FB1D 2433      CLR	R3
    0FB1E 9230 0319 STS	Tt+1,R3
    0FB20 9220 0318 STS	Tt,R2
    0FB22 C009      RJMP	0xFB2C
    0FB23 9180 0318 LDS	R24,Tt
    0FB25 9190 0319 LDS	R25,Tt+1
    0FB27 9601      ADIW	R24,1
    0FB28 9390 0319 STS	Tt+1,R25
    0FB2A 9380 0318 STS	Tt,R24
    0FB2C 9180 0318 LDS	R24,Tt
    0FB2E 9190 0319 LDS	R25,Tt+1
    0FB30 3280      CPI	R24,0x20
    0FB31 E0E0      LDI	R30,0
    0FB32 079E      CPC	R25,R30
    0FB33 F378      BCS	0xFB23
(0912) 			DELAY80
    0FB34 2422      CLR	R2
    0FB35 2433      CLR	R3
    0FB36 9230 0319 STS	Tt+1,R3
    0FB38 9220 0318 STS	Tt,R2
    0FB3A C009      RJMP	0xFB44
    0FB3B 9180 0318 LDS	R24,Tt
    0FB3D 9190 0319 LDS	R25,Tt+1
    0FB3F 9601      ADIW	R24,1
    0FB40 9390 0319 STS	Tt+1,R25
    0FB42 9380 0318 STS	Tt,R24
    0FB44 9180 0318 LDS	R24,Tt
    0FB46 9190 0319 LDS	R25,Tt+1
    0FB48 3280      CPI	R24,0x20
    0FB49 E0E0      LDI	R30,0
    0FB4A 079E      CPC	R25,R30
    0FB4B F378      BCS	0xFB3B
(0913) 			M1_L
    0FB4C 9180 0065 LDS	R24,0x65
    0FB4E 7F87      ANDI	R24,0xF7
    0FB4F 9380 0065 STS	0x65,R24
(0914) 			DELAY40
    0FB51 2422      CLR	R2
    0FB52 2433      CLR	R3
    0FB53 9230 0319 STS	Tt+1,R3
    0FB55 9220 0318 STS	Tt,R2
    0FB57 C009      RJMP	0xFB61
    0FB58 9180 0318 LDS	R24,Tt
    0FB5A 9190 0319 LDS	R25,Tt+1
    0FB5C 9601      ADIW	R24,1
    0FB5D 9390 0319 STS	Tt+1,R25
    0FB5F 9380 0318 STS	Tt,R24
    0FB61 9180 0318 LDS	R24,Tt
    0FB63 9190 0319 LDS	R25,Tt+1
    0FB65 3180      CPI	R24,0x10
    0FB66 E0E0      LDI	R30,0
    0FB67 079E      CPC	R25,R30
    0FB68 F378      BCS	0xFB58
    0FB69 954A      DEC	R20
    0FB6A E080      LDI	R24,0
    0FB6B 1784      CP	R24,R20
    0FB6C F408      BCC	0xFB6E
    0FB6D CED8      RJMP	0xFA46
(0915) 		}
(0916)     }	       	   
(0917) 		   //结束位，一高八低，720us
(0918)  	 	    M2_H 
    0FB6E 9180 0065 LDS	R24,0x65
    0FB70 6180      ORI	R24,0x10
    0FB71 9380 0065 STS	0x65,R24
(0919) 		    DELAY80
    0FB73 2422      CLR	R2
    0FB74 2433      CLR	R3
    0FB75 9230 0319 STS	Tt+1,R3
    0FB77 9220 0318 STS	Tt,R2
    0FB79 C009      RJMP	0xFB83
    0FB7A 9180 0318 LDS	R24,Tt
    0FB7C 9190 0319 LDS	R25,Tt+1
    0FB7E 9601      ADIW	R24,1
    0FB7F 9390 0319 STS	Tt+1,R25
    0FB81 9380 0318 STS	Tt,R24
    0FB83 9180 0318 LDS	R24,Tt
    0FB85 9190 0319 LDS	R25,Tt+1
    0FB87 3280      CPI	R24,0x20
    0FB88 E0E0      LDI	R30,0
    0FB89 079E      CPC	R25,R30
    0FB8A F378      BCS	0xFB7A
(0920) 	        M2_L
    0FB8B 9180 0065 LDS	R24,0x65
    0FB8D 7E8F      ANDI	R24,0xEF
    0FB8E 9380 0065 STS	0x65,R24
(0921) 			DELAY40
    0FB90 2422      CLR	R2
    0FB91 2433      CLR	R3
    0FB92 9230 0319 STS	Tt+1,R3
    0FB94 9220 0318 STS	Tt,R2
    0FB96 C009      RJMP	0xFBA0
    0FB97 9180 0318 LDS	R24,Tt
    0FB99 9190 0319 LDS	R25,Tt+1
    0FB9B 9601      ADIW	R24,1
    0FB9C 9390 0319 STS	Tt+1,R25
    0FB9E 9380 0318 STS	Tt,R24
    0FBA0 9180 0318 LDS	R24,Tt
    0FBA2 9190 0319 LDS	R25,Tt+1
    0FBA4 3180      CPI	R24,0x10
    0FBA5 E0E0      LDI	R30,0
    0FBA6 079E      CPC	R25,R30
    0FBA7 F378      BCS	0xFB97
(0922) 			
(0923) 			for(L=0;L>50;L++)
    0FBA8 2744      CLR	R20
    0FBA9 C019      RJMP	0xFBC3
(0924) 			{
(0925) 			  DELAY80
    0FBAA 2422      CLR	R2
    0FBAB 2433      CLR	R3
    0FBAC 9230 0319 STS	Tt+1,R3
    0FBAE 9220 0318 STS	Tt,R2
    0FBB0 C009      RJMP	0xFBBA
    0FBB1 9180 0318 LDS	R24,Tt
    0FBB3 9190 0319 LDS	R25,Tt+1
    0FBB5 9601      ADIW	R24,1
    0FBB6 9390 0319 STS	Tt+1,R25
    0FBB8 9380 0318 STS	Tt,R24
    0FBBA 9180 0318 LDS	R24,Tt
    0FBBC 9190 0319 LDS	R25,Tt+1
    0FBBE 3280      CPI	R24,0x20
    0FBBF E0E0      LDI	R30,0
    0FBC0 079E      CPC	R25,R30
    0FBC1 F378      BCS	0xFBB1
    0FBC2 9543      INC	R20
    0FBC3 E382      LDI	R24,0x32
    0FBC4 1784      CP	R24,R20
    0FBC5 F320      BCS	0xFBAA
(0926) 			}
(0927) 	
(0928)  	MANINT_CLR
    0FBC6 B788      IN	R24,0x38
    0FBC7 6081      ORI	R24,1
    0FBC8 BF88      OUT	0x38,R24
(0929)  	INT_EN//总中断使能;  
    0FBC9 9478      BSET	7
    0FBCA 9149      LD	R20,Y+
    0FBCB 9508      RET
(0930) }
(0931) 
(0932) 
(0933)  
(0934) 
(0935) void Delay30Ms(void)//8M主时钟频率，则最大定时7812.5ms
(0936) {
(0937) 	TCCR1B = 0x00; //stop
_Delay30Ms:
    0FBCC 2422      CLR	R2
    0FBCD BC2E      OUT	0x2E,R2
(0938)     TCNT1 = 65301;//30ms  
    0FBCE E185      LDI	R24,0x15
    0FBCF EF9F      LDI	R25,0xFF
    0FBD0 BD9D      OUT	0x2D,R25
    0FBD1 BD8C      OUT	0x2C,R24
(0939)  	TCCR1B = 0x05; //1024分频
    0FBD2 E085      LDI	R24,5
    0FBD3 BD8E      OUT	0x2E,R24
(0940) 	TIFR|=0x04; //清定时器1中断标志
    0FBD4 B786      IN	R24,0x36
    0FBD5 6084      ORI	R24,4
    0FBD6 BF86      OUT	0x36,R24
(0941) 	while((TIFR&0x04)==0x00); 
    0FBD7 B626      IN	R2,0x36
    0FBD8 FE22      SBRS	R2,2
    0FBD9 CFFD      RJMP	0xFBD7
(0942) 	TCCR1B = 0x00; //stop
    0FBDA 2422      CLR	R2
    0FBDB BC2E      OUT	0x2E,R2
(0943) 	TIFR|=0x04; //清定时器1中断标志
FILE: <library>
    0FBDC B786      IN	R24,0x36
    0FBDD 6084      ORI	R24,4
    0FBDE BF86      OUT	0x36,R24
    0FBDF 9508      RET
push_arg4:
    0FBE0 933A      ST	-Y,R19
    0FBE1 932A      ST	-Y,R18
push_arg2:
    0FBE2 931A      ST	-Y,R17
    0FBE3 930A      ST	-Y,R16
    0FBE4 9508      RET
empy16s:
    0FBE5 920A      ST	-Y,R0
    0FBE6 921A      ST	-Y,R1
    0FBE7 938A      ST	-Y,R24
    0FBE8 939A      ST	-Y,R25
    0FBE9 9F02      MUL	R16,R18
    0FBEA 01C0      MOVW	R24,R0
    0FBEB 9F12      MUL	R17,R18
    0FBEC 0D90      ADD	R25,R0
    0FBED 9F03      MUL	R16,R19
    0FBEE 0D90      ADD	R25,R0
    0FBEF 018C      MOVW	R16,R24
    0FBF0 9199      LD	R25,Y+
    0FBF1 9189      LD	R24,Y+
    0FBF2 9019      LD	R1,Y+
    0FBF3 9009      LD	R0,Y+
    0FBF4 9508      RET
empy32u|empy32s:
    0FBF5 940E FC3F CALL	long_prolog
    0FBF7 927A      ST	-Y,R7
    0FBF8 940E FC58 CALL	tstzero1
    0FBFA F159      BEQ	0xFC26
    0FBFB 2477      CLR	R7
    0FBFC 940E FC5E CALL	tstzero2
    0FBFE F419      BNE	0xFC02
    0FBFF 018C      MOVW	R16,R24
    0FC00 019D      MOVW	R18,R26
    0FC01 C024      RJMP	0xFC26
    0FC02 920A      ST	-Y,R0
    0FC03 921A      ST	-Y,R1
    0FC04 9F08      MUL	R16,R24
    0FC05 2CB0      MOV	R11,R0
    0FC06 2CA1      MOV	R10,R1
    0FC07 9F28      MUL	R18,R24
    0FC08 2C90      MOV	R9,R0
    0FC09 2C81      MOV	R8,R1
    0FC0A 9F18      MUL	R17,R24
    0FC0B 0CA0      ADD	R10,R0
    0FC0C 1C91      ADC	R9,R1
    0FC0D 1C87      ADC	R8,R7
    0FC0E 9F09      MUL	R16,R25
    0FC0F 0CA0      ADD	R10,R0
    0FC10 1C91      ADC	R9,R1
    0FC11 1C87      ADC	R8,R7
    0FC12 9F19      MUL	R17,R25
    0FC13 0C90      ADD	R9,R0
    0FC14 1C81      ADC	R8,R1
    0FC15 9F0A      MUL	R16,R26
    0FC16 0C90      ADD	R9,R0
    0FC17 1C81      ADC	R8,R1
    0FC18 9F38      MUL	R19,R24
    0FC19 0C80      ADD	R8,R0
    0FC1A 9F29      MUL	R18,R25
    0FC1B 0C80      ADD	R8,R0
    0FC1C 9F1A      MUL	R17,R26
    0FC1D 0C80      ADD	R8,R0
    0FC1E 9F0B      MUL	R16,R27
    0FC1F 0C80      ADD	R8,R0
    0FC20 9019      LD	R1,Y+
    0FC21 9009      LD	R0,Y+
    0FC22 2D0B      MOV	R16,R11
    0FC23 2D1A      MOV	R17,R10
    0FC24 2D29      MOV	R18,R9
    0FC25 2D38      MOV	R19,R8
    0FC26 9079      LD	R7,Y+
    0FC27 940C FC4D JMP	long_epilog
pop_xgsetF0FC:
    0FC29 90A9      LD	R10,Y+
    0FC2A 90B9      LD	R11,Y+
    0FC2B 90C9      LD	R12,Y+
    0FC2C 90D9      LD	R13,Y+
    0FC2D 90E9      LD	R14,Y+
    0FC2E 90F9      LD	R15,Y+
    0FC2F 9149      LD	R20,Y+
    0FC30 9159      LD	R21,Y+
    0FC31 9169      LD	R22,Y+
    0FC32 9179      LD	R23,Y+
    0FC33 9508      RET
push_xgsetF0FC:
    0FC34 937A      ST	-Y,R23
    0FC35 936A      ST	-Y,R22
push_xgset30FC:
    0FC36 935A      ST	-Y,R21
    0FC37 934A      ST	-Y,R20
push_xgset00FC:
    0FC38 92FA      ST	-Y,R15
    0FC39 92EA      ST	-Y,R14
push_xgset003C:
    0FC3A 92DA      ST	-Y,R13
    0FC3B 92CA      ST	-Y,R12
    0FC3C 92BA      ST	-Y,R11
    0FC3D 92AA      ST	-Y,R10
    0FC3E 9508      RET
long_prolog:
    0FC3F 928A      ST	-Y,R8
    0FC40 929A      ST	-Y,R9
    0FC41 92AA      ST	-Y,R10
    0FC42 92BA      ST	-Y,R11
    0FC43 93EA      ST	-Y,R30
    0FC44 938A      ST	-Y,R24
    0FC45 939A      ST	-Y,R25
    0FC46 93AA      ST	-Y,R26
    0FC47 93BA      ST	-Y,R27
    0FC48 8589      LDD	R24,Y+9
    0FC49 859A      LDD	R25,Y+10
    0FC4A 85AB      LDD	R26,Y+11
    0FC4B 85BC      LDD	R27,Y+12
    0FC4C 9508      RET
long_epilog:
    0FC4D 91B9      LD	R27,Y+
    0FC4E 91A9      LD	R26,Y+
    0FC4F 9199      LD	R25,Y+
    0FC50 9189      LD	R24,Y+
    0FC51 91E9      LD	R30,Y+
    0FC52 90B9      LD	R11,Y+
    0FC53 90A9      LD	R10,Y+
    0FC54 9099      LD	R9,Y+
    0FC55 9089      LD	R8,Y+
    0FC56 9624      ADIW	R28,4
    0FC57 9508      RET
tstzero1:
    0FC58 27EE      CLR	R30
    0FC59 2BE0      OR	R30,R16
    0FC5A 2BE1      OR	R30,R17
    0FC5B 2BE2      OR	R30,R18
    0FC5C 2BE3      OR	R30,R19
    0FC5D 9508      RET
tstzero2:
    0FC5E 27EE      CLR	R30
    0FC5F 2BE8      OR	R30,R24
    0FC60 2BE9      OR	R30,R25
    0FC61 2BEA      OR	R30,R26
    0FC62 2BEB      OR	R30,R27
    0FC63 9508      RET
lsr16:
    0FC64 2322      TST	R18
    0FC65 F021      BEQ	0xFC6A
    0FC66 9516      LSR	R17
    0FC67 9507      ROR	R16
    0FC68 952A      DEC	R18
    0FC69 CFFA      RJMP	lsr16
    0FC6A 9508      RET


#include <iom128v.h>								   	
#include <macros.h>
#include <stdio.h>

 
#define Debug 0
#define  BB     0x10        //固件版本号


 
//收放电机管脚定义和控制项
#define DIR1_PIN    ((PINA&0x04)>>2)
#define PWM1_PIN    ((PINA&0x02)>>1)
#define BREAKE1_PIN (PINA&0x01)

#define DIR1_H      {DDRA|=0x04;PORTA|=0x04;}
#define PWM1_H      {DDRA|=0x02;PORTA|=0x02;}
#define BREAKE1_H   {DDRA|=0x01;PORTA|=0x01;}

#define DIR1_L      {DDRA|=0x04;PORTA&=0xfb;}
#define PWM1_L      {DDRA|=0x02;PORTA&=0xFD;}
#define BREAKE1_L   {DDRA|=0x01;PORTA&=0xFE;}

//调节电机管脚定义和控制项
#define PWM2_PIN    ((PINF&0x04)>>2)
#define BREAKE2_PIN ((PINF&0x02)>>1)
#define DIR2_PIN    (PINF&0x01)

#define PWM2_H      {DDRF|=0x04;PORTF|=0x04;}
#define BREAKE2_H   {DDRF|=0x02;PORTF|=0x02;}
#define DIR2_H      {DDRF|=0x01;PORTF|=0x01;}

#define PWM2_L      {DDRF|=0x04;PORTF&=0xfb;}
#define BREAKE2_L   {DDRF|=0x02;PORTF&=0xFD;}
#define DIR2_L      {DDRF|=0x01;PORTF&=0xFE;}

//收放电机正在正转
#define Motor1Run_P ((PWM1_PIN==0) && (DIR1_PIN==1))
//收放电机正在反转
#define Motor1Run_N ((PWM1_PIN==1) && (DIR1_PIN==0))  
//调节电机正在正转 
#define Motor2Run_P ((PWM2_PIN==0) && (DIR2_PIN==1))
//调节电机正在反转
#define Motor2Run_N ((PWM2_PIN==1) && (DIR2_PIN==0)) 

#define PIN_MANINT    (PIND & 0x01)

#define MANINT_CLR	{ EIFR|=0x01; }
#define MANINT_EN		{ EIMSK |= 0x01; }
#define MANINT_DIS	{ EIMSK &= 0xFE; }

#define INT_EN			{ SEI(); }
#define INT_DIS		{ CLI(); }


//电机电源
#define VM_H        {BREAKE1_H}{BREAKE2_H}{DDRB|=0x80;PORTB|=0x80;}

//同时关二个电机
#define MOTORSTOP   {BREAKE1_H}{BREAKE2_H}{DDRB|=0x80;PORTB&=0x7f;}{DIR1_L}{PWM1_L}{DIR2_L}{PWM2_L}

#define DELAY10 for(Tt=0;Tt<4;Tt++);
#define DELAY20 for(Tt=0;Tt<4;Tt++);
#define DELAY40 for(Tt=0;Tt<16;Tt++); 
#define DELAY50 for(Tt=0;Tt<21;Tt++); 
#define DELAY80 for(Tt=0;Tt<32;Tt++); 
#define DELAY89 for(Tt=0;Tt<36;Tt++); 
#define DELAY100 for(Tt=0;Tt<42;Tt++); 
#define DELAY170 for(Tt=0;Tt<72;Tt++);
#define DELAY268 for(Tt=0;Tt<113;Tt++);
#define DELAY397 for(Tt=0;Tt<165;Tt++);
#define DELAY400 for(Tt=0;Tt<168;Tt++);

union FIB
{
 float f;
 unsigned int i[2];
 unsigned char b[4];
}myFIB;

union MotorStatus
{
 unsigned int i;
 struct 
 { 
   unsigned int RUN:1;//bit0,电机运行状态，0：停止，1：运行
   unsigned int DIR:1;//bit1,电机运行方向，0：反转,收臂-调大(DIR_L)，1：正转,张臂-调小(DIR_H)
   unsigned int BrokenStop:1;//bit2, 断路停
   unsigned int CommandStop:1;//bit3,手动停
   unsigned int OverCurrent:1;//bit4,过流停
   unsigned int UnderVoltage:1;//bit5,欠压停
   unsigned int StartResult:2;//bit6-bit7,电机最近一次启动结果(0：正常上电启动，1：本电机同向运行，2：本电机反向运行，3：另一个电机正在运行)
   
   unsigned int ThisCurrent:8;//bit8-bit15 ,  电机当前或停止前最近一次电流
 }s;
}Motor1Status,Motor2Status;//电机状态

unsigned char Motor1Gear,Motor2Gear;// 电机过流档位
unsigned char Motor1Thr,Motor2Thr;//电机堵转过流阈值
unsigned char MotorIdelGear;//电机断路档位
unsigned char MotorIdelCur;// 电机断路电流
 
unsigned char TPSCn,TPSBuf[4];

unsigned char T_Flag;

unsigned int Timer0Counter;//定时器0超过4ms时的计数

unsigned char Uart0RxData[74];//串口接收数据缓存
unsigned char Uart0RxCounter;

unsigned char Rx[18];//解码接收9位共18个半位
int  T_dat,R_dat;//曼码发送数据
unsigned char T_com;//曼码发送命令

unsigned char TimeOutFlag;//发送超时标志

unsigned char T_dat_buf[22];//曼码发送缓冲 

unsigned int DataFlag;//下发标定系数开始标志
unsigned char Int_count;
unsigned char IntFlag;//接收帧状态

unsigned int Tt,k;
unsigned int T2cn;
unsigned char coeffdata[320];

unsigned char Uart0TxData[74];//串口发送数据缓存

unsigned char EEPAdd;//接收系数存放地址索引
unsigned int coeff_len,coeff_count;//接收系数长度，接收系数计数
unsigned int CompCounter;

unsigned int bf;

unsigned long lfib;//短整型转浮点数时用的临时变量
unsigned char crc16hi,crc16lo,crc16array[18];

void InitialIO(void);
void init_USART0(void);
void SendUart0_2(unsigned char len,unsigned int s);
void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn);
void Pwm_startup(unsigned char motor);
void Start(void);

unsigned char SampleADC(unsigned char ch);
void EEPROM_write(unsigned int Address,unsigned char Data);
unsigned char EEPROM_read(unsigned int Address);
void CheckMotor(unsigned int t);
void crc16(unsigned char r_data[],unsigned int length);
void Gear2Thr(void);


void InitialIO(void)
{//1输出，0输入
 PORTA=0x00;
 DDRA=0x07; //PA0=BREAKE1 PA1=PWM1 PA2=DIR1

 PORTB=0x00; 
 DDRB=0x80; //PB7=VM_CTRL
 
 PORTC=0x00;
 DDRC=0x00; 
 
 PORTD=0x00; 
 DDRD=0x38;//PD4=M2 PD5=M1 TX1=0
 
 PORTE=0x00; 
 DDRE=0x00;
 
 PORTF=0x00; 
 DDRF=0x07;//PF0=DIR2 PF1=BREAKE2 PF2=PWM2
 
 PORTG=0x00; 
 DDRG=0x00; 
}


//UART1 initialize
// desired baud rate: 57600
// actual: baud rate:58824 (2.1%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
 UCSR1B = 0x00; //disable while setting baud rate
 UCSR1A = 0x02;
 UCSR1C = 0x06;
 UBRR1L = 0x10; //set baud rate lo 57600
 UBRR1H = 0x00; //set baud rate hi
 UCSR1B = 0x90;//使能接收和接收中断，不使能发送
}

#pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
void uart1_rx_isr(void)//串口1接收中断
{
 if(TPSCn<4)
 {
  TPSBuf[TPSCn]=UDR1;
  TPSCn++;
 }
 else
 {
  UCSR1B&=0x7f;//关串口1接收中断
 }
}
 


//UART0 initialize
// desired baud rate: 57600
// actual: baud rate:58824 (2.1%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
 UCSR0A = 0x02;
 UCSR0C = 0x06;
 UBRR0L = 0x10; //set baud rate lo 57600
 UBRR0H = 0x00; //set baud rate hi
 UCSR0B = 0x98;
}

#pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
void uart0_rx_isr(void)//串口0接收中断
{
    if(Uart0RxCounter<74)
	{
    Uart0RxData[Uart0RxCounter]=UDR0;//接收串口数据,同时清空串口接收中断标志
 	Uart0RxCounter++;
	}
}

#pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
void timer0_ovf_isr(void)
{
Timer0Counter--;
if(Timer0Counter==0)
{
 TCNT0=0;
 TimeOutFlag=1;
 TIMSK&=0xFE;//关定时器0中断
 UCSR0B&=0x7f;//关串口接收中断
 }
 else
 {
 TCNT0=0x06;//定时8ms
 }
}

#pragma interrupt_handler timer3_ovf_isr:iv_TIM3_OVF
void timer3_ovf_isr(void)
{
 	 ETIMSK = 0x00; //Timer3中断关闭
	 TCCR3B = 0x00; //stop
		
  		   if(PWM1_PIN==1)//收放电机正在运行
   		   {
 		   Motor1Status.s.CommandStop=1;
   		   }
 		   if(PWM2_PIN==1)//调节电机正在运行
   		   { 
 		   Motor2Status.s.CommandStop=1;
   		   }
 	 	   MOTORSTOP  //关电机
}

void SendUart0_2(unsigned char len,unsigned int s)   //串口发送数据
{//要求流量板在s个8ms内通过串口返回数据
unsigned char t,i; 	

for(t=0;t<74;t++)
  Uart0RxData[t]=0xff;
  
Uart0RxCounter=0; //清串口接受计数  

for(t=0;t<len;t++)
{
while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
for(i=0;i<200;i++);
UDR0=Uart0TxData[t];  
}
                  
if(s>0)
{
 //超时设定
TimeOutFlag=0; //超时标志置0
Timer0Counter=s; //8ms定时循环次数
TCNT0=0x06;//定时8ms
TCCR0|=0x06;//256分频
TIFR|=0x01; //清定时器0中断标志
TIMSK|=0x01;//使能定时器0中断
t=UDR0;//开串口接收中断前读空缓存
UCSR0B|=0x80;//开串口接收中断
while(TimeOutFlag==0)
{
CheckMotor(0);
}
TIMSK&=0xFE;//关定时器0中断
UCSR0B&=0x7f;//关串口接收中断
}
}

void SendUart0_3(unsigned char len,unsigned int s,unsigned char cn)   //串口发送数据，不死等，收到采集板返回的cn个字节后即退出，如一直没收到cn个字节，则超时时间s*8ms到后也退出
{//要求流量板在s个8ms内通过串口返回数据
unsigned char t,i; 	

for(t=0;t<74;t++)
  Uart0RxData[t]=0xff;
  
Uart0RxCounter=0; //清串口接受计数  

for(t=0;t<len;t++)
{
while(!(UCSR0A&(1<<UDRE0)));   // 等待发送缓冲器为空
for(i=0;i<200;i++);
UDR0=Uart0TxData[t];  
}
                  
if(s>0)
{
 //超时设定
TimeOutFlag=0; //超时标志置0
Timer0Counter=s; //8ms定时循环次数
TCNT0=0x06;//定时8ms
TCCR0|=0x06;//256分频
TIFR|=0x01; //清定时器0中断标志
TIMSK|=0x01;//使能定时器0中断
t=UDR0;//开串口接收中断前读空缓存
UCSR0B|=0x80;//开串口接收中断
while(TimeOutFlag==0)
{
CheckMotor(0);
 if(Uart0RxCounter>=cn)
   break;
}
TIMSK&=0xFE;//关定时器0中断
UCSR0B&=0x7f;//关串口接收中断
}
}

void SendMain(unsigned char len)
{
}

void Pwm_startup(unsigned char motor)//电机软启动
{	unsigned char c,b;

	if(motor==1)
	{  if(DIR1_PIN==0)
	   {  PWM1_L	   
		  BREAKE1_L 
		  DELAY100
	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
		 {
		  PWM1_H
		  DELAY100
		  PWM1_L
		  DELAY100
		 }
 
    	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
		 {
	       PWM1_L
		   for(b=0;b<(200-c);b++)
		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
			
	       if(Motor1Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
		   {PWM1_H}
		   else 
		   {PWM1_L}
		   
	       for(b=0;b<(c+50);b++)
		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
		 }	
	   }
	   else
	   {
	      PWM1_H	   
		  BREAKE1_L 
		  DELAY100
	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
		 {
		  PWM1_L
		  DELAY100
		  PWM1_H
		  DELAY100
		 }
 
    	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
		 {
	       PWM1_H
		   for(b=0;b<(200-c);b++)
		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
			
	       if(Motor1Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
		   {PWM1_L}
		   else 
		   {PWM1_H}
		   
	       for(b=0;b<(c+50);b++)
		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
		 }	
	   }
	} 
	else if(motor==2)
	{  
	  if(DIR2_PIN==0)
	   { 
	      PWM2_L	   
		  BREAKE2_L 
		  DELAY100
	     for(b=0;b<30;b++)//6ms采用降低占空比启动电机
		 {
		  PWM2_H
		  DELAY100
		  PWM2_L
		  DELAY100
		 }
 
    	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
		 {
	       PWM2_L
		   for(b=0;b<(200-c);b++)
		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
			
	       if(Motor2Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
		   {PWM2_H}
		   else 
		   {PWM2_L}
		   
	       for(b=0;b<(c+50);b++)
		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
		 }	
	   }
	   else
	   {
	      PWM2_H	   
		  BREAKE2_L 
		  DELAY100
	      for(b=0;b<30;b++)//6ms采用降低占空比启动电机
		 {
		  PWM2_L
		  DELAY100
		  PWM2_H
		  DELAY100
		 }
 
    	 for(c=0;c<200;c++)//150ms采用降低占空比启动电机
		 {
	       PWM2_H
		   for(b=0;b<(200-c);b++)
		    {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
			
	       if(Motor2Status.s.UnderVoltage==0)//如意启动过程中没有发生欠压，则继续启动
		   {PWM2_L}
		   else 
		   {PWM2_H}
		   
	       for(b=0;b<(c+50);b++)
		   {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");}
		 }	
	   }
	}
}

   
unsigned char SampleADC(unsigned char ch)//耗时约5ms
{     unsigned char c;
      unsigned long adcl;
	  unsigned int ADdata;

	  ADMUX  = (0xc0+ch);//片内2.56V基准，选择单端输入通道 
	  ADCSRA =0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
   
	  //第一次采样值不要
	  for(ADdata=0;ADdata<100;ADdata++);
	  while((ADCSRA&0x40)==0x40);//等待转换完成
	  ADdata=ADCL;
	  ADdata=ADCH;  
  
	  adcl=0;
	  for(c=0;c<32;c++)//32次值取平均
	  {
	   ADCSRA = 0xC3;//ADC使能，ADC开始转换，ADC自动触发使能（连续转换模式），8分频 
	   for(ADdata=0;ADdata<100;ADdata++);
	   while((ADCSRA&0x40)==0x40);//等待转换完成	
	   ADdata=ADCL;   
	   ADdata|=(ADCH<<8);
	   ADdata&=0x03ff;//10位有效转换结果
	   adcl+=ADdata;
	  }

	  adcl>>=7;//除以32，再除以4，相当于8位AD
	  return (adcl&0x000000ff);//取8位有效位
}

void CheckMotor(unsigned int t)//电机不转时耗时5us，最大定时8388ms
{   
    float f;
	unsigned char a;
    unsigned int n;
    TCCR1B = 0x00; //stop
	if(t>8388)
	   t=8388;
	f=t;
	f*=7.8125;
	n=f;
    TCNT1 = 65535-n;  
	TIFR|=0x04; //清定时器1中断标志 
 	TCCR1B = 0x05; //1024分频
	
    while((TIFR&0x04)==0x00)//定时中断到来前一直采样监测电流
   {   
    if( (Motor1Run_P) || (Motor1Run_N) )//收放电机运行时才实时检测电流，否则电流保存最后一次的测试值
    {
	  a=SampleADC(7);
	  
      if(a>Motor1Thr)//过流关电机
      {
	   MOTORSTOP//关电机   
       Motor1Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
	   Motor1Status.s.RUN=0;//停止状态
	  }
	  else if(a<MotorIdelCur)//断路关电机 
	  {   
	   MOTORSTOP//关电机
       Motor1Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
	   Motor1Status.s.RUN=0;//停止状态
	  }
	
	 Motor1Status.s.RUN=1;//运行状态
	 
	 f=a;
	 f*=1.042;
	 Motor1Status.s.ThisCurrent=f;
    }
    else
	{
	 Motor1Status.s.RUN=0;//停止状态
	}
	 Motor1Status.s.DIR=DIR1_PIN;
	 
	  	   
    if( (Motor2Run_P) || (Motor2Run_N) )//调节电机运行时才实时检测电流，否则电流保存最后一次的测试值
    {
	 a=SampleADC(6);	
	
     if(a>Motor2Thr)//过流关电机
     {
	   MOTORSTOP//关电机
       Motor2Status.s.OverCurrent=1;//过流状态置1，表示电机上次停止原因为过流停
	   Motor2Status.s.RUN=0;//停止状态
	 } 
	 else if(a<MotorIdelCur) //断路关电机，电流小于26mA认为是断路
	 {
	   MOTORSTOP//关电机
       Motor2Status.s.BrokenStop=1;//断路状态置1，表示电机上次停止原因为断路停
	   Motor2Status.s.RUN=0;//停止状态
	 }
	 
	 Motor2Status.s.RUN=1;//运行状态
	 
	 f=a;
	 f*=1.042;
	 Motor2Status.s.ThisCurrent=f;
    }
	else
	{
	 Motor2Status.s.RUN=0;//停止状态
	}
     Motor2Status.s.DIR=DIR2_PIN;  
	
    if(t==0){break;}//不定时则检测一次电机状态后直接跳出
   } 
   
   TCCR1B = 0x00; //stop
}


void Start(void)
{
 InitialIO();
 uart0_init();
 
 MOTORSTOP//关电机
 BREAKE1_L//放开刹车
 BREAKE2_L//放开刹车
 
 Motor1Status.s.RUN=0; 
 Motor1Status.s.DIR=DIR1_PIN;
 Motor1Status.s.BrokenStop=0;
 Motor1Status.s.CommandStop=0;
 Motor1Status.s.OverCurrent=0;
 Motor1Status.s.UnderVoltage=0;
 Motor1Status.s.StartResult=0;
 Motor1Status.s.ThisCurrent=0;
 
 Motor2Status.s.RUN=0; 
 Motor2Status.s.DIR=DIR2_PIN;
 Motor2Status.s.BrokenStop=0;
 Motor2Status.s.CommandStop=0;
 Motor2Status.s.OverCurrent=0;
 Motor2Status.s.UnderVoltage=0;
 Motor2Status.s.StartResult=0;
 Motor2Status.s.ThisCurrent=0;
 
 IntFlag=0;//无接收帧中断
 DataFlag=0;//无标定系数下发 
 coeff_len=0;
 coeff_count=0;//标定系数计数
 
 ACSR|=0x10;//清模拟比较器中断标志
 ACSR&=0xf7;//关模拟比较器中断
 ACSR|=0x40;//ACBG置位，模拟比较器正级接内部能隙基准1.23V
 ACSR|=0x03;//开模拟比较器,AIN1连到比较器负极，0:比较器输出变化即中断，1：保留，2：下降沿中断，3:上升沿中断   
 ACSR|=0x08;//开模拟比较器中断，任何时候都要进行欠压监测	
 ACSR|=0x10;//清模拟比较器中断标志	
	
 
	EICRA|=0x03; //INT0上升沿触发 ，每2位控制一个中断，共4个中断，0-低电平触发，1-保留，2-下降沿触发，3-上升沿触发
	 
	MANINT_CLR
	MANINT_EN
	
	INT_EN
 
 
 CheckMotor(50);
  
 
}

void Gear2Thr(void)
{
//将电机过流档位换算为数字量，方便中断函数中进行比较运算
  if(Motor1Gear<1) {Motor1Gear=1;}//堵转电流最小为1档
  if(Motor1Gear>6) {Motor1Gear=6;}//堵转电流最大为6档
  if(Motor2Gear<1) {Motor2Gear=6;}//堵转电流最小为1档
  if(Motor2Gear>6) {Motor2Gear=6;}//堵转电流最大为6档
  //第1档从100mA起步，每档差值30mA,0.96个字/1mA，第6档约250mA
  Motor1Thr= 96+ (Motor1Gear-1)*29;
  Motor2Thr= 96+ (Motor2Gear-1)*29;
  
  if(MotorIdelGear<1){MotorIdelGear=1;}//电机断路电流最小1档
  if(MotorIdelGear>6){MotorIdelGear=6;}//电机断路电流最大6档
  //从5mA起步，最大30mA
  MotorIdelCur=(MotorIdelGear-1)*5+5;
  
}

void main(void)
{ 
  unsigned char i;
  unsigned int add,at,mk,pt,j;
  unsigned long l;
  unsigned int TestDataBlockIndex,TestDataBlockCount;
  float f;
 
	for(l=0;l<1000;l++)
	{
		for(j=0;j<1000;j++);
	}

	Start();

	CheckMotor(50); 

	Motor1Gear=EEPROM_read(0);
	Motor2Gear=EEPROM_read(1);
	MotorIdelCur=EEPROM_read(2);
	Gear2Thr();
  

	     
	while(1)//若Cable端为高电压，则进入正常的通讯状态
	{ 
		CheckMotor(0);//实时进行电机过流检测

		if(IntFlag==2)//校验位错误，不上传任何响应，上位机按超时处理
		{ 
			IntFlag=0;//无命令帧
			EIFR|=0x01;//清INT0中断标志
			EIMSK|=0x01;//使能INT0中断	 
		}
		else if(IntFlag==1)//接收到了正常命令帧
		{
			 
			{ 
				T_com=(R_dat>>4);
				switch(R_dat&0xf0)
				{ 				 
					case 0x30:// 采样电机电压
						f=SampleADC(5);
						f=f*2.56;
						f=f*101;
						f=f/256;
						T_dat=f;
						CheckMotor(10);
						SendMain(1);   
						break;

					
					case 0x60:  //收放电机 
						if( !(((R_dat)==0x61)  || ((R_dat)==0x62) ) )//既不是正转，也不是反转，则立即返回且不响应上位机
							break;

						if( (Motor2Run_P) || (Motor2Run_N) )//调节电机正在运行
						{
							Motor1Status.s.StartResult=3;//另一电机正在运行
							CheckMotor(100);//很快响应上位机
						}
						else if(Motor1Run_P)//收放电机正在正转
						{
						  if(R_dat==0x61)
						  {
						    Motor1Status.s.StartResult=1;//本电机正在同向运行
						  }
						  else if(R_dat==0x62)
						  {
						   Motor1Status.s.StartResult=2;//本电机正在反向运行
						  }
						  CheckMotor(100); //很快响应上位机
						}
						else if(Motor1Run_N)//收放电机正在反转
						{
						  if(R_dat==0x61)
						  {
						   Motor1Status.s.StartResult=2;//本电机正在反向运行 
						  }
						  else if(R_dat==0x62)
						  {
						   Motor1Status.s.StartResult=1;//本电机正在同向运行
						  }
						  CheckMotor(100); //很快响应上位机
						}
						else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
						{  
							//全部电机状态置初值，上一次停止原因全部清除
							Motor1Status.s.BrokenStop=0;
							Motor1Status.s.CommandStop=0;
							Motor1Status.s.OverCurrent=0;
							Motor1Status.s.UnderVoltage=0;
							Motor1Status.s.StartResult=0;//正常启动

							if((R_dat)==0x61)//张开命令
							{ 
								DIR1_H       //张臂，正转
							}
							else if((R_dat)==0x62)          
							{ 
								DIR1_L      //收臂，反转
							}
							else
							{
								return;//20170609
							}

							VM_H//开电机电源

							CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定

							//CompCounter=0; //电流监测计数器清0
							//EIFR|=0x01;//清INT0中断标志
							//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况

							TCCR1B = 0x00; //stop
							TCNT1 = 61629;   //定时500ms
							TIFR|=0x04; //清定时器1中断标志
							TCCR1B = 0x05; //1024分频
							TIFR|=0x04; //清定时器1中断标志

							Pwm_startup(1);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测		

							while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
							TCCR1B = 0x00; //stop

							//EIFR|=0x01;//清INT0中断标志
							//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况

							CheckMotor(500);//延时保证总线电压稳定		
						}
						T_dat=Motor1Status.i;
						SendMain(2);   

						break;

					case 0x70://调节电机   
						if( ((R_dat)<0x71)  || ((R_dat)>0x7c)  )//既不是调大，也不是调小，也不微调大，也不是微调小，则立即返回且不响应上位机
						break;

						i=R_dat%2;
						
						if( (Motor1Run_P) || (Motor1Run_N) )//收放电机正在运行
						{
							Motor2Status.s.StartResult=3;//另一电机正在运行
							CheckMotor(100);//很快响应上位机
						}
						else if(Motor2Run_P)//调节电机正在正转
						{
						  if(i==0)//偶数命令，正转
						  {
						   Motor2Status.s.StartResult=1;//本电机正在同向运行
						  }
						  else//奇数命令，反转
						  {
						   Motor2Status.s.StartResult=2;//本电机正在反向运行
						  }
						  CheckMotor(100); //很快响应上位机
						}
						else if(Motor2Run_N)//调节电机正在反转
						{
						  if(i==0)//偶数命令，正转
						  {
						   Motor2Status.s.StartResult=2;//本电机正在反向运行
						  }
						  else//奇数命令，反转
						  {
						   Motor2Status.s.StartResult=1;//本电机正在同向运行
						  }
						  CheckMotor(100); //很快响应上位机
						}					
						else //二个电机都是停止状态，按命令要求启动电机，约1.5秒后反馈上位机
						{  
							//全部电机状态置初值，上一次停止原因全部清除
							Motor2Status.s.BrokenStop=0;
							Motor2Status.s.CommandStop=0;
							Motor2Status.s.OverCurrent=0;
							Motor2Status.s.UnderVoltage=0;
							Motor2Status.s.StartResult=0;//正常启动

							if( i==1 )//奇数命令，调大
							{ 
								DIR2_L      //反转
							}
							else if( i==0 )    //偶数命令，调小
							{ 
								DIR2_H      //正转
							}
							else
							{
								return;//20170609
							}

							VM_H//开电机电源

							CheckMotor(500);//开电机电源后需等待半秒让大功率二极管电压稳定

							//CompCounter=0; //电流监测计数器清0
							//EIFR|=0x01;//清INT0中断标志
							//EIMSK&=0xfe;//关INT0中断，电机启动前期不用监测过流情况

							TCCR1B = 0x00; //stop
							TCNT1 = 61629;   //定时500ms
							TIFR|=0x04; //清定时器1中断标志
							TCCR1B = 0x05; //1024分频
							TIFR|=0x04; //清定时器1中断标志

							Pwm_startup(2);//PWM启动，耗时约200ms,电机启动前期不进行电流检查，但有欠压监测					

							while((TIFR&0x04)==0x00); //等待定时到，期间可能有欠压中断发生
							TCCR1B = 0x00; //stop

							//EIFR|=0x01;//清INT0中断标志
							//EIMSK|=0x01;//开INT0中断，电机启动500ms后即开始监测过流情况

							CheckMotor(500);//延时保证总线电压稳定		 	 
						}
						T_dat=Motor2Status.i;
						SendMain(2);  	
						if(R_dat>0x72)//微调，需要定时，定时到后自动停止
						{
							ETIFR=0x04;//清Timer3溢出中断标志
							ETIMSK = 0x04; //Timer3溢出中断使能，其它中断关闭
							TCCR3B = 0x00;

							j=(R_dat-0x72+1)/2;
							j=j*7812;
							j=65536-j;
							j+=1;

							TCNT3H = j>>8;  //最小1秒，最多5秒
							TCNT3L = j;

							//TCNT3H = 0xE1;  //1秒
							//TCNT3L = 0x7C;

							//TCNT3H = 0xC2; //2秒
							//TCNT3L = 0xF7;

							// TCNT3H = 0xA4; //3秒
							// TCNT3L = 0x73;

							TCCR3A = 0x00;
							TCCR3B = 0x05; //8M时钟，1024分频，定时1秒
							ETIFR=0x04;//清Timer3溢出中断标志
						} 
						break;

					case 0x80://电机相关
						if(R_dat==0x80)//只开电机电源，不开电机
						{        	  
							CheckMotor(30);//延迟10ms  
							VM_H//开电机电源
							CheckMotor(30);//延迟10ms  
							T_dat=0x0000;   
							SendMain(1);  
						}	  
						else if(R_dat==0x81)//获取电机状态	
						{ 
							//先处理收放电机
							CheckMotor(1);//延迟1ms  
							T_dat=Motor1Status.i;	   
							SendMain(2);  

							//再处理调节电机 
							CheckMotor(1);//延迟1ms  
							T_dat=Motor2Status.i;	    
							SendMain(2);  
						}	  
						else if(R_dat==0x82)//电机停止，同时停止二个电机
						{	 
							if( (Motor1Run_P) || (Motor1Run_N) )//收放电机正在运行
							{
								Motor1Status.s.CommandStop=1;
							}
							if( (Motor2Run_P) || (Motor2Run_N) )//调节电机正在运行
							{ 
								Motor2Status.s.CommandStop=1;
							}
							MOTORSTOP  //关电机
							CheckMotor(200);
							T_dat=0x0000;	
							SendMain(1);   
						}
						else if(R_dat==0x83)//读取电机堵转电流档位和断路档位
						{
							Motor1Gear=EEPROM_read(0);//收放电机
							Motor2Gear=EEPROM_read(1);//调节电机
							MotorIdelGear=EEPROM_read(2); //电机断路
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=MotorIdelGear;
							T_dat<<=4;
							T_dat|=Motor2Gear;	 
							T_dat<<=4;
							T_dat|=Motor1Gear; 
							SendMain(2);  
						}	
						else if(R_dat>0x83)//还剩12档，用于设置电机堵转电流, 收放电机和调节电机各6档
						{
							if(R_dat==0x84)
							{
								Motor1Gear=1; 
								EEPROM_write(0,Motor1Gear);
							}
							else if(R_dat==0x85)
							{
								Motor1Gear=2; 
								EEPROM_write(0,Motor1Gear);
							}
							else if(R_dat==0x86)
							{
								Motor1Gear=3; 
								EEPROM_write(0,Motor1Gear);
							}
							else if(R_dat==0x87)
							{
								Motor1Gear=4; 
								EEPROM_write(0,Motor1Gear);
							}
							else if(R_dat==0x88)
							{
								Motor1Gear=5; 
								EEPROM_write(0,Motor1Gear);
							}
							else if(R_dat==0x89)
							{
								Motor1Gear=6; 
								EEPROM_write(0,Motor1Gear);
							}
							else if(R_dat==0x8a)
							{
								Motor2Gear=1; 
								EEPROM_write(1,Motor2Gear);
							}
							else if(R_dat==0x8b)
							{
								Motor2Gear=2;
								EEPROM_write(1,Motor2Gear);
							}
							else if(R_dat==0x8c)
							{
								Motor2Gear=3;
								EEPROM_write(1,Motor2Gear);
							}
							else if(R_dat==0x8d)
							{
								Motor2Gear=4;
								EEPROM_write(1,Motor2Gear);
							}
							else if(R_dat==0x8e)
							{
								Motor2Gear=5;
								EEPROM_write(1,Motor2Gear);
							}
							else if(R_dat==0x8f)
							{
								Motor2Gear=6;
								EEPROM_write(1,Motor2Gear);
							}	  
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=0;	    
							SendMain(1);  
						}	  
						break;



					case 0x90: 
						 if(R_dat==0x9a)//电机断路电流为1档
						{
							MotorIdelGear=1;
							EEPROM_write(2,MotorIdelGear);  
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=0;	    
							SendMain(1);  
						}
						else if(R_dat==0x9b)//电机断路电流为2档
						{
							MotorIdelGear=2;
							EEPROM_write(2,MotorIdelGear);  
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=0;	    
							SendMain(1);  
						}
						else if(R_dat==0x9c)//电机断路电流为3档
						{
							MotorIdelGear=3;
							EEPROM_write(2,MotorIdelGear);  
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=0;	    
							SendMain(1);  
						}
						else if(R_dat==0x9d)//电机断路电流为4档
						{
							MotorIdelGear=4;
							EEPROM_write(2,MotorIdelGear);  
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=0;	    
							SendMain(1);  
						}
						else if(R_dat==0x9e)//电机断路电流为5档
						{
							MotorIdelGear=5;
							EEPROM_write(2,MotorIdelGear);  
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=0;	    
							SendMain(1);  
						}
						else if(R_dat==0x9f)//电机断路电流为6档
						{
							MotorIdelGear=6;
							EEPROM_write(2,MotorIdelGear);  
							Gear2Thr();
							CheckMotor(30);//延迟30ms  	
							T_dat=0;	    
							SendMain(1);  
						}

						break;

					default: 
						break;	
				}
			}
			
		RDataEnd:
			IntFlag=0;
			EIFR|=0x01;//清INT0中断标志
			EIMSK|=0x01;//使能INT0中断 
		}  
	}
}

#pragma interrupt_handler E_comp:24
void E_comp(void)  //模拟比较器中断,总线电压被拉低到28.5V后，立即停电机
{   
  if( (Motor1Run_P) || (Motor1Run_N) )//收放电机欠压堵转
   {
 	 Motor1Status.s.UnderVoltage=1;
	 Motor1Status.s.RUN=0;//停止状态
   }
  if( (Motor2Run_P) || (Motor2Run_N) )//调节电机欠压堵转
   { 
 	 Motor2Status.s.UnderVoltage=1;
	 Motor2Status.s.RUN=0;//停止状态
   } 
   MOTORSTOP  //关电机 
}

 



void EEPROM_write(unsigned int Address,unsigned char Data)  	//内部EEPROM写
{//时钟频率为1MHz，典型的EEPROM字节写耗时约8.5ms
    while(EECR&0x02);                   // 等待上一次写操作结束
    EEAR=Address;
    EEDR=Data;                        	// 设置地址和数据寄存器
    EECR|=0x04;                         //置位EEMWE
    EECR|=0x02;                         //置位EEWE 以启动写操作
}

unsigned char EEPROM_read(unsigned int Address)  				//内部EEPROM读
{
    while(EECR&0x02);      				//等待上一次操作结束
    EEAR = Address;                     //设置地址寄存器						
	EECR|=0x01;             			//设置EERE 以启动读操作
    return EEDR;                   		//自数据寄存器返回数据
}    

void crc16(unsigned char r_data[],unsigned int length)
{
        unsigned char cl,ch;
        unsigned char savehi,savelo;
        int ii,flag;
        crc16hi=0xFF;
        crc16lo=0xFF;
        cl=0x1;
        ch=0xA0;
        for (ii=0;ii<length-2;ii++)
        {
            crc16lo=(crc16lo ^ r_data[ii]);
                for (flag=0;flag<8;flag++)
                {
                       savehi=crc16hi;
                        savelo=crc16lo;
                       crc16hi=(crc16hi>>1);
                       crc16lo=(crc16lo>>1);
                        if ((savehi & 0x01)==0x01)
                                crc16lo=(crc16lo | 0x80);
                        if        ((savelo & 0x01)==0x01)
                        {
                                crc16hi = (crc16hi ^ ch);
								crc16lo = (crc16lo ^ cl);
                        }        
                }
        }
}